9991 parse: --- defining scenario_buffer-lines-blocks-until-newline
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    source:address:source:character, sink:address:sink:character <- new-channel 10/capacity\n    _, buffered-stdin:address:sink:character/buffered-stdin <- new-channel 10/capacity\n    buffered-chan:address:channel:character <- get *buffered-stdin, chan:offset\n    empty?:boolean <- channel-empty? buffered-chan\n    assert empty?, [ \nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    buffer-routine:number <- start-running buffer-lines, source, buffered-stdin\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    sink <- write sink, 97/a\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    sink <- write sink, 98/b\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    sink <- write sink, 10/newline\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    data-emitted?:boolean <- not empty?\n    assert data-emitted?, [ \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    source:address:source:character, sink:address:sink:character <- new-channel 10/capacity\n    _, buffered-stdin:address:sink:character/buffered-stdin <- new-channel 10/capacity\n    buffered-chan:address:channel:character <- get *buffered-stdin, chan:offset\n    empty?:boolean <- channel-empty? buffered-chan\n    assert empty?, [ \nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    buffer-routine:number <- start-running buffer-lines, source, buffered-stdin\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    sink <- write sink, 97/a\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    sink <- write sink, 98/b\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    sink <- write sink, 10/newline\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    data-emitted?:boolean <- not empty?\n    assert data-emitted?, [ \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    test: reached end\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
9999 parse: recipe scenario_buffer-lines-blocks-until-newline has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- rewrite 'stash' instructions in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- deduce types for recipe scenario_buffer-lines-blocks-until-newline
9993 transform: run {"\n    local-scope\n    source:address:source:character, sink:address:sink:character <- new-channel 10/capacity\n    _, buffered-stdin:address:sink:character/buffered-stdin <- new-channel 10/capacity\n    buffered-chan:address:channel:character <- get *buffered-stdin, chan:offset\n    empty?:boolean <- channel-empty? buffered-chan\n    assert empty?, [ \nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    buffer-routine:number <- start-running buffer-lines, source, buffered-stdin\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    sink <- write sink, 97/a\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    sink <- write sink, 98/b\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    sink <- write sink, 10/newline\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    data-emitted?:boolean <- not empty?\n    assert data-emitted?, [ \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9993 transform: trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- deduce types for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- check for invalid types in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- collect surrounding spaces for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- transform names for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- resolve ambiguous calls for recipe scenario_buffer-lines-blocks-until-newline
9992 transform: --- compute address offsets for scenario_buffer-lines-blocks-until-newline
9993 transform: - compute address offsets for run {"\n    local-scope\n    source:address:source:character, sink:address:sink:character <- new-channel 10/capacity\n    _, buffered-stdin:address:sink:character/buffered-stdin <- new-channel 10/capacity\n    buffered-chan:address:channel:character <- get *buffered-stdin, chan:offset\n    empty?:boolean <- channel-empty? buffered-chan\n    assert empty?, [ \nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    buffer-routine:number <- start-running buffer-lines, source, buffered-stdin\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    sink <- write sink, 97/a\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    sink <- write sink, 98/b\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    sink <- write sink, 10/newline\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    data-emitted?:boolean <- not empty?\n    assert data-emitted?, [ \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9993 transform: - compute address offsets for trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- transform braces for recipe scenario_buffer-lines-blocks-until-newline
9992 transform: run ...
9992 transform: trace-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- perform checks for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check 'call' instructions inside recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check calls inside recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- check types of reply instructions in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check merge instructions in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- checking reply instructions against header for scenario_buffer-lines-blocks-until-newline
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_buffer-lines-blocks-until-newline
 102 run: run {"\n    local-scope\n    source:address:source:character, sink:address:sink:character <- new-channel 10/capacity\n    _, buffered-stdin:address:sink:character/buffered-stdin <- new-channel 10/capacity\n    buffered-chan:address:channel:character <- get *buffered-stdin, chan:offset\n    empty?:boolean <- channel-empty? buffered-chan\n    assert empty?, [ \nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    buffer-routine:number <- start-running buffer-lines, source, buffered-stdin\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    sink <- write sink, 97/a\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    sink <- write sink, 98/b\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    assert empty?:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    sink <- write sink, 10/newline\n    restart buffer-routine\n    wait-for-routine buffer-routine\n    empty? <- channel-empty? buffered-chan\n    data-emitted?:boolean <- not empty?\n    assert data-emitted?, [ \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {10: "literal", "capacity": ()}
9993 parse:   product: {source: ("address" "source" "character")}
9993 parse:   product: {sink: ("address" "sink" "character")}
9992 load: after rewriting: {source: ("address" "source" "character")}, {sink: ("address" "sink" "character")} <- new-channel {10: "literal", "capacity": ()}
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {10: "literal", "capacity": ()}
9993 parse:   product: _
9993 parse:   product: {buffered-stdin: ("address" "sink" "character"), "buffered-stdin": ()}
9992 load: after rewriting: _, {buffered-stdin: ("address" "sink" "character"), "buffered-stdin": ()} <- new-channel {10: "literal", "capacity": ()}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {buffered-stdin: (), "lookup": ()}
9993 parse:   ingredient: {chan: "offset"}
9993 parse:   product: {buffered-chan: ("address" "channel" "character")}
9992 load: after rewriting: {buffered-chan: ("address" "channel" "character")} <- get {buffered-stdin: (), "lookup": ()}, {chan: "offset"}
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffered-chan: ()}
9993 parse:   product: {empty?: "boolean"}
9992 load: after rewriting: {empty?: "boolean"} <- channel-empty? {buffered-chan: ()}
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {empty?: ()}
9993 parse:   ingredient: {" \nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"}
9992 load: after rewriting: assert {empty?: ()}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"}
9993 parse: instruction: start-running
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {buffer-lines: ()}
9993 parse:   ingredient: {source: ()}
9993 parse:   ingredient: {buffered-stdin: ()}
9993 parse:   product: {buffer-routine: "number"}
9992 load: after rewriting: {buffer-routine: "number"} <- start-running {buffer-lines: ()}, {source: ()}, {buffered-stdin: ()}
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffer-routine: ()}
9992 load: after rewriting: wait-for-routine {buffer-routine: ()}
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffered-chan: ()}
9993 parse:   product: {empty?: ()}
9992 load: after rewriting: {empty?: ()} <- channel-empty? {buffered-chan: ()}
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {empty?: "boolean"}
9993 parse:   ingredient: {" \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"}
9992 load: after rewriting: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"}
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {sink: ()}
9993 parse:   ingredient: {97: "literal", "a": ()}
9993 parse:   product: {sink: ()}
9992 load: after rewriting: {sink: ()} <- write {sink: ()}, {97: "literal", "a": ()}
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffer-routine: ()}
9992 load: after rewriting: restart {buffer-routine: ()}
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffer-routine: ()}
9992 load: after rewriting: wait-for-routine {buffer-routine: ()}
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffered-chan: ()}
9993 parse:   product: {empty?: ()}
9992 load: after rewriting: {empty?: ()} <- channel-empty? {buffered-chan: ()}
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {empty?: "boolean"}
9993 parse:   ingredient: {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"}
9992 load: after rewriting: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"}
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {sink: ()}
9993 parse:   ingredient: {98: "literal", "b": ()}
9993 parse:   product: {sink: ()}
9992 load: after rewriting: {sink: ()} <- write {sink: ()}, {98: "literal", "b": ()}
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffer-routine: ()}
9992 load: after rewriting: restart {buffer-routine: ()}
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffer-routine: ()}
9992 load: after rewriting: wait-for-routine {buffer-routine: ()}
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffered-chan: ()}
9993 parse:   product: {empty?: ()}
9992 load: after rewriting: {empty?: ()} <- channel-empty? {buffered-chan: ()}
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {empty?: "boolean"}
9993 parse:   ingredient: {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"}
9992 load: after rewriting: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"}
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {sink: ()}
9993 parse:   ingredient: {10: "literal", "newline": ()}
9993 parse:   product: {sink: ()}
9992 load: after rewriting: {sink: ()} <- write {sink: ()}, {10: "literal", "newline": ()}
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffer-routine: ()}
9992 load: after rewriting: restart {buffer-routine: ()}
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffer-routine: ()}
9992 load: after rewriting: wait-for-routine {buffer-routine: ()}
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {buffered-chan: ()}
9993 parse:   product: {empty?: ()}
9992 load: after rewriting: {empty?: ()} <- channel-empty? {buffered-chan: ()}
9993 parse: instruction: not
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {empty?: ()}
9993 parse:   product: {data-emitted?: "boolean"}
9992 load: after rewriting: {data-emitted?: "boolean"} <- not {empty?: ()}
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {data-emitted?: ()}
9993 parse:   ingredient: {" \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"}
9992 load: after rewriting: assert {data-emitted?: ()}, {" \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"}
9993 parse: instruction: trace
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {1: "literal"}
9993 parse:   ingredient: {"test": "literal-string"}
9993 parse:   ingredient: {"reached end": "literal-string"}
9992 load: after rewriting: trace {1: "literal"}, {"test": "literal-string"}, {"reached end": "literal-string"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: source => ("address" "source" "character")
9992 transform: sink => ("address" "sink" "character")
9992 transform: buffered-stdin => ("address" "sink" "character")
9992 transform: buffered-stdin <= ("address" "sink" "character")
9992 transform: buffered-chan => ("address" "channel" "character")
9992 transform: buffered-chan <= ("address" "channel" "character")
9992 transform: empty? => "boolean"
9992 transform: empty? <= "boolean"
9992 transform: source <= ("address" "source" "character")
9992 transform: buffered-stdin <= ("address" "sink" "character")
9992 transform: buffer-routine => "number"
9992 transform: buffer-routine <= "number"
9992 transform: buffered-chan <= ("address" "channel" "character")
9992 transform: empty? <= "boolean"
9992 transform: sink <= ("address" "sink" "character")
9992 transform: sink <= ("address" "sink" "character")
9992 transform: buffer-routine <= "number"
9992 transform: buffer-routine <= "number"
9992 transform: buffered-chan <= ("address" "channel" "character")
9992 transform: empty? <= "boolean"
9992 transform: sink <= ("address" "sink" "character")
9992 transform: sink <= ("address" "sink" "character")
9992 transform: buffer-routine <= "number"
9992 transform: buffer-routine <= "number"
9992 transform: buffered-chan <= ("address" "channel" "character")
9992 transform: empty? <= "boolean"
9992 transform: sink <= ("address" "sink" "character")
9992 transform: sink <= ("address" "sink" "character")
9992 transform: buffer-routine <= "number"
9992 transform: buffer-routine <= "number"
9992 transform: buffered-chan <= ("address" "channel" "character")
9992 transform: empty? <= "boolean"
9992 transform: empty? <= "boolean"
9992 transform: data-emitted? => "boolean"
9992 transform: data-emitted? <= "boolean"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {source: ("address" "source" "character")}, {sink: ("address" "sink" "character")} <- new-channel {10: "literal", "capacity": ()}
9993 transform: _, {buffered-stdin: ("address" "sink" "character"), "buffered-stdin": ()} <- new-channel {10: "literal", "capacity": ()}
9993 transform: {buffered-chan: ("address" "channel" "character")} <- get {buffered-stdin: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: {empty?: "boolean"} <- channel-empty? {buffered-chan: ("address" "channel" "character")}
9993 transform: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"}
9993 transform: {buffer-routine: "number"} <- start-running {buffer-lines: ()}, {source: ("address" "source" "character")}, {buffered-stdin: ("address" "sink" "character")}
9993 transform: wait-for-routine {buffer-routine: "number"}
9993 transform: {empty?: "boolean"} <- channel-empty? {buffered-chan: ("address" "channel" "character")}
9993 transform: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"}
9993 transform: {sink: ("address" "sink" "character")} <- write {sink: ("address" "sink" "character")}, {97: "literal", "a": ()}
9993 transform: restart {buffer-routine: "number"}
9993 transform: wait-for-routine {buffer-routine: "number"}
9993 transform: {empty?: "boolean"} <- channel-empty? {buffered-chan: ("address" "channel" "character")}
9993 transform: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"}
9993 transform: {sink: ("address" "sink" "character")} <- write {sink: ("address" "sink" "character")}, {98: "literal", "b": ()}
9993 transform: restart {buffer-routine: "number"}
9993 transform: wait-for-routine {buffer-routine: "number"}
9993 transform: {empty?: "boolean"} <- channel-empty? {buffered-chan: ("address" "channel" "character")}
9993 transform: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"}
9993 transform: {sink: ("address" "sink" "character")} <- write {sink: ("address" "sink" "character")}, {10: "literal", "newline": ()}
9993 transform: restart {buffer-routine: "number"}
9993 transform: wait-for-routine {buffer-routine: "number"}
9993 transform: {empty?: "boolean"} <- channel-empty? {buffered-chan: ("address" "channel" "character")}
9993 transform: {data-emitted?: "boolean"} <- not {empty?: "boolean"}
9993 transform: assert {data-emitted?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"}
9993 transform: trace {1: "literal"}, {"test": "literal-string"}, {"reached end": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: source => ("address" "source" "character")
9992 transform: sink => ("address" "sink" "character")
9992 transform: buffered-stdin => ("address" "sink" "character")
9992 transform: buffered-chan => ("address" "channel" "character")
9992 transform: empty? => "boolean"
9992 transform: buffer-routine => "number"
9992 transform: data-emitted? => "boolean"
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign source 1
9993 name: assign sink 2
9993 name: assign buffered-stdin 3
9993 name: element chan of type sink is at offset 0
9993 name: assign buffered-chan 4
9993 name: assign empty? 5
9993 name: assign buffer-routine 6
9993 name: assign data-emitted? 7
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {source: ("address" "source" "character")}, {sink: ("address" "sink" "character")} <- new-channel {10: "literal", "capacity": ()}
9992 transform: checking variant (strict) 0: recipe new-channel {capacity: "number"} -> {in: ("address" "source" "_elem")} {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 1: recipe new-channel_2 {capacity: "number"} -> {in: ("address" "source" "character")} {out: ("address" "sink" "character")}
9992 transform: instruction _, {buffered-stdin: ("address" "sink" "character"), "buffered-stdin": ()} <- new-channel {10: "literal", "capacity": ()}
9992 transform: checking variant (strict) 0: recipe new-channel {capacity: "number"} -> {in: ("address" "source" "_elem")} {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: product 1
9992 transform: checking variant (strict) 1: recipe new-channel_2 {capacity: "number"} -> {in: ("address" "source" "character")} {out: ("address" "sink" "character")}
9992 transform: instruction {empty?: "boolean"} <- channel-empty? {buffered-chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-empty? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {empty?: ()} <- channel-empty? {buffered-chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-empty? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {sink: ()} <- write {sink: ()}, {97: "literal", "a": ()}
9992 transform: checking variant (strict) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: match failed: ingredient 1
9992 transform: found variant to specialize: 251 write
9993 transform: switching write to specialized recipe write_3 {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: compute type names: write_3
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform: type of 'out' is ("address" "sink" "_elem")
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform: type of 'val' is "_elem"
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {val: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform:   instruction: {chan: ("address" "channel" "_elem")} <- get {out: (), "lookup": ()}, {chan: "offset"}
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "sink" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {chan: ("address" "channel" "_elem")}: ("address" "channel" "_elem")
9993 transform: type of 'chan' is ("address" "channel" "_elem")
9993 transform:   instruction: <channel-write-initial>
9993 transform:   instruction: {
9993 transform:   instruction: {full: "boolean"} <- channel-full? {chan: ()}
9994 transform:     checking {chan: ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {full: "boolean"}: "boolean"
9993 transform: type of 'full' is "boolean"
9993 transform:   instruction: break-unless {full: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {full-address: "location"} <- get-location {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full-address: "location"}: "location"
9993 transform: type of 'full-address' is "location"
9993 transform:   instruction: wait-for-location {full-address: ()}
9994 transform:     checking {full-address: ()}: ()
9994 transform:     deducing type to "location"
9993 transform:   instruction: }
9993 transform:   instruction: {circular-buffer: ("address" "array" "_elem")} <- get {chan: (), "lookup": ()}, {data: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {circular-buffer: ("address" "array" "_elem")}: ("address" "array" "_elem")
9993 transform: type of 'circular-buffer' is ("address" "array" "_elem")
9993 transform:   instruction: {free: "number"} <- get {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: "number"}: "number"
9993 transform: type of 'free' is "number"
9993 transform:   instruction: {circular-buffer: (), "lookup": ()} <- put-index {circular-buffer: (), "lookup": ()}, {free: ()}, {val: ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {val: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9993 transform:   instruction: {free: ()} <- add {free: ()}, {1: "literal"}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of '1' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {len: "number"}: "number"
9993 transform: type of 'len' is "number"
9993 transform:   instruction: {at-end?: "boolean"} <- greater-or-equal {free: ()}, {len: ()}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {len: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {at-end?: "boolean"}: "boolean"
9993 transform: type of 'at-end?' is "boolean"
9993 transform:   instruction: break-unless {at-end?: ()}
9994 transform:     checking {at-end?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {free: ()} <- copy {0: "literal"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of '0' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-free: "offset"}, {free: ()}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{val: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem")} <- get {out: ("address" "sink" "_elem"), "lookup": ()}, {chan: "offset"}'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "character"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:channel:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '<channel-write-initial>'
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{full: "boolean"} <- channel-full? {chan: ("address" "channel" "_elem")}'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless {full: "boolean"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction '{full-address: "location"} <- get-location {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:location
9993 transform: replacing in instruction 'wait-for-location {full-address: "location"}'
9993 transform: replacing in ingredient full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem")} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {data: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:array:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:number
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "_elem"), "lookup": ()}, {free: "number"}, {val: "_elem"}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient val
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- add {free: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{len: "number"} <- length {circular-buffer: ("address" "array" "_elem"), "lookup": ()}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction '{at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless {at-end?: "boolean"}'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '{free: "number"} <- copy {0: "literal"}'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem"), "lookup": ()} <- put {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}, {free: "number"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9992 transform: transforming new specialization: write_3
9991 transform: --- rewrite literal strings in recipe write_3
9991 transform: --- rewrite 'stash' instructions in recipe write_3
9991 transform: --- deduce types for recipe write_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: <channel-write-initial>
9993 transform: {
9993 transform: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform: break-unless {full: "boolean"}
9993 transform: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: wait-for-location {full-address: "location"}
9993 transform: }
9993 transform: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: {
9993 transform: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: break-unless {at-end?: "boolean"}
9993 transform: {free: "number"} <- copy {0: "literal"}
9993 transform: }
9993 transform: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9991 transform: --- checking reply instructions against header for write_3
9991 transform: --- fill in reply ingredients from header for recipe write_3
9991 transform: --- deduce types for recipe write_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_3
9993 transform: type of out is ("address" "sink" "character")
9993 transform: type of val is "character"
9993 transform: type of out is ("address" "sink" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {out: ("address" "sink" "character")}
9992 transform: instruction: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {val: "character"}
9992 transform: instruction: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform:   product: {chan: ("address" "channel" "character")}
9992 transform: instruction: <channel-write-initial>
9992 transform: instruction: {
9992 transform: instruction: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform:   product: {full: "boolean"}
9992 transform: instruction: break-unless {full: "boolean"}
9992 transform: instruction: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full-address: "location"}
9992 transform: instruction: wait-for-location {full-address: "location"}
9992 transform: instruction: }
9992 transform: instruction: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform:   product: {circular-buffer: ("address" "array" "character")}
9992 transform: instruction: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform:   product: {circular-buffer: ("address" "array" "character"), "lookup": ()}
9992 transform: instruction: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {
9992 transform: instruction: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform:   product: {len: "number"}
9992 transform: instruction: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform:   product: {at-end?: "boolean"}
9992 transform: instruction: break-unless {at-end?: "boolean"}
9992 transform: instruction: {free: "number"} <- copy {0: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: }
9992 transform: instruction: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform:   product: {chan: ("address" "channel" "character"), "lookup": ()}
9992 transform: instruction: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- check for invalid types in recipe write_3
9991 transform: --- collect surrounding spaces for recipe write_3
9991 transform: --- transform names for recipe write_3
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign len 8
9993 name: assign at-end? 9
9993 name: element first-free of type channel is at offset 1
9991 transform: --- resolve ambiguous calls for recipe write_3
9992 transform: instruction {full: "boolean"} <- channel-full? {chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-full? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {circular-buffer: (), "lookup": ()} <- put-index {circular-buffer: (), "lookup": ()}, {free: ()}, {val: ()}
9992 transform: checking variant (strict) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9992 transform: instruction {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for write_3
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: - compute address offsets for <channel-write-initial>
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for break-unless {full: "boolean"}
9993 transform: - compute address offsets for {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: - compute address offsets for wait-for-location {full-address: "location"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: - compute address offsets for {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: - compute address offsets for {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: - compute address offsets for break-unless {at-end?: "boolean"}
9993 transform: - compute address offsets for {free: "number"} <- copy {0: "literal"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform: - compute address offsets for reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- compute instruction operations for recipe write_3
9991 transform: --- transform braces for recipe write_3
9993 transform: write_3: push (open, 5)
9993 transform: push (close, 10)
9993 transform: write_3: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-location ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get ...
9992 transform: put-index ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_3
9991 transform: --- perform checks for recipe write_3
9991 transform: --- type-check 'call' instructions inside recipe write_3
9991 transform: --- type-check calls inside recipe write_3
9991 transform: --- convert 'new' to 'allocate' for recipe write_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe write_3
9991 transform: --- type-check merge instructions in recipe write_3
9991 transform: --- check that recipe write_3 sets default-space
9991 transform: --- checking reply instructions against header for write_3
9992 transform: new specialization: write_3
9992 transform: instruction {empty?: ()} <- channel-empty? {buffered-chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-empty? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {sink: ()} <- write {sink: ()}, {98: "literal", "b": ()}
9992 transform: checking variant (strict) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 2: recipe write_3 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 2: recipe write_3 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: match failed: ingredient 1
9992 transform: found variant to specialize: 251 write
9993 transform: switching write to specialized recipe write_4 {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: compute type names: write_4
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform: type of 'out' is ("address" "sink" "_elem")
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform: type of 'val' is "_elem"
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {val: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform:   instruction: {chan: ("address" "channel" "_elem")} <- get {out: (), "lookup": ()}, {chan: "offset"}
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "sink" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {chan: ("address" "channel" "_elem")}: ("address" "channel" "_elem")
9993 transform: type of 'chan' is ("address" "channel" "_elem")
9993 transform:   instruction: <channel-write-initial>
9993 transform:   instruction: {
9993 transform:   instruction: {full: "boolean"} <- channel-full? {chan: ()}
9994 transform:     checking {chan: ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {full: "boolean"}: "boolean"
9993 transform: type of 'full' is "boolean"
9993 transform:   instruction: break-unless {full: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {full-address: "location"} <- get-location {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full-address: "location"}: "location"
9993 transform: type of 'full-address' is "location"
9993 transform:   instruction: wait-for-location {full-address: ()}
9994 transform:     checking {full-address: ()}: ()
9994 transform:     deducing type to "location"
9993 transform:   instruction: }
9993 transform:   instruction: {circular-buffer: ("address" "array" "_elem")} <- get {chan: (), "lookup": ()}, {data: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {circular-buffer: ("address" "array" "_elem")}: ("address" "array" "_elem")
9993 transform: type of 'circular-buffer' is ("address" "array" "_elem")
9993 transform:   instruction: {free: "number"} <- get {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: "number"}: "number"
9993 transform: type of 'free' is "number"
9993 transform:   instruction: {circular-buffer: (), "lookup": ()} <- put-index {circular-buffer: (), "lookup": ()}, {free: ()}, {val: ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {val: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9993 transform:   instruction: {free: ()} <- add {free: ()}, {1: "literal"}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of '1' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {len: "number"}: "number"
9993 transform: type of 'len' is "number"
9993 transform:   instruction: {at-end?: "boolean"} <- greater-or-equal {free: ()}, {len: ()}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {len: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {at-end?: "boolean"}: "boolean"
9993 transform: type of 'at-end?' is "boolean"
9993 transform:   instruction: break-unless {at-end?: ()}
9994 transform:     checking {at-end?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {free: ()} <- copy {0: "literal"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of '0' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-free: "offset"}, {free: ()}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{val: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem")} <- get {out: ("address" "sink" "_elem"), "lookup": ()}, {chan: "offset"}'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "character"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:channel:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '<channel-write-initial>'
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{full: "boolean"} <- channel-full? {chan: ("address" "channel" "_elem")}'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless {full: "boolean"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction '{full-address: "location"} <- get-location {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:location
9993 transform: replacing in instruction 'wait-for-location {full-address: "location"}'
9993 transform: replacing in ingredient full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem")} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {data: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:array:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:number
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "_elem"), "lookup": ()}, {free: "number"}, {val: "_elem"}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient val
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- add {free: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{len: "number"} <- length {circular-buffer: ("address" "array" "_elem"), "lookup": ()}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction '{at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless {at-end?: "boolean"}'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '{free: "number"} <- copy {0: "literal"}'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem"), "lookup": ()} <- put {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}, {free: "number"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9992 transform: transforming new specialization: write_4
9991 transform: --- rewrite literal strings in recipe write_4
9991 transform: --- rewrite 'stash' instructions in recipe write_4
9991 transform: --- deduce types for recipe write_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: <channel-write-initial>
9993 transform: {
9993 transform: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform: break-unless {full: "boolean"}
9993 transform: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: wait-for-location {full-address: "location"}
9993 transform: }
9993 transform: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: {
9993 transform: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: break-unless {at-end?: "boolean"}
9993 transform: {free: "number"} <- copy {0: "literal"}
9993 transform: }
9993 transform: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9991 transform: --- checking reply instructions against header for write_4
9991 transform: --- fill in reply ingredients from header for recipe write_4
9991 transform: --- deduce types for recipe write_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_4
9993 transform: type of out is ("address" "sink" "character")
9993 transform: type of val is "character"
9993 transform: type of out is ("address" "sink" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {out: ("address" "sink" "character")}
9992 transform: instruction: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {val: "character"}
9992 transform: instruction: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform:   product: {chan: ("address" "channel" "character")}
9992 transform: instruction: <channel-write-initial>
9992 transform: instruction: {
9992 transform: instruction: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform:   product: {full: "boolean"}
9992 transform: instruction: break-unless {full: "boolean"}
9992 transform: instruction: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full-address: "location"}
9992 transform: instruction: wait-for-location {full-address: "location"}
9992 transform: instruction: }
9992 transform: instruction: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform:   product: {circular-buffer: ("address" "array" "character")}
9992 transform: instruction: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform:   product: {circular-buffer: ("address" "array" "character"), "lookup": ()}
9992 transform: instruction: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {
9992 transform: instruction: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform:   product: {len: "number"}
9992 transform: instruction: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform:   product: {at-end?: "boolean"}
9992 transform: instruction: break-unless {at-end?: "boolean"}
9992 transform: instruction: {free: "number"} <- copy {0: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: }
9992 transform: instruction: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform:   product: {chan: ("address" "channel" "character"), "lookup": ()}
9992 transform: instruction: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- check for invalid types in recipe write_4
9991 transform: --- collect surrounding spaces for recipe write_4
9991 transform: --- transform names for recipe write_4
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign len 8
9993 name: assign at-end? 9
9993 name: element first-free of type channel is at offset 1
9991 transform: --- resolve ambiguous calls for recipe write_4
9992 transform: instruction {full: "boolean"} <- channel-full? {chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-full? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {circular-buffer: (), "lookup": ()} <- put-index {circular-buffer: (), "lookup": ()}, {free: ()}, {val: ()}
9992 transform: checking variant (strict) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9992 transform: instruction {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for write_4
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: - compute address offsets for <channel-write-initial>
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for break-unless {full: "boolean"}
9993 transform: - compute address offsets for {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: - compute address offsets for wait-for-location {full-address: "location"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: - compute address offsets for {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: - compute address offsets for {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: - compute address offsets for break-unless {at-end?: "boolean"}
9993 transform: - compute address offsets for {free: "number"} <- copy {0: "literal"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform: - compute address offsets for reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- compute instruction operations for recipe write_4
9991 transform: --- transform braces for recipe write_4
9993 transform: write_4: push (open, 5)
9993 transform: push (close, 10)
9993 transform: write_4: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-location ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get ...
9992 transform: put-index ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_4
9991 transform: --- perform checks for recipe write_4
9991 transform: --- type-check 'call' instructions inside recipe write_4
9991 transform: --- type-check calls inside recipe write_4
9991 transform: --- convert 'new' to 'allocate' for recipe write_4
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe write_4
9991 transform: --- type-check merge instructions in recipe write_4
9991 transform: --- check that recipe write_4 sets default-space
9991 transform: --- checking reply instructions against header for write_4
9992 transform: new specialization: write_4
9992 transform: instruction {empty?: ()} <- channel-empty? {buffered-chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-empty? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {sink: ()} <- write {sink: ()}, {10: "literal", "newline": ()}
9992 transform: checking variant (strict) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 2: recipe write_3 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 3: recipe write_4 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 2: recipe write_3 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 3: recipe write_4 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: match failed: ingredient 1
9992 transform: found variant to specialize: 251 write
9993 transform: switching write to specialized recipe write_5 {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: compute type names: write_5
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform: type of 'out' is ("address" "sink" "_elem")
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform: type of 'val' is "_elem"
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {val: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform:   instruction: {chan: ("address" "channel" "_elem")} <- get {out: (), "lookup": ()}, {chan: "offset"}
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "sink" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {chan: ("address" "channel" "_elem")}: ("address" "channel" "_elem")
9993 transform: type of 'chan' is ("address" "channel" "_elem")
9993 transform:   instruction: <channel-write-initial>
9993 transform:   instruction: {
9993 transform:   instruction: {full: "boolean"} <- channel-full? {chan: ()}
9994 transform:     checking {chan: ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {full: "boolean"}: "boolean"
9993 transform: type of 'full' is "boolean"
9993 transform:   instruction: break-unless {full: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {full-address: "location"} <- get-location {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full-address: "location"}: "location"
9993 transform: type of 'full-address' is "location"
9993 transform:   instruction: wait-for-location {full-address: ()}
9994 transform:     checking {full-address: ()}: ()
9994 transform:     deducing type to "location"
9993 transform:   instruction: }
9993 transform:   instruction: {circular-buffer: ("address" "array" "_elem")} <- get {chan: (), "lookup": ()}, {data: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {circular-buffer: ("address" "array" "_elem")}: ("address" "array" "_elem")
9993 transform: type of 'circular-buffer' is ("address" "array" "_elem")
9993 transform:   instruction: {free: "number"} <- get {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: "number"}: "number"
9993 transform: type of 'free' is "number"
9993 transform:   instruction: {circular-buffer: (), "lookup": ()} <- put-index {circular-buffer: (), "lookup": ()}, {free: ()}, {val: ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {val: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9993 transform:   instruction: {free: ()} <- add {free: ()}, {1: "literal"}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of '1' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {len: "number"}: "number"
9993 transform: type of 'len' is "number"
9993 transform:   instruction: {at-end?: "boolean"} <- greater-or-equal {free: ()}, {len: ()}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {len: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {at-end?: "boolean"}: "boolean"
9993 transform: type of 'at-end?' is "boolean"
9993 transform:   instruction: break-unless {at-end?: ()}
9994 transform:     checking {at-end?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {free: ()} <- copy {0: "literal"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of '0' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-free: "offset"}, {free: ()}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{val: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem")} <- get {out: ("address" "sink" "_elem"), "lookup": ()}, {chan: "offset"}'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "character"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:channel:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '<channel-write-initial>'
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{full: "boolean"} <- channel-full? {chan: ("address" "channel" "_elem")}'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless {full: "boolean"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction '{full-address: "location"} <- get-location {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:location
9993 transform: replacing in instruction 'wait-for-location {full-address: "location"}'
9993 transform: replacing in ingredient full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem")} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {data: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:array:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:number
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "_elem"), "lookup": ()}, {free: "number"}, {val: "_elem"}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient val
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- add {free: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{len: "number"} <- length {circular-buffer: ("address" "array" "_elem"), "lookup": ()}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction '{at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless {at-end?: "boolean"}'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '{free: "number"} <- copy {0: "literal"}'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem"), "lookup": ()} <- put {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}, {free: "number"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9992 transform: transforming new specialization: write_5
9991 transform: --- rewrite literal strings in recipe write_5
9991 transform: --- rewrite 'stash' instructions in recipe write_5
9991 transform: --- deduce types for recipe write_5
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: <channel-write-initial>
9993 transform: {
9993 transform: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform: break-unless {full: "boolean"}
9993 transform: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: wait-for-location {full-address: "location"}
9993 transform: }
9993 transform: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: {
9993 transform: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: break-unless {at-end?: "boolean"}
9993 transform: {free: "number"} <- copy {0: "literal"}
9993 transform: }
9993 transform: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9991 transform: --- checking reply instructions against header for write_5
9991 transform: --- fill in reply ingredients from header for recipe write_5
9991 transform: --- deduce types for recipe write_5
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_5
9993 transform: type of out is ("address" "sink" "character")
9993 transform: type of val is "character"
9993 transform: type of out is ("address" "sink" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {out: ("address" "sink" "character")}
9992 transform: instruction: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {val: "character"}
9992 transform: instruction: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform:   product: {chan: ("address" "channel" "character")}
9992 transform: instruction: <channel-write-initial>
9992 transform: instruction: {
9992 transform: instruction: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform:   product: {full: "boolean"}
9992 transform: instruction: break-unless {full: "boolean"}
9992 transform: instruction: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full-address: "location"}
9992 transform: instruction: wait-for-location {full-address: "location"}
9992 transform: instruction: }
9992 transform: instruction: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform:   product: {circular-buffer: ("address" "array" "character")}
9992 transform: instruction: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform:   product: {circular-buffer: ("address" "array" "character"), "lookup": ()}
9992 transform: instruction: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {
9992 transform: instruction: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform:   product: {len: "number"}
9992 transform: instruction: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform:   product: {at-end?: "boolean"}
9992 transform: instruction: break-unless {at-end?: "boolean"}
9992 transform: instruction: {free: "number"} <- copy {0: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: }
9992 transform: instruction: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform:   product: {chan: ("address" "channel" "character"), "lookup": ()}
9992 transform: instruction: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- check for invalid types in recipe write_5
9991 transform: --- collect surrounding spaces for recipe write_5
9991 transform: --- transform names for recipe write_5
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign len 8
9993 name: assign at-end? 9
9993 name: element first-free of type channel is at offset 1
9991 transform: --- resolve ambiguous calls for recipe write_5
9992 transform: instruction {full: "boolean"} <- channel-full? {chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-full? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {circular-buffer: (), "lookup": ()} <- put-index {circular-buffer: (), "lookup": ()}, {free: ()}, {val: ()}
9992 transform: checking variant (strict) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: match failed: ingredient 0
9992 transform: instruction {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for write_5
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: - compute address offsets for <channel-write-initial>
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for break-unless {full: "boolean"}
9993 transform: - compute address offsets for {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: - compute address offsets for wait-for-location {full-address: "location"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: - compute address offsets for {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: - compute address offsets for {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: - compute address offsets for break-unless {at-end?: "boolean"}
9993 transform: - compute address offsets for {free: "number"} <- copy {0: "literal"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform: - compute address offsets for reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- compute instruction operations for recipe write_5
9991 transform: --- transform braces for recipe write_5
9993 transform: write_5: push (open, 5)
9993 transform: push (close, 10)
9993 transform: write_5: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-location ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get ...
9992 transform: put-index ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_5
9991 transform: --- perform checks for recipe write_5
9991 transform: --- type-check 'call' instructions inside recipe write_5
9991 transform: --- type-check calls inside recipe write_5
9991 transform: --- convert 'new' to 'allocate' for recipe write_5
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe write_5
9991 transform: --- type-check merge instructions in recipe write_5
9991 transform: --- check that recipe write_5 sets default-space
9991 transform: --- checking reply instructions against header for write_5
9992 transform: new specialization: write_5
9992 transform: instruction {empty?: ()} <- channel-empty? {buffered-chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-empty? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {source: ("address" "source" "character")}, {sink: ("address" "sink" "character")} <- new-channel_2 {10: "literal", "capacity": ()}
9993 transform: - compute address offsets for _, {buffered-stdin: ("address" "sink" "character"), "buffered-stdin": ()} <- new-channel_2 {10: "literal", "capacity": ()}
9993 transform: - compute address offsets for {buffered-chan: ("address" "channel" "character")} <- get {buffered-stdin: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: - compute address offsets for {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"}
9993 transform: - compute address offsets for {buffer-routine: "number"} <- start-running {buffer-lines: "recipe-literal"}, {source: ("address" "source" "character")}, {buffered-stdin: ("address" "sink" "character")}
9993 transform: - compute address offsets for wait-for-routine {buffer-routine: "number"}
9993 transform: - compute address offsets for {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"}
9993 transform: - compute address offsets for {sink: ("address" "sink" "character")} <- write_3 {sink: ("address" "sink" "character")}, {97: "literal", "a": ()}
9993 transform: - compute address offsets for restart {buffer-routine: "number"}
9993 transform: - compute address offsets for wait-for-routine {buffer-routine: "number"}
9993 transform: - compute address offsets for {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"}
9993 transform: - compute address offsets for {sink: ("address" "sink" "character")} <- write_4 {sink: ("address" "sink" "character")}, {98: "literal", "b": ()}
9993 transform: - compute address offsets for restart {buffer-routine: "number"}
9993 transform: - compute address offsets for wait-for-routine {buffer-routine: "number"}
9993 transform: - compute address offsets for {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"}
9993 transform: - compute address offsets for {sink: ("address" "sink" "character")} <- write_5 {sink: ("address" "sink" "character")}, {10: "literal", "newline": ()}
9993 transform: - compute address offsets for restart {buffer-routine: "number"}
9993 transform: - compute address offsets for wait-for-routine {buffer-routine: "number"}
9993 transform: - compute address offsets for {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for {data-emitted?: "boolean"} <- not {empty?: "boolean"}
9993 transform: - compute address offsets for assert {data-emitted?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"}
9993 transform: - compute address offsets for trace {1: "literal"}, {"test": "literal-string"}, {"reached end": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new-channel ...
9992 transform: new-channel ...
9992 transform: get ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: start-running ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: not ...
9992 transform: assert ...
9992 transform: trace ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 8 in location 1001
 103 run: {source: ("address" "source" "character")}, {sink: ("address" "sink" "character")} <- new-channel_2 {10: "literal", "capacity": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1010
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 6 in location 1011
 104 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1013
 104 run: {result: ("address" "channel" "character")} <- new {(channel character): "type"}
9999 mem: allocating size 5
9999 mem: new alloc: 1018
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: location 1014 is 0
9999 mem: incrementing refcount of 1018: 0 -> 1
9999 mem: storing 1018 in location 1014
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9999 mem: location 1014 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1014 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1019
9999 mem: storing 0 in location 1019
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9999 mem: location 1014 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1014 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1020
9999 mem: storing 0 in location 1020
 104 run: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9999 mem: location 1013 is 10
9999 mem: storing 11 in location 1013
 104 run: {data: ("address" "array" "character")} <- new {character: "type"}, {capacity: "number"}
9999 mem: location 1013 is 11
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1023
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 11 in location 1024
9999 mem: location 1015 is 0
9999 mem: incrementing refcount of 1023: 0 -> 1
9999 mem: storing 1023 in location 1015
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "character")}
9999 mem: location 1014 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1015 is 1023
9999 mem: location 1014 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1021
9999 mem: location 1021 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 1021
 104 run: {in: ("address" "source" "character")} <- new {(source character): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1036
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: location 1016 is 0
9999 mem: incrementing refcount of 1036: 0 -> 1
9999 mem: storing 1036 in location 1016
 104 run: {in: ("address" "source" "character"), "lookup": ()} <- put {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "character")}
9999 mem: location 1016 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1037 is 0
9999 mem: location 1014 is 1018
9999 mem: location 1016 is 1036
9999 mem: skipping refcount at 1036
9998 run: address to copy to is 1037
9999 mem: location 1037 is 0
9999 mem: incrementing refcount of 1018: 1 -> 2
9999 mem: storing 1018 in location 1037
 104 run: {out: ("address" "sink" "character")} <- new {(sink character): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1038
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: location 1017 is 0
9999 mem: incrementing refcount of 1038: 0 -> 1
9999 mem: storing 1038 in location 1017
 104 run: {out: ("address" "sink" "character"), "lookup": ()} <- put {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "character")}
9999 mem: location 1017 is 1038
9999 mem: skipping refcount at 1038
9999 mem: location 1039 is 0
9999 mem: location 1014 is 1018
9999 mem: location 1017 is 1038
9999 mem: skipping refcount at 1038
9998 run: address to copy to is 1039
9999 mem: location 1039 is 0
9999 mem: incrementing refcount of 1018: 2 -> 3
9999 mem: storing 1018 in location 1039
 104 run: reply {in: ("address" "source" "character")}, {out: ("address" "sink" "character")}
9999 mem: location 1016 is 1036
9999 mem: location 1017 is 1038
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 1013
9999 mem: clearing result:address:channel:_elem
9999 mem: location 1014 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 3 -> 2
9999 mem: storing 0 in location 1014
9999 mem: clearing capacity
9999 mem: storing 0 in location 1013
9999 mem: clearing data:address:array:_elem
9999 mem: location 1015 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 1015
9999 mem: automatically abandoning 1010
9999 abandon: updating refcounts inside 1010: (array number)
9999 abandon: saving 1010 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1036
9998 run: result 1 is 1038
9999 mem: storing 1036 in location 1003
9999 mem: storing 1038 in location 1004
 103 run: _, {buffered-stdin: ("address" "sink" "character"), "buffered-stdin": ()} <- new-channel_2 {10: "literal", "capacity": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1010
9999 mem: storing 6 in location 1011
 104 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1013
 104 run: {result: ("address" "channel" "character")} <- new {(channel character): "type"}
9999 mem: allocating size 5
9999 mem: new alloc: 1040
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: location 1014 is 0
9999 mem: incrementing refcount of 1040: 0 -> 1
9999 mem: storing 1040 in location 1014
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9999 mem: location 1014 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1014 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy to is 1041
9999 mem: storing 0 in location 1041
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9999 mem: location 1014 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1014 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy to is 1042
9999 mem: storing 0 in location 1042
 104 run: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9999 mem: location 1013 is 10
9999 mem: storing 11 in location 1013
 104 run: {data: ("address" "array" "character")} <- new {character: "type"}, {capacity: "number"}
9999 mem: location 1013 is 11
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1045
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 11 in location 1046
9999 mem: location 1015 is 0
9999 mem: incrementing refcount of 1045: 0 -> 1
9999 mem: storing 1045 in location 1015
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "character")}
9999 mem: location 1014 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1015 is 1045
9999 mem: location 1014 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy to is 1043
9999 mem: location 1043 is 0
9999 mem: incrementing refcount of 1045: 1 -> 2
9999 mem: storing 1045 in location 1043
 104 run: {in: ("address" "source" "character")} <- new {(source character): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1058
9999 mem: storing 0 in location 1058
9999 mem: storing 0 in location 1059
9999 mem: location 1016 is 0
9999 mem: incrementing refcount of 1058: 0 -> 1
9999 mem: storing 1058 in location 1016
 104 run: {in: ("address" "source" "character"), "lookup": ()} <- put {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "character")}
9999 mem: location 1016 is 1058
9999 mem: skipping refcount at 1058
9999 mem: location 1059 is 0
9999 mem: location 1014 is 1040
9999 mem: location 1016 is 1058
9999 mem: skipping refcount at 1058
9998 run: address to copy to is 1059
9999 mem: location 1059 is 0
9999 mem: incrementing refcount of 1040: 1 -> 2
9999 mem: storing 1040 in location 1059
 104 run: {out: ("address" "sink" "character")} <- new {(sink character): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1060
9999 mem: storing 0 in location 1060
9999 mem: storing 0 in location 1061
9999 mem: location 1017 is 0
9999 mem: incrementing refcount of 1060: 0 -> 1
9999 mem: storing 1060 in location 1017
 104 run: {out: ("address" "sink" "character"), "lookup": ()} <- put {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "character")}
9999 mem: location 1017 is 1060
9999 mem: skipping refcount at 1060
9999 mem: location 1061 is 0
9999 mem: location 1014 is 1040
9999 mem: location 1017 is 1060
9999 mem: skipping refcount at 1060
9998 run: address to copy to is 1061
9999 mem: location 1061 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 1061
 104 run: reply {in: ("address" "source" "character")}, {out: ("address" "sink" "character")}
9999 mem: location 1016 is 1058
9999 mem: location 1017 is 1060
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 1013
9999 mem: clearing result:address:channel:_elem
9999 mem: location 1014 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 1014
9999 mem: clearing capacity
9999 mem: storing 0 in location 1013
9999 mem: clearing data:address:array:_elem
9999 mem: location 1015 is 1045
9999 mem: skipping refcount at 1045
9999 mem: decrementing refcount of 1045: 2 -> 1
9999 mem: storing 0 in location 1015
9999 mem: clearing in
9999 mem: location 1016 is 1058
9999 mem: skipping refcount at 1058
9999 mem: decrementing refcount of 1058: 1 -> 0
9999 mem: automatically abandoning 1058
9999 abandon: updating refcounts inside 1058: (source character)
9999 mem: decrementing refcount of 1040: 2 -> 1
9999 abandon: saving 1058 in free-list of size 2
9999 mem: storing 0 in location 1016
9999 mem: automatically abandoning 1010
9999 abandon: updating refcounts inside 1010: (array number)
9999 abandon: saving 1010 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1058
9998 run: result 1 is 1060
9999 mem: storing 1060 in location 1005
 103 run: {buffered-chan: ("address" "channel" "character")} <- get {buffered-stdin: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1005 is 1060
9999 mem: skipping refcount at 1060
9999 mem: location 1061 is 1040
9999 mem: location 1005 is 1060
9999 mem: skipping refcount at 1060
9998 run: address to copy is 1061
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1061 is 1040
9999 mem: location 1006 is 0
9999 mem: incrementing refcount of 1040: 1 -> 2
9999 mem: storing 1040 in location 1006
 103 run: {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9999 mem: location 1006 is 1040
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1062
9999 mem: storing 0 in location 1062
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
9999 mem: storing 0 in location 1065
9999 mem: storing 0 in location 1066
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 5 in location 1063
 104 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1065 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 1065
 104 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 1066
 104 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 0
9999 mem: storing 0 in location 1067
 104 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: storing 1 in location 1068
 104 run: reply {result: "boolean"}
9999 mem: location 1068 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 1065
9999 mem: clearing full:number
9999 mem: storing 0 in location 1066
9999 mem: clearing free:number
9999 mem: storing 0 in location 1067
9999 mem: automatically abandoning 1062
9999 abandon: updating refcounts inside 1062: (array number)
9999 abandon: saving 1062 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9999 mem: storing 1 in location 1007
 103 run: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"}
9999 mem: location 1007 is 1
 103 run: {buffer-routine: "number"} <- start-running {buffer-lines: "recipe-literal"}, {source: ("address" "source" "character")}, {buffered-stdin: ("address" "sink" "character")}
9999 mem: location 1003 is 1036
9999 mem: location 1005 is 1060
9999 trace: new routine; incrementing callstack depth to 3
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 1008
 104 run: wait-for-routine {buffer-routine: "number"}
9999 mem: location 1008 is 2
9998 run: waiting for routine 2
9990 schedule: buffer-lines
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 101000
9999 mem: storing 0 in location 101000
9999 mem: storing 0 in location 101001
9999 mem: storing 0 in location 101002
9999 mem: storing 0 in location 101003
9999 mem: storing 0 in location 101004
9999 mem: storing 0 in location 101005
9999 mem: storing 0 in location 101006
9999 mem: storing 0 in location 101007
9999 mem: storing 0 in location 101008
9999 mem: storing 0 in location 101009
9999 mem: storing 0 in location 101010
9999 mem: storing 0 in location 101011
9999 mem: storing 0 in location 101012
9999 mem: storing 0 in location 101013
9999 mem: storing 0 in location 101014
9999 mem: storing 0 in location 101015
9999 mem: storing 14 in location 101001
 104 run: {in: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101003 is 0
9999 mem: incrementing refcount of 1036: 1 -> 2
9999 mem: storing 1036 in location 101003
 104 run: {buffered-out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101004 is 0
9999 mem: incrementing refcount of 1060: 1 -> 2
9999 mem: storing 1060 in location 101004
 104 run: {eof?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 101005
 104 run: {line: ("address" "buffer")} <- new-buffer {30: "literal"}
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 101016
9999 mem: storing 0 in location 101016
9999 mem: storing 0 in location 101017
9999 mem: storing 0 in location 101018
9999 mem: storing 0 in location 101019
9999 mem: storing 0 in location 101020
9999 mem: storing 0 in location 101021
9999 mem: storing 4 in location 101017
 105 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 101019
 105 run: {result: ("address" "buffer")} <- new {buffer: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 101022
9999 mem: storing 0 in location 101022
9999 mem: storing 0 in location 101023
9999 mem: storing 0 in location 101024
9999 mem: location 101020 is 0
9999 mem: incrementing refcount of 101022: 0 -> 1
9999 mem: storing 101022 in location 101020
 105 run: {result: ("address" "buffer"), "lookup": ()} <- put {result: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {0: "literal"}
9999 mem: location 101020 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101020 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy to is 101023
9999 mem: storing 0 in location 101023
 105 run: {data: ("address" "array" "character")} <- new {character: "type"}, {capacity: "number"}
9999 mem: location 101019 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 101025
9999 mem: storing 0 in location 101025
9999 mem: storing 0 in location 101026
9999 mem: storing 0 in location 101027
9999 mem: storing 0 in location 101028
9999 mem: storing 0 in location 101029
9999 mem: storing 0 in location 101030
9999 mem: storing 0 in location 101031
9999 mem: storing 0 in location 101032
9999 mem: storing 0 in location 101033
9999 mem: storing 0 in location 101034
9999 mem: storing 0 in location 101035
9999 mem: storing 0 in location 101036
9999 mem: storing 0 in location 101037
9999 mem: storing 0 in location 101038
9999 mem: storing 0 in location 101039
9999 mem: storing 0 in location 101040
9999 mem: storing 0 in location 101041
9999 mem: storing 0 in location 101042
9999 mem: storing 0 in location 101043
9999 mem: storing 0 in location 101044
9999 mem: storing 0 in location 101045
9999 mem: storing 0 in location 101046
9999 mem: storing 0 in location 101047
9999 mem: storing 0 in location 101048
9999 mem: storing 0 in location 101049
9999 mem: storing 0 in location 101050
9999 mem: storing 0 in location 101051
9999 mem: storing 0 in location 101052
9999 mem: storing 0 in location 101053
9999 mem: storing 0 in location 101054
9999 mem: storing 0 in location 101055
9999 mem: storing 0 in location 101056
9999 mem: storing 30 in location 101026
9999 mem: location 101021 is 0
9999 mem: incrementing refcount of 101025: 0 -> 1
9999 mem: storing 101025 in location 101021
 105 run: {result: ("address" "buffer"), "lookup": ()} <- put {result: ("address" "buffer"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "character")}
9999 mem: location 101020 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101021 is 101025
9999 mem: location 101020 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy to is 101024
9999 mem: location 101024 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101024
 105 run: return {result: ("address" "buffer")}
9999 mem: location 101020 is 101022
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 101019
9999 mem: clearing data:address:array:character
9999 mem: location 101021 is 101025
9999 mem: skipping refcount at 101025
9999 mem: decrementing refcount of 101025: 2 -> 1
9999 mem: storing 0 in location 101021
9999 mem: automatically abandoning 101016
9999 abandon: updating refcounts inside 101016: (array number)
9999 abandon: saving 101016 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101022
9999 mem: storing 101022 in location 101006
 104 run: {c: "character"}, {eof?: "boolean"}, {in: ("address" "source" "character")} <- read_2 {in: ("address" "source" "character")}
9999 mem: location 101003 is 1036
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 101057
9999 mem: storing 0 in location 101057
9999 mem: storing 0 in location 101058
9999 mem: storing 0 in location 101059
9999 mem: storing 0 in location 101060
9999 mem: storing 0 in location 101061
9999 mem: storing 0 in location 101062
9999 mem: storing 0 in location 101063
9999 mem: storing 0 in location 101064
9999 mem: storing 0 in location 101065
9999 mem: storing 0 in location 101066
9999 mem: storing 0 in location 101067
9999 mem: storing 0 in location 101068
9999 mem: storing 0 in location 101069
9999 mem: storing 0 in location 101070
9999 mem: storing 0 in location 101071
9999 mem: storing 0 in location 101072
9999 mem: storing 14 in location 101058
 105 run: {in: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101060 is 0
9999 mem: incrementing refcount of 1036: 2 -> 3
9999 mem: storing 1036 in location 101060
 105 run: {fail?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 101061
 105 run: {chan: ("address" "channel" "character")} <- get {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1037 is 1018
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9998 run: address to copy is 1037
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1037 is 1018
9999 mem: location 101062 is 0
9999 mem: incrementing refcount of 1018: 2 -> 3
9999 mem: storing 1018 in location 101062
 105 run: {empty?: "boolean"} <- channel-empty?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101062 is 1018
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 101073
9999 mem: storing 0 in location 101073
9999 mem: storing 0 in location 101074
9999 mem: storing 0 in location 101075
9999 mem: storing 0 in location 101076
9999 mem: storing 0 in location 101077
9999 mem: storing 0 in location 101078
9999 mem: storing 0 in location 101079
9999 mem: storing 5 in location 101074
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101076 is 0
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 101076
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 0
9999 mem: storing 0 in location 101077
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 0
9999 mem: storing 0 in location 101078
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: storing 1 in location 101079
 106 run: reply {result: "boolean"}
9999 mem: location 101079 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 101076
9999 mem: clearing full:number
9999 mem: storing 0 in location 101077
9999 mem: clearing free:number
9999 mem: storing 0 in location 101078
9999 mem: automatically abandoning 101073
9999 abandon: updating refcounts inside 101073: (array number)
9999 abandon: saving 101073 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101063
 105 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 101063 is 1
9998 run: jump-unless fell through
 105 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1022
9998 run: its type is "boolean"
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 101064
 105 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101064 is 0
9998 run: jumping to instruction 13
 105 run: {free-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 101066
 105 run: wait-for-location {free-address: "location"}
9999 mem: location 101066 is 1020
9998 run: waiting for location 1020 to change from 0
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9999 mem: location 1006 is 1040
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1062
9999 mem: storing 5 in location 1063
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1065 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 1065
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 1066
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 0
9999 mem: storing 0 in location 1067
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: storing 1 in location 1068
 106 run: reply {result: "boolean"}
9999 mem: location 1068 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 1065
9999 mem: clearing full:number
9999 mem: storing 0 in location 1066
9999 mem: clearing free:number
9999 mem: storing 0 in location 1067
9999 mem: automatically abandoning 1062
9999 abandon: updating refcounts inside 1062: (array number)
9999 abandon: saving 1062 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 1007
 105 run: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"}
9999 mem: location 1007 is 1
 105 run: {sink: ("address" "sink" "character")} <- write_3 {sink: ("address" "sink" "character")}, {97: "literal", "a": ()}
9999 mem: location 1004 is 1038
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1069
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
9999 mem: storing 0 in location 1071
9999 mem: storing 0 in location 1072
9999 mem: storing 0 in location 1073
9999 mem: storing 0 in location 1074
9999 mem: storing 0 in location 1075
9999 mem: storing 0 in location 1076
9999 mem: storing 0 in location 1077
9999 mem: storing 0 in location 1078
9999 mem: storing 0 in location 1079
9999 mem: storing 0 in location 1080
9999 mem: storing 10 in location 1070
 106 run: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1072 is 0
9999 mem: incrementing refcount of 1038: 1 -> 2
9999 mem: storing 1038 in location 1072
 106 run: {val: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1073
 106 run: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1072 is 1038
9999 mem: skipping refcount at 1038
9999 mem: location 1039 is 1018
9999 mem: location 1072 is 1038
9999 mem: skipping refcount at 1038
9998 run: address to copy is 1039
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1039 is 1018
9999 mem: location 1074 is 0
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 1074
 106 run: {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9999 mem: location 1074 is 1018
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1081
9999 mem: storing 0 in location 1081
9999 mem: storing 0 in location 1082
9999 mem: storing 0 in location 1083
9999 mem: storing 0 in location 1084
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: storing 0 in location 1087
9999 mem: storing 0 in location 1088
9999 mem: storing 0 in location 1089
9999 mem: storing 7 in location 1082
 107 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1084 is 0
9999 mem: incrementing refcount of 1018: 4 -> 5
9999 mem: storing 1018 in location 1084
 107 run: {tmp: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 0
9999 mem: storing 0 in location 1085
 107 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 1085 is 0
9999 mem: storing 1 in location 1085
 107 run: {len: "number"} <- capacity_2 {chan: ("address" "channel" "character")}
9999 mem: location 1084 is 1018
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1090
9999 mem: storing 0 in location 1090
9999 mem: storing 0 in location 1091
9999 mem: storing 0 in location 1092
9999 mem: storing 0 in location 1093
9999 mem: storing 0 in location 1094
9999 mem: storing 0 in location 1095
9999 mem: storing 4 in location 1091
 108 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1093 is 0
9999 mem: incrementing refcount of 1018: 5 -> 6
9999 mem: storing 1018 in location 1093
 108 run: {q: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 1094 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 1094
 108 run: {result: "number"} <- length {q: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1094 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 1095
 108 run: reply {result: "number"}
9999 mem: location 1095 is 11
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 6 -> 5
9999 mem: storing 0 in location 1093
9999 mem: clearing q:address:array:_elem
9999 mem: location 1094 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 1094
9999 mem: automatically abandoning 1090
9999 abandon: updating refcounts inside 1090: (array number)
9999 abandon: saving 1090 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1086
 107 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 1085 is 1
9999 mem: location 1086 is 11
9999 mem: storing 0 in location 1087
 107 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1087 is 0
9998 run: jumping to instruction 9
 107 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 0
9999 mem: storing 0 in location 1088
 107 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 1088 is 0
9999 mem: location 1085 is 1
9999 mem: storing 0 in location 1089
 107 run: reply {result: "boolean"}
9999 mem: location 1089 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 5 -> 4
9999 mem: storing 0 in location 1084
9999 mem: clearing tmp:number
9999 mem: storing 0 in location 1085
9999 mem: clearing tmp
9999 mem: storing 0 in location 1085
9999 mem: clearing len:number
9999 mem: storing 0 in location 1086
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1087
9999 mem: clearing tmp
9999 mem: storing 0 in location 1085
9999 mem: clearing full:number
9999 mem: storing 0 in location 1088
9999 mem: automatically abandoning 1081
9999 abandon: updating refcounts inside 1081: (array number)
9999 abandon: saving 1081 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1075
 106 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 1075 is 0
9998 run: jumping to instruction 10
 106 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 1077 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 1077
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 0
9999 mem: storing 0 in location 1078
 106 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: location 1078 is 0
9998 run: address to copy to is 1025
9999 mem: location 1073 is 97
9999 mem: storing 97 in location 1025
 106 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 1078 is 0
9999 mem: storing 1 in location 1078
 106 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 1079
 106 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 1078 is 1
9999 mem: location 1079 is 11
9999 mem: storing 0 in location 1080
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1080 is 0
9998 run: jumping to instruction 20
 106 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1078 is 1
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1020
9999 mem: storing 1 in location 1020
 106 run: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9999 mem: location 1072 is 1038
9999 mem: clearing val:_elem
9999 mem: storing 0 in location 1073
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 1074
9999 mem: clearing full:boolean
9999 mem: storing 0 in location 1075
9999 mem: clearing full-address:location
9999 mem: storing 0 in location 1076
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 1077
9999 mem: clearing free:number
9999 mem: storing 0 in location 1078
9999 mem: clearing free
9999 mem: storing 0 in location 1078
9999 mem: clearing len:number
9999 mem: storing 0 in location 1079
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1080
9999 mem: clearing free
9999 mem: storing 0 in location 1078
9999 mem: automatically abandoning 1069
9999 abandon: updating refcounts inside 1069: (array number)
9999 abandon: saving 1069 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1038
9999 mem: storing 1038 in location 1004
 105 run: restart {buffer-routine: "number"}
9999 mem: location 1008 is 2
 105 run: wait-for-routine {buffer-routine: "number"}
9999 mem: location 1008 is 2
9998 run: waiting for routine 2
9990 schedule: read_2/buffer-lines
 105 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 0
9999 mem: storing 0 in location 101067
 105 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 101068 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 101068
 105 run: {result: "character"} <- index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9998 run: base address is 1024
9999 mem: location 101067 is 0
9998 run: address to copy is 1025
9998 run: its type is character
9999 mem: location 1025 is 97
9999 mem: storing 97 in location 101069
 105 run: {empty: ("address" "character")} <- new {character: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 101080
9999 mem: storing 0 in location 101080
9999 mem: storing 0 in location 101081
9999 mem: location 101070 is 0
9999 mem: incrementing refcount of 101080: 0 -> 1
9999 mem: storing 101080 in location 101070
 105 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}, {empty: ("address" "character"), "lookup": ()}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: location 101067 is 0
9998 run: address to copy to is 1025
9999 mem: location 101070 is 101080
9999 mem: skipping refcount at 101080
9999 mem: location 101081 is 0
9999 mem: storing 0 in location 1025
 105 run: {full: "number"} <- add {full: "number"}, {1: "literal"}
9999 mem: location 101067 is 0
9999 mem: storing 1 in location 101067
 105 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 101071
 105 run: {at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}
9999 mem: location 101067 is 1
9999 mem: location 101071 is 11
9999 mem: storing 0 in location 101072
 105 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101072 is 0
9998 run: jumping to instruction 28
 105 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}, {full: "number"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101067 is 1
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1019
9999 mem: storing 1 in location 1019
 105 run: reply {result: "character"}, {fail?: "boolean"}, {in: ("address" "source" "character"), "same-as-ingredient": "0"}
9999 mem: location 101069 is 97
9999 mem: location 101061 is 0
9999 mem: location 101060 is 1036
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 3 -> 2
9999 mem: storing 0 in location 101062
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 101063
9999 mem: clearing closed?:boolean
9999 mem: storing 0 in location 101064
9999 mem: clearing empty-result:address:_elem
9999 mem: location 101065 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101065
9999 mem: clearing free-address:location
9999 mem: storing 0 in location 101066
9999 mem: clearing full:number
9999 mem: storing 0 in location 101067
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 101068
9999 mem: clearing empty:address:_elem
9999 mem: location 101070 is 101080
9999 mem: skipping refcount at 101080
9999 mem: decrementing refcount of 101080: 1 -> 0
9999 mem: automatically abandoning 101080
9999 abandon: updating refcounts inside 101080: character
9999 abandon: saving 101080 in free-list of size 2
9999 mem: storing 0 in location 101070
9999 mem: clearing full
9999 mem: storing 0 in location 101067
9999 mem: clearing len:number
9999 mem: storing 0 in location 101071
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101072
9999 mem: clearing full
9999 mem: storing 0 in location 101067
9999 mem: automatically abandoning 101057
9999 abandon: updating refcounts inside 101057: (array number)
9999 abandon: saving 101057 in free-list of size 16
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 97
9998 run: result 1 is 0
9998 run: result 2 is 1036
9999 mem: storing 97 in location 101007
9999 mem: storing 0 in location 101005
9999 mem: storing 1036 in location 101003
 104 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 101005 is 0
9998 run: jump-if fell through
 104 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 101007 is 97
9999 mem: storing 0 in location 101008
 104 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 101008 is 0
9998 run: jumping to instruction 21
 104 run: {line: ("address" "buffer")} <- append_2 {line: ("address" "buffer")}, {c: "character"}
9999 mem: location 101006 is 101022
9999 mem: location 101007 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 101082
9999 mem: storing 0 in location 101082
9999 mem: storing 0 in location 101083
9999 mem: storing 0 in location 101084
9999 mem: storing 0 in location 101085
9999 mem: storing 0 in location 101086
9999 mem: storing 0 in location 101087
9999 mem: storing 0 in location 101088
9999 mem: storing 0 in location 101089
9999 mem: storing 0 in location 101090
9999 mem: storing 0 in location 101091
9999 mem: storing 8 in location 101083
 105 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: location 101085 is 0
9999 mem: incrementing refcount of 101022: 1 -> 2
9999 mem: storing 101022 in location 101085
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 101086
 105 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 0
9999 mem: location 101024 is 101025
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101023
9998 run: its type is "number"
9999 mem: location 101023 is 0
9999 mem: storing 0 in location 101087
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 101086 is 97
9999 mem: storing 0 in location 101088
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 101088 is 0
9998 run: jumping to instruction 15
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "buffer")}
9999 mem: location 101085 is 101022
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 101092
9999 mem: storing 0 in location 101092
9999 mem: storing 0 in location 101093
9999 mem: storing 0 in location 101094
9999 mem: storing 0 in location 101095
9999 mem: storing 0 in location 101096
9999 mem: storing 0 in location 101097
9999 mem: storing 0 in location 101098
9999 mem: storing 0 in location 101099
9999 mem: storing 6 in location 101093
 106 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: location 101095 is 0
9999 mem: incrementing refcount of 101022: 2 -> 3
9999 mem: storing 101022 in location 101095
 106 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 0
9999 mem: location 101024 is 101025
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101023
9998 run: its type is "number"
9999 mem: location 101023 is 0
9999 mem: storing 0 in location 101096
 106 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 0
9999 mem: location 101024 is 101025
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101024
9998 run: its type is ("address" "array" "character")
9999 mem: location 101024 is 101025
9999 mem: location 101097 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101097
 106 run: {capacity: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101097 is 101025
9999 mem: skipping refcount at 101025
9999 mem: storing 30 in location 101098
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 101096 is 0
9999 mem: location 101098 is 30
9999 mem: storing 0 in location 101099
 106 run: reply {result: "boolean"}
9999 mem: location 101099 is 0
9999 mem: clearing in:address:buffer
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: decrementing refcount of 101022: 3 -> 2
9999 mem: storing 0 in location 101095
9999 mem: clearing len:number
9999 mem: storing 0 in location 101096
9999 mem: clearing s:address:array:character
9999 mem: location 101097 is 101025
9999 mem: skipping refcount at 101025
9999 mem: decrementing refcount of 101025: 2 -> 1
9999 mem: storing 0 in location 101097
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 101098
9999 mem: automatically abandoning 101092
9999 abandon: updating refcounts inside 101092: (array number)
9999 abandon: saving 101092 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101090
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 101090 is 0
9998 run: jumping to instruction 20
 105 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 0
9999 mem: location 101024 is 101025
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101024
9998 run: its type is ("address" "array" "character")
9999 mem: location 101024 is 101025
9999 mem: location 101091 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101091
 105 run: {s: ("address" "array" "character"), "lookup": ()} <- put-index {s: ("address" "array" "character"), "lookup": ()}, {len: "number"}, {c: "character"}
9999 mem: location 101091 is 101025
9999 mem: skipping refcount at 101025
9999 mem: location 101087 is 0
9998 run: address to copy to is 101027
9999 mem: location 101086 is 97
9999 mem: storing 97 in location 101027
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 101087 is 0
9999 mem: storing 1 in location 101087
 105 run: {in: ("address" "buffer"), "lookup": ()} <- put {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 0
9999 mem: location 101024 is 101025
9999 mem: location 101087 is 1
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy to is 101023
9999 mem: storing 1 in location 101023
 105 run: reply {in: ("address" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 101085 is 101022
9999 mem: clearing c:character
9999 mem: storing 0 in location 101086
9999 mem: clearing len:number
9999 mem: storing 0 in location 101087
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 101088
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 101089
9999 mem: clearing len
9999 mem: storing 0 in location 101087
9999 mem: clearing full?:boolean
9999 mem: storing 0 in location 101090
9999 mem: clearing s:address:array:character
9999 mem: location 101091 is 101025
9999 mem: skipping refcount at 101025
9999 mem: decrementing refcount of 101025: 2 -> 1
9999 mem: storing 0 in location 101091
9999 mem: clearing len
9999 mem: storing 0 in location 101087
9999 mem: automatically abandoning 101082
9999 abandon: updating refcounts inside 101082: (array number)
9999 abandon: saving 101082 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101022
9999 mem: storing 101022 in location 101006
 104 run: {line-done?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 101007 is 97
9999 mem: storing 0 in location 101011
 104 run: jump-if {line-done?: "boolean"}, {: "offset"}
9999 mem: location 101011 is 0
9998 run: jump-if fell through
 104 run: jump {: "offset"}
9998 run: jumping to instruction 7
 104 run: {c: "character"}, {eof?: "boolean"}, {in: ("address" "source" "character")} <- read_2 {in: ("address" "source" "character")}
9999 mem: location 101003 is 1036
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 abandon: picking up space from free-list of size 16
9999 mem: new alloc from free list: 101057
9999 mem: storing 14 in location 101058
 105 run: {in: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101060 is 0
9999 mem: incrementing refcount of 1036: 3 -> 4
9999 mem: storing 1036 in location 101060
 105 run: {fail?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 101061
 105 run: {chan: ("address" "channel" "character")} <- get {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1037 is 1018
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9998 run: address to copy is 1037
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1037 is 1018
9999 mem: location 101062 is 0
9999 mem: incrementing refcount of 1018: 2 -> 3
9999 mem: storing 1018 in location 101062
 105 run: {empty?: "boolean"} <- channel-empty?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101062 is 1018
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 101073
9999 mem: storing 5 in location 101074
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101076 is 0
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 101076
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 1
9999 mem: storing 1 in location 101077
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 1
9999 mem: storing 1 in location 101078
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 101077 is 1
9999 mem: location 101078 is 1
9999 mem: storing 1 in location 101079
 106 run: reply {result: "boolean"}
9999 mem: location 101079 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 101076
9999 mem: clearing full:number
9999 mem: storing 0 in location 101077
9999 mem: clearing free:number
9999 mem: storing 0 in location 101078
9999 mem: automatically abandoning 101073
9999 abandon: updating refcounts inside 101073: (array number)
9999 abandon: saving 101073 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101063
 105 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 101063 is 1
9998 run: jump-unless fell through
 105 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1022
9998 run: its type is "boolean"
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 101064
 105 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101064 is 0
9998 run: jumping to instruction 13
 105 run: {free-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 101066
 105 run: wait-for-location {free-address: "location"}
9999 mem: location 101066 is 1020
9998 run: waiting for location 1020 to change from 1
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9999 mem: location 1006 is 1040
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1062
9999 mem: storing 5 in location 1063
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1065 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 1065
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 1066
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 0
9999 mem: storing 0 in location 1067
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: storing 1 in location 1068
 106 run: reply {result: "boolean"}
9999 mem: location 1068 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 1065
9999 mem: clearing full:number
9999 mem: storing 0 in location 1066
9999 mem: clearing free:number
9999 mem: storing 0 in location 1067
9999 mem: automatically abandoning 1062
9999 abandon: updating refcounts inside 1062: (array number)
9999 abandon: saving 1062 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 1007
 105 run: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"}
9999 mem: location 1007 is 1
 105 run: {sink: ("address" "sink" "character")} <- write_4 {sink: ("address" "sink" "character")}, {98: "literal", "b": ()}
9999 mem: location 1004 is 1038
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1069
9999 mem: storing 10 in location 1070
 106 run: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1072 is 0
9999 mem: incrementing refcount of 1038: 2 -> 3
9999 mem: storing 1038 in location 1072
 106 run: {val: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1073
 106 run: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1072 is 1038
9999 mem: skipping refcount at 1038
9999 mem: location 1039 is 1018
9999 mem: location 1072 is 1038
9999 mem: skipping refcount at 1038
9998 run: address to copy is 1039
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1039 is 1018
9999 mem: location 1074 is 0
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 1074
 106 run: {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9999 mem: location 1074 is 1018
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1081
9999 mem: storing 7 in location 1082
 107 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1084 is 0
9999 mem: incrementing refcount of 1018: 4 -> 5
9999 mem: storing 1018 in location 1084
 107 run: {tmp: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 1
9999 mem: storing 1 in location 1085
 107 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 1085 is 1
9999 mem: storing 2 in location 1085
 107 run: {len: "number"} <- capacity_2 {chan: ("address" "channel" "character")}
9999 mem: location 1084 is 1018
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1090
9999 mem: storing 4 in location 1091
 108 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1093 is 0
9999 mem: incrementing refcount of 1018: 5 -> 6
9999 mem: storing 1018 in location 1093
 108 run: {q: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 1094 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 1094
 108 run: {result: "number"} <- length {q: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1094 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 1095
 108 run: reply {result: "number"}
9999 mem: location 1095 is 11
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 6 -> 5
9999 mem: storing 0 in location 1093
9999 mem: clearing q:address:array:_elem
9999 mem: location 1094 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 1094
9999 mem: automatically abandoning 1090
9999 abandon: updating refcounts inside 1090: (array number)
9999 abandon: saving 1090 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1086
 107 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 1085 is 2
9999 mem: location 1086 is 11
9999 mem: storing 0 in location 1087
 107 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1087 is 0
9998 run: jumping to instruction 9
 107 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 1
9999 mem: storing 1 in location 1088
 107 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 1088 is 1
9999 mem: location 1085 is 2
9999 mem: storing 0 in location 1089
 107 run: reply {result: "boolean"}
9999 mem: location 1089 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 5 -> 4
9999 mem: storing 0 in location 1084
9999 mem: clearing tmp:number
9999 mem: storing 0 in location 1085
9999 mem: clearing tmp
9999 mem: storing 0 in location 1085
9999 mem: clearing len:number
9999 mem: storing 0 in location 1086
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1087
9999 mem: clearing tmp
9999 mem: storing 0 in location 1085
9999 mem: clearing full:number
9999 mem: storing 0 in location 1088
9999 mem: automatically abandoning 1081
9999 abandon: updating refcounts inside 1081: (array number)
9999 abandon: saving 1081 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1075
 106 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 1075 is 0
9998 run: jumping to instruction 10
 106 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 1077 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 1077
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 1
9999 mem: storing 1 in location 1078
 106 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: location 1078 is 1
9998 run: address to copy to is 1026
9999 mem: location 1073 is 98
9999 mem: storing 98 in location 1026
 106 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 1078 is 1
9999 mem: storing 2 in location 1078
 106 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 1079
 106 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 1078 is 2
9999 mem: location 1079 is 11
9999 mem: storing 0 in location 1080
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1080 is 0
9998 run: jumping to instruction 20
 106 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1078 is 2
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1020
9999 mem: storing 2 in location 1020
 106 run: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9999 mem: location 1072 is 1038
9999 mem: clearing val:_elem
9999 mem: storing 0 in location 1073
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 1074
9999 mem: clearing full:boolean
9999 mem: storing 0 in location 1075
9999 mem: clearing full-address:location
9999 mem: storing 0 in location 1076
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 1077
9999 mem: clearing free:number
9999 mem: storing 0 in location 1078
9999 mem: clearing free
9999 mem: storing 0 in location 1078
9999 mem: clearing len:number
9999 mem: storing 0 in location 1079
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1080
9999 mem: clearing free
9999 mem: storing 0 in location 1078
9999 mem: automatically abandoning 1069
9999 abandon: updating refcounts inside 1069: (array number)
9999 abandon: saving 1069 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1038
9999 mem: storing 1038 in location 1004
 105 run: restart {buffer-routine: "number"}
9999 mem: location 1008 is 2
 105 run: wait-for-routine {buffer-routine: "number"}
9999 mem: location 1008 is 2
9998 run: waiting for routine 2
9990 schedule: read_2/buffer-lines
 105 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 1
9999 mem: storing 1 in location 101067
 105 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 101068 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 101068
 105 run: {result: "character"} <- index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9998 run: base address is 1024
9999 mem: location 101067 is 1
9998 run: address to copy is 1026
9998 run: its type is character
9999 mem: location 1026 is 98
9999 mem: storing 98 in location 101069
 105 run: {empty: ("address" "character")} <- new {character: "type"}
9999 mem: allocating size 2
9999 abandon: picking up space from free-list of size 2
9999 mem: new alloc from free list: 101080
9999 mem: location 101070 is 0
9999 mem: incrementing refcount of 101080: 0 -> 1
9999 mem: storing 101080 in location 101070
 105 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}, {empty: ("address" "character"), "lookup": ()}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: location 101067 is 1
9998 run: address to copy to is 1026
9999 mem: location 101070 is 101080
9999 mem: skipping refcount at 101080
9999 mem: location 101081 is 0
9999 mem: storing 0 in location 1026
 105 run: {full: "number"} <- add {full: "number"}, {1: "literal"}
9999 mem: location 101067 is 1
9999 mem: storing 2 in location 101067
 105 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 101071
 105 run: {at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}
9999 mem: location 101067 is 2
9999 mem: location 101071 is 11
9999 mem: storing 0 in location 101072
 105 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101072 is 0
9998 run: jumping to instruction 28
 105 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}, {full: "number"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101067 is 2
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1019
9999 mem: storing 2 in location 1019
 105 run: reply {result: "character"}, {fail?: "boolean"}, {in: ("address" "source" "character"), "same-as-ingredient": "0"}
9999 mem: location 101069 is 98
9999 mem: location 101061 is 0
9999 mem: location 101060 is 1036
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 3 -> 2
9999 mem: storing 0 in location 101062
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 101063
9999 mem: clearing closed?:boolean
9999 mem: storing 0 in location 101064
9999 mem: clearing empty-result:address:_elem
9999 mem: location 101065 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101065
9999 mem: clearing free-address:location
9999 mem: storing 0 in location 101066
9999 mem: clearing full:number
9999 mem: storing 0 in location 101067
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 101068
9999 mem: clearing empty:address:_elem
9999 mem: location 101070 is 101080
9999 mem: skipping refcount at 101080
9999 mem: decrementing refcount of 101080: 1 -> 0
9999 mem: automatically abandoning 101080
9999 abandon: updating refcounts inside 101080: character
9999 abandon: saving 101080 in free-list of size 2
9999 mem: storing 0 in location 101070
9999 mem: clearing full
9999 mem: storing 0 in location 101067
9999 mem: clearing len:number
9999 mem: storing 0 in location 101071
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101072
9999 mem: clearing full
9999 mem: storing 0 in location 101067
9999 mem: automatically abandoning 101057
9999 abandon: updating refcounts inside 101057: (array number)
9999 abandon: saving 101057 in free-list of size 16
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 98
9998 run: result 1 is 0
9998 run: result 2 is 1036
9999 mem: storing 98 in location 101007
9999 mem: storing 0 in location 101005
9999 mem: storing 1036 in location 101003
 104 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 101005 is 0
9998 run: jump-if fell through
 104 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 101007 is 98
9999 mem: storing 0 in location 101008
 104 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 101008 is 0
9998 run: jumping to instruction 21
 104 run: {line: ("address" "buffer")} <- append_2 {line: ("address" "buffer")}, {c: "character"}
9999 mem: location 101006 is 101022
9999 mem: location 101007 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 101082
9999 mem: storing 8 in location 101083
 105 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: location 101085 is 0
9999 mem: incrementing refcount of 101022: 2 -> 3
9999 mem: storing 101022 in location 101085
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 101086
 105 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 1
9999 mem: location 101024 is 101025
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101023
9998 run: its type is "number"
9999 mem: location 101023 is 1
9999 mem: storing 1 in location 101087
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 101086 is 98
9999 mem: storing 0 in location 101088
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 101088 is 0
9998 run: jumping to instruction 15
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "buffer")}
9999 mem: location 101085 is 101022
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 101092
9999 mem: storing 6 in location 101093
 106 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: location 101095 is 0
9999 mem: incrementing refcount of 101022: 3 -> 4
9999 mem: storing 101022 in location 101095
 106 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 1
9999 mem: location 101024 is 101025
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101023
9998 run: its type is "number"
9999 mem: location 101023 is 1
9999 mem: storing 1 in location 101096
 106 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 1
9999 mem: location 101024 is 101025
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101024
9998 run: its type is ("address" "array" "character")
9999 mem: location 101024 is 101025
9999 mem: location 101097 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101097
 106 run: {capacity: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101097 is 101025
9999 mem: skipping refcount at 101025
9999 mem: storing 30 in location 101098
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 101096 is 1
9999 mem: location 101098 is 30
9999 mem: storing 0 in location 101099
 106 run: reply {result: "boolean"}
9999 mem: location 101099 is 0
9999 mem: clearing in:address:buffer
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: decrementing refcount of 101022: 4 -> 3
9999 mem: storing 0 in location 101095
9999 mem: clearing len:number
9999 mem: storing 0 in location 101096
9999 mem: clearing s:address:array:character
9999 mem: location 101097 is 101025
9999 mem: skipping refcount at 101025
9999 mem: decrementing refcount of 101025: 2 -> 1
9999 mem: storing 0 in location 101097
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 101098
9999 mem: automatically abandoning 101092
9999 abandon: updating refcounts inside 101092: (array number)
9999 abandon: saving 101092 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101090
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 101090 is 0
9998 run: jumping to instruction 20
 105 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 1
9999 mem: location 101024 is 101025
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101024
9998 run: its type is ("address" "array" "character")
9999 mem: location 101024 is 101025
9999 mem: location 101091 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101091
 105 run: {s: ("address" "array" "character"), "lookup": ()} <- put-index {s: ("address" "array" "character"), "lookup": ()}, {len: "number"}, {c: "character"}
9999 mem: location 101091 is 101025
9999 mem: skipping refcount at 101025
9999 mem: location 101087 is 1
9998 run: address to copy to is 101028
9999 mem: location 101086 is 98
9999 mem: storing 98 in location 101028
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 101087 is 1
9999 mem: storing 2 in location 101087
 105 run: {in: ("address" "buffer"), "lookup": ()} <- put {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 1
9999 mem: location 101024 is 101025
9999 mem: location 101087 is 2
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy to is 101023
9999 mem: storing 2 in location 101023
 105 run: reply {in: ("address" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 101085 is 101022
9999 mem: clearing c:character
9999 mem: storing 0 in location 101086
9999 mem: clearing len:number
9999 mem: storing 0 in location 101087
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 101088
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 101089
9999 mem: clearing len
9999 mem: storing 0 in location 101087
9999 mem: clearing full?:boolean
9999 mem: storing 0 in location 101090
9999 mem: clearing s:address:array:character
9999 mem: location 101091 is 101025
9999 mem: skipping refcount at 101025
9999 mem: decrementing refcount of 101025: 2 -> 1
9999 mem: storing 0 in location 101091
9999 mem: clearing len
9999 mem: storing 0 in location 101087
9999 mem: automatically abandoning 101082
9999 abandon: updating refcounts inside 101082: (array number)
9999 abandon: saving 101082 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101022
9999 mem: storing 101022 in location 101006
 104 run: {line-done?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 101007 is 98
9999 mem: storing 0 in location 101011
 104 run: jump-if {line-done?: "boolean"}, {: "offset"}
9999 mem: location 101011 is 0
9998 run: jump-if fell through
 104 run: jump {: "offset"}
9998 run: jumping to instruction 7
 104 run: {c: "character"}, {eof?: "boolean"}, {in: ("address" "source" "character")} <- read_2 {in: ("address" "source" "character")}
9999 mem: location 101003 is 1036
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 abandon: picking up space from free-list of size 16
9999 mem: new alloc from free list: 101057
9999 mem: storing 14 in location 101058
 105 run: {in: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101060 is 0
9999 mem: incrementing refcount of 1036: 4 -> 5
9999 mem: storing 1036 in location 101060
 105 run: {fail?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 101061
 105 run: {chan: ("address" "channel" "character")} <- get {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1037 is 1018
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9998 run: address to copy is 1037
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1037 is 1018
9999 mem: location 101062 is 0
9999 mem: incrementing refcount of 1018: 2 -> 3
9999 mem: storing 1018 in location 101062
 105 run: {empty?: "boolean"} <- channel-empty?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101062 is 1018
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 101073
9999 mem: storing 5 in location 101074
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101076 is 0
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 101076
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 2
9999 mem: storing 2 in location 101077
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 2
9999 mem: storing 2 in location 101078
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 101077 is 2
9999 mem: location 101078 is 2
9999 mem: storing 1 in location 101079
 106 run: reply {result: "boolean"}
9999 mem: location 101079 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 101076
9999 mem: clearing full:number
9999 mem: storing 0 in location 101077
9999 mem: clearing free:number
9999 mem: storing 0 in location 101078
9999 mem: automatically abandoning 101073
9999 abandon: updating refcounts inside 101073: (array number)
9999 abandon: saving 101073 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101063
 105 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 101063 is 1
9998 run: jump-unless fell through
 105 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1022
9998 run: its type is "boolean"
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 101064
 105 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101064 is 0
9998 run: jumping to instruction 13
 105 run: {free-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 101066
 105 run: wait-for-location {free-address: "location"}
9999 mem: location 101066 is 1020
9998 run: waiting for location 1020 to change from 2
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9999 mem: location 1006 is 1040
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1062
9999 mem: storing 5 in location 1063
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1065 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 1065
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 1066
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 0
9999 mem: storing 0 in location 1067
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: storing 1 in location 1068
 106 run: reply {result: "boolean"}
9999 mem: location 1068 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 1065
9999 mem: clearing full:number
9999 mem: storing 0 in location 1066
9999 mem: clearing free:number
9999 mem: storing 0 in location 1067
9999 mem: automatically abandoning 1062
9999 abandon: updating refcounts inside 1062: (array number)
9999 abandon: saving 1062 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 1007
 105 run: assert {empty?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"}
9999 mem: location 1007 is 1
 105 run: {sink: ("address" "sink" "character")} <- write_5 {sink: ("address" "sink" "character")}, {10: "literal", "newline": ()}
9999 mem: location 1004 is 1038
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1069
9999 mem: storing 10 in location 1070
 106 run: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1072 is 0
9999 mem: incrementing refcount of 1038: 3 -> 4
9999 mem: storing 1038 in location 1072
 106 run: {val: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1073
 106 run: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1072 is 1038
9999 mem: skipping refcount at 1038
9999 mem: location 1039 is 1018
9999 mem: location 1072 is 1038
9999 mem: skipping refcount at 1038
9998 run: address to copy is 1039
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1039 is 1018
9999 mem: location 1074 is 0
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 1074
 106 run: {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9999 mem: location 1074 is 1018
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1081
9999 mem: storing 7 in location 1082
 107 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1084 is 0
9999 mem: incrementing refcount of 1018: 4 -> 5
9999 mem: storing 1018 in location 1084
 107 run: {tmp: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 2
9999 mem: storing 2 in location 1085
 107 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 1085 is 2
9999 mem: storing 3 in location 1085
 107 run: {len: "number"} <- capacity_2 {chan: ("address" "channel" "character")}
9999 mem: location 1084 is 1018
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1090
9999 mem: storing 4 in location 1091
 108 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1093 is 0
9999 mem: incrementing refcount of 1018: 5 -> 6
9999 mem: storing 1018 in location 1093
 108 run: {q: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 1094 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 1094
 108 run: {result: "number"} <- length {q: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1094 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 1095
 108 run: reply {result: "number"}
9999 mem: location 1095 is 11
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1093 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 6 -> 5
9999 mem: storing 0 in location 1093
9999 mem: clearing q:address:array:_elem
9999 mem: location 1094 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 1094
9999 mem: automatically abandoning 1090
9999 abandon: updating refcounts inside 1090: (array number)
9999 abandon: saving 1090 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1086
 107 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 1085 is 3
9999 mem: location 1086 is 11
9999 mem: storing 0 in location 1087
 107 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1087 is 0
9998 run: jumping to instruction 9
 107 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 2
9999 mem: storing 2 in location 1088
 107 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 1088 is 2
9999 mem: location 1085 is 3
9999 mem: storing 0 in location 1089
 107 run: reply {result: "boolean"}
9999 mem: location 1089 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1084 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 5 -> 4
9999 mem: storing 0 in location 1084
9999 mem: clearing tmp:number
9999 mem: storing 0 in location 1085
9999 mem: clearing tmp
9999 mem: storing 0 in location 1085
9999 mem: clearing len:number
9999 mem: storing 0 in location 1086
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1087
9999 mem: clearing tmp
9999 mem: storing 0 in location 1085
9999 mem: clearing full:number
9999 mem: storing 0 in location 1088
9999 mem: automatically abandoning 1081
9999 abandon: updating refcounts inside 1081: (array number)
9999 abandon: saving 1081 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1075
 106 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 1075 is 0
9998 run: jumping to instruction 10
 106 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 1077 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 1077
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 2
9999 mem: storing 2 in location 1078
 106 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: location 1078 is 2
9998 run: address to copy to is 1027
9999 mem: location 1073 is 10
9999 mem: storing 10 in location 1027
 106 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 1078 is 2
9999 mem: storing 3 in location 1078
 106 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 1079
 106 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 1078 is 3
9999 mem: location 1079 is 11
9999 mem: storing 0 in location 1080
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1080 is 0
9998 run: jumping to instruction 20
 106 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 1078 is 3
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1020
9999 mem: storing 3 in location 1020
 106 run: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9999 mem: location 1072 is 1038
9999 mem: clearing val:_elem
9999 mem: storing 0 in location 1073
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1074 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 1074
9999 mem: clearing full:boolean
9999 mem: storing 0 in location 1075
9999 mem: clearing full-address:location
9999 mem: storing 0 in location 1076
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 1077 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 1077
9999 mem: clearing free:number
9999 mem: storing 0 in location 1078
9999 mem: clearing free
9999 mem: storing 0 in location 1078
9999 mem: clearing len:number
9999 mem: storing 0 in location 1079
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1080
9999 mem: clearing free
9999 mem: storing 0 in location 1078
9999 mem: automatically abandoning 1069
9999 abandon: updating refcounts inside 1069: (array number)
9999 abandon: saving 1069 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1038
9999 mem: storing 1038 in location 1004
 105 run: restart {buffer-routine: "number"}
9999 mem: location 1008 is 2
 105 run: wait-for-routine {buffer-routine: "number"}
9999 mem: location 1008 is 2
9998 run: waiting for routine 2
9990 schedule: read_2/buffer-lines
 105 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 2
9999 mem: storing 2 in location 101067
 105 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1021
9998 run: its type is ("address" "array" "character")
9999 mem: location 1021 is 1023
9999 mem: location 101068 is 0
9999 mem: incrementing refcount of 1023: 1 -> 2
9999 mem: storing 1023 in location 101068
 105 run: {result: "character"} <- index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9998 run: base address is 1024
9999 mem: location 101067 is 2
9998 run: address to copy is 1027
9998 run: its type is character
9999 mem: location 1027 is 10
9999 mem: storing 10 in location 101069
 105 run: {empty: ("address" "character")} <- new {character: "type"}
9999 mem: allocating size 2
9999 abandon: picking up space from free-list of size 2
9999 mem: new alloc from free list: 101080
9999 mem: location 101070 is 0
9999 mem: incrementing refcount of 101080: 0 -> 1
9999 mem: storing 101080 in location 101070
 105 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}, {empty: ("address" "character"), "lookup": ()}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: location 101067 is 2
9998 run: address to copy to is 1027
9999 mem: location 101070 is 101080
9999 mem: skipping refcount at 101080
9999 mem: location 101081 is 0
9999 mem: storing 0 in location 1027
 105 run: {full: "number"} <- add {full: "number"}, {1: "literal"}
9999 mem: location 101067 is 2
9999 mem: storing 3 in location 101067
 105 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: storing 11 in location 101071
 105 run: {at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}
9999 mem: location 101067 is 3
9999 mem: location 101071 is 11
9999 mem: storing 0 in location 101072
 105 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101072 is 0
9998 run: jumping to instruction 28
 105 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}, {full: "number"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 2
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101067 is 3
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1019
9999 mem: storing 3 in location 1019
 105 run: reply {result: "character"}, {fail?: "boolean"}, {in: ("address" "source" "character"), "same-as-ingredient": "0"}
9999 mem: location 101069 is 10
9999 mem: location 101061 is 0
9999 mem: location 101060 is 1036
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 3 -> 2
9999 mem: storing 0 in location 101062
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 101063
9999 mem: clearing closed?:boolean
9999 mem: storing 0 in location 101064
9999 mem: clearing empty-result:address:_elem
9999 mem: location 101065 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101065
9999 mem: clearing free-address:location
9999 mem: storing 0 in location 101066
9999 mem: clearing full:number
9999 mem: storing 0 in location 101067
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 101068 is 1023
9999 mem: skipping refcount at 1023
9999 mem: decrementing refcount of 1023: 2 -> 1
9999 mem: storing 0 in location 101068
9999 mem: clearing empty:address:_elem
9999 mem: location 101070 is 101080
9999 mem: skipping refcount at 101080
9999 mem: decrementing refcount of 101080: 1 -> 0
9999 mem: automatically abandoning 101080
9999 abandon: updating refcounts inside 101080: character
9999 abandon: saving 101080 in free-list of size 2
9999 mem: storing 0 in location 101070
9999 mem: clearing full
9999 mem: storing 0 in location 101067
9999 mem: clearing len:number
9999 mem: storing 0 in location 101071
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101072
9999 mem: clearing full
9999 mem: storing 0 in location 101067
9999 mem: automatically abandoning 101057
9999 abandon: updating refcounts inside 101057: (array number)
9999 abandon: saving 101057 in free-list of size 16
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 10
9998 run: result 1 is 0
9998 run: result 2 is 1036
9999 mem: storing 10 in location 101007
9999 mem: storing 0 in location 101005
9999 mem: storing 1036 in location 101003
 104 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 101005 is 0
9998 run: jump-if fell through
 104 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 101007 is 10
9999 mem: storing 0 in location 101008
 104 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 101008 is 0
9998 run: jumping to instruction 21
 104 run: {line: ("address" "buffer")} <- append_2 {line: ("address" "buffer")}, {c: "character"}
9999 mem: location 101006 is 101022
9999 mem: location 101007 is 10
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 101082
9999 mem: storing 8 in location 101083
 105 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: location 101085 is 0
9999 mem: incrementing refcount of 101022: 3 -> 4
9999 mem: storing 101022 in location 101085
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 101086
 105 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 2
9999 mem: location 101024 is 101025
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101023
9998 run: its type is "number"
9999 mem: location 101023 is 2
9999 mem: storing 2 in location 101087
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 101086 is 10
9999 mem: storing 0 in location 101088
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 101088 is 0
9998 run: jumping to instruction 15
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "buffer")}
9999 mem: location 101085 is 101022
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 101092
9999 mem: storing 6 in location 101093
 106 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: location 101095 is 0
9999 mem: incrementing refcount of 101022: 4 -> 5
9999 mem: storing 101022 in location 101095
 106 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 2
9999 mem: location 101024 is 101025
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101023
9998 run: its type is "number"
9999 mem: location 101023 is 2
9999 mem: storing 2 in location 101096
 106 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 2
9999 mem: location 101024 is 101025
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101024
9998 run: its type is ("address" "array" "character")
9999 mem: location 101024 is 101025
9999 mem: location 101097 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101097
 106 run: {capacity: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101097 is 101025
9999 mem: skipping refcount at 101025
9999 mem: storing 30 in location 101098
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 101096 is 2
9999 mem: location 101098 is 30
9999 mem: storing 0 in location 101099
 106 run: reply {result: "boolean"}
9999 mem: location 101099 is 0
9999 mem: clearing in:address:buffer
9999 mem: location 101095 is 101022
9999 mem: skipping refcount at 101022
9999 mem: decrementing refcount of 101022: 5 -> 4
9999 mem: storing 0 in location 101095
9999 mem: clearing len:number
9999 mem: storing 0 in location 101096
9999 mem: clearing s:address:array:character
9999 mem: location 101097 is 101025
9999 mem: skipping refcount at 101025
9999 mem: decrementing refcount of 101025: 2 -> 1
9999 mem: storing 0 in location 101097
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 101098
9999 mem: automatically abandoning 101092
9999 abandon: updating refcounts inside 101092: (array number)
9999 abandon: saving 101092 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101090
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 101090 is 0
9998 run: jumping to instruction 20
 105 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 2
9999 mem: location 101024 is 101025
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101024
9998 run: its type is ("address" "array" "character")
9999 mem: location 101024 is 101025
9999 mem: location 101091 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101091
 105 run: {s: ("address" "array" "character"), "lookup": ()} <- put-index {s: ("address" "array" "character"), "lookup": ()}, {len: "number"}, {c: "character"}
9999 mem: location 101091 is 101025
9999 mem: skipping refcount at 101025
9999 mem: location 101087 is 2
9998 run: address to copy to is 101029
9999 mem: location 101086 is 10
9999 mem: storing 10 in location 101029
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 101087 is 2
9999 mem: storing 3 in location 101087
 105 run: {in: ("address" "buffer"), "lookup": ()} <- put {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 2
9999 mem: location 101024 is 101025
9999 mem: location 101087 is 3
9999 mem: location 101085 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy to is 101023
9999 mem: storing 3 in location 101023
 105 run: reply {in: ("address" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 101085 is 101022
9999 mem: clearing c:character
9999 mem: storing 0 in location 101086
9999 mem: clearing len:number
9999 mem: storing 0 in location 101087
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 101088
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 101089
9999 mem: clearing len
9999 mem: storing 0 in location 101087
9999 mem: clearing full?:boolean
9999 mem: storing 0 in location 101090
9999 mem: clearing s:address:array:character
9999 mem: location 101091 is 101025
9999 mem: skipping refcount at 101025
9999 mem: decrementing refcount of 101025: 2 -> 1
9999 mem: storing 0 in location 101091
9999 mem: clearing len
9999 mem: storing 0 in location 101087
9999 mem: automatically abandoning 101082
9999 abandon: updating refcounts inside 101082: (array number)
9999 abandon: saving 101082 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101022
9999 mem: storing 101022 in location 101006
 104 run: {line-done?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 101007 is 10
9999 mem: storing 1 in location 101011
 104 run: jump-if {line-done?: "boolean"}, {: "offset"}
9999 mem: location 101011 is 1
9998 run: jumping to instruction 26
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 101012
 104 run: {line-contents: ("address" "array" "character")} <- get {line: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 101006 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 3
9999 mem: location 101024 is 101025
9999 mem: location 101006 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101024
9998 run: its type is ("address" "array" "character")
9999 mem: location 101024 is 101025
9999 mem: location 101013 is 0
9999 mem: incrementing refcount of 101025: 1 -> 2
9999 mem: storing 101025 in location 101013
 104 run: {max: "number"} <- get {line: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 101006 is 101022
9999 mem: skipping refcount at 101022
9999 mem: location 101023 is 3
9999 mem: location 101024 is 101025
9999 mem: location 101006 is 101022
9999 mem: skipping refcount at 101022
9998 run: address to copy is 101023
9998 run: its type is "number"
9999 mem: location 101023 is 3
9999 mem: storing 3 in location 101014
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 101012 is 0
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {line-contents: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 101013 is 101025
9999 mem: skipping refcount at 101025
9998 run: base address is 101026
9999 mem: location 101012 is 0
9998 run: address to copy is 101027
9998 run: its type is character
9999 mem: location 101027 is 97
9999 mem: storing 97 in location 101007
 104 run: {buffered-out: ("address" "sink" "character")} <- write_2 {buffered-out: ("address" "sink" "character")}, {c: "character"}
9999 mem: location 101004 is 1060
9999 mem: location 101007 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 101100
9999 mem: storing 0 in location 101100
9999 mem: storing 0 in location 101101
9999 mem: storing 0 in location 101102
9999 mem: storing 0 in location 101103
9999 mem: storing 0 in location 101104
9999 mem: storing 0 in location 101105
9999 mem: storing 0 in location 101106
9999 mem: storing 0 in location 101107
9999 mem: storing 0 in location 101108
9999 mem: storing 0 in location 101109
9999 mem: storing 0 in location 101110
9999 mem: storing 0 in location 101111
9999 mem: storing 0 in location 101112
9999 mem: storing 11 in location 101101
 105 run: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101103 is 0
9999 mem: incrementing refcount of 1060: 2 -> 3
9999 mem: storing 1060 in location 101103
 105 run: {val: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 101104
 105 run: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101103 is 1060
9999 mem: skipping refcount at 1060
9999 mem: location 1061 is 1040
9999 mem: location 101103 is 1060
9999 mem: skipping refcount at 1060
9998 run: address to copy is 1061
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1061 is 1040
9999 mem: location 101105 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 101105
 105 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1044
9998 run: its type is "boolean"
9999 mem: location 1044 is 0
9999 mem: storing 0 in location 101106
 105 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101106 is 0
9998 run: jumping to instruction 9
 105 run: {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101105 is 1040
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 101113
9999 mem: storing 0 in location 101113
9999 mem: storing 0 in location 101114
9999 mem: storing 0 in location 101115
9999 mem: storing 0 in location 101116
9999 mem: storing 0 in location 101117
9999 mem: storing 0 in location 101118
9999 mem: storing 0 in location 101119
9999 mem: storing 0 in location 101120
9999 mem: storing 0 in location 101121
9999 mem: storing 7 in location 101114
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101116 is 0
9999 mem: incrementing refcount of 1040: 3 -> 4
9999 mem: storing 1040 in location 101116
 106 run: {tmp: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 0
9999 mem: storing 0 in location 101117
 106 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 101117 is 0
9999 mem: storing 1 in location 101117
 106 run: {len: "number"} <- capacity_2 {chan: ("address" "channel" "character")}
9999 mem: location 101116 is 1040
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 101016
9999 mem: storing 4 in location 101017
 107 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101019 is 0
9999 mem: incrementing refcount of 1040: 4 -> 5
9999 mem: storing 1040 in location 101019
 107 run: {q: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1043
9998 run: its type is ("address" "array" "character")
9999 mem: location 1043 is 1045
9999 mem: location 101020 is 0
9999 mem: incrementing refcount of 1045: 1 -> 2
9999 mem: storing 1045 in location 101020
 107 run: {result: "number"} <- length {q: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101020 is 1045
9999 mem: skipping refcount at 1045
9999 mem: storing 11 in location 101021
 107 run: reply {result: "number"}
9999 mem: location 101021 is 11
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 5 -> 4
9999 mem: storing 0 in location 101019
9999 mem: clearing q:address:array:_elem
9999 mem: location 101020 is 1045
9999 mem: skipping refcount at 1045
9999 mem: decrementing refcount of 1045: 2 -> 1
9999 mem: storing 0 in location 101020
9999 mem: automatically abandoning 101016
9999 abandon: updating refcounts inside 101016: (array number)
9999 abandon: saving 101016 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 101118
 106 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 101117 is 1
9999 mem: location 101118 is 11
9999 mem: storing 0 in location 101119
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101119 is 0
9998 run: jumping to instruction 9
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 101120
 106 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 101120 is 0
9999 mem: location 101117 is 1
9999 mem: storing 0 in location 101121
 106 run: reply {result: "boolean"}
9999 mem: location 101121 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 4 -> 3
9999 mem: storing 0 in location 101116
9999 mem: clearing tmp:number
9999 mem: storing 0 in location 101117
9999 mem: clearing tmp
9999 mem: storing 0 in location 101117
9999 mem: clearing len:number
9999 mem: storing 0 in location 101118
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101119
9999 mem: clearing tmp
9999 mem: storing 0 in location 101117
9999 mem: clearing full:number
9999 mem: storing 0 in location 101120
9999 mem: automatically abandoning 101113
9999 abandon: updating refcounts inside 101113: (array number)
9999 abandon: saving 101113 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101107
 105 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 101107 is 0
9998 run: jumping to instruction 15
 105 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1043
9998 run: its type is ("address" "array" "character")
9999 mem: location 1043 is 1045
9999 mem: location 101109 is 0
9999 mem: incrementing refcount of 1045: 1 -> 2
9999 mem: storing 1045 in location 101109
 105 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 0
9999 mem: storing 0 in location 101110
 105 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: location 101110 is 0
9998 run: address to copy to is 1047
9999 mem: location 101104 is 97
9999 mem: storing 97 in location 1047
 105 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 101110 is 0
9999 mem: storing 1 in location 101110
 105 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: storing 11 in location 101111
 105 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 101110 is 1
9999 mem: location 101111 is 11
9999 mem: storing 0 in location 101112
 105 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101112 is 0
9998 run: jumping to instruction 25
 105 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101110 is 1
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy to is 1042
9999 mem: storing 1 in location 1042
 105 run: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9999 mem: location 101103 is 1060
9999 mem: clearing val:_elem
9999 mem: storing 0 in location 101104
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 101105
9999 mem: clearing closed?:boolean
9999 mem: storing 0 in location 101106
9999 mem: clearing full:boolean
9999 mem: storing 0 in location 101107
9999 mem: clearing full-address:location
9999 mem: storing 0 in location 101108
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: decrementing refcount of 1045: 2 -> 1
9999 mem: storing 0 in location 101109
9999 mem: clearing free:number
9999 mem: storing 0 in location 101110
9999 mem: clearing free
9999 mem: storing 0 in location 101110
9999 mem: clearing len:number
9999 mem: storing 0 in location 101111
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101112
9999 mem: clearing free
9999 mem: storing 0 in location 101110
9999 mem: automatically abandoning 101100
9999 abandon: updating refcounts inside 101100: (array number)
9999 abandon: saving 101100 in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1060
9999 mem: storing 1060 in location 101004
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 101012 is 0
9999 mem: storing 1 in location 101012
 104 run: jump {: "offset"}
9998 run: jumping to instruction 31
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 101012 is 1
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {line-contents: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 101013 is 101025
9999 mem: skipping refcount at 101025
9998 run: base address is 101026
9999 mem: location 101012 is 1
9998 run: address to copy is 101028
9998 run: its type is character
9999 mem: location 101028 is 98
9999 mem: storing 98 in location 101007
 104 run: {buffered-out: ("address" "sink" "character")} <- write_2 {buffered-out: ("address" "sink" "character")}, {c: "character"}
9999 mem: location 101004 is 1060
9999 mem: location 101007 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
9999 mem: new alloc from free list: 101100
9999 mem: storing 11 in location 101101
 105 run: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101103 is 0
9999 mem: incrementing refcount of 1060: 3 -> 4
9999 mem: storing 1060 in location 101103
 105 run: {val: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 101104
 105 run: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101103 is 1060
9999 mem: skipping refcount at 1060
9999 mem: location 1061 is 1040
9999 mem: location 101103 is 1060
9999 mem: skipping refcount at 1060
9998 run: address to copy is 1061
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1061 is 1040
9999 mem: location 101105 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 101105
 105 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 1
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1044
9998 run: its type is "boolean"
9999 mem: location 1044 is 0
9999 mem: storing 0 in location 101106
 105 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101106 is 0
9998 run: jumping to instruction 9
 105 run: {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101105 is 1040
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 101113
9999 mem: storing 7 in location 101114
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101116 is 0
9999 mem: incrementing refcount of 1040: 3 -> 4
9999 mem: storing 1040 in location 101116
 106 run: {tmp: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 1
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 1
9999 mem: storing 1 in location 101117
 106 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 101117 is 1
9999 mem: storing 2 in location 101117
 106 run: {len: "number"} <- capacity_2 {chan: ("address" "channel" "character")}
9999 mem: location 101116 is 1040
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 101016
9999 mem: storing 4 in location 101017
 107 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101019 is 0
9999 mem: incrementing refcount of 1040: 4 -> 5
9999 mem: storing 1040 in location 101019
 107 run: {q: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 1
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1043
9998 run: its type is ("address" "array" "character")
9999 mem: location 1043 is 1045
9999 mem: location 101020 is 0
9999 mem: incrementing refcount of 1045: 1 -> 2
9999 mem: storing 1045 in location 101020
 107 run: {result: "number"} <- length {q: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101020 is 1045
9999 mem: skipping refcount at 1045
9999 mem: storing 11 in location 101021
 107 run: reply {result: "number"}
9999 mem: location 101021 is 11
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 5 -> 4
9999 mem: storing 0 in location 101019
9999 mem: clearing q:address:array:_elem
9999 mem: location 101020 is 1045
9999 mem: skipping refcount at 1045
9999 mem: decrementing refcount of 1045: 2 -> 1
9999 mem: storing 0 in location 101020
9999 mem: automatically abandoning 101016
9999 abandon: updating refcounts inside 101016: (array number)
9999 abandon: saving 101016 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 101118
 106 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 101117 is 2
9999 mem: location 101118 is 11
9999 mem: storing 0 in location 101119
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101119 is 0
9998 run: jumping to instruction 9
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 1
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 101120
 106 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 101120 is 0
9999 mem: location 101117 is 2
9999 mem: storing 0 in location 101121
 106 run: reply {result: "boolean"}
9999 mem: location 101121 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 4 -> 3
9999 mem: storing 0 in location 101116
9999 mem: clearing tmp:number
9999 mem: storing 0 in location 101117
9999 mem: clearing tmp
9999 mem: storing 0 in location 101117
9999 mem: clearing len:number
9999 mem: storing 0 in location 101118
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101119
9999 mem: clearing tmp
9999 mem: storing 0 in location 101117
9999 mem: clearing full:number
9999 mem: storing 0 in location 101120
9999 mem: automatically abandoning 101113
9999 abandon: updating refcounts inside 101113: (array number)
9999 abandon: saving 101113 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101107
 105 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 101107 is 0
9998 run: jumping to instruction 15
 105 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 1
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1043
9998 run: its type is ("address" "array" "character")
9999 mem: location 1043 is 1045
9999 mem: location 101109 is 0
9999 mem: incrementing refcount of 1045: 1 -> 2
9999 mem: storing 1045 in location 101109
 105 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 1
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 1
9999 mem: storing 1 in location 101110
 105 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: location 101110 is 1
9998 run: address to copy to is 1048
9999 mem: location 101104 is 98
9999 mem: storing 98 in location 1048
 105 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 101110 is 1
9999 mem: storing 2 in location 101110
 105 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: storing 11 in location 101111
 105 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 101110 is 2
9999 mem: location 101111 is 11
9999 mem: storing 0 in location 101112
 105 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101112 is 0
9998 run: jumping to instruction 25
 105 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 1
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101110 is 2
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy to is 1042
9999 mem: storing 2 in location 1042
 105 run: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9999 mem: location 101103 is 1060
9999 mem: clearing val:_elem
9999 mem: storing 0 in location 101104
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 101105
9999 mem: clearing closed?:boolean
9999 mem: storing 0 in location 101106
9999 mem: clearing full:boolean
9999 mem: storing 0 in location 101107
9999 mem: clearing full-address:location
9999 mem: storing 0 in location 101108
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: decrementing refcount of 1045: 2 -> 1
9999 mem: storing 0 in location 101109
9999 mem: clearing free:number
9999 mem: storing 0 in location 101110
9999 mem: clearing free
9999 mem: storing 0 in location 101110
9999 mem: clearing len:number
9999 mem: storing 0 in location 101111
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101112
9999 mem: clearing free
9999 mem: storing 0 in location 101110
9999 mem: automatically abandoning 101100
9999 abandon: updating refcounts inside 101100: (array number)
9999 abandon: saving 101100 in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1060
9999 mem: storing 1060 in location 101004
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 101012 is 1
9999 mem: storing 2 in location 101012
 104 run: jump {: "offset"}
9998 run: jumping to instruction 31
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 101012 is 2
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {line-contents: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 101013 is 101025
9999 mem: skipping refcount at 101025
9998 run: base address is 101026
9999 mem: location 101012 is 2
9998 run: address to copy is 101029
9998 run: its type is character
9999 mem: location 101029 is 10
9999 mem: storing 10 in location 101007
 104 run: {buffered-out: ("address" "sink" "character")} <- write_2 {buffered-out: ("address" "sink" "character")}, {c: "character"}
9999 mem: location 101004 is 1060
9999 mem: location 101007 is 10
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
9999 mem: new alloc from free list: 101100
9999 mem: storing 11 in location 101101
 105 run: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101103 is 0
9999 mem: incrementing refcount of 1060: 4 -> 5
9999 mem: storing 1060 in location 101103
 105 run: {val: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 101104
 105 run: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101103 is 1060
9999 mem: skipping refcount at 1060
9999 mem: location 1061 is 1040
9999 mem: location 101103 is 1060
9999 mem: skipping refcount at 1060
9998 run: address to copy is 1061
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1061 is 1040
9999 mem: location 101105 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 101105
 105 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 2
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1044
9998 run: its type is "boolean"
9999 mem: location 1044 is 0
9999 mem: storing 0 in location 101106
 105 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101106 is 0
9998 run: jumping to instruction 9
 105 run: {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101105 is 1040
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 101113
9999 mem: storing 7 in location 101114
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101116 is 0
9999 mem: incrementing refcount of 1040: 3 -> 4
9999 mem: storing 1040 in location 101116
 106 run: {tmp: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 2
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 2
9999 mem: storing 2 in location 101117
 106 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 101117 is 2
9999 mem: storing 3 in location 101117
 106 run: {len: "number"} <- capacity_2 {chan: ("address" "channel" "character")}
9999 mem: location 101116 is 1040
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 101016
9999 mem: storing 4 in location 101017
 107 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101019 is 0
9999 mem: incrementing refcount of 1040: 4 -> 5
9999 mem: storing 1040 in location 101019
 107 run: {q: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 2
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1043
9998 run: its type is ("address" "array" "character")
9999 mem: location 1043 is 1045
9999 mem: location 101020 is 0
9999 mem: incrementing refcount of 1045: 1 -> 2
9999 mem: storing 1045 in location 101020
 107 run: {result: "number"} <- length {q: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101020 is 1045
9999 mem: skipping refcount at 1045
9999 mem: storing 11 in location 101021
 107 run: reply {result: "number"}
9999 mem: location 101021 is 11
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101019 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 5 -> 4
9999 mem: storing 0 in location 101019
9999 mem: clearing q:address:array:_elem
9999 mem: location 101020 is 1045
9999 mem: skipping refcount at 1045
9999 mem: decrementing refcount of 1045: 2 -> 1
9999 mem: storing 0 in location 101020
9999 mem: automatically abandoning 101016
9999 abandon: updating refcounts inside 101016: (array number)
9999 abandon: saving 101016 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 101118
 106 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 101117 is 3
9999 mem: location 101118 is 11
9999 mem: storing 0 in location 101119
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101119 is 0
9998 run: jumping to instruction 9
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 2
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 101120
 106 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 101120 is 0
9999 mem: location 101117 is 3
9999 mem: storing 0 in location 101121
 106 run: reply {result: "boolean"}
9999 mem: location 101121 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101116 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 4 -> 3
9999 mem: storing 0 in location 101116
9999 mem: clearing tmp:number
9999 mem: storing 0 in location 101117
9999 mem: clearing tmp
9999 mem: storing 0 in location 101117
9999 mem: clearing len:number
9999 mem: storing 0 in location 101118
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101119
9999 mem: clearing tmp
9999 mem: storing 0 in location 101117
9999 mem: clearing full:number
9999 mem: storing 0 in location 101120
9999 mem: automatically abandoning 101113
9999 abandon: updating refcounts inside 101113: (array number)
9999 abandon: saving 101113 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101107
 105 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 101107 is 0
9998 run: jumping to instruction 15
 105 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 2
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1043
9998 run: its type is ("address" "array" "character")
9999 mem: location 1043 is 1045
9999 mem: location 101109 is 0
9999 mem: incrementing refcount of 1045: 1 -> 2
9999 mem: storing 1045 in location 101109
 105 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 2
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 2
9999 mem: storing 2 in location 101110
 105 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: location 101110 is 2
9998 run: address to copy to is 1049
9999 mem: location 101104 is 10
9999 mem: storing 10 in location 1049
 105 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 101110 is 2
9999 mem: storing 3 in location 101110
 105 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: storing 11 in location 101111
 105 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 101110 is 3
9999 mem: location 101111 is 11
9999 mem: storing 0 in location 101112
 105 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101112 is 0
9998 run: jumping to instruction 25
 105 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 2
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 101110 is 3
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy to is 1042
9999 mem: storing 3 in location 1042
 105 run: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9999 mem: location 101103 is 1060
9999 mem: clearing val:_elem
9999 mem: storing 0 in location 101104
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101105 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 101105
9999 mem: clearing closed?:boolean
9999 mem: storing 0 in location 101106
9999 mem: clearing full:boolean
9999 mem: storing 0 in location 101107
9999 mem: clearing full-address:location
9999 mem: storing 0 in location 101108
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 101109 is 1045
9999 mem: skipping refcount at 1045
9999 mem: decrementing refcount of 1045: 2 -> 1
9999 mem: storing 0 in location 101109
9999 mem: clearing free:number
9999 mem: storing 0 in location 101110
9999 mem: clearing free
9999 mem: storing 0 in location 101110
9999 mem: clearing len:number
9999 mem: storing 0 in location 101111
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101112
9999 mem: clearing free
9999 mem: storing 0 in location 101110
9999 mem: automatically abandoning 101100
9999 abandon: updating refcounts inside 101100: (array number)
9999 abandon: saving 101100 in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1060
9999 mem: storing 1060 in location 101004
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 101012 is 2
9999 mem: storing 3 in location 101012
 104 run: jump {: "offset"}
9998 run: jumping to instruction 31
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 101012 is 3
9999 mem: location 101014 is 3
9999 mem: storing 1 in location 101015
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 101015 is 1
9998 run: jumping to instruction 37
 104 run: jump-unless {eof?: "boolean"}, {: "offset"}
9999 mem: location 101005 is 0
9998 run: jumping to instruction 42
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {line: ("address" "buffer")} <- new-buffer {30: "literal"}
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 101016
9999 mem: storing 4 in location 101017
 105 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 101019
 105 run: {result: ("address" "buffer")} <- new {buffer: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 101122
9999 mem: storing 0 in location 101122
9999 mem: storing 0 in location 101123
9999 mem: storing 0 in location 101124
9999 mem: location 101020 is 0
9999 mem: incrementing refcount of 101122: 0 -> 1
9999 mem: storing 101122 in location 101020
 105 run: {result: ("address" "buffer"), "lookup": ()} <- put {result: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {0: "literal"}
9999 mem: location 101020 is 101122
9999 mem: skipping refcount at 101122
9999 mem: location 101123 is 0
9999 mem: location 101124 is 0
9999 mem: location 101020 is 101122
9999 mem: skipping refcount at 101122
9998 run: address to copy to is 101123
9999 mem: storing 0 in location 101123
 105 run: {data: ("address" "array" "character")} <- new {character: "type"}, {capacity: "number"}
9999 mem: location 101019 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 101125
9999 mem: storing 0 in location 101125
9999 mem: storing 0 in location 101126
9999 mem: storing 0 in location 101127
9999 mem: storing 0 in location 101128
9999 mem: storing 0 in location 101129
9999 mem: storing 0 in location 101130
9999 mem: storing 0 in location 101131
9999 mem: storing 0 in location 101132
9999 mem: storing 0 in location 101133
9999 mem: storing 0 in location 101134
9999 mem: storing 0 in location 101135
9999 mem: storing 0 in location 101136
9999 mem: storing 0 in location 101137
9999 mem: storing 0 in location 101138
9999 mem: storing 0 in location 101139
9999 mem: storing 0 in location 101140
9999 mem: storing 0 in location 101141
9999 mem: storing 0 in location 101142
9999 mem: storing 0 in location 101143
9999 mem: storing 0 in location 101144
9999 mem: storing 0 in location 101145
9999 mem: storing 0 in location 101146
9999 mem: storing 0 in location 101147
9999 mem: storing 0 in location 101148
9999 mem: storing 0 in location 101149
9999 mem: storing 0 in location 101150
9999 mem: storing 0 in location 101151
9999 mem: storing 0 in location 101152
9999 mem: storing 0 in location 101153
9999 mem: storing 0 in location 101154
9999 mem: storing 0 in location 101155
9999 mem: storing 0 in location 101156
9999 mem: storing 30 in location 101126
9999 mem: location 101021 is 0
9999 mem: incrementing refcount of 101125: 0 -> 1
9999 mem: storing 101125 in location 101021
 105 run: {result: ("address" "buffer"), "lookup": ()} <- put {result: ("address" "buffer"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "character")}
9999 mem: location 101020 is 101122
9999 mem: skipping refcount at 101122
9999 mem: location 101123 is 0
9999 mem: location 101124 is 0
9999 mem: location 101021 is 101125
9999 mem: location 101020 is 101122
9999 mem: skipping refcount at 101122
9998 run: address to copy to is 101124
9999 mem: location 101124 is 0
9999 mem: incrementing refcount of 101125: 1 -> 2
9999 mem: storing 101125 in location 101124
 105 run: return {result: ("address" "buffer")}
9999 mem: location 101020 is 101122
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 101019
9999 mem: clearing data:address:array:character
9999 mem: location 101021 is 101125
9999 mem: skipping refcount at 101125
9999 mem: decrementing refcount of 101125: 2 -> 1
9999 mem: storing 0 in location 101021
9999 mem: automatically abandoning 101016
9999 abandon: updating refcounts inside 101016: (array number)
9999 abandon: saving 101016 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101122
9999 mem: storing 101122 in location 101006
 104 run: {c: "character"}, {eof?: "boolean"}, {in: ("address" "source" "character")} <- read_2 {in: ("address" "source" "character")}
9999 mem: location 101003 is 1036
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 abandon: picking up space from free-list of size 16
9999 mem: new alloc from free list: 101057
9999 mem: storing 14 in location 101058
 105 run: {in: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101060 is 0
9999 mem: incrementing refcount of 1036: 5 -> 6
9999 mem: storing 1036 in location 101060
 105 run: {fail?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 101061
 105 run: {chan: ("address" "channel" "character")} <- get {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1037 is 1018
9999 mem: location 101060 is 1036
9999 mem: skipping refcount at 1036
9998 run: address to copy is 1037
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1037 is 1018
9999 mem: location 101062 is 0
9999 mem: incrementing refcount of 1018: 2 -> 3
9999 mem: storing 1018 in location 101062
 105 run: {empty?: "boolean"} <- channel-empty?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101062 is 1018
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 101073
9999 mem: storing 5 in location 101074
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101076 is 0
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 101076
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 3
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is "number"
9999 mem: location 1019 is 3
9999 mem: storing 3 in location 101077
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 3
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9998 run: its type is "number"
9999 mem: location 1020 is 3
9999 mem: storing 3 in location 101078
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 101077 is 3
9999 mem: location 101078 is 3
9999 mem: storing 1 in location 101079
 106 run: reply {result: "boolean"}
9999 mem: location 101079 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101076 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 101076
9999 mem: clearing full:number
9999 mem: storing 0 in location 101077
9999 mem: clearing free:number
9999 mem: storing 0 in location 101078
9999 mem: automatically abandoning 101073
9999 abandon: updating refcounts inside 101073: (array number)
9999 abandon: saving 101073 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101063
 105 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 101063 is 1
9998 run: jump-unless fell through
 105 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 3
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1022
9998 run: its type is "boolean"
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 101064
 105 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101064 is 0
9998 run: jumping to instruction 13
 105 run: {free-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 3
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1023
9999 mem: location 1022 is 0
9999 mem: location 101062 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 101066
 105 run: wait-for-location {free-address: "location"}
9999 mem: location 101066 is 1020
9998 run: waiting for location 1020 to change from 3
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: {empty?: "boolean"} <- channel-empty?_2 {buffered-chan: ("address" "channel" "character")}
9999 mem: location 1006 is 1040
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1062
9999 mem: storing 5 in location 1063
 106 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1065 is 0
9999 mem: incrementing refcount of 1040: 2 -> 3
9999 mem: storing 1040 in location 1065
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 3
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1041
9998 run: its type is "number"
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 1066
 106 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: location 1041 is 0
9999 mem: location 1042 is 3
9999 mem: location 1043 is 1045
9999 mem: location 1044 is 0
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9998 run: address to copy is 1042
9998 run: its type is "number"
9999 mem: location 1042 is 3
9999 mem: storing 3 in location 1067
 106 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 1066 is 0
9999 mem: location 1067 is 3
9999 mem: storing 0 in location 1068
 106 run: reply {result: "boolean"}
9999 mem: location 1068 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1065 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 3 -> 2
9999 mem: storing 0 in location 1065
9999 mem: clearing full:number
9999 mem: storing 0 in location 1066
9999 mem: clearing free:number
9999 mem: storing 0 in location 1067
9999 mem: automatically abandoning 1062
9999 abandon: updating refcounts inside 1062: (array number)
9999 abandon: saving 1062 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1007
 105 run: {data-emitted?: "boolean"} <- not {empty?: "boolean"}
9999 mem: location 1007 is 0
9999 mem: storing 1 in location 1009
 105 run: assert {data-emitted?: "boolean"}, {" \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"}
9999 mem: location 1009 is 1
 105 run: trace {1: "literal"}, {"test": "literal-string"}, {"reached end": "literal-string"}
   1 test: reached end
 105 run: reply 
9999 mem: clearing source:address:source:character
9999 mem: location 1003 is 1036
9999 mem: skipping refcount at 1036
9999 mem: decrementing refcount of 1036: 6 -> 5
9999 mem: storing 0 in location 1003
9999 mem: clearing sink:address:sink:character
9999 mem: location 1004 is 1038
9999 mem: skipping refcount at 1038
9999 mem: decrementing refcount of 1038: 4 -> 3
9999 mem: storing 0 in location 1004
9999 mem: clearing _
9999 mem: clearing buffered-stdin:address:sink:character/buffered-stdin
9999 mem: location 1005 is 1060
9999 mem: skipping refcount at 1060
9999 mem: decrementing refcount of 1060: 5 -> 4
9999 mem: storing 0 in location 1005
9999 mem: clearing buffered-chan:address:channel:character
9999 mem: location 1006 is 1040
9999 mem: skipping refcount at 1040
9999 mem: decrementing refcount of 1040: 2 -> 1
9999 mem: storing 0 in location 1006
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 1007
9999 mem: clearing buffer-routine:number
9999 mem: storing 0 in location 1008
9999 mem: clearing empty?
9999 mem: storing 0 in location 1007
9999 mem: clearing sink
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
9999 mem: clearing empty?
9999 mem: storing 0 in location 1007
9999 mem: clearing sink
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
9999 mem: clearing empty?
9999 mem: storing 0 in location 1007
9999 mem: clearing sink
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
9999 mem: clearing empty?
9999 mem: storing 0 in location 1007
9999 mem: clearing data-emitted?:boolean
9999 mem: storing 0 in location 1009
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
 104 run: trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
 104 run: reply 
9999 trace: reply: decrementing callstack depth from 3
