9991 parse: --- defining scenario_buffer-lines-blocks-until-newline
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "\n    1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 10/capacity\n    _, 3:address:shared:sink:number/buffered-stdin <- new-channel 10/capacity\n    4:address:shared:channel:number/buffered-stdin <- get *3:address:shared:source:number, chan:offset\n    5:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin\n    assert 5:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    6:number/buffer-routine <- start-running buffer-lines, 1:address:shared:source:character/stdin, 3:address:shared:sink:character/buffered-stdin\n    wait-for-routine 6:number/buffer-routine\n    7:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin\n    assert 7:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    2:address:shared:sink:character <- write 2:address:shared:sink:character, 97/a\n    restart 6:number/buffer-routine\n    wait-for-routine 6:number/buffer-routine\n    8:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin\n    assert 8:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    2:address:shared:sink:character <- write 2:address:shared:sink:character, 98/b\n    restart 6:number/buffer-routine\n    wait-for-routine 6:number/buffer-routine\n    9:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin\n    assert 9:boolean, [ \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    2:address:shared:sink:character <- write 2:address:shared:sink:character, 10/newline\n    restart 6:number/buffer-routine\n    wait-for-routine 6:number/buffer-routine\n    10:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin\n    11:boolean/completed? <- not 10:boolean\n    assert 11:boolean/completed?, [ \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"
9992 load: after rewriting: run [
    1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 10/capacity
    _, 3:address:shared:sink:number/buffered-stdin <- new-channel 10/capacity
    4:address:shared:channel:number/buffered-stdin <- get *3:address:shared:source:number, chan:offset
    5:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 5:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    6:number/buffer-routine <- start-running buffer-lines, 1:address:shared:source:character/stdin, 3:address:shared:sink:character/buffered-stdin
    wait-for-routine 6:number/buffer-routine
    7:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 7:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    2:address:shared:sink:character <- write 2:address:shared:sink:character, 97/a
    restart 6:number/buffer-routine
    wait-for-routine 6:number/buffer-routine
    8:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 8:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    2:address:shared:sink:character <- write 2:address:shared:sink:character, 98/b
    restart 6:number/buffer-routine
    wait-for-routine 6:number/buffer-routine
    9:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 9:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    2:address:shared:sink:character <- write 2:address:shared:sink:character, 10/newline
    restart 6:number/buffer-routine
    wait-for-routine 6:number/buffer-routine
    10:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    11:boolean/completed? <- not 10:boolean
    assert 11:boolean/completed?, [ 
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace 1, [test], [reached end]
  ]
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "\n    test: reached end\n  ": "literal-string"
9992 load: after rewriting: trace-should-contain [
    test: reached end
  ]
9999 parse: recipe scenario_buffer-lines-blocks-until-newline has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- fill in reply ingredients from header for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- deduce types for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- check for invalid types in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- collect surrounding spaces for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- transform names for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- resolve ambiguous calls for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- compute instruction operations for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- transform braces for recipe scenario_buffer-lines-blocks-until-newline
9992 transform: run ...
9992 transform: trace-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- perform checks for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check 'call' instructions inside recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check calls inside recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check merge instructions in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- check types of reply instructions in recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- checking reply instructions against header for scenario_buffer-lines-blocks-until-newline
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_buffer-lines-blocks-until-newline
 102 run: run [
    1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 10/capacity
    _, 3:address:shared:sink:number/buffered-stdin <- new-channel 10/capacity
    4:address:shared:channel:number/buffered-stdin <- get *3:address:shared:source:number, chan:offset
    5:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 5:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    6:number/buffer-routine <- start-running buffer-lines, 1:address:shared:source:character/stdin, 3:address:shared:sink:character/buffered-stdin
    wait-for-routine 6:number/buffer-routine
    7:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 7:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    2:address:shared:sink:character <- write 2:address:shared:sink:character, 97/a
    restart 6:number/buffer-routine
    wait-for-routine 6:number/buffer-routine
    8:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 8:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    2:address:shared:sink:character <- write 2:address:shared:sink:character, 98/b
    restart 6:number/buffer-routine
    wait-for-routine 6:number/buffer-routine
    9:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    assert 9:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    2:address:shared:sink:character <- write 2:address:shared:sink:character, 10/newline
    restart 6:number/buffer-routine
    wait-for-routine 6:number/buffer-routine
    10:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
    11:boolean/completed? <- not 10:boolean
    assert 11:boolean/completed?, [ 
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace 1, [test], [reached end]
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 10: "literal", {"capacity": ()}
9993 parse:   product: 1: ("address" "shared" "source" "number")
9993 parse:   product: 2: ("address" "shared" "sink" "number")
9992 load: after rewriting: 1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 10/capacity
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 10: "literal", {"capacity": ()}
9993 parse:   product: _: "literal"
9993 parse:   product: 3: ("address" "shared" "sink" "number"), {"buffered-stdin": ()}
9992 load: after rewriting: _, 3:address:shared:sink:number/buffered-stdin <- new-channel 10/capacity
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 3: ("address" "shared" "source" "number"), {"lookup": ()}
9993 parse:   ingredient: chan: "offset"
9993 parse:   product: 4: ("address" "shared" "channel" "number"), {"buffered-stdin": ()}
9992 load: after rewriting: 4:address:shared:channel:number/buffered-stdin <- get *3:address:shared:source:number, chan:offset
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 4: ("address" "shared" "channel" "character"), {"buffered-stdin": ()}
9993 parse:   product: 5: "boolean"
9992 load: after rewriting: 5:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 5: "boolean"
9993 parse:   ingredient: " \nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"
9992 load: after rewriting: assert 5:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after init]
9993 parse: instruction: start-running
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: buffer-lines: ()
9993 parse:   ingredient: 1: ("address" "shared" "source" "character"), {"stdin": ()}
9993 parse:   ingredient: 3: ("address" "shared" "sink" "character"), {"buffered-stdin": ()}
9993 parse:   product: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: 6:number/buffer-routine <- start-running buffer-lines, 1:address:shared:source:character/stdin, 3:address:shared:sink:character/buffered-stdin
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: wait-for-routine 6:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 4: ("address" "shared" "channel" "character"), {"buffered-stdin": ()}
9993 parse:   product: 7: "boolean"
9992 load: after rewriting: 7:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 7: "boolean"
9993 parse:   ingredient: " \nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"
9992 load: after rewriting: assert 7:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 2: ("address" "shared" "sink" "character")
9993 parse:   ingredient: 97: "literal", {"a": ()}
9993 parse:   product: 2: ("address" "shared" "sink" "character")
9992 load: after rewriting: 2:address:shared:sink:character <- write 2:address:shared:sink:character, 97/a
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: restart 6:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: wait-for-routine 6:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 4: ("address" "shared" "channel" "character"), {"buffered-stdin": ()}
9993 parse:   product: 8: "boolean"
9992 load: after rewriting: 8:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 8: "boolean"
9993 parse:   ingredient: " \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"
9992 load: after rewriting: assert 8:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 2: ("address" "shared" "sink" "character")
9993 parse:   ingredient: 98: "literal", {"b": ()}
9993 parse:   product: 2: ("address" "shared" "sink" "character")
9992 load: after rewriting: 2:address:shared:sink:character <- write 2:address:shared:sink:character, 98/b
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: restart 6:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: wait-for-routine 6:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 4: ("address" "shared" "channel" "character"), {"buffered-stdin": ()}
9993 parse:   product: 9: "boolean"
9992 load: after rewriting: 9:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 9: "boolean"
9993 parse:   ingredient: " \nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"
9992 load: after rewriting: assert 9:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 2: ("address" "shared" "sink" "character")
9993 parse:   ingredient: 10: "literal", {"newline": ()}
9993 parse:   product: 2: ("address" "shared" "sink" "character")
9992 load: after rewriting: 2:address:shared:sink:character <- write 2:address:shared:sink:character, 10/newline
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: restart 6:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 6: "number", {"buffer-routine": ()}
9992 load: after rewriting: wait-for-routine 6:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 4: ("address" "shared" "channel" "character"), {"buffered-stdin": ()}
9993 parse:   product: 10: "boolean"
9992 load: after rewriting: 10:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9993 parse: instruction: not
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 10: "boolean"
9993 parse:   product: 11: "boolean", {"completed?": ()}
9992 load: after rewriting: 11:boolean/completed? <- not 10:boolean
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 11: "boolean", {"completed?": ()}
9993 parse:   ingredient: " \nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"
9992 load: after rewriting: assert 11:boolean/completed?, [ 
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9993 parse: instruction: trace
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: 1: "literal"
9993 parse:   ingredient: "test": "literal-string"
9993 parse:   ingredient: "reached end": "literal-string"
9992 load: after rewriting: trace 1, [test], [reached end]
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element chan of type source is at offset 0
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 10/capacity
9992 transform: checking variant (strict) 0: recipe new-channel capacity: "number" -> in: ("address" "shared" "source" "_elem") out: ("address" "shared" "sink" "_elem")
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 1: recipe new-channel_2 capacity: "number" -> in: ("address" "shared" "source" "character") out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 226 new-channel
9993 transform: switching new-channel to specialized recipe new-channel_3 capacity: "number" -> in: ("address" "shared" "source" "_elem") out: ("address" "shared" "sink" "_elem")
9993 transform: compute type names: new-channel_3
9994 transform:     checking capacity: "number": "number"
9993 transform: type of capacity is "number"
9994 transform:     checking in: ("address" "shared" "source" "_elem"): ("address" "shared" "source" "_elem")
9993 transform: type of in is ("address" "shared" "source" "_elem")
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform: type of out is ("address" "shared" "sink" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: capacity:number <- next-ingredient-without-typechecking 
9994 transform:     checking capacity: "number": "number"
9993 transform:   instruction: result:address:shared:channel:_elem <- new {(channel _elem): type}
9994 transform:     checking (channel _elem): "type": "type"
9993 transform: type of (channel _elem) is "type"
9994 transform:     checking result: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of result is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: full:address:number <- get-address *result, first-full:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-full: "offset": "offset"
9994 transform:     checking full: ("address" "number"): ("address" "number")
9993 transform: type of full is ("address" "number")
9993 transform:   instruction: *full <- copy 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking full: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: free:address:number <- get-address *result, first-free:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-free: "offset": "offset"
9994 transform:     checking free: ("address" "number"): ("address" "number")
9993 transform: type of free is ("address" "number")
9993 transform:   instruction: *free <- copy 0
9994 transform:     checking 0: "literal": "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: capacity <- add capacity, 1
9994 transform:     checking capacity: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking 1: "literal": "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking capacity: (): ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking data: "offset": "offset"
9994 transform:     checking dest: ("address" "address" "shared" "array" "_elem"): ("address" "address" "shared" "array" "_elem")
9993 transform: type of dest is ("address" "address" "shared" "array" "_elem")
9993 transform:   instruction: *dest <- new _elem:type, capacity
9994 transform:     checking _elem: "type": "type"
9993 transform: type of _elem is "type"
9994 transform:     checking capacity: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking dest: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "array" "_elem")
9993 transform:   instruction: in <- new {(source _elem): type}
9994 transform:     checking (source _elem): "type": "type"
9993 transform: type of (source _elem) is "type"
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "source" "_elem")
9993 transform:   instruction: chan:address:address:shared:channel:_elem <- get-address *in, chan:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "source" "_elem")
9994 transform:     checking chan: "offset": "offset"
9994 transform:     checking chan: ("address" "address" "shared" "channel" "_elem"): ("address" "address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "address" "shared" "channel" "_elem")
9993 transform:   instruction: *chan <- copy result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "channel" "_elem")
9993 transform:   instruction: out <- new {(sink _elem): type}
9994 transform:     checking (sink _elem): "type": "type"
9993 transform: type of (sink _elem) is "type"
9994 transform:     checking out: (): ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9993 transform:   instruction: chan:address:address:shared:channel:_elem <- get-address *out, chan:offset
9994 transform:     checking out: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9994 transform:     checking chan: "offset": "offset"
9994 transform:     checking chan: ("address" "address" "shared" "channel" "_elem"): ("address" "address" "shared" "channel" "_elem")
9993 transform:   instruction: *chan <- copy result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "channel" "_elem")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:source:_elem
9993 transform: _elem => "number"
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'capacity:number <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in instruction 'result:address:shared:channel:_elem <- new {(channel _elem): type}'
9993 transform: replacing in ingredient {(channel _elem): type}
9993 transform: replacing in ingredient result:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'full:address:number <- get-address *result, first-full:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full:address:number
9993 transform: replacing in instruction '*full <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *full
9993 transform: replacing in instruction 'free:address:number <- get-address *result, first-free:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:address:number
9993 transform: replacing in instruction '*free <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction 'capacity <- add capacity, 1'
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient capacity
9993 transform: replacing in instruction 'dest:address:address:shared:array:_elem <- get-address *result, data:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient dest:address:address:shared:array:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '*dest <- new _elem:type, capacity'
9993 transform: replacing in ingredient _elem:type
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient *dest
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'in <- new {(source _elem): type}'
9993 transform: replacing in ingredient {(source _elem): type}
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'chan:address:address:shared:channel:_elem <- get-address *in, chan:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '*chan <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'out <- new {(sink _elem): type}'
9993 transform: replacing in ingredient {(sink _elem): type}
9993 transform: replacing in ingredient out
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'chan:address:address:shared:channel:_elem <- get-address *out, chan:offset'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '*chan <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9992 transform: transforming new specialization: new-channel_3
9991 transform: --- rewrite literal strings in recipe new-channel_3
9991 transform: --- checking reply instructions against header for new-channel_3
9991 transform: --- fill in reply ingredients from header for recipe new-channel_3
9991 transform: --- deduce types for recipe new-channel_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: capacity => "number"
9992 transform: result => ("address" "shared" "channel" "number")
9992 transform: full => ("address" "number")
9992 transform: free => ("address" "number")
9992 transform: dest => ("address" "address" "shared" "array" "number")
9992 transform: in => ("address" "shared" "source" "number")
9992 transform: chan => ("address" "address" "shared" "channel" "number")
9992 transform: out => ("address" "shared" "sink" "number")
9991 transform: --- deduce types from header for new-channel_3
9993 transform: type of capacity is "number"
9993 transform: type of in is ("address" "shared" "source" "number")
9993 transform: type of out is ("address" "shared" "sink" "number")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: capacity:number <- next-ingredient-without-typechecking 
9993 transform:   product: capacity: "number"
9992 transform: instruction: result:address:shared:channel:_elem <- new {(channel _elem): type}
9993 transform:   product: result: ("address" "shared" "channel" "number")
9992 transform: instruction: full:address:number <- get-address *result, first-full:offset
9993 transform:   product: full: ("address" "number")
9992 transform: instruction: *full <- copy 0
9993 transform:   product: full: ("address" "number"), {"lookup": ()}
9992 transform: instruction: free:address:number <- get-address *result, first-free:offset
9993 transform:   product: free: ("address" "number")
9992 transform: instruction: *free <- copy 0
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: capacity <- add capacity, 1
9993 transform:   product: capacity: "number"
9992 transform: instruction: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9993 transform:   product: dest: ("address" "address" "shared" "array" "number")
9992 transform: instruction: *dest <- new _elem:type, capacity
9993 transform:   product: dest: ("address" "address" "shared" "array" "number"), {"lookup": ()}
9992 transform: instruction: in <- new {(source _elem): type}
9993 transform:   product: in: ("address" "shared" "source" "number")
9992 transform: instruction: chan:address:address:shared:channel:_elem <- get-address *in, chan:offset
9993 transform:   product: chan: ("address" "address" "shared" "channel" "number")
9992 transform: instruction: *chan <- copy result
9993 transform:   product: chan: ("address" "address" "shared" "channel" "number"), {"lookup": ()}
9992 transform: instruction: out <- new {(sink _elem): type}
9993 transform:   product: out: ("address" "shared" "sink" "number")
9992 transform: instruction: chan:address:address:shared:channel:_elem <- get-address *out, chan:offset
9993 transform:   product: chan: ("address" "address" "shared" "channel" "number")
9992 transform: instruction: *chan <- copy result
9993 transform:   product: chan: ("address" "address" "shared" "channel" "number"), {"lookup": ()}
9992 transform: instruction: reply in:address:shared:source:_elem, out:address:shared:sink:_elem
9991 transform: --- check for invalid types in recipe new-channel_3
9991 transform: --- collect surrounding spaces for recipe new-channel_3
9991 transform: --- transform names for recipe new-channel_3
9993 name: assign capacity 1
9993 name: assign result 2
9993 name: element first-full of type channel is at offset 0
9993 name: assign full 3
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 4
9993 name: element data of type channel is at offset 2
9993 name: assign dest 5
9993 name: assign in 6
9993 name: element chan of type source is at offset 0
9993 name: assign chan 7
9993 name: assign out 8
9993 name: element chan of type sink is at offset 0
9991 transform: --- resolve ambiguous calls for recipe new-channel_3
9991 transform: --- compute instruction operations for recipe new-channel_3
9991 transform: --- transform braces for recipe new-channel_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: add ...
9992 transform: get-address ...
9992 transform: new ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe new-channel_3
9991 transform: --- perform checks for recipe new-channel_3
9991 transform: --- type-check 'call' instructions inside recipe new-channel_3
9991 transform: --- type-check calls inside recipe new-channel_3
9991 transform: --- convert 'new' to 'allocate' for recipe new-channel_3
9992 new: size of "location" is 1
9992 new: size of ("channel" "number") is 3
9992 new: size of "number" is 1
9992 new: size of ("source" "number") is 1
9992 new: size of ("sink" "number") is 1
9991 transform: --- type-check merge instructions in recipe new-channel_3
9991 transform: --- check types of reply instructions in recipe new-channel_3
9991 transform: --- check that recipe new-channel_3 sets default-space
9991 transform: --- checking reply instructions against header for new-channel_3
9992 transform: new specialization: new-channel_3
9992 transform: instruction _, 3:address:shared:sink:number/buffered-stdin <- new-channel 10/capacity
9992 transform: checking variant (strict) 0: recipe new-channel capacity: "number" -> in: ("address" "shared" "source" "_elem") out: ("address" "shared" "sink" "_elem")
9993 transform: strict match failed: product 1
9992 transform: checking variant (strict) 1: recipe new-channel_2 capacity: "number" -> in: ("address" "shared" "source" "character") out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: product 1
9992 transform: checking variant (strict) 11: recipe new-channel_3 capacity: "number" -> in: ("address" "shared" "source" "number") out: ("address" "shared" "sink" "number")
9992 transform: instruction 5:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9992 transform: instruction 7:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9992 transform: instruction 2:address:shared:sink:character <- write 2:address:shared:sink:character, 97/a
9992 transform: checking variant (strict) 0: recipe write out: ("address" "shared" "sink" "_elem") val: "_elem" -> out: ("address" "shared" "sink" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 out: ("address" "shared" "sink" "character") val: "character" -> out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: ingredient 1
9992 transform: found variant to specialize: 227 write
9993 transform: switching write to specialized recipe write_3 out: ("address" "shared" "sink" "_elem") val: "_elem" -> out: ("address" "shared" "sink" "_elem")
9993 transform: compute type names: write_3
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform: type of out is ("address" "shared" "sink" "_elem")
9994 transform:     checking val: "_elem": "_elem"
9993 transform: type of val is "_elem"
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform:   instruction: val:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking val: "_elem": "_elem"
9993 transform:   instruction: chan:address:shared:channel:_elem <- get *out, chan:offset
9994 transform:     checking out: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9994 transform:     checking chan: "offset": "offset"
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: full:boolean <- channel-full? chan
9994 transform:     checking chan: (): ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking full: "boolean": "boolean"
9993 transform: type of full is "boolean"
9993 transform:   instruction: break-unless full
9994 transform:     checking full: (): ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: full-address:address:number <- get-address *chan, first-full:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-full: "offset": "offset"
9994 transform:     checking full-address: ("address" "number"): ("address" "number")
9993 transform: type of full-address is ("address" "number")
9993 transform:   instruction: wait-for-location *full-address
9994 transform:     checking full-address: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform:   instruction: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking data: "offset": "offset"
9994 transform:     checking circular-buffer: ("address" "shared" "array" "_elem"): ("address" "shared" "array" "_elem")
9993 transform: type of circular-buffer is ("address" "shared" "array" "_elem")
9993 transform:   instruction: free:address:number <- get-address *chan, first-free:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-free: "offset": "offset"
9994 transform:     checking free: ("address" "number"): ("address" "number")
9993 transform: type of free is ("address" "number")
9993 transform:   instruction: dest:address:_elem <- index-address *circular-buffer, *free
9994 transform:     checking circular-buffer: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking dest: ("address" "_elem"): ("address" "_elem")
9993 transform: type of dest is ("address" "_elem")
9993 transform:   instruction: *dest <- copy val
9994 transform:     checking val: (): ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking dest: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: *free <- add *free, 1
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking 1: "literal": "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: {
9993 transform:   instruction: len:number <- length *circular-buffer
9994 transform:     checking circular-buffer: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking len: "number": "number"
9993 transform: type of len is "number"
9993 transform:   instruction: at-end?:boolean <- greater-or-equal *free, len
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking len: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking at-end?: "boolean": "boolean"
9993 transform: type of at-end? is "boolean"
9993 transform:   instruction: break-unless at-end?
9994 transform:     checking at-end?: (): ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: *free <- copy 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'out:address:shared:sink:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'chan:address:shared:channel:_elem <- get *out, chan:offset'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "character"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'full:boolean <- channel-full? chan'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless full'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction 'full-address:address:number <- get-address *chan, first-full:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:address:number
9993 transform: replacing in instruction 'wait-for-location *full-address'
9993 transform: replacing in ingredient *full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'circular-buffer:address:shared:array:_elem <- get *chan, data:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:shared:array:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'free:address:number <- get-address *chan, first-free:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:address:number
9993 transform: replacing in instruction 'dest:address:_elem <- index-address *circular-buffer, *free'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient dest:address:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*dest <- copy val'
9993 transform: replacing in ingredient val
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *dest
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*free <- add *free, 1'
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'len:number <- length *circular-buffer'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction 'at-end?:boolean <- greater-or-equal *free, len'
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless at-end?'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '*free <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: write_3
9991 transform: --- rewrite literal strings in recipe write_3
9991 transform: --- checking reply instructions against header for write_3
9991 transform: --- fill in reply ingredients from header for recipe write_3
9991 transform: --- deduce types for recipe write_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: out => ("address" "shared" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "shared" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => ("address" "number")
9992 transform: circular-buffer => ("address" "shared" "array" "character")
9992 transform: free => ("address" "number")
9992 transform: dest => ("address" "character")
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_3
9993 transform: type of out is ("address" "shared" "sink" "character")
9993 transform: type of val is "character"
9993 transform: type of out is ("address" "shared" "sink" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: out: ("address" "shared" "sink" "character")
9992 transform: instruction: val:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: val: "character"
9992 transform: instruction: chan:address:shared:channel:_elem <- get *out, chan:offset
9993 transform:   product: chan: ("address" "shared" "channel" "character")
9992 transform: instruction: {
9992 transform: instruction: full:boolean <- channel-full? chan
9993 transform:   product: full: "boolean"
9992 transform: instruction: break-unless full
9992 transform: instruction: full-address:address:number <- get-address *chan, first-full:offset
9993 transform:   product: full-address: ("address" "number")
9992 transform: instruction: wait-for-location *full-address
9992 transform: instruction: }
9992 transform: instruction: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9993 transform:   product: circular-buffer: ("address" "shared" "array" "character")
9992 transform: instruction: free:address:number <- get-address *chan, first-free:offset
9993 transform:   product: free: ("address" "number")
9992 transform: instruction: dest:address:_elem <- index-address *circular-buffer, *free
9993 transform:   product: dest: ("address" "character")
9992 transform: instruction: *dest <- copy val
9993 transform:   product: dest: ("address" "character"), {"lookup": ()}
9992 transform: instruction: *free <- add *free, 1
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: len:number <- length *circular-buffer
9993 transform:   product: len: "number"
9992 transform: instruction: at-end?:boolean <- greater-or-equal *free, len
9993 transform:   product: at-end?: "boolean"
9992 transform: instruction: break-unless at-end?
9992 transform: instruction: *free <- copy 0
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: reply out:address:shared:sink:_elem
9991 transform: --- check for invalid types in recipe write_3
9991 transform: --- collect surrounding spaces for recipe write_3
9991 transform: --- transform names for recipe write_3
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign dest 8
9993 name: assign len 9
9993 name: assign at-end? 10
9991 transform: --- resolve ambiguous calls for recipe write_3
9992 transform: instruction full:boolean <- channel-full? chan
9992 transform: checking variant (strict) 0: recipe channel-full? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9991 transform: --- compute instruction operations for recipe write_3
9991 transform: --- transform braces for recipe write_3
9993 transform: write_3: push (open, 4)
9993 transform: push (close, 9)
9993 transform: write_3: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-address ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get-address ...
9992 transform: index-address ...
9992 transform: copy ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_3
9991 transform: --- perform checks for recipe write_3
9991 transform: --- type-check 'call' instructions inside recipe write_3
9991 transform: --- type-check calls inside recipe write_3
9991 transform: --- convert 'new' to 'allocate' for recipe write_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe write_3
9991 transform: --- check types of reply instructions in recipe write_3
9991 transform: --- check that recipe write_3 sets default-space
9991 transform: --- checking reply instructions against header for write_3
9992 transform: new specialization: write_3
9992 transform: instruction 8:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9992 transform: instruction 2:address:shared:sink:character <- write 2:address:shared:sink:character, 98/b
9992 transform: checking variant (strict) 0: recipe write out: ("address" "shared" "sink" "_elem") val: "_elem" -> out: ("address" "shared" "sink" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 out: ("address" "shared" "sink" "character") val: "character" -> out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 9: recipe write_3 out: ("address" "shared" "sink" "character") val: "character" -> out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: ingredient 1
9992 transform: found variant to specialize: 227 write
9993 transform: switching write to specialized recipe write_4 out: ("address" "shared" "sink" "_elem") val: "_elem" -> out: ("address" "shared" "sink" "_elem")
9993 transform: compute type names: write_4
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform: type of out is ("address" "shared" "sink" "_elem")
9994 transform:     checking val: "_elem": "_elem"
9993 transform: type of val is "_elem"
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform:   instruction: val:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking val: "_elem": "_elem"
9993 transform:   instruction: chan:address:shared:channel:_elem <- get *out, chan:offset
9994 transform:     checking out: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9994 transform:     checking chan: "offset": "offset"
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: full:boolean <- channel-full? chan
9994 transform:     checking chan: (): ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking full: "boolean": "boolean"
9993 transform: type of full is "boolean"
9993 transform:   instruction: break-unless full
9994 transform:     checking full: (): ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: full-address:address:number <- get-address *chan, first-full:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-full: "offset": "offset"
9994 transform:     checking full-address: ("address" "number"): ("address" "number")
9993 transform: type of full-address is ("address" "number")
9993 transform:   instruction: wait-for-location *full-address
9994 transform:     checking full-address: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform:   instruction: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking data: "offset": "offset"
9994 transform:     checking circular-buffer: ("address" "shared" "array" "_elem"): ("address" "shared" "array" "_elem")
9993 transform: type of circular-buffer is ("address" "shared" "array" "_elem")
9993 transform:   instruction: free:address:number <- get-address *chan, first-free:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-free: "offset": "offset"
9994 transform:     checking free: ("address" "number"): ("address" "number")
9993 transform: type of free is ("address" "number")
9993 transform:   instruction: dest:address:_elem <- index-address *circular-buffer, *free
9994 transform:     checking circular-buffer: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking dest: ("address" "_elem"): ("address" "_elem")
9993 transform: type of dest is ("address" "_elem")
9993 transform:   instruction: *dest <- copy val
9994 transform:     checking val: (): ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking dest: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: *free <- add *free, 1
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking 1: "literal": "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: {
9993 transform:   instruction: len:number <- length *circular-buffer
9994 transform:     checking circular-buffer: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking len: "number": "number"
9993 transform: type of len is "number"
9993 transform:   instruction: at-end?:boolean <- greater-or-equal *free, len
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking len: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking at-end?: "boolean": "boolean"
9993 transform: type of at-end? is "boolean"
9993 transform:   instruction: break-unless at-end?
9994 transform:     checking at-end?: (): ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: *free <- copy 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'out:address:shared:sink:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'chan:address:shared:channel:_elem <- get *out, chan:offset'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "character"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'full:boolean <- channel-full? chan'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless full'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction 'full-address:address:number <- get-address *chan, first-full:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:address:number
9993 transform: replacing in instruction 'wait-for-location *full-address'
9993 transform: replacing in ingredient *full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'circular-buffer:address:shared:array:_elem <- get *chan, data:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:shared:array:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'free:address:number <- get-address *chan, first-free:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:address:number
9993 transform: replacing in instruction 'dest:address:_elem <- index-address *circular-buffer, *free'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient dest:address:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*dest <- copy val'
9993 transform: replacing in ingredient val
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *dest
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*free <- add *free, 1'
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'len:number <- length *circular-buffer'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction 'at-end?:boolean <- greater-or-equal *free, len'
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless at-end?'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '*free <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: write_4
9991 transform: --- rewrite literal strings in recipe write_4
9991 transform: --- checking reply instructions against header for write_4
9991 transform: --- fill in reply ingredients from header for recipe write_4
9991 transform: --- deduce types for recipe write_4
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: out => ("address" "shared" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "shared" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => ("address" "number")
9992 transform: circular-buffer => ("address" "shared" "array" "character")
9992 transform: free => ("address" "number")
9992 transform: dest => ("address" "character")
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_4
9993 transform: type of out is ("address" "shared" "sink" "character")
9993 transform: type of val is "character"
9993 transform: type of out is ("address" "shared" "sink" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: out: ("address" "shared" "sink" "character")
9992 transform: instruction: val:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: val: "character"
9992 transform: instruction: chan:address:shared:channel:_elem <- get *out, chan:offset
9993 transform:   product: chan: ("address" "shared" "channel" "character")
9992 transform: instruction: {
9992 transform: instruction: full:boolean <- channel-full? chan
9993 transform:   product: full: "boolean"
9992 transform: instruction: break-unless full
9992 transform: instruction: full-address:address:number <- get-address *chan, first-full:offset
9993 transform:   product: full-address: ("address" "number")
9992 transform: instruction: wait-for-location *full-address
9992 transform: instruction: }
9992 transform: instruction: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9993 transform:   product: circular-buffer: ("address" "shared" "array" "character")
9992 transform: instruction: free:address:number <- get-address *chan, first-free:offset
9993 transform:   product: free: ("address" "number")
9992 transform: instruction: dest:address:_elem <- index-address *circular-buffer, *free
9993 transform:   product: dest: ("address" "character")
9992 transform: instruction: *dest <- copy val
9993 transform:   product: dest: ("address" "character"), {"lookup": ()}
9992 transform: instruction: *free <- add *free, 1
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: len:number <- length *circular-buffer
9993 transform:   product: len: "number"
9992 transform: instruction: at-end?:boolean <- greater-or-equal *free, len
9993 transform:   product: at-end?: "boolean"
9992 transform: instruction: break-unless at-end?
9992 transform: instruction: *free <- copy 0
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: reply out:address:shared:sink:_elem
9991 transform: --- check for invalid types in recipe write_4
9991 transform: --- collect surrounding spaces for recipe write_4
9991 transform: --- transform names for recipe write_4
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign dest 8
9993 name: assign len 9
9993 name: assign at-end? 10
9991 transform: --- resolve ambiguous calls for recipe write_4
9992 transform: instruction full:boolean <- channel-full? chan
9992 transform: checking variant (strict) 0: recipe channel-full? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9991 transform: --- compute instruction operations for recipe write_4
9991 transform: --- transform braces for recipe write_4
9993 transform: write_4: push (open, 4)
9993 transform: push (close, 9)
9993 transform: write_4: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-address ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get-address ...
9992 transform: index-address ...
9992 transform: copy ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_4
9991 transform: --- perform checks for recipe write_4
9991 transform: --- type-check 'call' instructions inside recipe write_4
9991 transform: --- type-check calls inside recipe write_4
9991 transform: --- convert 'new' to 'allocate' for recipe write_4
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe write_4
9991 transform: --- check types of reply instructions in recipe write_4
9991 transform: --- check that recipe write_4 sets default-space
9991 transform: --- checking reply instructions against header for write_4
9992 transform: new specialization: write_4
9992 transform: instruction 9:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9992 transform: instruction 2:address:shared:sink:character <- write 2:address:shared:sink:character, 10/newline
9992 transform: checking variant (strict) 0: recipe write out: ("address" "shared" "sink" "_elem") val: "_elem" -> out: ("address" "shared" "sink" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 out: ("address" "shared" "sink" "character") val: "character" -> out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 9: recipe write_3 out: ("address" "shared" "sink" "character") val: "character" -> out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 10: recipe write_4 out: ("address" "shared" "sink" "character") val: "character" -> out: ("address" "shared" "sink" "character")
9993 transform: strict match failed: ingredient 1
9992 transform: found variant to specialize: 227 write
9993 transform: switching write to specialized recipe write_5 out: ("address" "shared" "sink" "_elem") val: "_elem" -> out: ("address" "shared" "sink" "_elem")
9993 transform: compute type names: write_5
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform: type of out is ("address" "shared" "sink" "_elem")
9994 transform:     checking val: "_elem": "_elem"
9993 transform: type of val is "_elem"
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking out: ("address" "shared" "sink" "_elem"): ("address" "shared" "sink" "_elem")
9993 transform:   instruction: val:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking val: "_elem": "_elem"
9993 transform:   instruction: chan:address:shared:channel:_elem <- get *out, chan:offset
9994 transform:     checking out: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9994 transform:     checking chan: "offset": "offset"
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: full:boolean <- channel-full? chan
9994 transform:     checking chan: (): ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking full: "boolean": "boolean"
9993 transform: type of full is "boolean"
9993 transform:   instruction: break-unless full
9994 transform:     checking full: (): ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: full-address:address:number <- get-address *chan, first-full:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-full: "offset": "offset"
9994 transform:     checking full-address: ("address" "number"): ("address" "number")
9993 transform: type of full-address is ("address" "number")
9993 transform:   instruction: wait-for-location *full-address
9994 transform:     checking full-address: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform:   instruction: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking data: "offset": "offset"
9994 transform:     checking circular-buffer: ("address" "shared" "array" "_elem"): ("address" "shared" "array" "_elem")
9993 transform: type of circular-buffer is ("address" "shared" "array" "_elem")
9993 transform:   instruction: free:address:number <- get-address *chan, first-free:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-free: "offset": "offset"
9994 transform:     checking free: ("address" "number"): ("address" "number")
9993 transform: type of free is ("address" "number")
9993 transform:   instruction: dest:address:_elem <- index-address *circular-buffer, *free
9994 transform:     checking circular-buffer: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking dest: ("address" "_elem"): ("address" "_elem")
9993 transform: type of dest is ("address" "_elem")
9993 transform:   instruction: *dest <- copy val
9994 transform:     checking val: (): ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking dest: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: *free <- add *free, 1
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking 1: "literal": "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: {
9993 transform:   instruction: len:number <- length *circular-buffer
9994 transform:     checking circular-buffer: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking len: "number": "number"
9993 transform: type of len is "number"
9993 transform:   instruction: at-end?:boolean <- greater-or-equal *free, len
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9994 transform:     checking len: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking at-end?: "boolean": "boolean"
9993 transform: type of at-end? is "boolean"
9993 transform:   instruction: break-unless at-end?
9994 transform:     checking at-end?: (): ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: *free <- copy 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'out:address:shared:sink:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'chan:address:shared:channel:_elem <- get *out, chan:offset'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "character"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'full:boolean <- channel-full? chan'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless full'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction 'full-address:address:number <- get-address *chan, first-full:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:address:number
9993 transform: replacing in instruction 'wait-for-location *full-address'
9993 transform: replacing in ingredient *full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'circular-buffer:address:shared:array:_elem <- get *chan, data:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:shared:array:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'free:address:number <- get-address *chan, first-free:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:address:number
9993 transform: replacing in instruction 'dest:address:_elem <- index-address *circular-buffer, *free'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient dest:address:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*dest <- copy val'
9993 transform: replacing in ingredient val
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *dest
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*free <- add *free, 1'
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'len:number <- length *circular-buffer'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction 'at-end?:boolean <- greater-or-equal *free, len'
9993 transform: replacing in ingredient *free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless at-end?'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '*free <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: write_5
9991 transform: --- rewrite literal strings in recipe write_5
9991 transform: --- checking reply instructions against header for write_5
9991 transform: --- fill in reply ingredients from header for recipe write_5
9991 transform: --- deduce types for recipe write_5
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: out => ("address" "shared" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "shared" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => ("address" "number")
9992 transform: circular-buffer => ("address" "shared" "array" "character")
9992 transform: free => ("address" "number")
9992 transform: dest => ("address" "character")
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_5
9993 transform: type of out is ("address" "shared" "sink" "character")
9993 transform: type of val is "character"
9993 transform: type of out is ("address" "shared" "sink" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: out: ("address" "shared" "sink" "character")
9992 transform: instruction: val:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: val: "character"
9992 transform: instruction: chan:address:shared:channel:_elem <- get *out, chan:offset
9993 transform:   product: chan: ("address" "shared" "channel" "character")
9992 transform: instruction: {
9992 transform: instruction: full:boolean <- channel-full? chan
9993 transform:   product: full: "boolean"
9992 transform: instruction: break-unless full
9992 transform: instruction: full-address:address:number <- get-address *chan, first-full:offset
9993 transform:   product: full-address: ("address" "number")
9992 transform: instruction: wait-for-location *full-address
9992 transform: instruction: }
9992 transform: instruction: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9993 transform:   product: circular-buffer: ("address" "shared" "array" "character")
9992 transform: instruction: free:address:number <- get-address *chan, first-free:offset
9993 transform:   product: free: ("address" "number")
9992 transform: instruction: dest:address:_elem <- index-address *circular-buffer, *free
9993 transform:   product: dest: ("address" "character")
9992 transform: instruction: *dest <- copy val
9993 transform:   product: dest: ("address" "character"), {"lookup": ()}
9992 transform: instruction: *free <- add *free, 1
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: len:number <- length *circular-buffer
9993 transform:   product: len: "number"
9992 transform: instruction: at-end?:boolean <- greater-or-equal *free, len
9993 transform:   product: at-end?: "boolean"
9992 transform: instruction: break-unless at-end?
9992 transform: instruction: *free <- copy 0
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: reply out:address:shared:sink:_elem
9991 transform: --- check for invalid types in recipe write_5
9991 transform: --- collect surrounding spaces for recipe write_5
9991 transform: --- transform names for recipe write_5
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign dest 8
9993 name: assign len 9
9993 name: assign at-end? 10
9991 transform: --- resolve ambiguous calls for recipe write_5
9992 transform: instruction full:boolean <- channel-full? chan
9992 transform: checking variant (strict) 0: recipe channel-full? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9991 transform: --- compute instruction operations for recipe write_5
9991 transform: --- transform braces for recipe write_5
9993 transform: write_5: push (open, 4)
9993 transform: push (close, 9)
9993 transform: write_5: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-address ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get-address ...
9992 transform: index-address ...
9992 transform: copy ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_5
9991 transform: --- perform checks for recipe write_5
9991 transform: --- type-check 'call' instructions inside recipe write_5
9991 transform: --- type-check calls inside recipe write_5
9991 transform: --- convert 'new' to 'allocate' for recipe write_5
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe write_5
9991 transform: --- check types of reply instructions in recipe write_5
9991 transform: --- check that recipe write_5 sets default-space
9991 transform: --- checking reply instructions against header for write_5
9992 transform: new specialization: write_5
9992 transform: instruction 10:boolean <- channel-empty? 4:address:shared:channel:character/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: new-channel ...
9992 transform: get ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: start-running ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: not ...
9992 transform: assert ...
9992 transform: trace ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:source:number, 2:address:shared:sink:number <- new-channel_3 10/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1000
9999 mem: storing 9 in location 1001
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1003
 104 run: result:address:shared:channel:_elem <- new {(channel _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
9999 mem: incrementing refcount of 1011: 0 -> 1
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1005
 104 run: *full <- copy 0
9999 mem: location 1005 is 1012
9999 mem: storing 0 in location 1012
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1006
 104 run: *free <- copy 0
9999 mem: location 1006 is 1013
9999 mem: storing 0 in location 1013
 104 run: capacity <- add capacity, 1
9999 mem: location 1003 is 10
9999 mem: storing 11 in location 1003
 104 run: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1007
 104 run: *dest <- new _elem:type, capacity
9999 mem: location 1003 is 11
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1015
9999 mem: storing 11 in location 1016
9999 mem: location 1007 is 1014
9999 mem: storing 1015 in location 1014
9999 mem: incrementing refcount of 1015: 0 -> 1
 104 run: in <- new {(source _elem): type}
9999 mem: allocating size 2
9999 mem: new alloc: 1028
9999 mem: storing 1028 in location 1008
9999 mem: incrementing refcount of 1028: 0 -> 1
 104 run: chan:address:address:shared:channel:_elem <- get-address *in, chan:offset
9999 mem: location 1008 is 1028
9999 mem: skipping refcount at 1028
9999 mem: location 1029 is 0
9999 mem: location 1008 is 1028
9999 mem: skipping refcount at 1028
9998 run: address to copy is 1029
9999 mem: storing 1029 in location 1009
 104 run: *chan <- copy result
9999 mem: location 1004 is 1011
9999 mem: location 1009 is 1029
9999 mem: storing 1011 in location 1029
9999 mem: incrementing refcount of 1011: 1 -> 2
 104 run: out <- new {(sink _elem): type}
9999 mem: allocating size 2
9999 mem: new alloc: 1030
9999 mem: storing 1030 in location 1010
9999 mem: incrementing refcount of 1030: 0 -> 1
 104 run: chan:address:address:shared:channel:_elem <- get-address *out, chan:offset
9999 mem: location 1010 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 0
9999 mem: location 1010 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1009
 104 run: *chan <- copy result
9999 mem: location 1004 is 1011
9999 mem: location 1009 is 1031
9999 mem: storing 1011 in location 1031
9999 mem: incrementing refcount of 1011: 2 -> 3
 104 run: reply in:address:shared:source:_elem, out:address:shared:sink:_elem
9999 mem: location 1008 is 1028
9999 mem: location 1010 is 1030
9999 mem: clearing result:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 1004
9999 mem: clearing full:address:number
9999 mem: storing 0 in location 1005
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1006
9999 mem: clearing dest:address:address:shared:array:_elem
9999 mem: storing 0 in location 1007
9999 mem: clearing chan:address:address:shared:channel:_elem
9999 mem: storing 0 in location 1009
9999 mem: clearing chan:address:address:shared:channel:_elem
9999 mem: storing 0 in location 1009
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1028
9998 run: result 1 is 1030
9999 mem: storing 1028 in location 1
9999 mem: incrementing refcount of 1028: 1 -> 2
9999 mem: storing 1030 in location 2
9999 mem: incrementing refcount of 1030: 1 -> 2
 103 run: _, 3:address:shared:sink:number/buffered-stdin <- new-channel_3 10/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1003
 104 run: result:address:shared:channel:_elem <- new {(channel _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1032
9999 mem: storing 1032 in location 1004
9999 mem: incrementing refcount of 1032: 0 -> 1
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1004 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1004 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9999 mem: storing 1033 in location 1005
 104 run: *full <- copy 0
9999 mem: location 1005 is 1033
9999 mem: storing 0 in location 1033
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1004 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1004 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1006
 104 run: *free <- copy 0
9999 mem: location 1006 is 1034
9999 mem: storing 0 in location 1034
 104 run: capacity <- add capacity, 1
9999 mem: location 1003 is 10
9999 mem: storing 11 in location 1003
 104 run: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9999 mem: location 1004 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1004 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1035
9999 mem: storing 1035 in location 1007
 104 run: *dest <- new _elem:type, capacity
9999 mem: location 1003 is 11
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1036
9999 mem: storing 11 in location 1037
9999 mem: location 1007 is 1035
9999 mem: storing 1036 in location 1035
9999 mem: incrementing refcount of 1036: 0 -> 1
 104 run: in <- new {(source _elem): type}
9999 mem: allocating size 2
9999 mem: new alloc: 1049
9999 mem: storing 1049 in location 1008
9999 mem: incrementing refcount of 1049: 0 -> 1
 104 run: chan:address:address:shared:channel:_elem <- get-address *in, chan:offset
9999 mem: location 1008 is 1049
9999 mem: skipping refcount at 1049
9999 mem: location 1050 is 0
9999 mem: location 1008 is 1049
9999 mem: skipping refcount at 1049
9998 run: address to copy is 1050
9999 mem: storing 1050 in location 1009
 104 run: *chan <- copy result
9999 mem: location 1004 is 1032
9999 mem: location 1009 is 1050
9999 mem: storing 1032 in location 1050
9999 mem: incrementing refcount of 1032: 1 -> 2
 104 run: out <- new {(sink _elem): type}
9999 mem: allocating size 2
9999 mem: new alloc: 1051
9999 mem: storing 1051 in location 1010
9999 mem: incrementing refcount of 1051: 0 -> 1
 104 run: chan:address:address:shared:channel:_elem <- get-address *out, chan:offset
9999 mem: location 1010 is 1051
9999 mem: skipping refcount at 1051
9999 mem: location 1052 is 0
9999 mem: location 1010 is 1051
9999 mem: skipping refcount at 1051
9998 run: address to copy is 1052
9999 mem: storing 1052 in location 1009
 104 run: *chan <- copy result
9999 mem: location 1004 is 1032
9999 mem: location 1009 is 1052
9999 mem: storing 1032 in location 1052
9999 mem: incrementing refcount of 1032: 2 -> 3
 104 run: reply in:address:shared:source:_elem, out:address:shared:sink:_elem
9999 mem: location 1008 is 1049
9999 mem: location 1010 is 1051
9999 mem: clearing result:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 3 -> 2
9999 mem: storing 0 in location 1004
9999 mem: clearing full:address:number
9999 mem: storing 0 in location 1005
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1006
9999 mem: clearing dest:address:address:shared:array:_elem
9999 mem: storing 0 in location 1007
9999 mem: clearing chan:address:address:shared:channel:_elem
9999 mem: storing 0 in location 1009
9999 mem: clearing chan:address:address:shared:channel:_elem
9999 mem: storing 0 in location 1009
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1049
9998 run: result 1 is 1051
9999 mem: storing 1051 in location 3
9999 mem: incrementing refcount of 1051: 1 -> 2
 103 run: 4:address:shared:channel:number/buffered-stdin <- get *3:address:shared:source:number, chan:offset
9999 mem: location 3 is 1051
9999 mem: skipping refcount at 1051
9999 mem: location 1052 is 1032
9999 mem: location 3 is 1051
9999 mem: skipping refcount at 1051
9998 run: address to copy is 1052
9998 run: its type is ("address" "shared" "channel" "number")
9999 mem: location 1052 is 1032
9999 mem: storing 1032 in location 4
9999 mem: incrementing refcount of 1032: 2 -> 3
 103 run: 5:boolean <- channel-empty?_2 4:address:shared:channel:character/buffered-stdin
9999 mem: location 4 is 1032
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1053
9999 mem: storing 5 in location 1054
 104 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1056
9999 mem: incrementing refcount of 1032: 3 -> 4
 104 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1057
 104 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1058
 104 run: result <- equal full, free
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: storing 1 in location 1059
 104 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9999 mem: storing 1 in location 5
 103 run: assert 5:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after init]
9999 mem: location 5 is 1
 103 run: 6:number/buffer-routine <- start-running buffer-lines, 1:address:shared:source:character/stdin, 3:address:shared:sink:character/buffered-stdin
9999 mem: location 1 is 1028
9999 mem: location 3 is 1051
9999 trace: new routine; incrementing callstack depth to 3
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 6
 104 run: wait-for-routine 6:number/buffer-routine
9999 mem: location 6 is 2
9998 run: waiting for routine 2
9990 schedule: buffer-lines
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 101000
9999 mem: storing 14 in location 101001
 104 run: in:address:shared:source:character <- next-ingredient-without-typechecking 
9999 mem: storing 1028 in location 101003
9999 mem: incrementing refcount of 1028: 2 -> 3
 104 run: buffered-out:address:shared:sink:character <- next-ingredient-without-typechecking 
9999 mem: storing 1051 in location 101004
9999 mem: incrementing refcount of 1051: 2 -> 3
 104 run: line:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 105 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1056
 105 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 101016
9999 mem: storing 101016 in location 1057
9999 mem: incrementing refcount of 101016: 0 -> 1
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1057 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 0
9999 mem: location 1057 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 1058
 105 run: *len:address:number <- copy 0
9999 mem: location 1058 is 101017
9999 mem: storing 0 in location 101017
 105 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1057 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 0
9999 mem: location 1057 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9999 mem: storing 101018 in location 1059
 105 run: *s <- new character:type, capacity
9999 mem: location 1056 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 101019
9999 mem: storing 30 in location 101020
9999 mem: location 1059 is 101018
9999 mem: storing 101019 in location 101018
9999 mem: incrementing refcount of 101019: 0 -> 1
 105 run: return result
9999 mem: location 1057 is 101016
9999 mem: clearing len:address:number
9999 mem: storing 0 in location 1058
9999 mem: clearing s:address:address:shared:array:character
9999 mem: storing 0 in location 1059
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 1 -> 2
 104 run: c:character, in <- read_2 in
9999 mem: location 101003 is 1028
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 101051
9999 mem: storing 10 in location 101052
 105 run: in:address:shared:source:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1028 in location 101054
9999 mem: incrementing refcount of 1028: 3 -> 4
 105 run: chan:address:shared:channel:_elem <- get *in, chan:offset
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9999 mem: location 1029 is 1011
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9998 run: address to copy is 1029
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1029 is 1011
9999 mem: storing 1011 in location 101055
9999 mem: incrementing refcount of 1011: 2 -> 3
 105 run: empty?:boolean <- channel-empty?_2 chan
9999 mem: location 101055 is 1011
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1056
9999 mem: incrementing refcount of 1011: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 0
9999 mem: storing 0 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: storing 1 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101056
 105 run: jump-unless empty?, 
9999 mem: location 101056 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 101057
 105 run: wait-for-location *free-address
9999 mem: location 101057 is 1013
9999 mem: location 1013 is 0
9999 mem: location 101057 is 1013
9998 run: waiting for location 1013 to change from 0
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 7:boolean <- channel-empty?_2 4:address:shared:channel:character/buffered-stdin
9999 mem: location 4 is 1032
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1056
9999 mem: incrementing refcount of 1032: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: storing 1 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 7
 105 run: assert 7:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9999 mem: location 7 is 1
 105 run: 2:address:shared:sink:character <- write_3 2:address:shared:sink:character, 97/a
9999 mem: location 2 is 1030
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1060
9999 mem: storing 11 in location 1061
 106 run: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1063
9999 mem: incrementing refcount of 1030: 2 -> 3
 106 run: val:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1064
 106 run: chan:address:shared:channel:_elem <- get *out, chan:offset
9999 mem: location 1063 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 1011
9999 mem: location 1063 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1031 is 1011
9999 mem: storing 1011 in location 1065
9999 mem: incrementing refcount of 1011: 3 -> 4
 106 run: full:boolean <- channel-full?_2 chan
9999 mem: location 1065 is 1011
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1073
9999 mem: storing 7 in location 1074
 107 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1076
9999 mem: incrementing refcount of 1011: 4 -> 5
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 0
9999 mem: storing 0 in location 1077
 107 run: tmp <- add tmp, 1
9999 mem: location 1077 is 0
9999 mem: storing 1 in location 1077
 107 run: len:number <- capacity_2 chan
9999 mem: location 1076 is 1011
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1082
9999 mem: storing 4 in location 1083
 108 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1085
9999 mem: incrementing refcount of 1011: 5 -> 6
 108 run: q:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1085 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1085 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1086
9999 mem: incrementing refcount of 1015: 1 -> 2
 108 run: result <- length *q
9999 mem: location 1086 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 1087
 108 run: reply result:number
9999 mem: location 1087 is 11
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 6 -> 5
9999 mem: storing 0 in location 1085
9999 mem: clearing q:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 1086
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1078
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1077 is 1
9999 mem: location 1078 is 11
9999 mem: storing 0 in location 1079
 107 run: jump-unless at-end?, 
9999 mem: location 1079 is 0
9998 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1080
 107 run: result <- equal full, tmp
9999 mem: location 1080 is 0
9999 mem: location 1077 is 1
9999 mem: storing 0 in location 1081
 107 run: reply result:boolean
9999 mem: location 1081 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 5 -> 4
9999 mem: storing 0 in location 1076
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1066
 106 run: jump-unless full, 
9999 mem: location 1066 is 0
9998 run: jumping to instruction 9
 106 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1068
9999 mem: incrementing refcount of 1015: 1 -> 2
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1069
 106 run: dest:address:_elem <- index-address *circular-buffer, *free
9999 mem: location 1068 is 1015
9999 mem: skipping refcount at 1015
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 0
9999 mem: storing 1017 in location 1070
 106 run: *dest <- copy val
9999 mem: location 1064 is 97
9999 mem: location 1070 is 1017
9999 mem: storing 97 in location 1017
 106 run: *free <- add *free, 1
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1069 is 1013
9999 mem: storing 1 in location 1013
 106 run: len:number <- length *circular-buffer
9999 mem: location 1068 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 1071
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1071 is 11
9999 mem: storing 0 in location 1072
 106 run: jump-unless at-end?, 
9999 mem: location 1072 is 0
9998 run: jumping to instruction 20
 106 run: reply out:address:shared:sink:_elem
9999 mem: location 1063 is 1030
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1065
9999 mem: clearing full-address:address:number
9999 mem: storing 0 in location 1067
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 1068
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1069
9999 mem: clearing dest:address:_elem
9999 mem: storing 0 in location 1070
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1030
9999 mem: decrementing refcount of 1030: 3 -> 2
9999 mem: storing 1030 in location 2
9999 mem: incrementing refcount of 1030: 2 -> 3
 105 run: restart 6:number/buffer-routine
9999 mem: location 6 is 2
 105 run: wait-for-routine 6:number/buffer-routine
9999 mem: location 6 is 2
9998 run: waiting for routine 2
9990 schedule: read_2/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 101058
 105 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 101059
9999 mem: incrementing refcount of 1015: 1 -> 2
 105 run: result <- index *circular-buffer, *full
9999 mem: location 101059 is 1015
9999 mem: skipping refcount at 1015
9998 run: base address is 1016
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 0
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 97
9999 mem: storing 97 in location 101060
 105 run: *full <- add *full, 1
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 0
9999 mem: location 101058 is 1012
9999 mem: storing 1 in location 1012
 105 run: len:number <- length *circular-buffer
9999 mem: location 101059 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 101061
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 1
9999 mem: location 101061 is 11
9999 mem: storing 0 in location 101062
 105 run: jump-unless at-end?, 
9999 mem: location 101062 is 0
9998 run: jumping to instruction 18
 105 run: reply result:_elem, in:address:shared:source:_elem
9999 mem: location 101060 is 97
9999 mem: location 101054 is 1028
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 101055
9999 mem: clearing free-address:address:number
9999 mem: storing 0 in location 101057
9999 mem: clearing full:address:number
9999 mem: storing 0 in location 101058
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 101059
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 97
9998 run: result 1 is 1028
9999 mem: storing 97 in location 101006
9999 mem: decrementing refcount of 1028: 4 -> 3
9999 mem: storing 1028 in location 101003
9999 mem: incrementing refcount of 1028: 3 -> 4
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101006 is 97
9999 mem: storing 0 in location 101007
 104 run: jump-unless backspace?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 18
 104 run: line <- append_2 line, c
9999 mem: location 101005 is 101016
9999 mem: location 101006 is 97
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 1003
9999 mem: incrementing refcount of 101016: 2 -> 3
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1004
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 1005
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1004 is 97
9999 mem: storing 0 in location 1006
 105 run: jump-unless backspace?, 
9999 mem: location 1006 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 1003 is 101016
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 101063
9999 mem: storing 6 in location 101064
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 101066
9999 mem: incrementing refcount of 101016: 3 -> 4
 106 run: len:number <- get *in, length:offset
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is "number"
9999 mem: location 101017 is 0
9999 mem: storing 0 in location 101067
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101068
9999 mem: incrementing refcount of 101019: 1 -> 2
 106 run: capacity:number <- length *s
9999 mem: location 101068 is 101019
9999 mem: skipping refcount at 101019
9999 mem: storing 30 in location 101069
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 101067 is 0
9999 mem: location 101069 is 30
9999 mem: storing 0 in location 101070
 106 run: reply result:boolean
9999 mem: location 101070 is 0
9999 mem: clearing in:address:shared:buffer
9999 mem: decrementing refcount of 101016: 4 -> 3
9999 mem: storing 0 in location 101066
9999 mem: clearing s:address:shared:array:character
9999 mem: decrementing refcount of 101019: 2 -> 1
9999 mem: storing 0 in location 101068
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1008
 105 run: jump-unless full?, 
9999 mem: location 1008 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 1009
9999 mem: incrementing refcount of 101019: 1 -> 2
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 1009 is 101019
9999 mem: skipping refcount at 101019
9999 mem: location 1005 is 101017
9999 mem: location 101017 is 0
9999 mem: storing 101021 in location 1010
 105 run: *dest <- copy c
9999 mem: location 1004 is 97
9999 mem: location 1010 is 101021
9999 mem: storing 97 in location 101021
 105 run: *len <- add *len, 1
9999 mem: location 1005 is 101017
9999 mem: location 101017 is 0
9999 mem: location 1005 is 101017
9999 mem: storing 1 in location 101017
 105 run: reply in:address:shared:buffer
9999 mem: location 1003 is 101016
9999 mem: clearing len:address:number
9999 mem: storing 0 in location 1005
9999 mem: clearing s:address:shared:array:character
9999 mem: decrementing refcount of 101019: 2 -> 1
9999 mem: storing 0 in location 1009
9999 mem: clearing dest:address:character
9999 mem: storing 0 in location 1010
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: decrementing refcount of 101016: 3 -> 2
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 2 -> 3
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101006 is 97
9999 mem: storing 0 in location 101010
 104 run: jump-if line-done?, 
9999 mem: location 101010 is 0
9998 run: jump-if fell through
 104 run: eof?:boolean <- equal c, 0/eof
9999 mem: location 101006 is 97
9999 mem: storing 0 in location 101011
 104 run: jump-if eof?, 
9999 mem: location 101011 is 0
9998 run: jump-if fell through
 104 run: jump 
9998 run: jumping to instruction 6
 104 run: c:character, in <- read_2 in
9999 mem: location 101003 is 1028
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 105 run: in:address:shared:source:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1028 in location 101054
9999 mem: incrementing refcount of 1028: 4 -> 5
 105 run: chan:address:shared:channel:_elem <- get *in, chan:offset
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9999 mem: location 1029 is 1011
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9998 run: address to copy is 1029
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1029 is 1011
9999 mem: storing 1011 in location 101055
9999 mem: incrementing refcount of 1011: 2 -> 3
 105 run: empty?:boolean <- channel-empty?_2 chan
9999 mem: location 101055 is 1011
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1056
9999 mem: incrementing refcount of 1011: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 1
9999 mem: storing 1 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 1
9999 mem: location 1058 is 1
9999 mem: storing 1 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101056
 105 run: jump-unless empty?, 
9999 mem: location 101056 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 101057
 105 run: wait-for-location *free-address
9999 mem: location 101057 is 1013
9999 mem: location 1013 is 1
9999 mem: location 101057 is 1013
9998 run: waiting for location 1013 to change from 1
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 8:boolean <- channel-empty?_2 4:address:shared:channel:character/buffered-stdin
9999 mem: location 4 is 1032
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1056
9999 mem: incrementing refcount of 1032: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: storing 1 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 8
 105 run: assert 8:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9999 mem: location 8 is 1
 105 run: 2:address:shared:sink:character <- write_4 2:address:shared:sink:character, 98/b
9999 mem: location 2 is 1030
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
 106 run: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1063
9999 mem: incrementing refcount of 1030: 3 -> 4
 106 run: val:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1064
 106 run: chan:address:shared:channel:_elem <- get *out, chan:offset
9999 mem: location 1063 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 1011
9999 mem: location 1063 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1031 is 1011
9999 mem: storing 1011 in location 1065
9999 mem: incrementing refcount of 1011: 3 -> 4
 106 run: full:boolean <- channel-full?_2 chan
9999 mem: location 1065 is 1011
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 107 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1076
9999 mem: incrementing refcount of 1011: 4 -> 5
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 1
9999 mem: storing 1 in location 1077
 107 run: tmp <- add tmp, 1
9999 mem: location 1077 is 1
9999 mem: storing 2 in location 1077
 107 run: len:number <- capacity_2 chan
9999 mem: location 1076 is 1011
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 108 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1085
9999 mem: incrementing refcount of 1011: 5 -> 6
 108 run: q:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1085 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1085 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1086
9999 mem: incrementing refcount of 1015: 1 -> 2
 108 run: result <- length *q
9999 mem: location 1086 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 1087
 108 run: reply result:number
9999 mem: location 1087 is 11
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 6 -> 5
9999 mem: storing 0 in location 1085
9999 mem: clearing q:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 1086
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1078
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1077 is 2
9999 mem: location 1078 is 11
9999 mem: storing 0 in location 1079
 107 run: jump-unless at-end?, 
9999 mem: location 1079 is 0
9998 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1080
 107 run: result <- equal full, tmp
9999 mem: location 1080 is 1
9999 mem: location 1077 is 2
9999 mem: storing 0 in location 1081
 107 run: reply result:boolean
9999 mem: location 1081 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 5 -> 4
9999 mem: storing 0 in location 1076
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1066
 106 run: jump-unless full, 
9999 mem: location 1066 is 0
9998 run: jumping to instruction 9
 106 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1068
9999 mem: incrementing refcount of 1015: 1 -> 2
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1069
 106 run: dest:address:_elem <- index-address *circular-buffer, *free
9999 mem: location 1068 is 1015
9999 mem: skipping refcount at 1015
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 1
9999 mem: storing 1018 in location 1070
 106 run: *dest <- copy val
9999 mem: location 1064 is 98
9999 mem: location 1070 is 1018
9999 mem: storing 98 in location 1018
 106 run: *free <- add *free, 1
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1069 is 1013
9999 mem: storing 2 in location 1013
 106 run: len:number <- length *circular-buffer
9999 mem: location 1068 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 1071
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1071 is 11
9999 mem: storing 0 in location 1072
 106 run: jump-unless at-end?, 
9999 mem: location 1072 is 0
9998 run: jumping to instruction 20
 106 run: reply out:address:shared:sink:_elem
9999 mem: location 1063 is 1030
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1065
9999 mem: clearing full-address:address:number
9999 mem: storing 0 in location 1067
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 1068
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1069
9999 mem: clearing dest:address:_elem
9999 mem: storing 0 in location 1070
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1030
9999 mem: decrementing refcount of 1030: 4 -> 3
9999 mem: storing 1030 in location 2
9999 mem: incrementing refcount of 1030: 3 -> 4
 105 run: restart 6:number/buffer-routine
9999 mem: location 6 is 2
 105 run: wait-for-routine 6:number/buffer-routine
9999 mem: location 6 is 2
9998 run: waiting for routine 2
9990 schedule: read_2/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 101058
 105 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 1
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 101059
9999 mem: incrementing refcount of 1015: 1 -> 2
 105 run: result <- index *circular-buffer, *full
9999 mem: location 101059 is 1015
9999 mem: skipping refcount at 1015
9998 run: base address is 1016
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 1
9998 run: address to copy is 1018
9998 run: its type is character
9999 mem: location 1018 is 98
9999 mem: storing 98 in location 101060
 105 run: *full <- add *full, 1
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 1
9999 mem: location 101058 is 1012
9999 mem: storing 2 in location 1012
 105 run: len:number <- length *circular-buffer
9999 mem: location 101059 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 101061
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 2
9999 mem: location 101061 is 11
9999 mem: storing 0 in location 101062
 105 run: jump-unless at-end?, 
9999 mem: location 101062 is 0
9998 run: jumping to instruction 18
 105 run: reply result:_elem, in:address:shared:source:_elem
9999 mem: location 101060 is 98
9999 mem: location 101054 is 1028
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 101055
9999 mem: clearing free-address:address:number
9999 mem: storing 0 in location 101057
9999 mem: clearing full:address:number
9999 mem: storing 0 in location 101058
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 101059
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 98
9998 run: result 1 is 1028
9999 mem: storing 98 in location 101006
9999 mem: decrementing refcount of 1028: 5 -> 4
9999 mem: storing 1028 in location 101003
9999 mem: incrementing refcount of 1028: 4 -> 5
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101006 is 98
9999 mem: storing 0 in location 101007
 104 run: jump-unless backspace?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 18
 104 run: line <- append_2 line, c
9999 mem: location 101005 is 101016
9999 mem: location 101006 is 98
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 1003
9999 mem: incrementing refcount of 101016: 3 -> 4
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1004
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 1005
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1004 is 98
9999 mem: storing 0 in location 1006
 105 run: jump-unless backspace?, 
9999 mem: location 1006 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 1003 is 101016
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 101066
9999 mem: incrementing refcount of 101016: 4 -> 5
 106 run: len:number <- get *in, length:offset
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is "number"
9999 mem: location 101017 is 1
9999 mem: storing 1 in location 101067
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101068
9999 mem: incrementing refcount of 101019: 1 -> 2
 106 run: capacity:number <- length *s
9999 mem: location 101068 is 101019
9999 mem: skipping refcount at 101019
9999 mem: storing 30 in location 101069
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 101067 is 1
9999 mem: location 101069 is 30
9999 mem: storing 0 in location 101070
 106 run: reply result:boolean
9999 mem: location 101070 is 0
9999 mem: clearing in:address:shared:buffer
9999 mem: decrementing refcount of 101016: 5 -> 4
9999 mem: storing 0 in location 101066
9999 mem: clearing s:address:shared:array:character
9999 mem: decrementing refcount of 101019: 2 -> 1
9999 mem: storing 0 in location 101068
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1008
 105 run: jump-unless full?, 
9999 mem: location 1008 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 1009
9999 mem: incrementing refcount of 101019: 1 -> 2
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 1009 is 101019
9999 mem: skipping refcount at 101019
9999 mem: location 1005 is 101017
9999 mem: location 101017 is 1
9999 mem: storing 101022 in location 1010
 105 run: *dest <- copy c
9999 mem: location 1004 is 98
9999 mem: location 1010 is 101022
9999 mem: storing 98 in location 101022
 105 run: *len <- add *len, 1
9999 mem: location 1005 is 101017
9999 mem: location 101017 is 1
9999 mem: location 1005 is 101017
9999 mem: storing 2 in location 101017
 105 run: reply in:address:shared:buffer
9999 mem: location 1003 is 101016
9999 mem: clearing len:address:number
9999 mem: storing 0 in location 1005
9999 mem: clearing s:address:shared:array:character
9999 mem: decrementing refcount of 101019: 2 -> 1
9999 mem: storing 0 in location 1009
9999 mem: clearing dest:address:character
9999 mem: storing 0 in location 1010
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: decrementing refcount of 101016: 4 -> 3
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 3 -> 4
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101006 is 98
9999 mem: storing 0 in location 101010
 104 run: jump-if line-done?, 
9999 mem: location 101010 is 0
9998 run: jump-if fell through
 104 run: eof?:boolean <- equal c, 0/eof
9999 mem: location 101006 is 98
9999 mem: storing 0 in location 101011
 104 run: jump-if eof?, 
9999 mem: location 101011 is 0
9998 run: jump-if fell through
 104 run: jump 
9998 run: jumping to instruction 6
 104 run: c:character, in <- read_2 in
9999 mem: location 101003 is 1028
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 105 run: in:address:shared:source:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1028 in location 101054
9999 mem: incrementing refcount of 1028: 5 -> 6
 105 run: chan:address:shared:channel:_elem <- get *in, chan:offset
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9999 mem: location 1029 is 1011
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9998 run: address to copy is 1029
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1029 is 1011
9999 mem: storing 1011 in location 101055
9999 mem: incrementing refcount of 1011: 2 -> 3
 105 run: empty?:boolean <- channel-empty?_2 chan
9999 mem: location 101055 is 1011
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1056
9999 mem: incrementing refcount of 1011: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 2
9999 mem: storing 2 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 2
9999 mem: location 1058 is 2
9999 mem: storing 1 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101056
 105 run: jump-unless empty?, 
9999 mem: location 101056 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 101057
 105 run: wait-for-location *free-address
9999 mem: location 101057 is 1013
9999 mem: location 1013 is 2
9999 mem: location 101057 is 1013
9998 run: waiting for location 1013 to change from 2
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 9:boolean <- channel-empty?_2 4:address:shared:channel:character/buffered-stdin
9999 mem: location 4 is 1032
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1056
9999 mem: incrementing refcount of 1032: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: storing 1 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 9
 105 run: assert 9:boolean, [ 
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9999 mem: location 9 is 1
 105 run: 2:address:shared:sink:character <- write_5 2:address:shared:sink:character, 10/newline
9999 mem: location 2 is 1030
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
 106 run: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1063
9999 mem: incrementing refcount of 1030: 4 -> 5
 106 run: val:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1064
 106 run: chan:address:shared:channel:_elem <- get *out, chan:offset
9999 mem: location 1063 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 1011
9999 mem: location 1063 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1031 is 1011
9999 mem: storing 1011 in location 1065
9999 mem: incrementing refcount of 1011: 3 -> 4
 106 run: full:boolean <- channel-full?_2 chan
9999 mem: location 1065 is 1011
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 107 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1076
9999 mem: incrementing refcount of 1011: 4 -> 5
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 2
9999 mem: storing 2 in location 1077
 107 run: tmp <- add tmp, 1
9999 mem: location 1077 is 2
9999 mem: storing 3 in location 1077
 107 run: len:number <- capacity_2 chan
9999 mem: location 1076 is 1011
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 108 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1085
9999 mem: incrementing refcount of 1011: 5 -> 6
 108 run: q:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1085 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1085 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1086
9999 mem: incrementing refcount of 1015: 1 -> 2
 108 run: result <- length *q
9999 mem: location 1086 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 1087
 108 run: reply result:number
9999 mem: location 1087 is 11
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 6 -> 5
9999 mem: storing 0 in location 1085
9999 mem: clearing q:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 1086
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1078
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1077 is 3
9999 mem: location 1078 is 11
9999 mem: storing 0 in location 1079
 107 run: jump-unless at-end?, 
9999 mem: location 1079 is 0
9998 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1076 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1080
 107 run: result <- equal full, tmp
9999 mem: location 1080 is 2
9999 mem: location 1077 is 3
9999 mem: storing 0 in location 1081
 107 run: reply result:boolean
9999 mem: location 1081 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 5 -> 4
9999 mem: storing 0 in location 1076
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1066
 106 run: jump-unless full, 
9999 mem: location 1066 is 0
9998 run: jumping to instruction 9
 106 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1068
9999 mem: incrementing refcount of 1015: 1 -> 2
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1065 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1069
 106 run: dest:address:_elem <- index-address *circular-buffer, *free
9999 mem: location 1068 is 1015
9999 mem: skipping refcount at 1015
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 2
9999 mem: storing 1019 in location 1070
 106 run: *dest <- copy val
9999 mem: location 1064 is 10
9999 mem: location 1070 is 1019
9999 mem: storing 10 in location 1019
 106 run: *free <- add *free, 1
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1069 is 1013
9999 mem: storing 3 in location 1013
 106 run: len:number <- length *circular-buffer
9999 mem: location 1068 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 1071
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1069 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1071 is 11
9999 mem: storing 0 in location 1072
 106 run: jump-unless at-end?, 
9999 mem: location 1072 is 0
9998 run: jumping to instruction 20
 106 run: reply out:address:shared:sink:_elem
9999 mem: location 1063 is 1030
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1065
9999 mem: clearing full-address:address:number
9999 mem: storing 0 in location 1067
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 1068
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1069
9999 mem: clearing dest:address:_elem
9999 mem: storing 0 in location 1070
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1030
9999 mem: decrementing refcount of 1030: 5 -> 4
9999 mem: storing 1030 in location 2
9999 mem: incrementing refcount of 1030: 4 -> 5
 105 run: restart 6:number/buffer-routine
9999 mem: location 6 is 2
 105 run: wait-for-routine 6:number/buffer-routine
9999 mem: location 6 is 2
9998 run: waiting for routine 2
9990 schedule: read_2/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 101058
 105 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 2
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1014
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 101059
9999 mem: incrementing refcount of 1015: 1 -> 2
 105 run: result <- index *circular-buffer, *full
9999 mem: location 101059 is 1015
9999 mem: skipping refcount at 1015
9998 run: base address is 1016
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 2
9998 run: address to copy is 1019
9998 run: its type is character
9999 mem: location 1019 is 10
9999 mem: storing 10 in location 101060
 105 run: *full <- add *full, 1
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 2
9999 mem: location 101058 is 1012
9999 mem: storing 3 in location 1012
 105 run: len:number <- length *circular-buffer
9999 mem: location 101059 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 11 in location 101061
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101058 is 1012
9999 mem: location 1012 is 3
9999 mem: location 101061 is 11
9999 mem: storing 0 in location 101062
 105 run: jump-unless at-end?, 
9999 mem: location 101062 is 0
9998 run: jumping to instruction 18
 105 run: reply result:_elem, in:address:shared:source:_elem
9999 mem: location 101060 is 10
9999 mem: location 101054 is 1028
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 101055
9999 mem: clearing free-address:address:number
9999 mem: storing 0 in location 101057
9999 mem: clearing full:address:number
9999 mem: storing 0 in location 101058
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1015: 2 -> 1
9999 mem: storing 0 in location 101059
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 10
9998 run: result 1 is 1028
9999 mem: storing 10 in location 101006
9999 mem: decrementing refcount of 1028: 6 -> 5
9999 mem: storing 1028 in location 101003
9999 mem: incrementing refcount of 1028: 5 -> 6
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101006 is 10
9999 mem: storing 0 in location 101007
 104 run: jump-unless backspace?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 18
 104 run: line <- append_2 line, c
9999 mem: location 101005 is 101016
9999 mem: location 101006 is 10
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 1003
9999 mem: incrementing refcount of 101016: 4 -> 5
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1004
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 1005
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1004 is 10
9999 mem: storing 0 in location 1006
 105 run: jump-unless backspace?, 
9999 mem: location 1006 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 1003 is 101016
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 101066
9999 mem: incrementing refcount of 101016: 5 -> 6
 106 run: len:number <- get *in, length:offset
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is "number"
9999 mem: location 101017 is 2
9999 mem: storing 2 in location 101067
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 101066 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101068
9999 mem: incrementing refcount of 101019: 1 -> 2
 106 run: capacity:number <- length *s
9999 mem: location 101068 is 101019
9999 mem: skipping refcount at 101019
9999 mem: storing 30 in location 101069
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 101067 is 2
9999 mem: location 101069 is 30
9999 mem: storing 0 in location 101070
 106 run: reply result:boolean
9999 mem: location 101070 is 0
9999 mem: clearing in:address:shared:buffer
9999 mem: decrementing refcount of 101016: 6 -> 5
9999 mem: storing 0 in location 101066
9999 mem: clearing s:address:shared:array:character
9999 mem: decrementing refcount of 101019: 2 -> 1
9999 mem: storing 0 in location 101068
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1008
 105 run: jump-unless full?, 
9999 mem: location 1008 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 1009
9999 mem: incrementing refcount of 101019: 1 -> 2
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 1009 is 101019
9999 mem: skipping refcount at 101019
9999 mem: location 1005 is 101017
9999 mem: location 101017 is 2
9999 mem: storing 101023 in location 1010
 105 run: *dest <- copy c
9999 mem: location 1004 is 10
9999 mem: location 1010 is 101023
9999 mem: storing 10 in location 101023
 105 run: *len <- add *len, 1
9999 mem: location 1005 is 101017
9999 mem: location 101017 is 2
9999 mem: location 1005 is 101017
9999 mem: storing 3 in location 101017
 105 run: reply in:address:shared:buffer
9999 mem: location 1003 is 101016
9999 mem: clearing len:address:number
9999 mem: storing 0 in location 1005
9999 mem: clearing s:address:shared:array:character
9999 mem: decrementing refcount of 101019: 2 -> 1
9999 mem: storing 0 in location 1009
9999 mem: clearing dest:address:character
9999 mem: storing 0 in location 1010
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: decrementing refcount of 101016: 5 -> 4
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 4 -> 5
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101006 is 10
9999 mem: storing 1 in location 101010
 104 run: jump-if line-done?, 
9999 mem: location 101010 is 1
9998 run: jumping to instruction 25
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 101012
 104 run: line-contents:address:shared:array:character <- get *line, data:offset
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 3
9999 mem: location 101018 is 101019
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101013
9999 mem: incrementing refcount of 101019: 1 -> 2
 104 run: max:number <- get *line, length:offset
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 3
9999 mem: location 101018 is 101019
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is "number"
9999 mem: location 101017 is 3
9999 mem: storing 3 in location 101014
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 0
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101013 is 101019
9999 mem: skipping refcount at 101019
9998 run: base address is 101020
9999 mem: location 101012 is 0
9998 run: address to copy is 101021
9998 run: its type is character
9999 mem: location 101021 is 97
9999 mem: storing 97 in location 101006
 104 run: buffered-out <- write_2 buffered-out, c
9999 mem: location 101004 is 1051
9999 mem: location 101006 is 97
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
 105 run: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1051 in location 1063
9999 mem: incrementing refcount of 1051: 3 -> 4
 105 run: val:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1064
 105 run: chan:address:shared:channel:_elem <- get *out, chan:offset
9999 mem: location 1063 is 1051
9999 mem: skipping refcount at 1051
9999 mem: location 1052 is 1032
9999 mem: location 1063 is 1051
9999 mem: skipping refcount at 1051
9998 run: address to copy is 1052
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1052 is 1032
9999 mem: storing 1032 in location 1065
9999 mem: incrementing refcount of 1032: 3 -> 4
 105 run: full:boolean <- channel-full?_2 chan
9999 mem: location 1065 is 1032
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1076
9999 mem: incrementing refcount of 1032: 4 -> 5
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1077
 106 run: tmp <- add tmp, 1
9999 mem: location 1077 is 0
9999 mem: storing 1 in location 1077
 106 run: len:number <- capacity_2 chan
9999 mem: location 1076 is 1032
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 107 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1085
9999 mem: incrementing refcount of 1032: 5 -> 6
 107 run: q:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1085 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1085 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1035
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1086
9999 mem: incrementing refcount of 1036: 1 -> 2
 107 run: result <- length *q
9999 mem: location 1086 is 1036
9999 mem: skipping refcount at 1036
9999 mem: storing 11 in location 1087
 107 run: reply result:number
9999 mem: location 1087 is 11
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 6 -> 5
9999 mem: storing 0 in location 1085
9999 mem: clearing q:address:shared:array:_elem
9999 mem: decrementing refcount of 1036: 2 -> 1
9999 mem: storing 0 in location 1086
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 1078
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1077 is 1
9999 mem: location 1078 is 11
9999 mem: storing 0 in location 1079
 106 run: jump-unless at-end?, 
9999 mem: location 1079 is 0
9998 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1080
 106 run: result <- equal full, tmp
9999 mem: location 1080 is 0
9999 mem: location 1077 is 1
9999 mem: storing 0 in location 1081
 106 run: reply result:boolean
9999 mem: location 1081 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 5 -> 4
9999 mem: storing 0 in location 1076
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1066
 105 run: jump-unless full, 
9999 mem: location 1066 is 0
9998 run: jumping to instruction 9
 105 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1035
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1068
9999 mem: incrementing refcount of 1036: 1 -> 2
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1069
 105 run: dest:address:_elem <- index-address *circular-buffer, *free
9999 mem: location 1068 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 0
9999 mem: storing 1038 in location 1070
 105 run: *dest <- copy val
9999 mem: location 1064 is 97
9999 mem: location 1070 is 1038
9999 mem: storing 97 in location 1038
 105 run: *free <- add *free, 1
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1069 is 1034
9999 mem: storing 1 in location 1034
 105 run: len:number <- length *circular-buffer
9999 mem: location 1068 is 1036
9999 mem: skipping refcount at 1036
9999 mem: storing 11 in location 1071
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 1
9999 mem: location 1071 is 11
9999 mem: storing 0 in location 1072
 105 run: jump-unless at-end?, 
9999 mem: location 1072 is 0
9998 run: jumping to instruction 20
 105 run: reply out:address:shared:sink:_elem
9999 mem: location 1063 is 1051
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1065
9999 mem: clearing full-address:address:number
9999 mem: storing 0 in location 1067
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1036: 2 -> 1
9999 mem: storing 0 in location 1068
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1069
9999 mem: clearing dest:address:_elem
9999 mem: storing 0 in location 1070
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1051
9999 mem: decrementing refcount of 1051: 4 -> 3
9999 mem: storing 1051 in location 101004
9999 mem: incrementing refcount of 1051: 3 -> 4
 104 run: i <- add i, 1
9999 mem: location 101012 is 0
9999 mem: storing 1 in location 101012
 104 run: jump 
9998 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 1
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101013 is 101019
9999 mem: skipping refcount at 101019
9998 run: base address is 101020
9999 mem: location 101012 is 1
9998 run: address to copy is 101022
9998 run: its type is character
9999 mem: location 101022 is 98
9999 mem: storing 98 in location 101006
 104 run: buffered-out <- write_2 buffered-out, c
9999 mem: location 101004 is 1051
9999 mem: location 101006 is 98
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
 105 run: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1051 in location 1063
9999 mem: incrementing refcount of 1051: 4 -> 5
 105 run: val:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1064
 105 run: chan:address:shared:channel:_elem <- get *out, chan:offset
9999 mem: location 1063 is 1051
9999 mem: skipping refcount at 1051
9999 mem: location 1052 is 1032
9999 mem: location 1063 is 1051
9999 mem: skipping refcount at 1051
9998 run: address to copy is 1052
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1052 is 1032
9999 mem: storing 1032 in location 1065
9999 mem: incrementing refcount of 1032: 3 -> 4
 105 run: full:boolean <- channel-full?_2 chan
9999 mem: location 1065 is 1032
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1076
9999 mem: incrementing refcount of 1032: 4 -> 5
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 1
9999 mem: storing 1 in location 1077
 106 run: tmp <- add tmp, 1
9999 mem: location 1077 is 1
9999 mem: storing 2 in location 1077
 106 run: len:number <- capacity_2 chan
9999 mem: location 1076 is 1032
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 107 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1085
9999 mem: incrementing refcount of 1032: 5 -> 6
 107 run: q:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1085 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1085 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1035
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1086
9999 mem: incrementing refcount of 1036: 1 -> 2
 107 run: result <- length *q
9999 mem: location 1086 is 1036
9999 mem: skipping refcount at 1036
9999 mem: storing 11 in location 1087
 107 run: reply result:number
9999 mem: location 1087 is 11
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 6 -> 5
9999 mem: storing 0 in location 1085
9999 mem: clearing q:address:shared:array:_elem
9999 mem: decrementing refcount of 1036: 2 -> 1
9999 mem: storing 0 in location 1086
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 1078
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1077 is 2
9999 mem: location 1078 is 11
9999 mem: storing 0 in location 1079
 106 run: jump-unless at-end?, 
9999 mem: location 1079 is 0
9998 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1080
 106 run: result <- equal full, tmp
9999 mem: location 1080 is 0
9999 mem: location 1077 is 2
9999 mem: storing 0 in location 1081
 106 run: reply result:boolean
9999 mem: location 1081 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 5 -> 4
9999 mem: storing 0 in location 1076
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1066
 105 run: jump-unless full, 
9999 mem: location 1066 is 0
9998 run: jumping to instruction 9
 105 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1035
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1068
9999 mem: incrementing refcount of 1036: 1 -> 2
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1069
 105 run: dest:address:_elem <- index-address *circular-buffer, *free
9999 mem: location 1068 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 1
9999 mem: storing 1039 in location 1070
 105 run: *dest <- copy val
9999 mem: location 1064 is 98
9999 mem: location 1070 is 1039
9999 mem: storing 98 in location 1039
 105 run: *free <- add *free, 1
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 1
9999 mem: location 1069 is 1034
9999 mem: storing 2 in location 1034
 105 run: len:number <- length *circular-buffer
9999 mem: location 1068 is 1036
9999 mem: skipping refcount at 1036
9999 mem: storing 11 in location 1071
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1071 is 11
9999 mem: storing 0 in location 1072
 105 run: jump-unless at-end?, 
9999 mem: location 1072 is 0
9998 run: jumping to instruction 20
 105 run: reply out:address:shared:sink:_elem
9999 mem: location 1063 is 1051
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1065
9999 mem: clearing full-address:address:number
9999 mem: storing 0 in location 1067
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1036: 2 -> 1
9999 mem: storing 0 in location 1068
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1069
9999 mem: clearing dest:address:_elem
9999 mem: storing 0 in location 1070
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1051
9999 mem: decrementing refcount of 1051: 5 -> 4
9999 mem: storing 1051 in location 101004
9999 mem: incrementing refcount of 1051: 4 -> 5
 104 run: i <- add i, 1
9999 mem: location 101012 is 1
9999 mem: storing 2 in location 101012
 104 run: jump 
9998 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 2
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101013 is 101019
9999 mem: skipping refcount at 101019
9998 run: base address is 101020
9999 mem: location 101012 is 2
9998 run: address to copy is 101023
9998 run: its type is character
9999 mem: location 101023 is 10
9999 mem: storing 10 in location 101006
 104 run: buffered-out <- write_2 buffered-out, c
9999 mem: location 101004 is 1051
9999 mem: location 101006 is 10
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
 105 run: out:address:shared:sink:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1051 in location 1063
9999 mem: incrementing refcount of 1051: 5 -> 6
 105 run: val:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1064
 105 run: chan:address:shared:channel:_elem <- get *out, chan:offset
9999 mem: location 1063 is 1051
9999 mem: skipping refcount at 1051
9999 mem: location 1052 is 1032
9999 mem: location 1063 is 1051
9999 mem: skipping refcount at 1051
9998 run: address to copy is 1052
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1052 is 1032
9999 mem: storing 1032 in location 1065
9999 mem: incrementing refcount of 1032: 3 -> 4
 105 run: full:boolean <- channel-full?_2 chan
9999 mem: location 1065 is 1032
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1076
9999 mem: incrementing refcount of 1032: 4 -> 5
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 2
9999 mem: location 1035 is 1036
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 2
9999 mem: storing 2 in location 1077
 106 run: tmp <- add tmp, 1
9999 mem: location 1077 is 2
9999 mem: storing 3 in location 1077
 106 run: len:number <- capacity_2 chan
9999 mem: location 1076 is 1032
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 107 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1085
9999 mem: incrementing refcount of 1032: 5 -> 6
 107 run: q:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1085 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 2
9999 mem: location 1035 is 1036
9999 mem: location 1085 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1035
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1086
9999 mem: incrementing refcount of 1036: 1 -> 2
 107 run: result <- length *q
9999 mem: location 1086 is 1036
9999 mem: skipping refcount at 1036
9999 mem: storing 11 in location 1087
 107 run: reply result:number
9999 mem: location 1087 is 11
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 6 -> 5
9999 mem: storing 0 in location 1085
9999 mem: clearing q:address:shared:array:_elem
9999 mem: decrementing refcount of 1036: 2 -> 1
9999 mem: storing 0 in location 1086
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 1078
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1077 is 3
9999 mem: location 1078 is 11
9999 mem: storing 0 in location 1079
 106 run: jump-unless at-end?, 
9999 mem: location 1079 is 0
9998 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 2
9999 mem: location 1035 is 1036
9999 mem: location 1076 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1080
 106 run: result <- equal full, tmp
9999 mem: location 1080 is 0
9999 mem: location 1077 is 3
9999 mem: storing 0 in location 1081
 106 run: reply result:boolean
9999 mem: location 1081 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 5 -> 4
9999 mem: storing 0 in location 1076
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1066
 105 run: jump-unless full, 
9999 mem: location 1066 is 0
9998 run: jumping to instruction 9
 105 run: circular-buffer:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 2
9999 mem: location 1035 is 1036
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1035
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1068
9999 mem: incrementing refcount of 1036: 1 -> 2
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 2
9999 mem: location 1035 is 1036
9999 mem: location 1065 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1069
 105 run: dest:address:_elem <- index-address *circular-buffer, *free
9999 mem: location 1068 is 1036
9999 mem: skipping refcount at 1036
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 2
9999 mem: storing 1040 in location 1070
 105 run: *dest <- copy val
9999 mem: location 1064 is 10
9999 mem: location 1070 is 1040
9999 mem: storing 10 in location 1040
 105 run: *free <- add *free, 1
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1069 is 1034
9999 mem: storing 3 in location 1034
 105 run: len:number <- length *circular-buffer
9999 mem: location 1068 is 1036
9999 mem: skipping refcount at 1036
9999 mem: storing 11 in location 1071
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1069 is 1034
9999 mem: location 1034 is 3
9999 mem: location 1071 is 11
9999 mem: storing 0 in location 1072
 105 run: jump-unless at-end?, 
9999 mem: location 1072 is 0
9998 run: jumping to instruction 20
 105 run: reply out:address:shared:sink:_elem
9999 mem: location 1063 is 1051
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1065
9999 mem: clearing full-address:address:number
9999 mem: storing 0 in location 1067
9999 mem: clearing circular-buffer:address:shared:array:_elem
9999 mem: decrementing refcount of 1036: 2 -> 1
9999 mem: storing 0 in location 1068
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1069
9999 mem: clearing dest:address:_elem
9999 mem: storing 0 in location 1070
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1051
9999 mem: decrementing refcount of 1051: 6 -> 5
9999 mem: storing 1051 in location 101004
9999 mem: incrementing refcount of 1051: 5 -> 6
 104 run: i <- add i, 1
9999 mem: location 101012 is 2
9999 mem: storing 3 in location 101012
 104 run: jump 
9998 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 3
9999 mem: location 101014 is 3
9999 mem: storing 1 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 1
9998 run: jumping to instruction 36
 104 run: jump 
9998 run: jumping to instruction 4
 104 run: line:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 105 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1056
 105 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 101071
9999 mem: storing 101071 in location 1057
9999 mem: incrementing refcount of 101071: 0 -> 1
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1057 is 101071
9999 mem: skipping refcount at 101071
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 1057 is 101071
9999 mem: skipping refcount at 101071
9998 run: address to copy is 101072
9999 mem: storing 101072 in location 1058
 105 run: *len:address:number <- copy 0
9999 mem: location 1058 is 101072
9999 mem: storing 0 in location 101072
 105 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1057 is 101071
9999 mem: skipping refcount at 101071
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 1057 is 101071
9999 mem: skipping refcount at 101071
9998 run: address to copy is 101073
9999 mem: storing 101073 in location 1059
 105 run: *s <- new character:type, capacity
9999 mem: location 1056 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 101074
9999 mem: storing 30 in location 101075
9999 mem: location 1059 is 101073
9999 mem: storing 101074 in location 101073
9999 mem: incrementing refcount of 101074: 0 -> 1
 105 run: return result
9999 mem: location 1057 is 101071
9999 mem: clearing len:address:number
9999 mem: storing 0 in location 1058
9999 mem: clearing s:address:address:shared:array:character
9999 mem: storing 0 in location 1059
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101071
9999 mem: decrementing refcount of 101016: 5 -> 4
9999 mem: storing 101071 in location 101005
9999 mem: incrementing refcount of 101071: 1 -> 2
 104 run: c:character, in <- read_2 in
9999 mem: location 101003 is 1028
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 105 run: in:address:shared:source:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1028 in location 101054
9999 mem: incrementing refcount of 1028: 6 -> 7
 105 run: chan:address:shared:channel:_elem <- get *in, chan:offset
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9999 mem: location 1029 is 1011
9999 mem: location 101054 is 1028
9999 mem: skipping refcount at 1028
9998 run: address to copy is 1029
9998 run: its type is ("address" "shared" "channel" "character")
9999 mem: location 1029 is 1011
9999 mem: storing 1011 in location 101055
9999 mem: incrementing refcount of 1011: 2 -> 3
 105 run: empty?:boolean <- channel-empty?_2 chan
9999 mem: location 101055 is 1011
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1056
9999 mem: incrementing refcount of 1011: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 3
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 3
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1056 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 3
9999 mem: storing 3 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 3
9999 mem: location 1058 is 3
9999 mem: storing 1 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101056
 105 run: jump-unless empty?, 
9999 mem: location 101056 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 3
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 101055 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 101057
 105 run: wait-for-location *free-address
9999 mem: location 101057 is 1013
9999 mem: location 1013 is 3
9999 mem: location 101057 is 1013
9998 run: waiting for location 1013 to change from 3
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 10:boolean <- channel-empty?_2 4:address:shared:channel:character/buffered-stdin
9999 mem: location 4 is 1032
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1032 in location 1056
9999 mem: incrementing refcount of 1032: 3 -> 4
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 3
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1033
9998 run: its type is "number"
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1057
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 0
9999 mem: location 1034 is 3
9999 mem: location 1035 is 1036
9999 mem: location 1056 is 1032
9999 mem: skipping refcount at 1032
9998 run: address to copy is 1034
9998 run: its type is "number"
9999 mem: location 1034 is 3
9999 mem: storing 3 in location 1058
 106 run: result <- equal full, free
9999 mem: location 1057 is 0
9999 mem: location 1058 is 3
9999 mem: storing 0 in location 1059
 106 run: reply result:boolean
9999 mem: location 1059 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1032: 4 -> 3
9999 mem: storing 0 in location 1056
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 10
 105 run: 11:boolean/completed? <- not 10:boolean
9999 mem: location 10 is 0
9999 mem: storing 1 in location 11
 105 run: assert 11:boolean/completed?, [ 
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9999 mem: location 11 is 1
 105 run: trace 1, [test], [reached end]
   1 test: reached end 
 105 run: reply 
9999 trace: reply: decrementing callstack depth from 4
 104 run: trace-should-contain [
    test: reached end
  ]
 104 run: reply 
9999 trace: reply: decrementing callstack depth from 3
