9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {35: "literal"}
9993 parse:   product: {p: "point"}
9992 load: after rewriting: {p: "point"} <- merge {34: "literal"}, {35: "literal"}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {p: ()}
9993 parse:   product: {p: ()}
9992 load: after rewriting: {p: ()} <- foo {p: ()}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:point
9999 parse: header product: p:point
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {p: ()}
9993 parse:   ingredient: {x: "offset"}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {p: ()}
9992 load: after rewriting: {p: ()} <- put {p: ()}, {x: "offset"}, {34: "literal"}
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => "point"
9992 transform: p <= "point"
9992 transform: p <= "point"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {p: "point"} <- merge {34: "literal"}, {35: "literal"}
9993 transform: {p: "point"} <- foo {p: "point"}
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => "point"
9992 transform: p <= "point"
9992 transform: p <= "point"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {p: "point"} <- next-ingredient-without-typechecking 
9993 transform: {p: "point"} <- put {p: "point"}, {x: "offset"}, {34: "literal"}
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => "point"
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => "point"
9991 transform: --- deduce types from header for foo
9993 transform: type of p is "point"
9993 transform: type of p is "point"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {p: "point"} <- next-ingredient-without-typechecking 
9993 transform:   product: {p: "point"}
9992 transform: instruction: {p: "point"} <- put {p: "point"}, {x: "offset"}, {34: "literal"}
9993 transform:   product: {p: "point"}
9992 transform: instruction: reply {p: "point", "same-as-ingredient": "0"}
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: element x of type point is at offset 0
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {p: ()} <- foo {p: ()}
9992 transform: checking variant (strict) 0: recipe foo {p: "point"} -> {p: "point"}
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: instruction {p: ()} <- put {p: ()}, {x: "offset"}, {34: "literal"}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {p: "point"} <- merge {34: "literal"}, {35: "literal"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for {p: "point"} <- foo {p: "point"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for foo
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {p: "point"} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for {p: "point"} <- put {p: "point"}, {x: "offset"}, {34: "literal"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for reply {p: "point", "same-as-ingredient": "0"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: merge ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- check mutability of ingredients in recipe foo
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 2
9999 transform: checking container {p: "point"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {p: "point"} || {y: "number"} vs ingredient 1
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 3 in location 1001
 102 run: {p: "point"} <- merge {34: "literal"}, {35: "literal"}
9999 mem: storing 34 in location 1003
9999 mem: storing 35 in location 1004
 102 run: {p: "point"} <- foo {p: "point"}
9999 mem: location 1003 is 34
9999 mem: location 1004 is 35
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1005
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 3 in location 1006
 103 run: {p: "point"} <- next-ingredient-without-typechecking 
9999 mem: storing 34 in location 1008
9999 mem: storing 35 in location 1009
 103 run: {p: "point"} <- put {p: "point"}, {x: "offset"}, {34: "literal"}
9999 mem: location 1008 is 34
9999 mem: location 1009 is 35
9998 run: address to copy to is 1008
9999 mem: storing 34 in location 1008
 103 run: reply {p: "point", "same-as-ingredient": "0"}
9999 mem: location 1008 is 34
9999 mem: location 1009 is 35
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: (array number)
9999 abandon: saving 1005 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is [34, 35]
9999 mem: storing 34 in location 1003
9999 mem: storing 35 in location 1004
 102 run: reply 
9999 mem: clearing p:point
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: clearing p
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 1
