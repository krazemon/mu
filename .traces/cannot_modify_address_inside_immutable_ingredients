9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: x: ("address" "shared" "array" "number")
9991 parse: --- defining main
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:address:shared:foo
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: a: (), {"lookup": ()}
9993 parse:   ingredient: x: "offset"
9993 parse:   product: x: ("address" "shared" "array" "number")
9992 load: after rewriting: x:address:shared:array:number <- get *a, x:offset
9993 parse: instruction: index-address
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: x: (), {"lookup": ()}
9993 parse:   ingredient: 0: "literal"
9993 parse:   product: y: ("address" "number")
9992 load: after rewriting: y:address:number <- index-address *x, 0
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 34: "literal"
9993 parse:   product: y: (), {"lookup": ()}
9992 load: after rewriting: *y <- copy 34
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite 'stash' instructions in recipe foo
9993 transform: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform: a:address:shared:foo <- next-ingredient-without-typechecking 
9993 transform: x:address:shared:array:number <- get *a, x:offset
9993 transform: y:address:number <- index-address *x, 0
9993 transform: *y <- copy 34
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: a => ("address" "shared" "foo")
9992 transform: a <= ("address" "shared" "foo")
9992 transform: x => ("address" "shared" "array" "number")
9992 transform: x <= ("address" "shared" "array" "number")
9992 transform: y => ("address" "number")
9992 transform: y <= ("address" "number")
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe foo
9993 name: assign a 1
9993 name: element x of type foo is at offset 0
9993 name: assign x 2
9993 name: assign y 3
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: index-address ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe foo
   0 error: foo: cannot modify x after instruction 'y:address:number <- index-address *x, 0' because that would modify ingredient a which is not also a product of foo

9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
