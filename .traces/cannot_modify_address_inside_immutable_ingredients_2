9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: ("address" "array" "number")}
9991 parse: --- defining main
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:address:foo
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: merge
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {b: "foo"}
9992 load: after rewriting: {b: "foo"} <- merge {0: "literal"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {b: ()}
9993 parse:   ingredient: {x: "offset"}
9993 parse:   product: {x: ("address" "array" "number")}
9992 load: after rewriting: {x: ("address" "array" "number")} <- get {b: ()}, {x: "offset"}
9993 parse: instruction: put-index
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {x: (), "lookup": ()}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {x: (), "lookup": ()}
9992 load: after rewriting: {x: (), "lookup": ()} <- put-index {x: (), "lookup": ()}, {0: "literal"}, {34: "literal"}
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => ("address" "foo")
9992 transform: b => "foo"
9992 transform: b <= "foo"
9992 transform: x => ("address" "array" "number")
9992 transform: x <= ("address" "array" "number")
9992 transform: x <= ("address" "array" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {a: ("address" "foo")} <- next-ingredient-without-typechecking 
9993 transform: {b: "foo"} <- merge {0: "literal"}
9993 transform: {x: ("address" "array" "number")} <- get {b: "foo"}, {x: "offset"}
9993 transform: {x: ("address" "array" "number"), "lookup": ()} <- put-index {x: ("address" "array" "number"), "lookup": ()}, {0: "literal"}, {34: "literal"}
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => ("address" "foo")
9992 transform: b => "foo"
9992 transform: x => ("address" "array" "number")
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe foo
9993 name: assign a 1
9993 name: assign b 2
9993 name: element x of type foo is at offset 0
9993 name: assign x 3
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: instruction {x: (), "lookup": ()} <- put-index {x: (), "lookup": ()}, {0: "literal"}, {34: "literal"}
9992 transform: checking variant (strict) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put-index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for foo
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {a: ("address" "foo")} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container foo
9993 transform: checking container foo, element 0
9993 transform: address at offset 0
9993 transform: - compute address offsets for {b: "foo"} <- merge {0: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "number")} <- get {b: "foo"}, {x: "offset"}
9993 transform: - compute address offsets for {x: ("address" "array" "number"), "lookup": ()} <- put-index {x: ("address" "array" "number"), "lookup": ()}, {0: "literal"}, {34: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: merge ...
9992 transform: get ...
9992 transform: put-index ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe foo
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe foo
9999 transform: 0 vs 1
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
9999 trace: fall-through: exiting main; decrementing callstack depth from 1
