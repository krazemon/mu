9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: point: "type"
9993 parse:   product: p: ("address" "shared" "point")
9992 load: after rewriting: p:address:shared:point <- new point:type
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: p: ()
9992 load: after rewriting: foo p
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:shared:point
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: p: ()
9993 parse:   product: q: ("address" "shared" "point")
9992 load: after rewriting: q:address:shared:point <- copy p
9993 parse: instruction: get-address
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: q: (), {"lookup": ()}
9993 parse:   ingredient: x: "offset"
9993 parse:   product: x: ("address" "number")
9992 load: after rewriting: x:address:number <- get-address *q, x:offset
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: p => ("address" "shared" "point")
9992 transform: p <= ("address" "shared" "point")
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: p => ("address" "shared" "point")
9992 transform: p <= ("address" "shared" "point")
9992 transform: q => ("address" "shared" "point")
9992 transform: q <= ("address" "shared" "point")
9992 transform: x => ("address" "number")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: assign q 2
9993 name: element x of type point is at offset 0
9993 name: assign x 3
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo p
9992 transform: checking variant (strict) 0: recipe foo p: ("address" "shared" "point")
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- check mutability of ingredients in recipe foo
   0 error: foo: cannot modify q after instruction 'x:address:number <- get-address *q, x:offset' because that would modify ingredient p which is not also a product of foo

9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "point" is 2
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
