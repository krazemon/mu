9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {35: "literal"}
9993 parse:   ingredient: {36: "literal"}
9993 parse:   product: {x: "point-number"}
9992 load: after rewriting: {x: "point-number"} <- merge {34: "literal"}, {35: "literal"}, {36: "literal"}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ()}
9992 load: after rewriting: foo {x: ()}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:point-number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {xy: "offset"}
9993 parse:   product: {y: "point"}
9992 load: after rewriting: {y: "point"} <- get {x: ()}, {xy: "offset"}
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {y: ()}
9993 parse:   ingredient: {x: "offset"}
9993 parse:   ingredient: {37: "literal"}
9993 parse:   product: {y: ()}
9992 load: after rewriting: {y: ()} <- put {y: ()}, {x: "offset"}, {37: "literal"}
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "point-number"
9992 transform: x <= "point-number"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "point-number"} <- merge {34: "literal"}, {35: "literal"}, {36: "literal"}
9993 transform: foo {x: "point-number"}
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "point-number"
9992 transform: x <= "point-number"
9992 transform: y => "point"
9992 transform: y <= "point"
9992 transform: y <= "point"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "point-number"} <- next-ingredient-without-typechecking 
9993 transform: {y: "point"} <- get {x: "point-number"}, {xy: "offset"}
9993 transform: {y: "point"} <- put {y: "point"}, {x: "offset"}, {37: "literal"}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "point-number"
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "point-number"
9992 transform: y => "point"
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign x 1
9991 transform: --- transform names for recipe foo
9993 name: assign x 1
9993 name: element xy of type point-number is at offset 0
9993 name: assign y 4
9993 name: element x of type point is at offset 0
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo {x: ()}
9992 transform: checking variant (strict) 0: recipe foo {x: "point-number"}
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: instruction {y: ()} <- put {y: ()}, {x: "offset"}, {37: "literal"}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "point-number"} <- merge {34: "literal"}, {35: "literal"}, {36: "literal"}
9994 transform: compute address offsets for container point-number
9993 transform: checking container point-number, element 0
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: checking container point-number, element 1
9993 transform: - compute address offsets for foo {x: "point-number"}
9994 transform: compute address offsets for container point-number
9993 transform: checking container point-number, element 0
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: checking container point-number, element 1
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for foo
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "point-number"} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container point-number
9993 transform: checking container point-number, element 0
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: checking container point-number, element 1
9993 transform: - compute address offsets for {y: "point"} <- get {x: "point-number"}, {xy: "offset"}
9994 transform: compute address offsets for container point-number
9993 transform: checking container point-number, element 0
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: checking container point-number, element 1
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for {y: "point"} <- put {y: "point"}, {x: "offset"}, {37: "literal"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: merge ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- check mutability of ingredients in recipe foo
   0 error: foo: cannot modify 'y' in instruction 'y <- put y, x:offset, 37' because that would modify 'x' which is an ingredient of recipe foo but not also a product

9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 3
9999 transform: checking container {x: "point-number"} || {xy: "point"} vs ingredient 0
9999 transform: 0 vs 3
9999 transform: checking container {xy: "point"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {xy: "point"} || {y: "number"} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {x: "point-number"} || {z: "number"} vs ingredient 2
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
