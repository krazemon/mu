9991 parse: --- defining scenario_channel
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 3/capacity\n    2:address:shared:sink:number <- write 2:address:shared:sink:number, 34\n    3:number, 1:address:shared:source:number <- read 1:address:shared:source:number\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 3/capacity\n    2:address:shared:sink:number <- write 2:address:shared:sink:number, 34\n    3:number, 1:address:shared:source:number <- read 1:address:shared:source:number\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 34\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    3 <- 34\n  ": "literal-string"}
9999 parse: recipe scenario_channel has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_channel
9991 transform: --- rewrite 'stash' instructions in recipe scenario_channel
9991 transform: --- deduce types for recipe scenario_channel
9993 transform: run {"\n    1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 3/capacity\n    2:address:shared:sink:number <- write 2:address:shared:sink:number, 34\n    3:number, 1:address:shared:source:number <- read 1:address:shared:source:number\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    3 <- 34\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_channel
9991 transform: --- deduce types for recipe scenario_channel
9991 transform: --- check for invalid types in recipe scenario_channel
9991 transform: --- collect surrounding spaces for recipe scenario_channel
9991 transform: --- transform names for recipe scenario_channel
9991 transform: --- resolve ambiguous calls for recipe scenario_channel
9991 transform: --- compute instruction operations for recipe scenario_channel
9991 transform: --- transform braces for recipe scenario_channel
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_channel
9991 transform: --- perform checks for recipe scenario_channel
9991 transform: --- type-check 'call' instructions inside recipe scenario_channel
9991 transform: --- type-check calls inside recipe scenario_channel
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_channel
9991 transform: --- type-check merge instructions in recipe scenario_channel
9991 transform: --- check types of reply instructions in recipe scenario_channel
9991 transform: --- checking reply instructions against header for scenario_channel
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_channel
 102 run: run {"\n    1:address:shared:source:number, 2:address:shared:sink:number <- new-channel 3/capacity\n    2:address:shared:sink:number <- write 2:address:shared:sink:number, 34\n    3:number, 1:address:shared:source:number <- read 1:address:shared:source:number\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "literal", "capacity": ()}
9993 parse:   product: {1: ("address" "shared" "source" "number")}
9993 parse:   product: {2: ("address" "shared" "sink" "number")}
9992 load: after rewriting: {1: ("address" "shared" "source" "number")}, {2: ("address" "shared" "sink" "number")} <- new-channel {3: "literal", "capacity": ()}
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "shared" "sink" "number")}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {2: ("address" "shared" "sink" "number")}
9992 load: after rewriting: {2: ("address" "shared" "sink" "number")} <- write {2: ("address" "shared" "sink" "number")}, {34: "literal"}
9993 parse: instruction: read
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "shared" "source" "number")}
9993 parse:   product: {3: "number"}
9993 parse:   product: {1: ("address" "shared" "source" "number")}
9992 load: after rewriting: {3: "number"}, {1: ("address" "shared" "source" "number")} <- read {1: ("address" "shared" "source" "number")}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "shared" "source" "number")}, {2: ("address" "shared" "sink" "number")} <- new-channel {3: "literal", "capacity": ()}
9992 transform: checking variant (strict) 0: recipe new-channel {capacity: "number"} -> {in: ("address" "shared" "source" "_elem")} {out: ("address" "shared" "sink" "_elem")}
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 1: recipe new-channel_2 {capacity: "number"} -> {in: ("address" "shared" "source" "character")} {out: ("address" "shared" "sink" "character")}
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 227 new-channel
9993 transform: switching new-channel to specialized recipe new-channel_3 {capacity: "number"} -> {in: ("address" "shared" "source" "_elem")} {out: ("address" "shared" "sink" "_elem")}
9993 transform: compute type names: new-channel_3
9994 transform:     checking {capacity: "number"}: "number"
9993 transform: type of capacity is "number"
9994 transform:     checking {in: ("address" "shared" "source" "_elem")}: ("address" "shared" "source" "_elem")
9993 transform: type of in is ("address" "shared" "source" "_elem")
9994 transform:     checking {out: ("address" "shared" "sink" "_elem")}: ("address" "shared" "sink" "_elem")
9993 transform: type of out is ("address" "shared" "sink" "_elem")
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {capacity: "number"} <- next-ingredient-without-typechecking 
9994 transform:     checking {capacity: "number"}: "number"
9993 transform:   instruction: {result: ("address" "shared" "channel" "_elem")} <- new {(channel _elem): "type"}
9994 transform:     checking {(channel _elem): "type"}: "type"
9993 transform: type of (channel _elem) is "type"
9994 transform:     checking {result: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform: type of result is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {0: "literal"}: "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {capacity: ()} <- add {capacity: ()}, {1: "literal"}
9994 transform:     checking {capacity: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {capacity: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {data: ("address" "shared" "array" "_elem")} <- new {_elem: "type"}, {capacity: ()}
9994 transform:     checking {_elem: "type"}: "type"
9993 transform: type of _elem is "type"
9994 transform:     checking {capacity: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {data: ("address" "shared" "array" "_elem")}: ("address" "shared" "array" "_elem")
9993 transform: type of data is ("address" "shared" "array" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {data: "offset"}, {data: ()}
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {data: ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {in: ()} <- new {(source _elem): "type"}
9994 transform:     checking {(source _elem): "type"}: "type"
9993 transform: type of (source _elem) is "type"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "shared" "source" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "source" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "source" "_elem")
9993 transform:   instruction: {out: ()} <- new {(sink _elem): "type"}
9994 transform:     checking {(sink _elem): "type"}: "type"
9993 transform: type of (sink _elem) is "type"
9994 transform:     checking {out: ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9993 transform:   instruction: {out: (), "lookup": ()} <- put {out: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:source:_elem
9993 transform: _elem => "number"
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{capacity: "number"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in instruction '{result: ("address" "shared" "channel" "_elem")} <- new {(channel _elem): "type"}'
9993 transform: replacing in ingredient {(channel _elem): type}
9993 transform: replacing in ingredient result:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "shared" "channel" "_elem"), "lookup": ()} <- put {result: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "shared" "channel" "_elem"), "lookup": ()} <- put {result: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{capacity: "number"} <- add {capacity: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient capacity
9993 transform: replacing in instruction '{data: ("address" "shared" "array" "_elem")} <- new {_elem: "type"}, {capacity: "number"}'
9993 transform: replacing in ingredient _elem:type
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient data:address:shared:array:_elem
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "shared" "channel" "_elem"), "lookup": ()} <- put {result: ("address" "shared" "channel" "_elem"), "lookup": ()}, {data: "offset"}, {data: ("address" "shared" "array" "_elem")}'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient data
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{in: ("address" "shared" "source" "_elem")} <- new {(source _elem): "type"}'
9993 transform: replacing in ingredient {(source _elem): type}
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{in: ("address" "shared" "source" "_elem"), "lookup": ()} <- put {in: ("address" "shared" "source" "_elem"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{out: ("address" "shared" "sink" "_elem")} <- new {(sink _elem): "type"}'
9993 transform: replacing in ingredient {(sink _elem): type}
9993 transform: replacing in ingredient out
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{out: ("address" "shared" "sink" "_elem"), "lookup": ()} <- put {out: ("address" "shared" "sink" "_elem"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "_elem")}'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *out
9993 transform: _elem => "number"
9992 transform: transforming new specialization: new-channel_3
9991 transform: --- rewrite literal strings in recipe new-channel_3
9991 transform: --- rewrite 'stash' instructions in recipe new-channel_3
9991 transform: --- deduce types for recipe new-channel_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: capacity => "number"
9992 transform: result => ("address" "shared" "channel" "number")
9992 transform: data => ("address" "shared" "array" "number")
9992 transform: in => ("address" "shared" "source" "number")
9992 transform: out => ("address" "shared" "sink" "number")
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {capacity: "number"} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "shared" "channel" "number")} <- new {(channel number): "type"}
9993 transform: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9993 transform: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9993 transform: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9993 transform: {data: ("address" "shared" "array" "number")} <- new {number: "type"}, {capacity: "number"}
9993 transform: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}, {data: ("address" "shared" "array" "number")}
9993 transform: {in: ("address" "shared" "source" "number")} <- new {(source number): "type"}
9993 transform: {in: ("address" "shared" "source" "number"), "lookup": ()} <- put {in: ("address" "shared" "source" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "number")}
9993 transform: {out: ("address" "shared" "sink" "number")} <- new {(sink number): "type"}
9993 transform: {out: ("address" "shared" "sink" "number"), "lookup": ()} <- put {out: ("address" "shared" "sink" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "number")}
9991 transform: --- checking reply instructions against header for new-channel_3
9991 transform: --- fill in reply ingredients from header for recipe new-channel_3
9991 transform: --- deduce types for recipe new-channel_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: capacity => "number"
9992 transform: result => ("address" "shared" "channel" "number")
9992 transform: data => ("address" "shared" "array" "number")
9992 transform: in => ("address" "shared" "source" "number")
9992 transform: out => ("address" "shared" "sink" "number")
9991 transform: --- deduce types from header for new-channel_3
9993 transform: type of capacity is "number"
9993 transform: type of in is ("address" "shared" "source" "number")
9993 transform: type of out is ("address" "shared" "sink" "number")
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {capacity: "number"} <- next-ingredient-without-typechecking 
9993 transform:   product: {capacity: "number"}
9992 transform: instruction: {result: ("address" "shared" "channel" "number")} <- new {(channel number): "type"}
9993 transform:   product: {result: ("address" "shared" "channel" "number")}
9992 transform: instruction: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9993 transform:   product: {result: ("address" "shared" "channel" "number"), "lookup": ()}
9992 transform: instruction: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9993 transform:   product: {result: ("address" "shared" "channel" "number"), "lookup": ()}
9992 transform: instruction: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9993 transform:   product: {capacity: "number"}
9992 transform: instruction: {data: ("address" "shared" "array" "number")} <- new {number: "type"}, {capacity: "number"}
9993 transform:   product: {data: ("address" "shared" "array" "number")}
9992 transform: instruction: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}, {data: ("address" "shared" "array" "number")}
9993 transform:   product: {result: ("address" "shared" "channel" "number"), "lookup": ()}
9992 transform: instruction: {in: ("address" "shared" "source" "number")} <- new {(source number): "type"}
9993 transform:   product: {in: ("address" "shared" "source" "number")}
9992 transform: instruction: {in: ("address" "shared" "source" "number"), "lookup": ()} <- put {in: ("address" "shared" "source" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "number")}
9993 transform:   product: {in: ("address" "shared" "source" "number"), "lookup": ()}
9992 transform: instruction: {out: ("address" "shared" "sink" "number")} <- new {(sink number): "type"}
9993 transform:   product: {out: ("address" "shared" "sink" "number")}
9992 transform: instruction: {out: ("address" "shared" "sink" "number"), "lookup": ()} <- put {out: ("address" "shared" "sink" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "number")}
9993 transform:   product: {out: ("address" "shared" "sink" "number"), "lookup": ()}
9992 transform: instruction: reply {in: ("address" "shared" "source" "number")}, {out: ("address" "shared" "sink" "number")}
9991 transform: --- check for invalid types in recipe new-channel_3
9991 transform: --- collect surrounding spaces for recipe new-channel_3
9991 transform: --- transform names for recipe new-channel_3
9993 name: assign capacity 1
9993 name: assign result 2
9993 name: element first-full of type channel is at offset 0
9993 name: element first-free of type channel is at offset 1
9993 name: assign data 3
9993 name: element data of type channel is at offset 2
9993 name: assign in 4
9993 name: element chan of type source is at offset 0
9993 name: assign out 5
9993 name: element chan of type sink is at offset 0
9991 transform: --- resolve ambiguous calls for recipe new-channel_3
9992 transform: instruction {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {data: "offset"}, {data: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {out: (), "lookup": ()} <- put {out: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe new-channel_3
9991 transform: --- transform braces for recipe new-channel_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform: put ...
9992 transform: put ...
9992 transform: add ...
9992 transform: new ...
9992 transform: put ...
9992 transform: new ...
9992 transform: put ...
9992 transform: new ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe new-channel_3
9991 transform: --- perform checks for recipe new-channel_3
9991 transform: --- type-check 'call' instructions inside recipe new-channel_3
9991 transform: --- type-check calls inside recipe new-channel_3
9991 transform: --- convert 'new' to 'allocate' for recipe new-channel_3
9992 new: size of "location" is 1
9992 new: size of ("channel" "number") is 3
9992 new: size of "number" is 1
9992 new: size of ("source" "number") is 1
9992 new: size of ("sink" "number") is 1
9991 transform: --- type-check merge instructions in recipe new-channel_3
9991 transform: --- check types of reply instructions in recipe new-channel_3
9991 transform: --- check that recipe new-channel_3 sets default-space
9991 transform: --- checking reply instructions against header for new-channel_3
9992 transform: new specialization: new-channel_3
9992 transform: instruction {2: ("address" "shared" "sink" "number")} <- write {2: ("address" "shared" "sink" "number")}, {34: "literal"}
9992 transform: checking variant (strict) 0: recipe write {out: ("address" "shared" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "shared" "sink" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 {out: ("address" "shared" "sink" "character")} {val: "character"} -> {out: ("address" "shared" "sink" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 228 write
9993 transform: switching write to specialized recipe write_3 {out: ("address" "shared" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "shared" "sink" "_elem")}
9993 transform: compute type names: write_3
9994 transform:     checking {out: ("address" "shared" "sink" "_elem")}: ("address" "shared" "sink" "_elem")
9993 transform: type of out is ("address" "shared" "sink" "_elem")
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform: type of val is "_elem"
9994 transform:     checking {out: ("address" "shared" "sink" "_elem")}: ("address" "shared" "sink" "_elem")
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {out: ("address" "shared" "sink" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {out: ("address" "shared" "sink" "_elem")}: ("address" "shared" "sink" "_elem")
9993 transform:   instruction: {val: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform:   instruction: {chan: ("address" "shared" "channel" "_elem")} <- get {out: (), "lookup": ()}, {chan: "offset"}
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "sink" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: {full: "boolean"} <- channel-full? {chan: ()}
9994 transform:     checking {chan: ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {full: "boolean"}: "boolean"
9993 transform: type of full is "boolean"
9993 transform:   instruction: break-unless {full: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {full-address: ("address" "number")} <- get-address {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full-address: ("address" "number")}: ("address" "number")
9993 transform: type of full-address is ("address" "number")
9993 transform:   instruction: wait-for-location {full-address: ()}
9994 transform:     checking {full-address: ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform:   instruction: {circular-buffer: ("address" "shared" "array" "_elem")} <- get {chan: (), "lookup": ()}, {data: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {circular-buffer: ("address" "shared" "array" "_elem")}: ("address" "shared" "array" "_elem")
9993 transform: type of circular-buffer is ("address" "shared" "array" "_elem")
9993 transform:   instruction: {free: "number"} <- get {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: "number"}: "number"
9993 transform: type of free is "number"
9993 transform:   instruction: {dest: ("address" "_elem")} <- index-address {circular-buffer: (), "lookup": ()}, {free: ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {dest: ("address" "_elem")}: ("address" "_elem")
9993 transform: type of dest is ("address" "_elem")
9993 transform:   instruction: {dest: (), "lookup": ()} <- copy {val: ()}
9994 transform:     checking {val: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {dest: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: {free: ()} <- add {free: ()}, {1: "literal"}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking {len: "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: {at-end?: "boolean"} <- greater-or-equal {free: ()}, {len: ()}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {len: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {at-end?: "boolean"}: "boolean"
9993 transform: type of at-end? is "boolean"
9993 transform:   instruction: break-unless {at-end?: ()}
9994 transform:     checking {at-end?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {free: ()} <- copy {0: "literal"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-free: "offset"}, {free: ()}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "number"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{out: ("address" "shared" "sink" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:shared:sink:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{val: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{chan: ("address" "shared" "channel" "_elem")} <- get {out: ("address" "shared" "sink" "_elem"), "lookup": ()}, {chan: "offset"}'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{full: "boolean"} <- channel-full? {chan: ("address" "shared" "channel" "_elem")}'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless {full: "boolean"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction '{full-address: ("address" "number")} <- get-address {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:address:number
9993 transform: replacing in instruction 'wait-for-location {full-address: ("address" "number")}'
9993 transform: replacing in ingredient full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{circular-buffer: ("address" "shared" "array" "_elem")} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {data: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:shared:array:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{free: "number"} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:number
9993 transform: replacing in instruction '{dest: ("address" "_elem")} <- index-address {circular-buffer: ("address" "shared" "array" "_elem"), "lookup": ()}, {free: "number"}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "number"
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient dest:address:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{dest: ("address" "_elem"), "lookup": ()} <- copy {val: "_elem"}'
9993 transform: replacing in ingredient val
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *dest
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{free: "number"} <- add {free: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{len: "number"} <- length {circular-buffer: ("address" "shared" "array" "_elem"), "lookup": ()}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "number"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction '{at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless {at-end?: "boolean"}'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '{free: "number"} <- copy {0: "literal"}'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{chan: ("address" "shared" "channel" "_elem"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}, {free: "number"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9992 transform: transforming new specialization: write_3
9991 transform: --- rewrite literal strings in recipe write_3
9991 transform: --- rewrite 'stash' instructions in recipe write_3
9991 transform: --- deduce types for recipe write_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: out => ("address" "shared" "sink" "number")
9992 transform: val => "number"
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: full => "boolean"
9992 transform: full-address => ("address" "number")
9992 transform: circular-buffer => ("address" "shared" "array" "number")
9992 transform: free => "number"
9992 transform: dest => ("address" "number")
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {out: ("address" "shared" "sink" "number")} <- next-ingredient-without-typechecking 
9993 transform: {val: "number"} <- next-ingredient-without-typechecking 
9993 transform: {chan: ("address" "shared" "channel" "number")} <- get {out: ("address" "shared" "sink" "number"), "lookup": ()}, {chan: "offset"}
9993 transform: {
9993 transform: {full: "boolean"} <- channel-full? {chan: ("address" "shared" "channel" "number")}
9993 transform: break-unless {full: "boolean"}
9993 transform: {full-address: ("address" "number")} <- get-address {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform: wait-for-location {full-address: ("address" "number")}
9993 transform: }
9993 transform: {circular-buffer: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9993 transform: {free: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform: {dest: ("address" "number")} <- index-address {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}, {free: "number"}
9993 transform: {dest: ("address" "number"), "lookup": ()} <- copy {val: "number"}
9993 transform: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: {
9993 transform: {len: "number"} <- length {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}
9993 transform: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: break-unless {at-end?: "boolean"}
9993 transform: {free: "number"} <- copy {0: "literal"}
9993 transform: }
9993 transform: {chan: ("address" "shared" "channel" "number"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9991 transform: --- checking reply instructions against header for write_3
9991 transform: --- fill in reply ingredients from header for recipe write_3
9991 transform: --- deduce types for recipe write_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: out => ("address" "shared" "sink" "number")
9992 transform: val => "number"
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: full => "boolean"
9992 transform: full-address => ("address" "number")
9992 transform: circular-buffer => ("address" "shared" "array" "number")
9992 transform: free => "number"
9992 transform: dest => ("address" "number")
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_3
9993 transform: type of out is ("address" "shared" "sink" "number")
9993 transform: type of val is "number"
9993 transform: type of out is ("address" "shared" "sink" "number")
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {out: ("address" "shared" "sink" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {out: ("address" "shared" "sink" "number")}
9992 transform: instruction: {val: "number"} <- next-ingredient-without-typechecking 
9993 transform:   product: {val: "number"}
9992 transform: instruction: {chan: ("address" "shared" "channel" "number")} <- get {out: ("address" "shared" "sink" "number"), "lookup": ()}, {chan: "offset"}
9993 transform:   product: {chan: ("address" "shared" "channel" "number")}
9992 transform: instruction: {
9992 transform: instruction: {full: "boolean"} <- channel-full? {chan: ("address" "shared" "channel" "number")}
9993 transform:   product: {full: "boolean"}
9992 transform: instruction: break-unless {full: "boolean"}
9992 transform: instruction: {full-address: ("address" "number")} <- get-address {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full-address: ("address" "number")}
9992 transform: instruction: wait-for-location {full-address: ("address" "number")}
9992 transform: instruction: }
9992 transform: instruction: {circular-buffer: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9993 transform:   product: {circular-buffer: ("address" "shared" "array" "number")}
9992 transform: instruction: {free: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {dest: ("address" "number")} <- index-address {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}, {free: "number"}
9993 transform:   product: {dest: ("address" "number")}
9992 transform: instruction: {dest: ("address" "number"), "lookup": ()} <- copy {val: "number"}
9993 transform:   product: {dest: ("address" "number"), "lookup": ()}
9992 transform: instruction: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {
9992 transform: instruction: {len: "number"} <- length {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}
9993 transform:   product: {len: "number"}
9992 transform: instruction: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform:   product: {at-end?: "boolean"}
9992 transform: instruction: break-unless {at-end?: "boolean"}
9992 transform: instruction: {free: "number"} <- copy {0: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: }
9992 transform: instruction: {chan: ("address" "shared" "channel" "number"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform:   product: {chan: ("address" "shared" "channel" "number"), "lookup": ()}
9992 transform: instruction: reply {out: ("address" "shared" "sink" "number"), "same-as-ingredient": "0"}
9991 transform: --- check for invalid types in recipe write_3
9991 transform: --- collect surrounding spaces for recipe write_3
9991 transform: --- transform names for recipe write_3
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign dest 8
9993 name: assign len 9
9993 name: assign at-end? 10
9993 name: element first-free of type channel is at offset 1
9991 transform: --- resolve ambiguous calls for recipe write_3
9992 transform: instruction {full: "boolean"} <- channel-full? {chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-full? {chan: ("address" "shared" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 {chan: ("address" "shared" "channel" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 232 channel-full?
9993 transform: switching channel-full? to specialized recipe channel-full?_3 {chan: ("address" "shared" "channel" "_elem")} -> {result: "boolean"}
9993 transform: compute type names: channel-full?_3
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9994 transform:     checking {result: "boolean"}: "boolean"
9993 transform: type of result is "boolean"
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {chan: ("address" "shared" "channel" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {tmp: "number"} <- get {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {tmp: "number"}: "number"
9993 transform: type of tmp is "number"
9993 transform:   instruction: {tmp: ()} <- add {tmp: ()}, {1: "literal"}
9994 transform:     checking {tmp: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {tmp: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: {len: "number"} <- capacity {chan: ()}
9994 transform:     checking {chan: ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {len: "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: {at-end?: "boolean"} <- greater-or-equal {tmp: ()}, {len: ()}
9994 transform:     checking {tmp: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {len: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {at-end?: "boolean"}: "boolean"
9993 transform: type of at-end? is "boolean"
9993 transform:   instruction: break-unless {at-end?: ()}
9994 transform:     checking {at-end?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {tmp: ()} <- copy {0: "literal"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {tmp: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: {full: "number"} <- get {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full: "number"}: "number"
9993 transform: type of full is "number"
9993 transform:   instruction: {result: ()} <- equal {full: ()}, {tmp: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {tmp: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:boolean
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{chan: ("address" "shared" "channel" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{tmp: "number"} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient tmp:number
9993 transform: replacing in instruction '{tmp: "number"} <- add {tmp: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient tmp
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient tmp
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{len: "number"} <- capacity {chan: ("address" "shared" "channel" "_elem")}'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction '{at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}'
9993 transform: replacing in ingredient tmp
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless {at-end?: "boolean"}'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '{tmp: "number"} <- copy {0: "literal"}'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient tmp
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{full: "number"} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full:number
9993 transform: replacing in instruction '{result: "boolean"} <- equal {full: "number"}, {tmp: "number"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient tmp
9993 transform: replacing in ingredient result
9992 transform: transforming new specialization: channel-full?_3
9991 transform: --- rewrite literal strings in recipe channel-full?_3
9991 transform: --- rewrite 'stash' instructions in recipe channel-full?_3
9991 transform: --- deduce types for recipe channel-full?_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: tmp => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9992 transform: full => "number"
9992 transform: result => "boolean"
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9993 transform: {tmp: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9993 transform: {
9993 transform: {len: "number"} <- capacity {chan: ("address" "shared" "channel" "number")}
9993 transform: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9993 transform: break-unless {at-end?: "boolean"}
9993 transform: {tmp: "number"} <- copy {0: "literal"}
9993 transform: }
9993 transform: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9991 transform: --- checking reply instructions against header for channel-full?_3
9991 transform: --- fill in reply ingredients from header for recipe channel-full?_3
9991 transform: --- deduce types for recipe channel-full?_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: tmp => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9992 transform: full => "number"
9992 transform: result => "boolean"
9991 transform: --- deduce types from header for channel-full?_3
9993 transform: type of chan is ("address" "shared" "channel" "number")
9993 transform: type of result is "boolean"
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {chan: ("address" "shared" "channel" "number")}
9992 transform: instruction: {tmp: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {tmp: "number"}
9992 transform: instruction: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9993 transform:   product: {tmp: "number"}
9992 transform: instruction: {
9992 transform: instruction: {len: "number"} <- capacity {chan: ("address" "shared" "channel" "number")}
9993 transform:   product: {len: "number"}
9992 transform: instruction: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9993 transform:   product: {at-end?: "boolean"}
9992 transform: instruction: break-unless {at-end?: "boolean"}
9992 transform: instruction: {tmp: "number"} <- copy {0: "literal"}
9993 transform:   product: {tmp: "number"}
9992 transform: instruction: }
9992 transform: instruction: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full: "number"}
9992 transform: instruction: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9993 transform:   product: {result: "boolean"}
9992 transform: instruction: reply {result: "boolean"}
9991 transform: --- check for invalid types in recipe channel-full?_3
9991 transform: --- collect surrounding spaces for recipe channel-full?_3
9991 transform: --- transform names for recipe channel-full?_3
9993 name: assign chan 1
9993 name: element first-free of type channel is at offset 1
9993 name: assign tmp 2
9993 name: assign len 3
9993 name: assign at-end? 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full 5
9993 name: assign result 6
9991 transform: --- resolve ambiguous calls for recipe channel-full?_3
9992 transform: instruction {len: "number"} <- capacity {chan: ()}
9992 transform: checking variant (strict) 0: recipe capacity {chan: ("address" "shared" "channel" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe capacity_2 {chan: ("address" "shared" "channel" "character")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 233 capacity
9993 transform: switching capacity to specialized recipe capacity_3 {chan: ("address" "shared" "channel" "_elem")} -> {result: "number"}
9993 transform: compute type names: capacity_3
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9994 transform:     checking {result: "number"}: "number"
9993 transform: type of result is "number"
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {chan: ("address" "shared" "channel" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {q: ("address" "shared" "array" "_elem")} <- get {chan: (), "lookup": ()}, {data: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {q: ("address" "shared" "array" "_elem")}: ("address" "shared" "array" "_elem")
9993 transform: type of q is ("address" "shared" "array" "_elem")
9993 transform:   instruction: {result: ()} <- length {q: (), "lookup": ()}
9994 transform:     checking {q: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to "number"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:number
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{chan: ("address" "shared" "channel" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{q: ("address" "shared" "array" "_elem")} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {data: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient q:address:shared:array:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: "number"} <- length {q: ("address" "shared" "array" "_elem"), "lookup": ()}'
9993 transform: replacing in ingredient *q
9993 transform: _elem => "number"
9993 transform: replacing in ingredient result
9992 transform: transforming new specialization: capacity_3
9991 transform: --- rewrite literal strings in recipe capacity_3
9991 transform: --- rewrite 'stash' instructions in recipe capacity_3
9991 transform: --- deduce types for recipe capacity_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: q => ("address" "shared" "array" "number")
9992 transform: result => "number"
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9993 transform: {q: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9993 transform: {result: "number"} <- length {q: ("address" "shared" "array" "number"), "lookup": ()}
9991 transform: --- checking reply instructions against header for capacity_3
9991 transform: --- fill in reply ingredients from header for recipe capacity_3
9991 transform: --- deduce types for recipe capacity_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: q => ("address" "shared" "array" "number")
9992 transform: result => "number"
9991 transform: --- deduce types from header for capacity_3
9993 transform: type of chan is ("address" "shared" "channel" "number")
9993 transform: type of result is "number"
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {chan: ("address" "shared" "channel" "number")}
9992 transform: instruction: {q: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9993 transform:   product: {q: ("address" "shared" "array" "number")}
9992 transform: instruction: {result: "number"} <- length {q: ("address" "shared" "array" "number"), "lookup": ()}
9993 transform:   product: {result: "number"}
9992 transform: instruction: reply {result: "number"}
9991 transform: --- check for invalid types in recipe capacity_3
9991 transform: --- collect surrounding spaces for recipe capacity_3
9991 transform: --- transform names for recipe capacity_3
9993 name: assign chan 1
9993 name: element data of type channel is at offset 2
9993 name: assign q 2
9993 name: assign result 3
9991 transform: --- resolve ambiguous calls for recipe capacity_3
9991 transform: --- compute instruction operations for recipe capacity_3
9991 transform: --- transform braces for recipe capacity_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: length ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe capacity_3
9991 transform: --- perform checks for recipe capacity_3
9991 transform: --- type-check 'call' instructions inside recipe capacity_3
9991 transform: --- type-check calls inside recipe capacity_3
9991 transform: --- convert 'new' to 'allocate' for recipe capacity_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe capacity_3
9991 transform: --- check types of reply instructions in recipe capacity_3
9991 transform: --- check that recipe capacity_3 sets default-space
9991 transform: --- checking reply instructions against header for capacity_3
9992 transform: new specialization: capacity_3
9992 transform: instruction {result: ()} <- equal {full: ()}, {tmp: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe channel-full?_3
9991 transform: --- transform braces for recipe channel-full?_3
9993 transform: channel-full?_3: push (open, 4)
9993 transform: push (close, 9)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: add ...
9992 transform: capacity ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: get ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe channel-full?_3
9991 transform: --- perform checks for recipe channel-full?_3
9991 transform: --- type-check 'call' instructions inside recipe channel-full?_3
9991 transform: --- type-check calls inside recipe channel-full?_3
9991 transform: --- convert 'new' to 'allocate' for recipe channel-full?_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe channel-full?_3
9991 transform: --- check types of reply instructions in recipe channel-full?_3
9991 transform: --- check that recipe channel-full?_3 sets default-space
9991 transform: --- checking reply instructions against header for channel-full?_3
9992 transform: new specialization: channel-full?_3
9992 transform: instruction {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-free: "offset"}, {free: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe write_3
9991 transform: --- transform braces for recipe write_3
9993 transform: write_3: push (open, 4)
9993 transform: push (close, 9)
9993 transform: write_3: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-address ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get ...
9992 transform: index-address ...
9992 transform: copy ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_3
9991 transform: --- perform checks for recipe write_3
9991 transform: --- type-check 'call' instructions inside recipe write_3
9991 transform: --- type-check calls inside recipe write_3
9991 transform: --- convert 'new' to 'allocate' for recipe write_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe write_3
9991 transform: --- check types of reply instructions in recipe write_3
9991 transform: --- check that recipe write_3 sets default-space
9991 transform: --- checking reply instructions against header for write_3
9992 transform: new specialization: write_3
9992 transform: instruction {3: "number"}, {1: ("address" "shared" "source" "number")} <- read {1: ("address" "shared" "source" "number")}
9992 transform: checking variant (strict) 0: recipe read {in: ("address" "shared" "source" "_elem")} -> {result: "_elem"} {in: ("address" "shared" "source" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe read_2 {in: ("address" "shared" "source" "character")} -> {result: "character"} {in: ("address" "shared" "source" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 229 read
9993 transform: switching read to specialized recipe read_3 {in: ("address" "shared" "source" "_elem")} -> {result: "_elem"} {in: ("address" "shared" "source" "_elem")}
9993 transform: compute type names: read_3
9994 transform:     checking {in: ("address" "shared" "source" "_elem")}: ("address" "shared" "source" "_elem")
9993 transform: type of in is ("address" "shared" "source" "_elem")
9994 transform:     checking {result: "_elem"}: "_elem"
9993 transform: type of result is "_elem"
9994 transform:     checking {in: ("address" "shared" "source" "_elem")}: ("address" "shared" "source" "_elem")
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {in: ("address" "shared" "source" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "shared" "source" "_elem")}: ("address" "shared" "source" "_elem")
9993 transform:   instruction: {chan: ("address" "shared" "channel" "_elem")} <- get {in: (), "lookup": ()}, {chan: "offset"}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "source" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: {empty?: "boolean"} <- channel-empty? {chan: ()}
9994 transform:     checking {chan: ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {empty?: "boolean"}: "boolean"
9993 transform: type of empty? is "boolean"
9993 transform:   instruction: break-unless {empty?: ()}
9994 transform:     checking {empty?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {free-address: ("address" "number")} <- get-address {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free-address: ("address" "number")}: ("address" "number")
9993 transform: type of free-address is ("address" "number")
9993 transform:   instruction: wait-for-location {free-address: ()}
9994 transform:     checking {free-address: ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: }
9993 transform:   instruction: {full: "number"} <- get {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full: "number"}: "number"
9993 transform: type of full is "number"
9993 transform:   instruction: {circular-buffer: ("address" "shared" "array" "_elem")} <- get {chan: (), "lookup": ()}, {data: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {circular-buffer: ("address" "shared" "array" "_elem")}: ("address" "shared" "array" "_elem")
9993 transform: type of circular-buffer is ("address" "shared" "array" "_elem")
9993 transform:   instruction: {result: ()} <- index {circular-buffer: (), "lookup": ()}, {full: ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to "_elem"
9993 transform:   instruction: {full: ()} <- add {full: ()}, {1: "literal"}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking {len: "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: {at-end?: "boolean"} <- greater-or-equal {full: ()}, {len: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {len: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {at-end?: "boolean"}: "boolean"
9993 transform: type of at-end? is "boolean"
9993 transform:   instruction: break-unless {at-end?: ()}
9994 transform:     checking {at-end?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {full: ()} <- copy {0: "literal"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-full: "offset"}, {full: ()}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:source:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_elem
9993 transform: _elem => "number"
9993 transform: replacing in ingredient in:address:shared:source:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{in: ("address" "shared" "source" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:source:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{chan: ("address" "shared" "channel" "_elem")} <- get {in: ("address" "shared" "source" "_elem"), "lookup": ()}, {chan: "offset"}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{empty?: "boolean"} <- channel-empty? {chan: ("address" "shared" "channel" "_elem")}'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient empty?:boolean
9993 transform: replacing in instruction 'break-unless {empty?: "boolean"}'
9993 transform: replacing in ingredient empty?
9993 transform: replacing in instruction '{free-address: ("address" "number")} <- get-address {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free-address:address:number
9993 transform: replacing in instruction 'wait-for-location {free-address: ("address" "number")}'
9993 transform: replacing in ingredient free-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{full: "number"} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full:number
9993 transform: replacing in instruction '{circular-buffer: ("address" "shared" "array" "_elem")} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {data: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:shared:array:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: "_elem"} <- index {circular-buffer: ("address" "shared" "array" "_elem"), "lookup": ()}, {full: "number"}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "number"
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{full: "number"} <- add {full: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{len: "number"} <- length {circular-buffer: ("address" "shared" "array" "_elem"), "lookup": ()}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "number"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction '{at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless {at-end?: "boolean"}'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '{full: "number"} <- copy {0: "literal"}'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{chan: ("address" "shared" "channel" "_elem"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}, {full: "number"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9992 transform: transforming new specialization: read_3
9991 transform: --- rewrite literal strings in recipe read_3
9991 transform: --- rewrite 'stash' instructions in recipe read_3
9991 transform: --- deduce types for recipe read_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: in => ("address" "shared" "source" "number")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: empty? => "boolean"
9992 transform: free-address => ("address" "number")
9992 transform: full => "number"
9992 transform: circular-buffer => ("address" "shared" "array" "number")
9992 transform: result => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {in: ("address" "shared" "source" "number")} <- next-ingredient-without-typechecking 
9993 transform: {chan: ("address" "shared" "channel" "number")} <- get {in: ("address" "shared" "source" "number"), "lookup": ()}, {chan: "offset"}
9993 transform: {
9993 transform: {empty?: "boolean"} <- channel-empty? {chan: ("address" "shared" "channel" "number")}
9993 transform: break-unless {empty?: "boolean"}
9993 transform: {free-address: ("address" "number")} <- get-address {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform: wait-for-location {free-address: ("address" "number")}
9993 transform: }
9993 transform: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform: {circular-buffer: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9993 transform: {result: "number"} <- index {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}, {full: "number"}
9993 transform: {full: "number"} <- add {full: "number"}, {1: "literal"}
9993 transform: {
9993 transform: {len: "number"} <- length {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}
9993 transform: {at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}
9993 transform: break-unless {at-end?: "boolean"}
9993 transform: {full: "number"} <- copy {0: "literal"}
9993 transform: }
9993 transform: {chan: ("address" "shared" "channel" "number"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {full: "number"}
9991 transform: --- checking reply instructions against header for read_3
9991 transform: --- fill in reply ingredients from header for recipe read_3
9991 transform: --- deduce types for recipe read_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: in => ("address" "shared" "source" "number")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: empty? => "boolean"
9992 transform: free-address => ("address" "number")
9992 transform: full => "number"
9992 transform: circular-buffer => ("address" "shared" "array" "number")
9992 transform: result => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for read_3
9993 transform: type of in is ("address" "shared" "source" "number")
9993 transform: type of result is "number"
9993 transform: type of in is ("address" "shared" "source" "number")
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {in: ("address" "shared" "source" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "shared" "source" "number")}
9992 transform: instruction: {chan: ("address" "shared" "channel" "number")} <- get {in: ("address" "shared" "source" "number"), "lookup": ()}, {chan: "offset"}
9993 transform:   product: {chan: ("address" "shared" "channel" "number")}
9992 transform: instruction: {
9992 transform: instruction: {empty?: "boolean"} <- channel-empty? {chan: ("address" "shared" "channel" "number")}
9993 transform:   product: {empty?: "boolean"}
9992 transform: instruction: break-unless {empty?: "boolean"}
9992 transform: instruction: {free-address: ("address" "number")} <- get-address {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {free-address: ("address" "number")}
9992 transform: instruction: wait-for-location {free-address: ("address" "number")}
9992 transform: instruction: }
9992 transform: instruction: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full: "number"}
9992 transform: instruction: {circular-buffer: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9993 transform:   product: {circular-buffer: ("address" "shared" "array" "number")}
9992 transform: instruction: {result: "number"} <- index {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}, {full: "number"}
9993 transform:   product: {result: "number"}
9992 transform: instruction: {full: "number"} <- add {full: "number"}, {1: "literal"}
9993 transform:   product: {full: "number"}
9992 transform: instruction: {
9992 transform: instruction: {len: "number"} <- length {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}
9993 transform:   product: {len: "number"}
9992 transform: instruction: {at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}
9993 transform:   product: {at-end?: "boolean"}
9992 transform: instruction: break-unless {at-end?: "boolean"}
9992 transform: instruction: {full: "number"} <- copy {0: "literal"}
9993 transform:   product: {full: "number"}
9992 transform: instruction: }
9992 transform: instruction: {chan: ("address" "shared" "channel" "number"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {full: "number"}
9993 transform:   product: {chan: ("address" "shared" "channel" "number"), "lookup": ()}
9992 transform: instruction: reply {result: "number"}, {in: ("address" "shared" "source" "number"), "same-as-ingredient": "0"}
9991 transform: --- check for invalid types in recipe read_3
9991 transform: --- collect surrounding spaces for recipe read_3
9991 transform: --- transform names for recipe read_3
9993 name: assign in 1
9993 name: element chan of type source is at offset 0
9993 name: assign chan 2
9993 name: assign empty? 3
9993 name: element first-free of type channel is at offset 1
9993 name: assign free-address 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: assign result 7
9993 name: assign len 8
9993 name: assign at-end? 9
9993 name: element first-full of type channel is at offset 0
9991 transform: --- resolve ambiguous calls for recipe read_3
9992 transform: instruction {empty?: "boolean"} <- channel-empty? {chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-empty? {chan: ("address" "shared" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 {chan: ("address" "shared" "channel" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 231 channel-empty?
9993 transform: switching channel-empty? to specialized recipe channel-empty?_3 {chan: ("address" "shared" "channel" "_elem")} -> {result: "boolean"}
9993 transform: compute type names: channel-empty?_3
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9994 transform:     checking {result: "boolean"}: "boolean"
9993 transform: type of result is "boolean"
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {chan: ("address" "shared" "channel" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {chan: ("address" "shared" "channel" "_elem")}: ("address" "shared" "channel" "_elem")
9993 transform:   instruction: {full: "number"} <- get {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full: "number"}: "number"
9993 transform: type of full is "number"
9993 transform:   instruction: {free: "number"} <- get {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: "number"}: "number"
9993 transform: type of free is "number"
9993 transform:   instruction: {result: ()} <- equal {full: ()}, {free: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:boolean
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{chan: ("address" "shared" "channel" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{full: "number"} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full:number
9993 transform: replacing in instruction '{free: "number"} <- get {chan: ("address" "shared" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:number
9993 transform: replacing in instruction '{result: "boolean"} <- equal {full: "number"}, {free: "number"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient result
9992 transform: transforming new specialization: channel-empty?_3
9991 transform: --- rewrite literal strings in recipe channel-empty?_3
9991 transform: --- rewrite 'stash' instructions in recipe channel-empty?_3
9991 transform: --- deduce types for recipe channel-empty?_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: full => "number"
9992 transform: free => "number"
9992 transform: result => "boolean"
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9993 transform: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform: {free: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9991 transform: --- checking reply instructions against header for channel-empty?_3
9991 transform: --- fill in reply ingredients from header for recipe channel-empty?_3
9991 transform: --- deduce types for recipe channel-empty?_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: full => "number"
9992 transform: free => "number"
9992 transform: result => "boolean"
9991 transform: --- deduce types from header for channel-empty?_3
9993 transform: type of chan is ("address" "shared" "channel" "number")
9993 transform: type of result is "boolean"
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {chan: ("address" "shared" "channel" "number")}
9992 transform: instruction: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full: "number"}
9992 transform: instruction: {free: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9993 transform:   product: {result: "boolean"}
9992 transform: instruction: reply {result: "boolean"}
9991 transform: --- check for invalid types in recipe channel-empty?_3
9991 transform: --- collect surrounding spaces for recipe channel-empty?_3
9991 transform: --- transform names for recipe channel-empty?_3
9993 name: assign chan 1
9993 name: element first-full of type channel is at offset 0
9993 name: assign full 2
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 3
9993 name: assign result 4
9991 transform: --- resolve ambiguous calls for recipe channel-empty?_3
9992 transform: instruction {result: ()} <- equal {full: ()}, {free: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe channel-empty?_3
9991 transform: --- transform braces for recipe channel-empty?_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: get ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe channel-empty?_3
9991 transform: --- perform checks for recipe channel-empty?_3
9991 transform: --- type-check 'call' instructions inside recipe channel-empty?_3
9991 transform: --- type-check calls inside recipe channel-empty?_3
9991 transform: --- convert 'new' to 'allocate' for recipe channel-empty?_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe channel-empty?_3
9991 transform: --- check types of reply instructions in recipe channel-empty?_3
9991 transform: --- check that recipe channel-empty?_3 sets default-space
9991 transform: --- checking reply instructions against header for channel-empty?_3
9992 transform: new specialization: channel-empty?_3
9992 transform: instruction {result: ()} <- index {circular-buffer: (), "lookup": ()}, {full: ()}
9992 transform: checking variant (strict) 0: recipe index_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe index_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe index_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-full: "offset"}, {full: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "shared" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "shared" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe read_3
9991 transform: --- transform braces for recipe read_3
9993 transform: read_3: push (open, 3)
9993 transform: push (close, 8)
9993 transform: read_3: push (open, 13)
9993 transform: push (close, 18)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-empty? ...
9992 transform: jump-unless empty?, 2:offset
9992 transform: get-address ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get ...
9992 transform: index ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe read_3
9991 transform: --- perform checks for recipe read_3
9991 transform: --- type-check 'call' instructions inside recipe read_3
9991 transform: --- type-check calls inside recipe read_3
9991 transform: --- convert 'new' to 'allocate' for recipe read_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe read_3
9991 transform: --- check types of reply instructions in recipe read_3
9991 transform: --- check that recipe read_3 sets default-space
9991 transform: --- checking reply instructions against header for read_3
9992 transform: new specialization: read_3
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: write ...
9992 transform: read ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "shared" "source" "number")}, {2: ("address" "shared" "sink" "number")} <- new-channel_3 {3: "literal", "capacity": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 104 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: {result: ("address" "shared" "channel" "number")} <- new {(channel number): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
9999 mem: incrementing refcount of 1008: 0 -> 1
 104 run: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1009
9999 mem: storing 0 in location 1009
 104 run: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1010
9999 mem: storing 0 in location 1010
 104 run: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9999 mem: location 1003 is 3
9999 mem: storing 4 in location 1003
 104 run: {data: ("address" "shared" "array" "number")} <- new {number: "type"}, {capacity: "number"}
9999 mem: location 1003 is 4
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1012
9999 mem: storing 4 in location 1013
9999 mem: storing 1012 in location 1005
9999 mem: incrementing refcount of 1012: 0 -> 1
 104 run: {result: ("address" "shared" "channel" "number"), "lookup": ()} <- put {result: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}, {data: ("address" "shared" "array" "number")}
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1005 is 1012
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1012 in location 1011
 104 run: {in: ("address" "shared" "source" "number")} <- new {(source number): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1018
9999 mem: storing 1018 in location 1006
9999 mem: incrementing refcount of 1018: 0 -> 1
 104 run: {in: ("address" "shared" "source" "number"), "lookup": ()} <- put {in: ("address" "shared" "source" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "number")}
9999 mem: location 1006 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 0
9999 mem: location 1004 is 1008
9999 mem: location 1006 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1019
9999 mem: storing 1008 in location 1019
 104 run: {out: ("address" "shared" "sink" "number")} <- new {(sink number): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1020
9999 mem: storing 1020 in location 1007
9999 mem: incrementing refcount of 1020: 0 -> 1
 104 run: {out: ("address" "shared" "sink" "number"), "lookup": ()} <- put {out: ("address" "shared" "sink" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "shared" "channel" "number")}
9999 mem: location 1007 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1021 is 0
9999 mem: location 1004 is 1008
9999 mem: location 1007 is 1020
9999 mem: skipping refcount at 1020
9998 run: address to copy to is 1021
9999 mem: storing 1008 in location 1021
 104 run: reply {in: ("address" "shared" "source" "number")}, {out: ("address" "shared" "sink" "number")}
9999 mem: location 1006 is 1018
9999 mem: location 1007 is 1020
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1018
9998 run: result 1 is 1020
9999 mem: storing 1018 in location 1
9999 mem: incrementing refcount of 1018: 1 -> 2
9999 mem: storing 1020 in location 2
9999 mem: incrementing refcount of 1020: 1 -> 2
 103 run: {2: ("address" "shared" "sink" "number")} <- write_3 {2: ("address" "shared" "sink" "number")}, {34: "literal"}
9999 mem: location 2 is 1020
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1022
9999 mem: storing 11 in location 1023
 104 run: {out: ("address" "shared" "sink" "number")} <- next-ingredient-without-typechecking 
9999 mem: storing 1020 in location 1025
9999 mem: incrementing refcount of 1020: 2 -> 3
 104 run: {val: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 34 in location 1026
 104 run: {chan: ("address" "shared" "channel" "number")} <- get {out: ("address" "shared" "sink" "number"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1025 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1021 is 1008
9999 mem: location 1025 is 1020
9999 mem: skipping refcount at 1020
9998 run: address to copy is 1021
9998 run: its type is ("address" "shared" "channel" "number")
9999 mem: location 1021 is 1008
9999 mem: storing 1008 in location 1027
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: {full: "boolean"} <- channel-full?_3 {chan: ("address" "shared" "channel" "number")}
9999 mem: location 1027 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1035
9999 mem: storing 7 in location 1036
 105 run: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1038
9999 mem: incrementing refcount of 1008: 2 -> 3
 105 run: {tmp: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1038 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1038 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1039
 105 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 1039 is 0
9999 mem: storing 1 in location 1039
 105 run: {len: "number"} <- capacity_3 {chan: ("address" "shared" "channel" "number")}
9999 mem: location 1038 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1044
9999 mem: storing 4 in location 1045
 106 run: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1047
9999 mem: incrementing refcount of 1008: 3 -> 4
 106 run: {q: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9999 mem: location 1047 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1047 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is ("address" "shared" "array" "number")
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1048
9999 mem: incrementing refcount of 1012: 1 -> 2
 106 run: {result: "number"} <- length {q: ("address" "shared" "array" "number"), "lookup": ()}
9999 mem: location 1048 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 4 in location 1049
 106 run: reply {result: "number"}
9999 mem: location 1049 is 4
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 4
9999 mem: storing 4 in location 1040
 105 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 1039 is 1
9999 mem: location 1040 is 4
9999 mem: storing 0 in location 1041
 105 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jumping to instruction 9
 105 run: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1038 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1038 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1042
 105 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 1042 is 0
9999 mem: location 1039 is 1
9999 mem: storing 0 in location 1043
 105 run: reply {result: "boolean"}
9999 mem: location 1043 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1028
 104 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 1028 is 0
9998 run: jumping to instruction 9
 104 run: {circular-buffer: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9999 mem: location 1027 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1027 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is ("address" "shared" "array" "number")
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1030
9999 mem: incrementing refcount of 1012: 2 -> 3
 104 run: {free: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1027 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1027 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1031
 104 run: {dest: ("address" "number")} <- index-address {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}, {free: "number"}
9999 mem: location 1030 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1031 is 0
9999 mem: storing 1014 in location 1032
 104 run: {dest: ("address" "number"), "lookup": ()} <- copy {val: "number"}
9999 mem: location 1026 is 34
9999 mem: location 1032 is 1014
9999 mem: storing 34 in location 1014
 104 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 1031 is 0
9999 mem: storing 1 in location 1031
 104 run: {len: "number"} <- length {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}
9999 mem: location 1030 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 4 in location 1033
 104 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 1031 is 1
9999 mem: location 1033 is 4
9999 mem: storing 0 in location 1034
 104 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jumping to instruction 20
 104 run: {chan: ("address" "shared" "channel" "number"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 1027 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1031 is 1
9999 mem: location 1027 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1010
9999 mem: storing 1 in location 1010
 104 run: reply {out: ("address" "shared" "sink" "number"), "same-as-ingredient": "0"}
9999 mem: location 1025 is 1020
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1020
9999 mem: decrementing refcount of 1020: 3 -> 2
9999 mem: storing 1020 in location 2
9999 mem: incrementing refcount of 1020: 2 -> 3
 103 run: {3: "number"}, {1: ("address" "shared" "source" "number")} <- read_3 {1: ("address" "shared" "source" "number")}
9999 mem: location 1 is 1018
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1050
9999 mem: storing 10 in location 1051
 104 run: {in: ("address" "shared" "source" "number")} <- next-ingredient-without-typechecking 
9999 mem: storing 1018 in location 1053
9999 mem: incrementing refcount of 1018: 2 -> 3
 104 run: {chan: ("address" "shared" "channel" "number")} <- get {in: ("address" "shared" "source" "number"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1053 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1008
9999 mem: location 1053 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy is 1019
9998 run: its type is ("address" "shared" "channel" "number")
9999 mem: location 1019 is 1008
9999 mem: storing 1008 in location 1054
9999 mem: incrementing refcount of 1008: 4 -> 5
 104 run: {empty?: "boolean"} <- channel-empty?_3 {chan: ("address" "shared" "channel" "number")}
9999 mem: location 1054 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1062
9999 mem: storing 5 in location 1063
 105 run: {chan: ("address" "shared" "channel" "number")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1065
9999 mem: incrementing refcount of 1008: 5 -> 6
 105 run: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1065 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1065 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1066
 105 run: {free: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1065 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1065 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 1
9999 mem: storing 1 in location 1067
 105 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 1066 is 0
9999 mem: location 1067 is 1
9999 mem: storing 0 in location 1068
 105 run: reply {result: "boolean"}
9999 mem: location 1068 is 0
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1055
 104 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 1055 is 0
9998 run: jumping to instruction 8
 104 run: {full: "number"} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1057
 104 run: {circular-buffer: ("address" "shared" "array" "number")} <- get {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {data: "offset"}
9999 mem: location 1054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is ("address" "shared" "array" "number")
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1058
9999 mem: incrementing refcount of 1012: 3 -> 4
 104 run: {result: "number"} <- index {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}, {full: "number"}
9999 mem: location 1058 is 1012
9999 mem: skipping refcount at 1012
9998 run: base address is 1013
9999 mem: location 1057 is 0
9998 run: address to copy is 1014
9998 run: its type is number
9999 mem: location 1014 is 34
9999 mem: storing 34 in location 1059
 104 run: {full: "number"} <- add {full: "number"}, {1: "literal"}
9999 mem: location 1057 is 0
9999 mem: storing 1 in location 1057
 104 run: {len: "number"} <- length {circular-buffer: ("address" "shared" "array" "number"), "lookup": ()}
9999 mem: location 1058 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 4 in location 1060
 104 run: {at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}
9999 mem: location 1057 is 1
9999 mem: location 1060 is 4
9999 mem: storing 0 in location 1061
 104 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1061 is 0
9998 run: jumping to instruction 18
 104 run: {chan: ("address" "shared" "channel" "number"), "lookup": ()} <- put {chan: ("address" "shared" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {full: "number"}
9999 mem: location 1054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1057 is 1
9999 mem: location 1054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1009
9999 mem: storing 1 in location 1009
 104 run: reply {result: "number"}, {in: ("address" "shared" "source" "number"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 34
9999 mem: location 1053 is 1018
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 34
9998 run: result 1 is 1018
9999 mem: storing 34 in location 3
9999 mem: decrementing refcount of 1018: 3 -> 2
9999 mem: storing 1018 in location 1
9999 mem: incrementing refcount of 1018: 2 -> 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    3 <- 34\n  ": "literal-string"}
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
