9991 parse: --- defining scenario_channel-initialization
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:source:number <- new-channel 3/capacity\n    2:address:channel:number <- get *1:address:source:number, chan:offset\n    3:number <- get *2:address:channel:number, first-full:offset\n    4:number <- get *2:address:channel:number, first-free:offset\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:source:number <- new-channel 3/capacity\n    2:address:channel:number <- get *1:address:source:number, chan:offset\n    3:number <- get *2:address:channel:number, first-full:offset\n    4:number <- get *2:address:channel:number, first-free:offset\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 0  # first-full\n    4 <- 0  # first-free\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    3 <- 0  # first-full\n    4 <- 0  # first-free\n  ": "literal-string"}
9999 parse: recipe scenario_channel-initialization has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_channel-initialization
9991 transform: --- rewrite 'stash' instructions in recipe scenario_channel-initialization
9991 transform: --- deduce types for recipe scenario_channel-initialization
9993 transform: run {"\n    1:address:source:number <- new-channel 3/capacity\n    2:address:channel:number <- get *1:address:source:number, chan:offset\n    3:number <- get *2:address:channel:number, first-full:offset\n    4:number <- get *2:address:channel:number, first-free:offset\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    3 <- 0  # first-full\n    4 <- 0  # first-free\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_channel-initialization
9991 transform: --- deduce types for recipe scenario_channel-initialization
9991 transform: --- check for invalid types in recipe scenario_channel-initialization
9991 transform: --- collect surrounding spaces for recipe scenario_channel-initialization
9991 transform: --- transform names for recipe scenario_channel-initialization
9991 transform: --- resolve ambiguous calls for recipe scenario_channel-initialization
9991 transform: --- compute instruction operations for recipe scenario_channel-initialization
9991 transform: --- transform braces for recipe scenario_channel-initialization
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_channel-initialization
9991 transform: --- type-check 'call' instructions inside recipe scenario_channel-initialization
9991 transform: --- type-check calls inside recipe scenario_channel-initialization
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_channel-initialization
9991 transform: --- check types of reply instructions in recipe scenario_channel-initialization
9991 transform: --- type-check merge instructions in recipe scenario_channel-initialization
9991 transform: --- checking reply instructions against header for scenario_channel-initialization
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_channel-initialization
 102 run: run {"\n    1:address:source:number <- new-channel 3/capacity\n    2:address:channel:number <- get *1:address:source:number, chan:offset\n    3:number <- get *2:address:channel:number, first-full:offset\n    4:number <- get *2:address:channel:number, first-free:offset\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "literal", "capacity": ()}
9993 parse:   product: {1: ("address" "source" "number")}
9992 load: after rewriting: {1: ("address" "source" "number")} <- new-channel {3: "literal", "capacity": ()}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "source" "number"), "lookup": ()}
9993 parse:   ingredient: {chan: "offset"}
9993 parse:   product: {2: ("address" "channel" "number")}
9992 load: after rewriting: {2: ("address" "channel" "number")} <- get {1: ("address" "source" "number"), "lookup": ()}, {chan: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "channel" "number"), "lookup": ()}
9993 parse:   ingredient: {first-full: "offset"}
9993 parse:   product: {3: "number"}
9992 load: after rewriting: {3: "number"} <- get {2: ("address" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "channel" "number"), "lookup": ()}
9993 parse:   ingredient: {first-free: "offset"}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- get {2: ("address" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element chan of type source is at offset 0
9993 name: element first-full of type channel is at offset 0
9993 name: element first-free of type channel is at offset 1
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "source" "number")} <- new-channel {3: "literal", "capacity": ()}
9992 transform: checking variant (strict) 0: recipe new-channel {capacity: "number"} -> {in: ("address" "source" "_elem")} {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 1: recipe new-channel_2 {capacity: "number"} -> {in: ("address" "source" "character")} {out: ("address" "sink" "character")}
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 0: recipe new-channel {capacity: "number"} -> {in: ("address" "source" "_elem")} {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 1: recipe new-channel_2 {capacity: "number"} -> {in: ("address" "source" "character")} {out: ("address" "sink" "character")}
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 225 new-channel
9993 transform: switching new-channel to specialized recipe new-channel_3 {capacity: "number"} -> {in: ("address" "source" "_elem")} {out: ("address" "sink" "_elem")}
9993 transform: compute type names: new-channel_3
9994 transform:     checking {capacity: "number"}: "number"
9993 transform: type of capacity is "number"
9994 transform:     checking {in: ("address" "source" "_elem")}: ("address" "source" "_elem")
9993 transform: type of in is ("address" "source" "_elem")
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform: type of out is ("address" "sink" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {capacity: "number"} <- next-ingredient-without-typechecking 
9994 transform:     checking {capacity: "number"}: "number"
9993 transform:   instruction: {result: ("address" "channel" "_elem")} <- new {(channel _elem): "type"}
9994 transform:     checking {(channel _elem): "type"}: "type"
9993 transform: type of (channel _elem) is "type"
9994 transform:     checking {result: ("address" "channel" "_elem")}: ("address" "channel" "_elem")
9993 transform: type of result is ("address" "channel" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {0: "literal"}: "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9993 transform:   instruction: {capacity: ()} <- add {capacity: ()}, {1: "literal"}
9994 transform:     checking {capacity: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {capacity: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {data: ("address" "array" "_elem")} <- new {_elem: "type"}, {capacity: ()}
9994 transform:     checking {_elem: "type"}: "type"
9993 transform: type of _elem is "type"
9994 transform:     checking {capacity: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {data: ("address" "array" "_elem")}: ("address" "array" "_elem")
9993 transform: type of data is ("address" "array" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {data: "offset"}, {data: ()}
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {data: ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9993 transform:   instruction: {in: ()} <- new {(source _elem): "type"}
9994 transform:     checking {(source _elem): "type"}: "type"
9993 transform: type of (source _elem) is "type"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "source" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "source" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "source" "_elem")
9993 transform:   instruction: {out: ()} <- new {(sink _elem): "type"}
9994 transform:     checking {(sink _elem): "type"}: "type"
9993 transform: type of (sink _elem) is "type"
9994 transform:     checking {out: ()}: ()
9994 transform:     deducing type to ("address" "sink" "_elem")
9993 transform:   instruction: {out: (), "lookup": ()} <- put {out: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "sink" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "sink" "_elem")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:source:_elem
9993 transform: _elem => "number"
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{capacity: "number"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in instruction '{result: ("address" "channel" "_elem")} <- new {(channel _elem): "type"}'
9993 transform: replacing in ingredient {(channel _elem): type}
9993 transform: replacing in ingredient result:address:channel:_elem
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "channel" "_elem"), "lookup": ()} <- put {result: ("address" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "channel" "_elem"), "lookup": ()} <- put {result: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{capacity: "number"} <- add {capacity: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient capacity
9993 transform: replacing in instruction '{data: ("address" "array" "_elem")} <- new {_elem: "type"}, {capacity: "number"}'
9993 transform: replacing in ingredient _elem:type
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient data:address:array:_elem
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "channel" "_elem"), "lookup": ()} <- put {result: ("address" "channel" "_elem"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "_elem")}'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient data
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{in: ("address" "source" "_elem")} <- new {(source _elem): "type"}'
9993 transform: replacing in ingredient {(source _elem): type}
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{in: ("address" "source" "_elem"), "lookup": ()} <- put {in: ("address" "source" "_elem"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{out: ("address" "sink" "_elem")} <- new {(sink _elem): "type"}'
9993 transform: replacing in ingredient {(sink _elem): type}
9993 transform: replacing in ingredient out
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{out: ("address" "sink" "_elem"), "lookup": ()} <- put {out: ("address" "sink" "_elem"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "_elem")}'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "number"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *out
9993 transform: _elem => "number"
9992 transform: transforming new specialization: new-channel_3
9991 transform: --- rewrite literal strings in recipe new-channel_3
9991 transform: --- rewrite 'stash' instructions in recipe new-channel_3
9991 transform: --- deduce types for recipe new-channel_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: capacity => "number"
9992 transform: result => ("address" "channel" "number")
9992 transform: data => ("address" "array" "number")
9992 transform: in => ("address" "source" "number")
9992 transform: out => ("address" "sink" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {capacity: "number"} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "channel" "number")} <- new {(channel number): "type"}
9993 transform: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9993 transform: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9993 transform: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9993 transform: {data: ("address" "array" "number")} <- new {number: "type"}, {capacity: "number"}
9993 transform: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "number")}
9993 transform: {in: ("address" "source" "number")} <- new {(source number): "type"}
9993 transform: {in: ("address" "source" "number"), "lookup": ()} <- put {in: ("address" "source" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "number")}
9993 transform: {out: ("address" "sink" "number")} <- new {(sink number): "type"}
9993 transform: {out: ("address" "sink" "number"), "lookup": ()} <- put {out: ("address" "sink" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "number")}
9991 transform: --- checking reply instructions against header for new-channel_3
9991 transform: --- fill in reply ingredients from header for recipe new-channel_3
9991 transform: --- deduce types for recipe new-channel_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: capacity => "number"
9992 transform: result => ("address" "channel" "number")
9992 transform: data => ("address" "array" "number")
9992 transform: in => ("address" "source" "number")
9992 transform: out => ("address" "sink" "number")
9991 transform: --- deduce types from header for new-channel_3
9993 transform: type of capacity is "number"
9993 transform: type of in is ("address" "source" "number")
9993 transform: type of out is ("address" "sink" "number")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {capacity: "number"} <- next-ingredient-without-typechecking 
9993 transform:   product: {capacity: "number"}
9992 transform: instruction: {result: ("address" "channel" "number")} <- new {(channel number): "type"}
9993 transform:   product: {result: ("address" "channel" "number")}
9992 transform: instruction: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9993 transform:   product: {result: ("address" "channel" "number"), "lookup": ()}
9992 transform: instruction: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9993 transform:   product: {result: ("address" "channel" "number"), "lookup": ()}
9992 transform: instruction: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9993 transform:   product: {capacity: "number"}
9992 transform: instruction: {data: ("address" "array" "number")} <- new {number: "type"}, {capacity: "number"}
9993 transform:   product: {data: ("address" "array" "number")}
9992 transform: instruction: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "number")}
9993 transform:   product: {result: ("address" "channel" "number"), "lookup": ()}
9992 transform: instruction: {in: ("address" "source" "number")} <- new {(source number): "type"}
9993 transform:   product: {in: ("address" "source" "number")}
9992 transform: instruction: {in: ("address" "source" "number"), "lookup": ()} <- put {in: ("address" "source" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "number")}
9993 transform:   product: {in: ("address" "source" "number"), "lookup": ()}
9992 transform: instruction: {out: ("address" "sink" "number")} <- new {(sink number): "type"}
9993 transform:   product: {out: ("address" "sink" "number")}
9992 transform: instruction: {out: ("address" "sink" "number"), "lookup": ()} <- put {out: ("address" "sink" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "number")}
9993 transform:   product: {out: ("address" "sink" "number"), "lookup": ()}
9992 transform: instruction: reply {in: ("address" "source" "number")}, {out: ("address" "sink" "number")}
9991 transform: --- check for invalid types in recipe new-channel_3
9991 transform: --- collect surrounding spaces for recipe new-channel_3
9991 transform: --- transform names for recipe new-channel_3
9993 name: assign capacity 1
9993 name: assign result 2
9993 name: element first-full of type channel is at offset 0
9993 name: element first-free of type channel is at offset 1
9993 name: assign data 3
9993 name: element data of type channel is at offset 2
9993 name: assign in 4
9993 name: element chan of type source is at offset 0
9993 name: assign out 5
9993 name: element chan of type sink is at offset 0
9991 transform: --- resolve ambiguous calls for recipe new-channel_3
9992 transform: instruction {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {result: (), "lookup": ()} <- put {result: (), "lookup": ()}, {data: "offset"}, {data: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {out: (), "lookup": ()} <- put {out: (), "lookup": ()}, {chan: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe new-channel_3
9991 transform: --- transform braces for recipe new-channel_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform: put ...
9992 transform: put ...
9992 transform: add ...
9992 transform: new ...
9992 transform: put ...
9992 transform: new ...
9992 transform: put ...
9992 transform: new ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- perform checks for recipe new-channel_3
9991 transform: --- type-check 'call' instructions inside recipe new-channel_3
9991 transform: --- type-check calls inside recipe new-channel_3
9991 transform: --- convert 'new' to 'allocate' for recipe new-channel_3
9992 new: size of "location" is 1
9992 new: size of ("channel" "number") is 4
9992 new: size of "number" is 1
9992 new: size of ("source" "number") is 1
9992 new: size of ("sink" "number") is 1
9991 transform: --- check types of reply instructions in recipe new-channel_3
9991 transform: --- type-check merge instructions in recipe new-channel_3
9991 transform: --- check that recipe new-channel_3 sets default-space
9991 transform: --- checking reply instructions against header for new-channel_3
9992 transform: new specialization: new-channel_3
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: get ...
9992 transform: get ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "source" "number")} <- new-channel_3 {3: "literal", "capacity": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 6 in location 1001
 104 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: {result: ("address" "channel" "number")} <- new {(channel number): "type"}
9999 mem: allocating size 5
9999 mem: new alloc: 1008
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: incrementing refcount of 1008: 0 -> 1
9999 mem: storing 1008 in location 1004
 104 run: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1009
9999 mem: storing 0 in location 1009
 104 run: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1010
9999 mem: storing 0 in location 1010
 104 run: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9999 mem: location 1003 is 3
9999 mem: storing 4 in location 1003
 104 run: {data: ("address" "array" "number")} <- new {number: "type"}, {capacity: "number"}
9999 mem: location 1003 is 4
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1013
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 4 in location 1014
9999 mem: incrementing refcount of 1013: 0 -> 1
9999 mem: storing 1013 in location 1005
 104 run: {result: ("address" "channel" "number"), "lookup": ()} <- put {result: ("address" "channel" "number"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "number")}
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1005 is 1013
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: incrementing refcount of 1013: 1 -> 2
9999 mem: storing 1013 in location 1011
 104 run: {in: ("address" "source" "number")} <- new {(source number): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1019
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: incrementing refcount of 1019: 0 -> 1
9999 mem: storing 1019 in location 1006
 104 run: {in: ("address" "source" "number"), "lookup": ()} <- put {in: ("address" "source" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "number")}
9999 mem: location 1006 is 1019
9999 mem: skipping refcount at 1019
9999 mem: location 1020 is 0
9999 mem: location 1004 is 1008
9999 mem: location 1006 is 1019
9999 mem: skipping refcount at 1019
9998 run: address to copy to is 1020
9999 mem: incrementing refcount of 1008: 1 -> 2
9999 mem: storing 1008 in location 1020
 104 run: {out: ("address" "sink" "number")} <- new {(sink number): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1021
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: incrementing refcount of 1021: 0 -> 1
9999 mem: storing 1021 in location 1007
 104 run: {out: ("address" "sink" "number"), "lookup": ()} <- put {out: ("address" "sink" "number"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "number")}
9999 mem: location 1007 is 1021
9999 mem: skipping refcount at 1021
9999 mem: location 1022 is 0
9999 mem: location 1004 is 1008
9999 mem: location 1007 is 1021
9999 mem: skipping refcount at 1021
9998 run: address to copy to is 1022
9999 mem: incrementing refcount of 1008: 2 -> 3
9999 mem: storing 1008 in location 1022
 104 run: reply {in: ("address" "source" "number")}, {out: ("address" "sink" "number")}
9999 mem: location 1006 is 1019
9999 mem: location 1007 is 1021
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1019
9999 mem: incrementing refcount of 1019: 1 -> 2
9999 mem: storing 1019 in location 1
 103 run: {2: ("address" "channel" "number")} <- get {1: ("address" "source" "number"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1 is 1019
9999 mem: skipping refcount at 1019
9999 mem: location 1020 is 1008
9999 mem: location 1 is 1019
9999 mem: skipping refcount at 1019
9998 run: address to copy is 1020
9998 run: its type is ("address" "channel" "number")
9999 mem: location 1020 is 1008
9999 mem: incrementing refcount of 1008: 3 -> 4
9999 mem: storing 1008 in location 2
 103 run: {3: "number"} <- get {2: ("address" "channel" "number"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 2 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1013
9999 mem: location 1012 is 0
9999 mem: location 2 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 3
 103 run: {4: "number"} <- get {2: ("address" "channel" "number"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 2 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1013
9999 mem: location 1012 is 0
9999 mem: location 2 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    3 <- 0  # first-full\n    4 <- 0  # first-free\n  ": "literal-string"}
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
