9991 parse: --- defining scenario_channel-new-empty-not-full
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "\n    1:address:shared:channel:number <- new-channel 3/capacity\n    2:boolean <- channel-empty? 1:address:shared:channel:number\n    3:boolean <- channel-full? 1:address:shared:channel:number\n  ": "literal-string"
9992 load: after rewriting: run [
    1:address:shared:channel:number <- new-channel 3/capacity
    2:boolean <- channel-empty? 1:address:shared:channel:number
    3:boolean <- channel-full? 1:address:shared:channel:number
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "\n    2 <- 1  # empty?\n    3 <- 0  # full?\n  ": "literal-string"
9992 load: after rewriting: memory-should-contain [
    2 <- 1  # empty?
    3 <- 0  # full?
  ]
9999 parse: recipe scenario_channel-new-empty-not-full has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_channel-new-empty-not-full
9991 transform: --- rewrite 'stash' instructions in recipe scenario_channel-new-empty-not-full
9993 transform: run [
    1:address:shared:channel:number <- new-channel 3/capacity
    2:boolean <- channel-empty? 1:address:shared:channel:number
    3:boolean <- channel-full? 1:address:shared:channel:number
  ]
9993 transform: memory-should-contain [
    2 <- 1  # empty?
    3 <- 0  # full?
  ]
9991 transform: --- fill in reply ingredients from header for recipe scenario_channel-new-empty-not-full
9991 transform: --- deduce types for recipe scenario_channel-new-empty-not-full
9991 transform: --- check for invalid types in recipe scenario_channel-new-empty-not-full
9991 transform: --- collect surrounding spaces for recipe scenario_channel-new-empty-not-full
9991 transform: --- transform names for recipe scenario_channel-new-empty-not-full
9991 transform: --- resolve ambiguous calls for recipe scenario_channel-new-empty-not-full
9991 transform: --- compute instruction operations for recipe scenario_channel-new-empty-not-full
9991 transform: --- transform braces for recipe scenario_channel-new-empty-not-full
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_channel-new-empty-not-full
9991 transform: --- perform checks for recipe scenario_channel-new-empty-not-full
9991 transform: --- type-check 'call' instructions inside recipe scenario_channel-new-empty-not-full
9991 transform: --- type-check calls inside recipe scenario_channel-new-empty-not-full
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_channel-new-empty-not-full
9991 transform: --- type-check merge instructions in recipe scenario_channel-new-empty-not-full
9991 transform: --- check types of reply instructions in recipe scenario_channel-new-empty-not-full
9991 transform: --- checking reply instructions against header for scenario_channel-new-empty-not-full
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_channel-new-empty-not-full
 102 run: run [
    1:address:shared:channel:number <- new-channel 3/capacity
    2:boolean <- channel-empty? 1:address:shared:channel:number
    3:boolean <- channel-full? 1:address:shared:channel:number
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 3: "literal", {"capacity": ()}
9993 parse:   product: 1: ("address" "shared" "channel" "number")
9992 load: after rewriting: 1:address:shared:channel:number <- new-channel 3/capacity
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 1: ("address" "shared" "channel" "number")
9993 parse:   product: 2: "boolean"
9992 load: after rewriting: 2:boolean <- channel-empty? 1:address:shared:channel:number
9993 parse: instruction: channel-full?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 1: ("address" "shared" "channel" "number")
9993 parse:   product: 3: "boolean"
9992 load: after rewriting: 3:boolean <- channel-full? 1:address:shared:channel:number
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:channel:number <- new-channel 3/capacity
9992 transform: checking variant (strict) 0: recipe new-channel capacity: "number" -> result: ("address" "shared" "channel" "_elem")
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 1: recipe new-channel_2 capacity: "number" -> result: ("address" "shared" "channel" "character")
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 226 new-channel
9993 transform: switching new-channel to specialized recipe new-channel_3 capacity: "number" -> result: ("address" "shared" "channel" "_elem")
9993 transform: compute type names: new-channel_3
9994 transform:     checking capacity: "number": "number"
9993 transform: type of capacity is "number"
9994 transform:     checking result: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of result is ("address" "shared" "channel" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: capacity:number <- next-ingredient-without-typechecking 
9994 transform:     checking capacity: "number": "number"
9993 transform:   instruction: result <- new {(channel _elem): type}
9994 transform:     checking (channel _elem): "type": "type"
9993 transform: type of (channel _elem) is "type"
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9993 transform:   instruction: full:address:number <- get-address *result, first-full:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-full: "offset": "offset"
9994 transform:     checking full: ("address" "number"): ("address" "number")
9993 transform: type of full is ("address" "number")
9993 transform:   instruction: *full <- copy 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking full: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: free:address:number <- get-address *result, first-free:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-free: "offset": "offset"
9994 transform:     checking free: ("address" "number"): ("address" "number")
9993 transform: type of free is ("address" "number")
9993 transform:   instruction: *free <- copy 0
9994 transform:     checking 0: "literal": "literal"
9994 transform:     checking free: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "number")
9993 transform:   instruction: capacity <- add capacity, 1
9994 transform:     checking capacity: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking 1: "literal": "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking capacity: (): ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking data: "offset": "offset"
9994 transform:     checking dest: ("address" "address" "shared" "array" "_elem"): ("address" "address" "shared" "array" "_elem")
9993 transform: type of dest is ("address" "address" "shared" "array" "_elem")
9993 transform:   instruction: *dest <- new _elem:type, capacity
9994 transform:     checking _elem: "type": "type"
9993 transform: type of _elem is "type"
9994 transform:     checking capacity: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking dest: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "array" "_elem")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'capacity:number <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient capacity:number
9993 transform: replacing in instruction 'result <- new {(channel _elem): type}'
9993 transform: replacing in ingredient {(channel _elem): type}
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'full:address:number <- get-address *result, first-full:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full:address:number
9993 transform: replacing in instruction '*full <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *full
9993 transform: replacing in instruction 'free:address:number <- get-address *result, first-free:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:address:number
9993 transform: replacing in instruction '*free <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *free
9993 transform: replacing in instruction 'capacity <- add capacity, 1'
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient capacity
9993 transform: replacing in instruction 'dest:address:address:shared:array:_elem <- get-address *result, data:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient dest:address:address:shared:array:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '*dest <- new _elem:type, capacity'
9993 transform: replacing in ingredient _elem:type
9993 transform: replacing in ingredient capacity
9993 transform: replacing in ingredient *dest
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9992 transform: transforming new specialization: new-channel_3
9991 transform: --- rewrite literal strings in recipe new-channel_3
9991 transform: --- rewrite 'stash' instructions in recipe new-channel_3
9993 transform: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform: capacity:number <- next-ingredient-without-typechecking 
9993 transform: result <- new {(channel _elem): type}
9993 transform: full:address:number <- get-address *result, first-full:offset
9993 transform: *full <- copy 0
9993 transform: free:address:number <- get-address *result, first-free:offset
9993 transform: *free <- copy 0
9993 transform: capacity <- add capacity, 1
9993 transform: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9993 transform: *dest <- new _elem:type, capacity
9991 transform: --- checking reply instructions against header for new-channel_3
9991 transform: --- fill in reply ingredients from header for recipe new-channel_3
9991 transform: --- deduce types for recipe new-channel_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: capacity => "number"
9992 transform: result => ("address" "shared" "channel" "number")
9992 transform: full => ("address" "number")
9992 transform: free => ("address" "number")
9992 transform: dest => ("address" "address" "shared" "array" "number")
9991 transform: --- deduce types from header for new-channel_3
9993 transform: type of capacity is "number"
9993 transform: type of result is ("address" "shared" "channel" "number")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: capacity:number <- next-ingredient-without-typechecking 
9993 transform:   product: capacity: "number"
9992 transform: instruction: result <- new {(channel _elem): type}
9993 transform:   product: result: ("address" "shared" "channel" "number")
9992 transform: instruction: full:address:number <- get-address *result, first-full:offset
9993 transform:   product: full: ("address" "number")
9992 transform: instruction: *full <- copy 0
9993 transform:   product: full: ("address" "number"), {"lookup": ()}
9992 transform: instruction: free:address:number <- get-address *result, first-free:offset
9993 transform:   product: free: ("address" "number")
9992 transform: instruction: *free <- copy 0
9993 transform:   product: free: ("address" "number"), {"lookup": ()}
9992 transform: instruction: capacity <- add capacity, 1
9993 transform:   product: capacity: "number"
9992 transform: instruction: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9993 transform:   product: dest: ("address" "address" "shared" "array" "number")
9992 transform: instruction: *dest <- new _elem:type, capacity
9993 transform:   product: dest: ("address" "address" "shared" "array" "number"), {"lookup": ()}
9992 transform: instruction: reply result:address:shared:channel:_elem
9991 transform: --- check for invalid types in recipe new-channel_3
9991 transform: --- collect surrounding spaces for recipe new-channel_3
9991 transform: --- transform names for recipe new-channel_3
9993 name: assign capacity 1
9993 name: assign result 2
9993 name: element first-full of type channel is at offset 0
9993 name: assign full 3
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 4
9993 name: element data of type channel is at offset 2
9993 name: assign dest 5
9991 transform: --- resolve ambiguous calls for recipe new-channel_3
9991 transform: --- compute instruction operations for recipe new-channel_3
9991 transform: --- transform braces for recipe new-channel_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: add ...
9992 transform: get-address ...
9992 transform: new ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe new-channel_3
9991 transform: --- perform checks for recipe new-channel_3
9991 transform: --- type-check 'call' instructions inside recipe new-channel_3
9991 transform: --- type-check calls inside recipe new-channel_3
9991 transform: --- convert 'new' to 'allocate' for recipe new-channel_3
9992 new: size of "location" is 1
9992 new: size of ("channel" "number") is 3
9992 new: size of "number" is 1
9991 transform: --- type-check merge instructions in recipe new-channel_3
9991 transform: --- check types of reply instructions in recipe new-channel_3
9991 transform: --- check that recipe new-channel_3 sets default-space
9991 transform: --- checking reply instructions against header for new-channel_3
9992 transform: new specialization: new-channel_3
9992 transform: instruction 2:boolean <- channel-empty? 1:address:shared:channel:number
9992 transform: checking variant (strict) 0: recipe channel-empty? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-empty?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 230 channel-empty?
9993 transform: switching channel-empty? to specialized recipe channel-empty?_3 chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: compute type names: channel-empty?_3
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9994 transform:     checking result: "boolean": "boolean"
9993 transform: type of result is "boolean"
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform:   instruction: full:number <- get *chan, first-full:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-full: "offset": "offset"
9994 transform:     checking full: "number": "number"
9993 transform: type of full is "number"
9993 transform:   instruction: free:number <- get *chan, first-free:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-free: "offset": "offset"
9994 transform:     checking free: "number": "number"
9993 transform: type of free is "number"
9993 transform:   instruction: result <- equal full, free
9994 transform:     checking full: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking free: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking result: (): ()
9994 transform:     deducing type to "boolean"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:boolean
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'chan:address:shared:channel:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'full:number <- get *chan, first-full:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full:number
9993 transform: replacing in instruction 'free:number <- get *chan, first-free:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:number
9993 transform: replacing in instruction 'result <- equal full, free'
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient result
9992 transform: transforming new specialization: channel-empty?_3
9991 transform: --- rewrite literal strings in recipe channel-empty?_3
9991 transform: --- rewrite 'stash' instructions in recipe channel-empty?_3
9993 transform: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9993 transform: full:number <- get *chan, first-full:offset
9993 transform: free:number <- get *chan, first-free:offset
9993 transform: result <- equal full, free
9991 transform: --- checking reply instructions against header for channel-empty?_3
9991 transform: --- fill in reply ingredients from header for recipe channel-empty?_3
9991 transform: --- deduce types for recipe channel-empty?_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: full => "number"
9992 transform: free => "number"
9992 transform: result => "boolean"
9991 transform: --- deduce types from header for channel-empty?_3
9993 transform: type of chan is ("address" "shared" "channel" "number")
9993 transform: type of result is "boolean"
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: chan: ("address" "shared" "channel" "number")
9992 transform: instruction: full:number <- get *chan, first-full:offset
9993 transform:   product: full: "number"
9992 transform: instruction: free:number <- get *chan, first-free:offset
9993 transform:   product: free: "number"
9992 transform: instruction: result <- equal full, free
9993 transform:   product: result: "boolean"
9992 transform: instruction: reply result:boolean
9991 transform: --- check for invalid types in recipe channel-empty?_3
9991 transform: --- collect surrounding spaces for recipe channel-empty?_3
9991 transform: --- transform names for recipe channel-empty?_3
9993 name: assign chan 1
9993 name: element first-full of type channel is at offset 0
9993 name: assign full 2
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 3
9993 name: assign result 4
9991 transform: --- resolve ambiguous calls for recipe channel-empty?_3
9992 transform: instruction result <- equal full, free
9992 transform: checking variant (strict) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe channel-empty?_3
9991 transform: --- transform braces for recipe channel-empty?_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: get ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe channel-empty?_3
9991 transform: --- perform checks for recipe channel-empty?_3
9991 transform: --- type-check 'call' instructions inside recipe channel-empty?_3
9991 transform: --- type-check calls inside recipe channel-empty?_3
9991 transform: --- convert 'new' to 'allocate' for recipe channel-empty?_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe channel-empty?_3
9991 transform: --- check types of reply instructions in recipe channel-empty?_3
9991 transform: --- check that recipe channel-empty?_3 sets default-space
9991 transform: --- checking reply instructions against header for channel-empty?_3
9992 transform: new specialization: channel-empty?_3
9992 transform: instruction 3:boolean <- channel-full? 1:address:shared:channel:number
9992 transform: checking variant (strict) 0: recipe channel-full? chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 chan: ("address" "shared" "channel" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 231 channel-full?
9993 transform: switching channel-full? to specialized recipe channel-full?_3 chan: ("address" "shared" "channel" "_elem") -> result: "boolean"
9993 transform: compute type names: channel-full?_3
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9994 transform:     checking result: "boolean": "boolean"
9993 transform: type of result is "boolean"
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform:   instruction: tmp:number <- get *chan, first-free:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-free: "offset": "offset"
9994 transform:     checking tmp: "number": "number"
9993 transform: type of tmp is "number"
9993 transform:   instruction: tmp <- add tmp, 1
9994 transform:     checking tmp: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking 1: "literal": "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking tmp: (): ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: len:number <- channel-capacity chan
9994 transform:     checking chan: (): ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking len: "number": "number"
9993 transform: type of len is "number"
9993 transform:   instruction: at-end?:boolean <- greater-or-equal tmp, len
9994 transform:     checking tmp: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking len: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking at-end?: "boolean": "boolean"
9993 transform: type of at-end? is "boolean"
9993 transform:   instruction: break-unless at-end?
9994 transform:     checking at-end?: (): ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: tmp <- copy 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking tmp: (): ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: full:number <- get *chan, first-full:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking first-full: "offset": "offset"
9994 transform:     checking full: "number": "number"
9993 transform: type of full is "number"
9993 transform:   instruction: result <- equal full, tmp
9994 transform:     checking full: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking tmp: (): ()
9994 transform:     deducing type to "number"
9994 transform:     checking result: (): ()
9994 transform:     deducing type to "boolean"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:boolean
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'chan:address:shared:channel:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'tmp:number <- get *chan, first-free:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient tmp:number
9993 transform: replacing in instruction 'tmp <- add tmp, 1'
9993 transform: replacing in ingredient tmp
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient tmp
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'len:number <- channel-capacity chan'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction 'at-end?:boolean <- greater-or-equal tmp, len'
9993 transform: replacing in ingredient tmp
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless at-end?'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction 'tmp <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient tmp
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'full:number <- get *chan, first-full:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full:number
9993 transform: replacing in instruction 'result <- equal full, tmp'
9993 transform: replacing in ingredient full
9993 transform: replacing in ingredient tmp
9993 transform: replacing in ingredient result
9992 transform: transforming new specialization: channel-full?_3
9991 transform: --- rewrite literal strings in recipe channel-full?_3
9991 transform: --- rewrite 'stash' instructions in recipe channel-full?_3
9993 transform: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9993 transform: tmp:number <- get *chan, first-free:offset
9993 transform: tmp <- add tmp, 1
9993 transform: {
9993 transform: len:number <- channel-capacity chan
9993 transform: at-end?:boolean <- greater-or-equal tmp, len
9993 transform: break-unless at-end?
9993 transform: tmp <- copy 0
9993 transform: }
9993 transform: full:number <- get *chan, first-full:offset
9993 transform: result <- equal full, tmp
9991 transform: --- checking reply instructions against header for channel-full?_3
9991 transform: --- fill in reply ingredients from header for recipe channel-full?_3
9991 transform: --- deduce types for recipe channel-full?_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: tmp => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9992 transform: full => "number"
9992 transform: result => "boolean"
9991 transform: --- deduce types from header for channel-full?_3
9993 transform: type of chan is ("address" "shared" "channel" "number")
9993 transform: type of result is "boolean"
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: chan: ("address" "shared" "channel" "number")
9992 transform: instruction: tmp:number <- get *chan, first-free:offset
9993 transform:   product: tmp: "number"
9992 transform: instruction: tmp <- add tmp, 1
9993 transform:   product: tmp: "number"
9992 transform: instruction: {
9992 transform: instruction: len:number <- channel-capacity chan
9993 transform:   product: len: "number"
9992 transform: instruction: at-end?:boolean <- greater-or-equal tmp, len
9993 transform:   product: at-end?: "boolean"
9992 transform: instruction: break-unless at-end?
9992 transform: instruction: tmp <- copy 0
9993 transform:   product: tmp: "number"
9992 transform: instruction: }
9992 transform: instruction: full:number <- get *chan, first-full:offset
9993 transform:   product: full: "number"
9992 transform: instruction: result <- equal full, tmp
9993 transform:   product: result: "boolean"
9992 transform: instruction: reply result:boolean
9991 transform: --- check for invalid types in recipe channel-full?_3
9991 transform: --- collect surrounding spaces for recipe channel-full?_3
9991 transform: --- transform names for recipe channel-full?_3
9993 name: assign chan 1
9993 name: element first-free of type channel is at offset 1
9993 name: assign tmp 2
9993 name: assign len 3
9993 name: assign at-end? 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full 5
9993 name: assign result 6
9991 transform: --- resolve ambiguous calls for recipe channel-full?_3
9992 transform: instruction len:number <- channel-capacity chan
9992 transform: checking variant (strict) 0: recipe channel-capacity chan: ("address" "shared" "channel" "_elem") -> result: "number"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-capacity_2 chan: ("address" "shared" "channel" "character") -> result: "number"
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 232 channel-capacity
9993 transform: switching channel-capacity to specialized recipe channel-capacity_3 chan: ("address" "shared" "channel" "_elem") -> result: "number"
9993 transform: compute type names: channel-capacity_3
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform: type of chan is ("address" "shared" "channel" "_elem")
9994 transform:     checking result: "number": "number"
9993 transform: type of result is "number"
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking chan: ("address" "shared" "channel" "_elem"): ("address" "shared" "channel" "_elem")
9993 transform:   instruction: q:address:shared:array:_elem <- get *chan, data:offset
9994 transform:     checking chan: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "channel" "_elem")
9994 transform:     checking data: "offset": "offset"
9994 transform:     checking q: ("address" "shared" "array" "_elem"): ("address" "shared" "array" "_elem")
9993 transform: type of q is ("address" "shared" "array" "_elem")
9993 transform:   instruction: result <- length *q
9994 transform:     checking q: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "array" "_elem")
9994 transform:     checking result: (): ()
9994 transform:     deducing type to "number"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:number
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'chan:address:shared:channel:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient chan:address:shared:channel:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'q:address:shared:array:_elem <- get *chan, data:offset'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "number"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient q:address:shared:array:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'result <- length *q'
9993 transform: replacing in ingredient *q
9993 transform: _elem => "number"
9993 transform: replacing in ingredient result
9992 transform: transforming new specialization: channel-capacity_3
9991 transform: --- rewrite literal strings in recipe channel-capacity_3
9991 transform: --- rewrite 'stash' instructions in recipe channel-capacity_3
9993 transform: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9993 transform: q:address:shared:array:_elem <- get *chan, data:offset
9993 transform: result <- length *q
9991 transform: --- checking reply instructions against header for channel-capacity_3
9991 transform: --- fill in reply ingredients from header for recipe channel-capacity_3
9991 transform: --- deduce types for recipe channel-capacity_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: chan => ("address" "shared" "channel" "number")
9992 transform: q => ("address" "shared" "array" "number")
9992 transform: result => "number"
9991 transform: --- deduce types from header for channel-capacity_3
9993 transform: type of chan is ("address" "shared" "channel" "number")
9993 transform: type of result is "number"
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: chan: ("address" "shared" "channel" "number")
9992 transform: instruction: q:address:shared:array:_elem <- get *chan, data:offset
9993 transform:   product: q: ("address" "shared" "array" "number")
9992 transform: instruction: result <- length *q
9993 transform:   product: result: "number"
9992 transform: instruction: reply result:number
9991 transform: --- check for invalid types in recipe channel-capacity_3
9991 transform: --- collect surrounding spaces for recipe channel-capacity_3
9991 transform: --- transform names for recipe channel-capacity_3
9993 name: assign chan 1
9993 name: element data of type channel is at offset 2
9993 name: assign q 2
9993 name: assign result 3
9991 transform: --- resolve ambiguous calls for recipe channel-capacity_3
9991 transform: --- compute instruction operations for recipe channel-capacity_3
9991 transform: --- transform braces for recipe channel-capacity_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: length ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe channel-capacity_3
9991 transform: --- perform checks for recipe channel-capacity_3
9991 transform: --- type-check 'call' instructions inside recipe channel-capacity_3
9991 transform: --- type-check calls inside recipe channel-capacity_3
9991 transform: --- convert 'new' to 'allocate' for recipe channel-capacity_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe channel-capacity_3
9991 transform: --- check types of reply instructions in recipe channel-capacity_3
9991 transform: --- check that recipe channel-capacity_3 sets default-space
9991 transform: --- checking reply instructions against header for channel-capacity_3
9992 transform: new specialization: channel-capacity_3
9992 transform: instruction result <- equal full, tmp
9992 transform: checking variant (strict) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe channel-full?_3
9991 transform: --- transform braces for recipe channel-full?_3
9993 transform: channel-full?_3: push (open, 4)
9993 transform: push (close, 9)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: add ...
9992 transform: channel-capacity ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: get ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe channel-full?_3
9991 transform: --- perform checks for recipe channel-full?_3
9991 transform: --- type-check 'call' instructions inside recipe channel-full?_3
9991 transform: --- type-check calls inside recipe channel-full?_3
9991 transform: --- convert 'new' to 'allocate' for recipe channel-full?_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe channel-full?_3
9991 transform: --- check types of reply instructions in recipe channel-full?_3
9991 transform: --- check that recipe channel-full?_3 sets default-space
9991 transform: --- checking reply instructions against header for channel-full?_3
9992 transform: new specialization: channel-full?_3
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: channel-empty? ...
9992 transform: channel-full? ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:channel:number <- new-channel_3 3/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: result <- new {(channel _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
9999 mem: incrementing refcount of 1008: 0 -> 1
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1005
 104 run: *full <- copy 0
9999 mem: location 1005 is 1009
9999 mem: storing 0 in location 1009
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *free <- copy 0
9999 mem: location 1006 is 1010
9999 mem: storing 0 in location 1010
 104 run: capacity <- add capacity, 1
9999 mem: location 1003 is 3
9999 mem: storing 4 in location 1003
 104 run: dest:address:address:shared:array:_elem <- get-address *result, data:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1007
 104 run: *dest <- new _elem:type, capacity
9999 mem: location 1003 is 4
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1012
9999 mem: storing 4 in location 1013
9999 mem: location 1007 is 1011
9999 mem: storing 1012 in location 1011
9999 mem: incrementing refcount of 1012: 0 -> 1
 104 run: reply result:address:shared:channel:_elem
9999 mem: location 1004 is 1008
9999 mem: clearing full:address:number
9999 mem: storing 0 in location 1005
9999 mem: clearing free:address:number
9999 mem: storing 0 in location 1006
9999 mem: clearing dest:address:address:shared:array:_elem
9999 mem: storing 0 in location 1007
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: 2:boolean <- channel-empty?_3 1:address:shared:channel:number
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1018
9999 mem: storing 5 in location 1019
 104 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1021
9999 mem: incrementing refcount of 1008: 2 -> 3
 104 run: full:number <- get *chan, first-full:offset
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1022
 104 run: free:number <- get *chan, first-free:offset
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1023
 104 run: result <- equal full, free
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: storing 1 in location 1024
 104 run: reply result:boolean
9999 mem: location 1024 is 1
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1008: 3 -> 2
9999 mem: storing 0 in location 1021
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9999 mem: storing 1 in location 2
 103 run: 3:boolean <- channel-full?_3 1:address:shared:channel:number
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1025
9999 mem: storing 7 in location 1026
 104 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1028
9999 mem: incrementing refcount of 1008: 2 -> 3
 104 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1028 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1028 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1029
 104 run: tmp <- add tmp, 1
9999 mem: location 1029 is 0
9999 mem: storing 1 in location 1029
 104 run: len:number <- channel-capacity_3 chan
9999 mem: location 1028 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1034
9999 mem: storing 4 in location 1035
 105 run: chan:address:shared:channel:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1037
9999 mem: incrementing refcount of 1008: 3 -> 4
 105 run: q:address:shared:array:_elem <- get *chan, data:offset
9999 mem: location 1037 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1037 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is ("address" "shared" "array" "number")
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1038
9999 mem: incrementing refcount of 1012: 1 -> 2
 105 run: result <- length *q
9999 mem: location 1038 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 4 in location 1039
 105 run: reply result:number
9999 mem: location 1039 is 4
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1008: 4 -> 3
9999 mem: storing 0 in location 1037
9999 mem: clearing q:address:shared:array:_elem
9999 mem: decrementing refcount of 1012: 2 -> 1
9999 mem: storing 0 in location 1038
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 4
9999 mem: storing 4 in location 1030
 104 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1029 is 1
9999 mem: location 1030 is 4
9999 mem: storing 0 in location 1031
 104 run: jump-unless at-end?, 
9999 mem: location 1031 is 0
9998 run: jumping to instruction 9
 104 run: full:number <- get *chan, first-full:offset
9999 mem: location 1028 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1028 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1032
 104 run: result <- equal full, tmp
9999 mem: location 1032 is 0
9999 mem: location 1029 is 1
9999 mem: storing 0 in location 1033
 104 run: reply result:boolean
9999 mem: location 1033 is 0
9999 mem: clearing chan:address:shared:channel:_elem
9999 mem: decrementing refcount of 1008: 3 -> 2
9999 mem: storing 0 in location 1028
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 1  # empty?
    3 <- 0  # full?
  ]
9999 run: checking location 2
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
