9991 parse: --- defining scenario_check_text_in_memory
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10:number <- copy 3\n    11:character <- copy 97  # 'a'\n    12:character <- copy 98  # 'b'\n    13:character <- copy 99  # 'c'\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    10:number <- copy 3\n    11:character <- copy 97  # 'a'\n    12:character <- copy 98  # 'b'\n    13:character <- copy 99  # 'c'\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10:array:character <- [abc]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    10:array:character <- [abc]\n  ": "literal-string"}
9999 parse: recipe scenario_check_text_in_memory has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_check_text_in_memory
9991 transform: --- rewrite 'stash' instructions in recipe scenario_check_text_in_memory
9991 transform: --- deduce types for recipe scenario_check_text_in_memory
9993 transform: run {"\n    10:number <- copy 3\n    11:character <- copy 97  # 'a'\n    12:character <- copy 98  # 'b'\n    13:character <- copy 99  # 'c'\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    10:array:character <- [abc]\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_check_text_in_memory
9991 transform: --- deduce types for recipe scenario_check_text_in_memory
9991 transform: --- check for invalid types in recipe scenario_check_text_in_memory
9991 transform: --- collect surrounding spaces for recipe scenario_check_text_in_memory
9991 transform: --- transform names for recipe scenario_check_text_in_memory
9991 transform: --- resolve ambiguous calls for recipe scenario_check_text_in_memory
9992 transform: --- compute address offsets for scenario_check_text_in_memory
9993 transform: - compute address offsets for run {"\n    10:number <- copy 3\n    11:character <- copy 97  # 'a'\n    12:character <- copy 98  # 'b'\n    13:character <- copy 99  # 'c'\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    10:array:character <- [abc]\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_check_text_in_memory
9991 transform: --- transform braces for recipe scenario_check_text_in_memory
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_check_text_in_memory
9991 transform: --- perform checks for recipe scenario_check_text_in_memory
9991 transform: --- type-check 'call' instructions inside recipe scenario_check_text_in_memory
9991 transform: --- type-check calls inside recipe scenario_check_text_in_memory
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_check_text_in_memory
9991 transform: --- check types of reply instructions in recipe scenario_check_text_in_memory
9991 transform: --- type-check merge instructions in recipe scenario_check_text_in_memory
9991 transform: --- checking reply instructions against header for scenario_check_text_in_memory
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_check_text_in_memory
 102 run: run {"\n    10:number <- copy 3\n    11:character <- copy 97  # 'a'\n    12:character <- copy 98  # 'b'\n    13:character <- copy 99  # 'c'\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "literal"}
9993 parse:   product: {10: "number"}
9992 load: after rewriting: {10: "number"} <- copy {3: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {97: "literal"}
9993 parse:   product: {11: "character"}
9992 load: after rewriting: {11: "character"} <- copy {97: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {98: "literal"}
9993 parse:   product: {12: "character"}
9992 load: after rewriting: {12: "character"} <- copy {98: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {99: "literal"}
9993 parse:   product: {13: "character"}
9992 load: after rewriting: {13: "character"} <- copy {99: "literal"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {10: "number"} <- copy {3: "literal"}
9993 transform: - compute address offsets for {11: "character"} <- copy {97: "literal"}
9993 transform: - compute address offsets for {12: "character"} <- copy {98: "literal"}
9993 transform: - compute address offsets for {13: "character"} <- copy {99: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {10: "number"} <- copy {3: "literal"}
9999 mem: storing 3 in location 10
 103 run: {11: "character"} <- copy {97: "literal"}
9999 mem: storing 97 in location 11
 103 run: {12: "character"} <- copy {98: "literal"}
9999 mem: storing 98 in location 12
 103 run: {13: "character"} <- copy {99: "literal"}
9999 mem: storing 99 in location 13
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    10:array:character <- [abc]\n  ": "literal-string"}
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
