9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {location: "type"}
9993 parse:   ingredient: {30: "literal"}
9993 parse:   product: {default-space: ("address" "array" "location")}
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9993 parse: instruction: new-counter
9993 parse:   number of ingredients: 0
9993 parse:   product: {1: ("address" "array" "location"), "names": "new-counter"}
9992 load: after rewriting: {1: ("address" "array" "location"), "names": "new-counter"} <- new-counter 
9993 parse: instruction: increment-counter
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "array" "location"), "names": "new-counter"}
9993 parse:   product: {2: "number", "raw": ()}
9992 load: after rewriting: {2: "number", "raw": ()} <- increment-counter {1: ("address" "array" "location"), "names": "new-counter"}
9993 parse: instruction: increment-counter
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "array" "location"), "names": "new-counter"}
9993 parse:   product: {3: "number", "raw": ()}
9992 load: after rewriting: {3: "number", "raw": ()} <- increment-counter {1: ("address" "array" "location"), "names": "new-counter"}
9999 parse: recipe main has a header
9991 parse: --- defining new-counter
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {location: "type"}
9993 parse:   ingredient: {30: "literal"}
9993 parse:   product: {default-space: ("address" "array" "location")}
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {23: "literal"}
9993 parse:   product: {x: "number"}
9992 load: after rewriting: {x: "number"} <- copy {23: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "literal"}
9993 parse:   product: {y: "number"}
9992 load: after rewriting: {y: "number"} <- copy {3: "literal"}
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {default-space: ("address" "array" "location")}
9992 load: after rewriting: return {default-space: ("address" "array" "location")}
9991 parse: --- defining increment-counter
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {location: "type"}
9993 parse:   ingredient: {30: "literal"}
9993 parse:   product: {default-space: ("address" "array" "location")}
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9993 parse: instruction: next-ingredient
9993 parse:   number of ingredients: 0
9993 parse:   product: {0: ("address" "array" "location"), "names": "new-counter"}
9992 load: after rewriting: {0: ("address" "array" "location"), "names": "new-counter"} <- next-ingredient 
9993 parse: instruction: add
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {y: "number", "space": "1"}
9993 parse:   ingredient: {1: "literal"}
9993 parse:   product: {y: "number", "space": "1"}
9992 load: after rewriting: {y: "number", "space": "1"} <- add {y: "number", "space": "1"}, {1: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {234: "literal"}
9993 parse:   product: {y: "number"}
9992 load: after rewriting: {y: "number"} <- copy {234: "literal"}
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {y: "number", "space": "1"}
9992 load: after rewriting: return {y: "number", "space": "1"}
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe new-counter
9991 transform: --- rewrite literal strings in recipe increment-counter
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe new-counter
9991 transform: --- deduce types for recipe new-counter
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: y => "number"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9993 transform: {x: "number"} <- copy {23: "literal"}
9993 transform: {y: "number"} <- copy {3: "literal"}
9993 transform: return {default-space: ("address" "array" "location")}
9991 transform: --- rewrite 'stash' instructions in recipe increment-counter
9991 transform: --- deduce types for recipe increment-counter
9992 transform: default-space => ("address" "array" "location")
9992 transform: y => "number"
9992 transform: y => "number"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9993 transform: {0: ("address" "array" "location"), "names": "new-counter"} <- next-ingredient 
9993 transform: {y: "number", "space": "1"} <- add {y: "number", "space": "1"}, {1: "literal"}
9993 transform: {y: "number"} <- copy {234: "literal"}
9993 transform: return {y: "number", "space": "1"}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9991 transform: --- deduce types for recipe new-counter
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: y => "number"
9991 transform: --- deduce types for recipe increment-counter
9992 transform: default-space => ("address" "array" "location")
9992 transform: y => "number"
9992 transform: y => "number"
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe new-counter
9991 transform: --- check for invalid types in recipe increment-counter
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe new-counter
9991 transform: --- collect surrounding spaces for recipe increment-counter
9993 name: lexically surrounding space for recipe increment-counter comes from new-counter
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe new-counter
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- transform names for recipe increment-counter
9993 name: assign y 1
9991 transform: --- resolve ambiguous calls for recipe main
9991 transform: --- resolve ambiguous calls for recipe new-counter
9991 transform: --- resolve ambiguous calls for recipe increment-counter
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe new-counter
9991 transform: --- compute instruction operations for recipe increment-counter
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: new-counter ...
9992 transform: increment-counter ...
9992 transform: increment-counter ...
9992 transform:  ...
9991 transform: --- transform braces for recipe new-counter
9992 transform: new ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: return ...
9991 transform: --- transform braces for recipe increment-counter
9992 transform: new ...
9992 transform: next-ingredient ...
9992 transform: add ...
9992 transform: copy ...
9992 transform: return ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe new-counter
9991 transform: --- perform checks for recipe increment-counter
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe new-counter
9991 transform: --- type-check 'call' instructions inside recipe increment-counter
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe new-counter
9991 transform: --- type-check calls inside recipe increment-counter
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe new-counter
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe increment-counter
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe new-counter
9991 transform: --- check types of reply instructions in recipe increment-counter
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe new-counter
9991 transform: --- type-check merge instructions in recipe increment-counter
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 30 in location 1001
 102 run: {1: ("address" "array" "location"), "names": "new-counter"} <- new-counter 
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1032
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
9999 mem: storing 0 in location 1059
9999 mem: storing 0 in location 1060
9999 mem: storing 0 in location 1061
9999 mem: storing 0 in location 1062
9999 mem: storing 0 in location 1063
9999 mem: storing 30 in location 1033
 103 run: {x: "number"} <- copy {23: "literal"}
9999 mem: storing 23 in location 1035
 103 run: {y: "number"} <- copy {3: "literal"}
9999 mem: storing 3 in location 1036
 103 run: return {default-space: ("address" "array" "location")}
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1032
9999 mem: storing 1032 in location 1003
9999 mem: incrementing refcount of 1032: 0 -> 1
 102 run: {2: "number", "raw": ()} <- increment-counter {1: ("address" "array" "location"), "names": "new-counter"}
9999 mem: location 1003 is 1032
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1064
9999 mem: storing 0 in location 1064
9999 mem: storing 0 in location 1065
9999 mem: storing 0 in location 1066
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
9999 mem: storing 0 in location 1071
9999 mem: storing 0 in location 1072
9999 mem: storing 0 in location 1073
9999 mem: storing 0 in location 1074
9999 mem: storing 0 in location 1075
9999 mem: storing 0 in location 1076
9999 mem: storing 0 in location 1077
9999 mem: storing 0 in location 1078
9999 mem: storing 0 in location 1079
9999 mem: storing 0 in location 1080
9999 mem: storing 0 in location 1081
9999 mem: storing 0 in location 1082
9999 mem: storing 0 in location 1083
9999 mem: storing 0 in location 1084
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: storing 0 in location 1087
9999 mem: storing 0 in location 1088
9999 mem: storing 0 in location 1089
9999 mem: storing 0 in location 1090
9999 mem: storing 0 in location 1091
9999 mem: storing 0 in location 1092
9999 mem: storing 0 in location 1093
9999 mem: storing 0 in location 1094
9999 mem: storing 0 in location 1095
9999 mem: storing 30 in location 1065
 103 run: {0: ("address" "array" "location"), "names": "new-counter"} <- next-ingredient 
9999 mem: storing 1032 in location 1066
9999 mem: incrementing refcount of 1032: 1 -> 2
 103 run: {y: "number", "space": "1"} <- add {y: "number", "space": "1"}, {1: "literal"}
9999 mem: location 1036 is 3
9999 mem: storing 4 in location 1036
 103 run: {y: "number"} <- copy {234: "literal"}
9999 mem: storing 234 in location 1067
 103 run: return {y: "number", "space": "1"}
9999 mem: location 1036 is 4
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 4
9999 mem: storing 4 in location 2
 102 run: {3: "number", "raw": ()} <- increment-counter {1: ("address" "array" "location"), "names": "new-counter"}
9999 mem: location 1003 is 1032
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {30: "literal"}
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1096
9999 mem: storing 0 in location 1096
9999 mem: storing 0 in location 1097
9999 mem: storing 0 in location 1098
9999 mem: storing 0 in location 1099
9999 mem: storing 0 in location 1100
9999 mem: storing 0 in location 1101
9999 mem: storing 0 in location 1102
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
9999 mem: storing 0 in location 1105
9999 mem: storing 0 in location 1106
9999 mem: storing 0 in location 1107
9999 mem: storing 0 in location 1108
9999 mem: storing 0 in location 1109
9999 mem: storing 0 in location 1110
9999 mem: storing 0 in location 1111
9999 mem: storing 0 in location 1112
9999 mem: storing 0 in location 1113
9999 mem: storing 0 in location 1114
9999 mem: storing 0 in location 1115
9999 mem: storing 0 in location 1116
9999 mem: storing 0 in location 1117
9999 mem: storing 0 in location 1118
9999 mem: storing 0 in location 1119
9999 mem: storing 0 in location 1120
9999 mem: storing 0 in location 1121
9999 mem: storing 0 in location 1122
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
9999 mem: storing 0 in location 1125
9999 mem: storing 0 in location 1126
9999 mem: storing 0 in location 1127
9999 mem: storing 30 in location 1097
 103 run: {0: ("address" "array" "location"), "names": "new-counter"} <- next-ingredient 
9999 mem: storing 1032 in location 1098
9999 mem: incrementing refcount of 1032: 2 -> 3
 103 run: {y: "number", "space": "1"} <- add {y: "number", "space": "1"}, {1: "literal"}
9999 mem: location 1036 is 4
9999 mem: storing 5 in location 1036
 103 run: {y: "number"} <- copy {234: "literal"}
9999 mem: storing 234 in location 1099
 103 run: return {y: "number", "space": "1"}
9999 mem: location 1036 is 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 5
9999 mem: storing 5 in location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
