9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {x: ("address" "number")}
9992 load: after rewriting: {x: ("address" "number")} <- new {number: "type"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {x: (), "lookup": ()}
9992 load: after rewriting: {x: (), "lookup": ()} <- copy {34: "literal"}
9993 parse: instruction: deep-copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ()}
9993 parse:   product: {y: ("address" "number")}
9992 load: after rewriting: {y: ("address" "number")} <- deep-copy {x: ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {y: ()}
9993 parse:   product: {10: "boolean", "raw": ()}
9992 load: after rewriting: {10: "boolean", "raw": ()} <- equal {x: ()}, {y: ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: (), "lookup": ()}
9993 parse:   ingredient: {y: (), "lookup": ()}
9993 parse:   product: {11: "boolean", "raw": ()}
9992 load: after rewriting: {11: "boolean", "raw": ()} <- equal {x: (), "lookup": ()}, {y: (), "lookup": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {y: ()}
9992 load: after rewriting: {y: ()} <- copy {0: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9992 transform: x <= ("address" "number")
9992 transform: x <= ("address" "number")
9992 transform: y => ("address" "number")
9992 transform: x <= ("address" "number")
9992 transform: y <= ("address" "number")
9992 transform: x <= ("address" "number")
9992 transform: y <= ("address" "number")
9992 transform: y <= ("address" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "number")} <- new {number: "type"}
9993 transform: {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: {y: ("address" "number")} <- deep-copy {x: ("address" "number")}
9993 transform: {10: "boolean", "raw": ()} <- equal {x: ("address" "number")}, {y: ("address" "number")}
9993 transform: {11: "boolean", "raw": ()} <- equal {x: ("address" "number"), "lookup": ()}, {y: ("address" "number"), "lookup": ()}
9993 transform: {y: ("address" "number")} <- copy {0: "literal"}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9992 transform: y => ("address" "number")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {10: "boolean", "raw": ()} <- equal {x: ()}, {y: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {11: "boolean", "raw": ()} <- equal {x: (), "lookup": ()}, {y: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "number")} <- new {number: "type"}
9993 transform: - compute address offsets for {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: - compute address offsets for {y: ("address" "number")} <- deep-copy {x: ("address" "number")}
9993 transform: - compute address offsets for {10: "boolean", "raw": ()} <- equal {x: ("address" "number")}, {y: ("address" "number")}
9993 transform: - compute address offsets for {11: "boolean", "raw": ()} <- equal {x: ("address" "number"), "lookup": ()}, {y: ("address" "number"), "lookup": ()}
9993 transform: - compute address offsets for {y: ("address" "number")} <- copy {0: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: copy ...
9992 transform: deep-copy ...
9992 transform: equal ...
9992 transform: equal ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "number" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 3 in location 1001
 102 run: {x: ("address" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1005
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1005: 0 -> 1
9999 mem: storing 1005 in location 1003
 102 run: {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 34 in location 1006
 102 run: {y: ("address" "number")} <- deep-copy {x: ("address" "number")}
9999 mem: location 1003 is 1005
9999 mem: allocating size 2
9999 mem: new alloc: 1007
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: allocating size 2
9999 mem: new alloc: 1009
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: location 1006 is 34
9999 mem: location 1007 is 1009
9999 mem: skipping refcount at 1009
9999 mem: storing 34 in location 1010
9999 mem: location 1007 is 1009
9999 mem: skipping refcount at 1009
9999 abandon: updating refcounts inside 1007: number
9999 abandon: saving 1007 in free-list of size 2
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1009: 0 -> 1
9999 mem: storing 1009 in location 1004
 102 run: {10: "boolean", "raw": ()} <- equal {x: ("address" "number")}, {y: ("address" "number")}
9999 mem: location 1003 is 1005
9999 mem: location 1004 is 1009
9999 mem: storing 0 in location 10
 102 run: {11: "boolean", "raw": ()} <- equal {x: ("address" "number"), "lookup": ()}, {y: ("address" "number"), "lookup": ()}
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: location 1006 is 34
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 34
9999 mem: storing 1 in location 11
 102 run: {y: ("address" "number")} <- copy {0: "literal"}
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 mem: decrementing refcount of 1009: 1 -> 0
9999 mem: automatically abandoning 1009
9999 abandon: updating refcounts inside 1009: number
9999 abandon: saving 1009 in free-list of size 2
9999 mem: storing 0 in location 1004
 102 run: reply 
9999 mem: clearing x:address:number
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 1 -> 0
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: number
9999 abandon: saving 1005 in free-list of size 2
9999 mem: storing 0 in location 1003
9999 mem: clearing y:address:number
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
9999 mem: clearing y
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 1
