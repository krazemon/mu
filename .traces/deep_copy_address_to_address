9991 parse: --- defining main
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {100: "literal", "unsafe": ()}
9993 parse:   product: {1: ("address" "address" "number")}
9992 load: after rewriting: {1: ("address" "address" "number")} <- copy {100: "literal", "unsafe": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {150: "literal", "unsafe": ()}
9993 parse:   product: {1: ("address" "address" "number"), "lookup": ()}
9992 load: after rewriting: {1: ("address" "address" "number"), "lookup": ()} <- copy {150: "literal", "unsafe": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {1: ("address" "address" "number"), "lookup": (), "lookup": ()}
9992 load: after rewriting: {1: ("address" "address" "number"), "lookup": (), "lookup": ()} <- copy {34: "literal"}
9993 parse: instruction: deep-copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "address" "number")}
9993 parse:   product: {2: ("address" "address" "number")}
9992 load: after rewriting: {2: ("address" "address" "number")} <- deep-copy {1: ("address" "address" "number")}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "address" "number")}
9993 parse:   ingredient: {2: ("address" "address" "number")}
9993 parse:   product: {10: "boolean"}
9992 load: after rewriting: {10: "boolean"} <- equal {1: ("address" "address" "number")}, {2: ("address" "address" "number")}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "address" "number"), "lookup": ()}
9993 parse:   ingredient: {2: ("address" "address" "number"), "lookup": ()}
9993 parse:   product: {11: "boolean"}
9992 load: after rewriting: {11: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": ()}, {2: ("address" "address" "number"), "lookup": ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "address" "number"), "lookup": (), "lookup": ()}
9993 parse:   ingredient: {2: ("address" "address" "number"), "lookup": (), "lookup": ()}
9993 parse:   product: {12: "boolean"}
9992 load: after rewriting: {12: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": (), "lookup": ()}, {2: ("address" "address" "number"), "lookup": (), "lookup": ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {10: "boolean"} <- equal {1: ("address" "address" "number")}, {2: ("address" "address" "number")}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {11: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": ()}, {2: ("address" "address" "number"), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {12: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": (), "lookup": ()}, {2: ("address" "address" "number"), "lookup": (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: ("address" "address" "number")} <- copy {100: "literal", "unsafe": ()}
9993 transform: - compute address offsets for {1: ("address" "address" "number"), "lookup": ()} <- copy {150: "literal", "unsafe": ()}
9993 transform: - compute address offsets for {1: ("address" "address" "number"), "lookup": (), "lookup": ()} <- copy {34: "literal"}
9993 transform: - compute address offsets for {2: ("address" "address" "number")} <- deep-copy {1: ("address" "address" "number")}
9993 transform: - compute address offsets for {10: "boolean"} <- equal {1: ("address" "address" "number")}, {2: ("address" "address" "number")}
9993 transform: - compute address offsets for {11: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": ()}, {2: ("address" "address" "number"), "lookup": ()}
9993 transform: - compute address offsets for {12: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": (), "lookup": ()}, {2: ("address" "address" "number"), "lookup": (), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: deep-copy ...
9992 transform: equal ...
9992 transform: equal ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 200 to 100200
9990 schedule: main
 102 run: {1: ("address" "address" "number")} <- copy {100: "literal", "unsafe": ()}
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 100: 0 -> 1
9999 mem: storing 100 in location 1
 102 run: {1: ("address" "address" "number"), "lookup": ()} <- copy {150: "literal", "unsafe": ()}
9999 mem: location 1 is 100
9999 mem: skipping refcount at 100
9999 mem: location 101 is 0
9999 mem: incrementing refcount of 150: 0 -> 1
9999 mem: storing 150 in location 101
 102 run: {1: ("address" "address" "number"), "lookup": (), "lookup": ()} <- copy {34: "literal"}
9999 mem: location 1 is 100
9999 mem: skipping refcount at 100
9999 mem: location 101 is 150
9999 mem: skipping refcount at 150
9999 mem: storing 34 in location 151
 102 run: {2: ("address" "address" "number")} <- deep-copy {1: ("address" "address" "number")}
9999 mem: location 1 is 100
9991 run: deep-copy: allocating space for temporary
9999 mem: allocating size 2
9999 mem: new alloc: 200
9999 mem: storing 0 in location 200
9999 mem: storing 0 in location 201
9991 run: deep-copy: copying address 1
9999 mem: location 1 is 100
9999 mem: skipping refcount at 100
9999 mem: allocating size 3
9999 mem: new alloc: 202
9999 mem: storing 0 in location 202
9999 mem: storing 0 in location 203
9999 mem: storing 0 in location 204
9991 run: recursing on payload 1 {1: ("address" "address" "number"), "raw": (), "lookup": ()}
9999 mem: location 1 is 100
9999 mem: skipping refcount at 100
9991 run: deep-copy: copying address 101
9999 mem: location 101 is 150
9999 mem: skipping refcount at 150
9999 mem: allocating size 3
9999 mem: new alloc: 205
9999 mem: storing 0 in location 205
9999 mem: storing 0 in location 206
9999 mem: storing 0 in location 207
9991 run: recursing on payload 101 {1: ("address" "number"), "raw": (), "lookup": ()}
9999 mem: location 101 is 150
9999 mem: skipping refcount at 150
9999 mem: location 151 is 34
9991 run: deep-copy: done
9991 run: deep-copy: writing result 205: 34
9991 run: deep-copy: writing temporary 200: 205
9999 mem: location 200 is 205
9999 mem: skipping refcount at 205
9999 mem: location 206 is 0
9991 run: deep-copy: really writing to 200 {1: ("address" "number"), "raw": (), "lookup": ()} (old value 0 new value 34)
9999 mem: location 200 is 205
9999 mem: skipping refcount at 205
9999 mem: storing 34 in location 206
9991 run: deep-copy: output is 34
9991 run: deep-copy: done
9991 run: deep-copy: writing result 202: 205
9991 run: deep-copy: writing temporary 200: 202
9999 mem: location 200 is 202
9999 mem: skipping refcount at 202
9999 mem: location 203 is 0
9991 run: deep-copy: really writing to 200 {1: ("address" "address" "number"), "raw": (), "lookup": ()} (old value 0 new value 205)
9999 mem: location 200 is 202
9999 mem: skipping refcount at 202
9999 mem: location 203 is 0
9999 mem: incrementing refcount of 205: 0 -> 1
9999 mem: storing 205 in location 203
9991 run: deep-copy: output is 205
9991 run: deep-copy: done
9991 run: deep-copy: reclaiming temporary
9999 mem: location 200 is 202
9999 mem: skipping refcount at 202
9999 abandon: updating refcounts inside 200: number
9999 abandon: saving 200 in free-list of size 2
9999 mem: location 2 is 0
9999 mem: incrementing refcount of 202: 0 -> 1
9999 mem: storing 202 in location 2
 102 run: {10: "boolean"} <- equal {1: ("address" "address" "number")}, {2: ("address" "address" "number")}
9999 mem: location 1 is 100
9999 mem: location 2 is 202
9999 mem: storing 0 in location 10
 102 run: {11: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": ()}, {2: ("address" "address" "number"), "lookup": ()}
9999 mem: location 1 is 100
9999 mem: skipping refcount at 100
9999 mem: location 101 is 150
9999 mem: location 2 is 202
9999 mem: skipping refcount at 202
9999 mem: location 203 is 205
9999 mem: storing 0 in location 11
 102 run: {12: "boolean"} <- equal {1: ("address" "address" "number"), "lookup": (), "lookup": ()}, {2: ("address" "address" "number"), "lookup": (), "lookup": ()}
9999 mem: location 1 is 100
9999 mem: skipping refcount at 100
9999 mem: location 101 is 150
9999 mem: skipping refcount at 150
9999 mem: location 151 is 34
9999 mem: location 2 is 202
9999 mem: skipping refcount at 202
9999 mem: location 203 is 205
9999 mem: skipping refcount at 205
9999 mem: location 206 is 34
9999 mem: storing 1 in location 12
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
