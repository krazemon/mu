9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {p: "number"}
9993 parse:   element: {q: ("address" "foo")}
9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {foo: "type"}
9993 parse:   product: {x: ("address" "foo")}
9992 load: after rewriting: {x: ("address" "foo")} <- new {foo: "type"}
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {x: (), "lookup": ()}
9993 parse:   ingredient: {p: "offset"}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {x: (), "lookup": ()}
9992 load: after rewriting: {x: (), "lookup": ()} <- put {x: (), "lookup": ()}, {p: "offset"}, {34: "literal"}
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {x: (), "lookup": ()}
9993 parse:   ingredient: {q: "offset"}
9993 parse:   ingredient: {x: ()}
9993 parse:   product: {x: (), "lookup": ()}
9992 load: after rewriting: {x: (), "lookup": ()} <- put {x: (), "lookup": ()}, {q: "offset"}, {x: ()}
9993 parse: instruction: deep-copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ()}
9993 parse:   product: {y: ("address" "foo")}
9992 load: after rewriting: {y: ("address" "foo")} <- deep-copy {x: ()}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {y: (), "lookup": ()}
9993 parse:   ingredient: {p: "offset"}
9993 parse:   product: {1: "number", "raw": ()}
9992 load: after rewriting: {1: "number", "raw": ()} <- get {y: (), "lookup": ()}, {p: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {y: (), "lookup": ()}
9993 parse:   ingredient: {q: "offset"}
9993 parse:   product: {y2: ("address" "foo")}
9992 load: after rewriting: {y2: ("address" "foo")} <- get {y: (), "lookup": ()}, {q: "offset"}
9993 parse: instruction: stash
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {y: ()}
9993 parse:   ingredient: {"vs": "literal-string"}
9993 parse:   ingredient: {y2: ()}
9992 load: after rewriting: stash {y: ()}, {"vs": "literal-string"}, {y2: ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {y: ()}
9993 parse:   ingredient: {y2: ()}
9993 parse:   product: {2: "boolean", "raw": ()}
9992 load: after rewriting: {2: "boolean", "raw": ()} <- equal {y: ()}, {y2: ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {y: ()}
9993 parse:   product: {3: "boolean", "raw": ()}
9992 load: after rewriting: {3: "boolean", "raw": ()} <- equal {x: ()}, {y: ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "foo")
9992 transform: x <= ("address" "foo")
9992 transform: x <= ("address" "foo")
9992 transform: x <= ("address" "foo")
9992 transform: x <= ("address" "foo")
9992 transform: x <= ("address" "foo")
9992 transform: x <= ("address" "foo")
9992 transform: y => ("address" "foo")
9992 transform: y <= ("address" "foo")
9992 transform: y <= ("address" "foo")
9992 transform: y2 => ("address" "foo")
9992 transform: y <= ("address" "foo")
9992 transform: y2 <= ("address" "foo")
9992 transform: y <= ("address" "foo")
9992 transform: y2 <= ("address" "foo")
9992 transform: x <= ("address" "foo")
9992 transform: y <= ("address" "foo")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "foo")} <- new {foo: "type"}
9993 transform: {x: ("address" "foo"), "lookup": ()} <- put {x: ("address" "foo"), "lookup": ()}, {p: "offset"}, {34: "literal"}
9993 transform: {x: ("address" "foo"), "lookup": ()} <- put {x: ("address" "foo"), "lookup": ()}, {q: "offset"}, {x: ("address" "foo")}
9993 transform: {y: ("address" "foo")} <- deep-copy {x: ("address" "foo")}
9993 transform: {1: "number", "raw": ()} <- get {y: ("address" "foo"), "lookup": ()}, {p: "offset"}
9993 transform: {y2: ("address" "foo")} <- get {y: ("address" "foo"), "lookup": ()}, {q: "offset"}
9993 transform: {stash_7_0: ("address" "array" "character")} <- to-text-line {y: ("address" "foo")}
9993 transform: {stash_7_2: ("address" "array" "character")} <- to-text-line {y2: ("address" "foo")}
9993 transform: stash {stash_7_0: ("address" "array" "character")}, {"vs": "literal-string"}, {stash_7_2: ("address" "array" "character")}
9993 transform: {2: "boolean", "raw": ()} <- equal {y: ("address" "foo")}, {y2: ("address" "foo")}
9993 transform: {3: "boolean", "raw": ()} <- equal {x: ("address" "foo")}, {y: ("address" "foo")}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "foo")
9992 transform: y => ("address" "foo")
9992 transform: y2 => ("address" "foo")
9992 transform: stash_7_0 => ("address" "array" "character")
9992 transform: stash_7_2 => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign x 1
9993 name: element p of type foo is at offset 0
9993 name: element q of type foo is at offset 1
9993 name: assign y 2
9993 name: element p of type foo is at offset 0
9993 name: element q of type foo is at offset 1
9993 name: assign y2 3
9993 name: assign stash_7_0 4
9993 name: assign stash_7_2 5
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction 
9992 transform: checking variant (strict) 0: recipe to-text-line {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text-line_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe to-text-line {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe to-text-line_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 201 to-text-line
9993 transform: switching to-text-line to specialized recipe to-text-line_3 {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: compute type names: to-text-line_3
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of 'x' is "_elem"
9994 transform:     checking {y: ("address" "array" "character")}: ("address" "array" "character")
9993 transform: type of 'y' is ("address" "array" "character")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {y: ()} <- to-text {x: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {y: ()}: ()
9994 transform:     deducing type to ("address" "array" "character")
9993 transform: adding mapping from _elem to (address foo)
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => ("address" "foo")
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient y:address:array:character
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => ("address" "foo")
9993 transform: replacing in instruction '{y: ("address" "array" "character")} <- to-text {x: "_elem"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => ("address" "foo")
9993 transform: replacing in ingredient y
9992 transform: transforming new specialization: to-text-line_3
9991 transform: --- rewrite literal strings in recipe to-text-line_3
9991 transform: --- rewrite 'stash' instructions in recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "foo")
9992 transform: y => ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "foo")} <- next-ingredient-without-typechecking 
9993 transform: {y: ("address" "array" "character")} <- to-text {x: ("address" "foo")}
9991 transform: --- checking reply instructions against header for to-text-line_3
9991 transform: --- fill in reply ingredients from header for recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "foo")
9992 transform: y => ("address" "array" "character")
9991 transform: --- deduce types from header for to-text-line_3
9993 transform: type of x is ("address" "foo")
9993 transform: type of y is ("address" "array" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: ("address" "foo")} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: ("address" "foo")}
9992 transform: instruction: {y: ("address" "array" "character")} <- to-text {x: ("address" "foo")}
9993 transform:   product: {y: ("address" "array" "character")}
9992 transform: instruction: reply {y: ("address" "array" "character")}
9991 transform: --- check for invalid types in recipe to-text-line_3
9991 transform: --- collect surrounding spaces for recipe to-text-line_3
9991 transform: --- transform names for recipe to-text-line_3
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe to-text-line_3
9992 transform: instruction {y: ()} <- to-text {x: ()}
9992 transform: checking variant (strict) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for to-text-line_3
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "foo")} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: address at offset 1
9993 transform: - compute address offsets for {y: ("address" "array" "character")} <- to-text {x: ("address" "foo")}
9993 transform: - compute address offsets for reply {y: ("address" "array" "character")}
9991 transform: --- compute instruction operations for recipe to-text-line_3
9991 transform: --- transform braces for recipe to-text-line_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe to-text-line_3
9991 transform: --- perform checks for recipe to-text-line_3
9991 transform: --- type-check 'call' instructions inside recipe to-text-line_3
9991 transform: --- type-check calls inside recipe to-text-line_3
9991 transform: --- convert 'new' to 'allocate' for recipe to-text-line_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe to-text-line_3
9991 transform: --- type-check merge instructions in recipe to-text-line_3
9991 transform: --- checking reply instructions against header for to-text-line_3
9992 transform: new specialization: to-text-line_3
9992 transform: instruction 
9992 transform: checking variant (strict) 0: recipe to-text-line {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text-line_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe to-text-line_3 {x: ("address" "foo")} -> {y: ("address" "array" "character")}
9992 transform: instruction {2: "boolean", "raw": ()} <- equal {y: ()}, {y2: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {3: "boolean", "raw": ()} <- equal {x: ()}, {y: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "foo")} <- new {foo: "type"}
9993 transform: - compute address offsets for {x: ("address" "foo"), "lookup": ()} <- put {x: ("address" "foo"), "lookup": ()}, {p: "offset"}, {34: "literal"}
9993 transform: - compute address offsets for {x: ("address" "foo"), "lookup": ()} <- put {x: ("address" "foo"), "lookup": ()}, {q: "offset"}, {x: ("address" "foo")}
9993 transform: - compute address offsets for {y: ("address" "foo")} <- deep-copy {x: ("address" "foo")}
9993 transform: - compute address offsets for {1: "number", "raw": ()} <- get {y: ("address" "foo"), "lookup": ()}, {p: "offset"}
9993 transform: - compute address offsets for {y2: ("address" "foo")} <- get {y: ("address" "foo"), "lookup": ()}, {q: "offset"}
9993 transform: - compute address offsets for {stash_7_0: ("address" "array" "character")} <- to-text-line_3 {y: ("address" "foo")}
9993 transform: - compute address offsets for {stash_7_2: ("address" "array" "character")} <- to-text-line_3 {y2: ("address" "foo")}
9993 transform: - compute address offsets for stash {stash_7_0: ("address" "array" "character")}, {"vs": "literal-string"}, {stash_7_2: ("address" "array" "character")}
9993 transform: - compute address offsets for {2: "boolean", "raw": ()} <- equal {y: ("address" "foo")}, {y2: ("address" "foo")}
9993 transform: - compute address offsets for {3: "boolean", "raw": ()} <- equal {x: ("address" "foo")}, {y: ("address" "foo")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: put ...
9992 transform: put ...
9992 transform: deep-copy ...
9992 transform: get ...
9992 transform: get ...
9992 transform:  ...
9992 transform:  ...
9992 transform: stash ...
9992 transform: equal ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "foo" is 2
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 6 in location 1001
 102 run: {x: ("address" "foo")} <- new {foo: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1008
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1008: 0 -> 1
9999 mem: storing 1008 in location 1003
 102 run: {x: ("address" "foo"), "lookup": ()} <- put {x: ("address" "foo"), "lookup": ()}, {p: "offset"}, {34: "literal"}
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1009
9999 mem: storing 34 in location 1009
 102 run: {x: ("address" "foo"), "lookup": ()} <- put {x: ("address" "foo"), "lookup": ()}, {q: "offset"}, {x: ("address" "foo")}
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 34
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1010
9999 mem: location 1010 is 0
9999 mem: incrementing refcount of 1008: 1 -> 2
9999 mem: storing 1008 in location 1010
 102 run: {y: ("address" "foo")} <- deep-copy {x: ("address" "foo")}
9999 mem: location 1003 is 1008
9991 run: deep-copy: allocating space for temporary
9999 mem: allocating size 2
9999 mem: new alloc: 1011
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9991 run: deep-copy: copying address 1009
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: allocating size 4
9999 mem: new alloc: 1013
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9991 run: deep-copy: new address is 1013
9991 run: recursing on payload 1003 {x: ("address" "foo"), "raw": (), "lookup": ()}
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 34
9999 mem: location 1010 is 1008
9991 run: deep-copy: scanning for addresses in [34, 1008]
9991 run: deep-copy: copying address 1010
9999 mem: location 1010 is 1008
9999 mem: skipping refcount at 1008
9991 run: deep-copy: copying address 1009
9991 run: deep-copy: copy already exists: 1013
9991 run: deep-copy: writing result 1013: [34, 1013]
9991 run: deep-copy: writing temporary 1011: 1013
9999 mem: location 1011 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9991 run: deep-copy: really writing to 1011 {x: ("address" "foo"), "raw": (), "lookup": ()} (old value [0, 0] new value [34, 1013])
9999 mem: location 1011 is 1013
9999 mem: skipping refcount at 1013
9999 mem: incrementing refcount of 1013: 0 -> 1
9999 mem: storing 34 in location 1014
9999 mem: storing 1013 in location 1015
9991 run: deep-copy: output is [34, 1013]
9991 run: deep-copy: reclaiming temporary
9999 mem: location 1011 is 1013
9999 mem: skipping refcount at 1013
9999 abandon: updating refcounts inside 1011: number
9999 abandon: saving 1011 in free-list of size 2
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1013: 1 -> 2
9999 mem: storing 1013 in location 1004
 102 run: {1: "number", "raw": ()} <- get {y: ("address" "foo"), "lookup": ()}, {p: "offset"}
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 34
9999 mem: location 1015 is 1013
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 34
9999 mem: storing 34 in location 1
 102 run: {y2: ("address" "foo")} <- get {y: ("address" "foo"), "lookup": ()}, {q: "offset"}
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 34
9999 mem: location 1015 is 1013
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1015
9998 run: its type is ("address" "foo")
9999 mem: location 1015 is 1013
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1013: 2 -> 3
9999 mem: storing 1013 in location 1005
 102 run: {stash_7_0: ("address" "array" "character")} <- to-text-line_3 {y: ("address" "foo")}
9999 mem: location 1004 is 1013
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1017
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 3 in location 1018
 103 run: {x: ("address" "foo")} <- next-ingredient-without-typechecking 
9999 mem: location 1020 is 0
9999 mem: incrementing refcount of 1013: 3 -> 4
9999 mem: storing 1013 in location 1020
 103 run: {y: ("address" "array" "character")} <- to-text {x: ("address" "foo")}
9999 mem: location 1020 is 1013
9999 mem: location 1021 is 0
9999 mem: incrementing refcount of 1022: 0 -> 1
9999 mem: storing 1022 in location 1021
 103 run: reply {y: ("address" "array" "character")}
9999 mem: location 1021 is 1022
9999 mem: clearing x:_elem
9999 mem: location 1020 is 1013
9999 mem: skipping refcount at 1013
9999 mem: decrementing refcount of 1013: 4 -> 3
9999 mem: storing 0 in location 1020
9999 mem: automatically abandoning 1017
9999 abandon: updating refcounts inside 1017: (array number)
9999 abandon: saving 1017 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1006
 102 run: {stash_7_2: ("address" "array" "character")} <- to-text-line_3 {y2: ("address" "foo")}
9999 mem: location 1005 is 1013
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1017
9999 mem: storing 3 in location 1018
 103 run: {x: ("address" "foo")} <- next-ingredient-without-typechecking 
9999 mem: location 1020 is 0
9999 mem: incrementing refcount of 1013: 3 -> 4
9999 mem: storing 1013 in location 1020
 103 run: {y: ("address" "array" "character")} <- to-text {x: ("address" "foo")}
9999 mem: location 1020 is 1013
9999 mem: location 1021 is 0
9999 mem: incrementing refcount of 1028: 0 -> 1
9999 mem: storing 1028 in location 1021
 103 run: reply {y: ("address" "array" "character")}
9999 mem: location 1021 is 1028
9999 mem: clearing x:_elem
9999 mem: location 1020 is 1013
9999 mem: skipping refcount at 1013
9999 mem: decrementing refcount of 1013: 4 -> 3
9999 mem: storing 0 in location 1020
9999 mem: automatically abandoning 1017
9999 abandon: updating refcounts inside 1017: (array number)
9999 abandon: saving 1017 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1028
9999 mem: storing 1028 in location 1007
 102 run: stash {stash_7_0: ("address" "array" "character")}, {"vs": "literal-string"}, {stash_7_2: ("address" "array" "character")}
9999 mem: location 1006 is 1022
9999 mem: location 1007 is 1028
   2 app: 1013 vs 1013
 102 run: {2: "boolean", "raw": ()} <- equal {y: ("address" "foo")}, {y2: ("address" "foo")}
9999 mem: location 1004 is 1013
9999 mem: location 1005 is 1013
9999 mem: storing 1 in location 2
 102 run: {3: "boolean", "raw": ()} <- equal {x: ("address" "foo")}, {y: ("address" "foo")}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 1013
9999 mem: storing 0 in location 3
 102 run: reply 
9999 mem: clearing x:address:foo
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 2 -> 1
9999 mem: storing 0 in location 1003
9999 mem: clearing y:address:foo
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 mem: decrementing refcount of 1013: 3 -> 2
9999 mem: storing 0 in location 1004
9999 mem: clearing y2:address:foo
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 mem: decrementing refcount of 1013: 2 -> 1
9999 mem: storing 0 in location 1005
9999 mem: clearing stash_7_0:address:array:character
9999 mem: location 1006 is 1022
9999 mem: skipping refcount at 1022
9999 mem: decrementing refcount of 1022: 1 -> 0
9999 mem: automatically abandoning 1022
9999 abandon: updating refcounts inside 1022: (array character)
9999 abandon: saving 1022 in free-list of size 6
9999 mem: storing 0 in location 1006
9999 mem: clearing stash_7_2:address:array:character
9999 mem: location 1007 is 1028
9999 mem: skipping refcount at 1028
9999 mem: decrementing refcount of 1028: 1 -> 0
9999 mem: automatically abandoning 1028
9999 abandon: updating refcounts inside 1028: (array character)
9999 abandon: saving 1028 in free-list of size 6
9999 mem: storing 0 in location 1007
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 1
