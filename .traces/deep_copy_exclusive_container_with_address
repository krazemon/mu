9991 parse: --- defining exclusive-container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: ("address" "number")}
9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {y0: ("address" "number")}
9992 load: after rewriting: {y0: ("address" "number")} <- new {number: "type"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {y0: (), "lookup": ()}
9992 load: after rewriting: {y0: (), "lookup": ()} <- copy {34: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "literal", "y": ()}
9993 parse:   ingredient: {y0: ()}
9993 parse:   product: {a: "foo"}
9992 load: after rewriting: {a: "foo"} <- merge {1: "literal", "y": ()}, {y0: ()}
9993 parse: instruction: deep-copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {a: ()}
9993 parse:   product: {b: "foo"}
9992 load: after rewriting: {b: "foo"} <- deep-copy {a: ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {a: ()}
9993 parse:   ingredient: {b: ()}
9993 parse:   product: {10: "boolean", "raw": ()}
9992 load: after rewriting: {10: "boolean", "raw": ()} <- equal {a: ()}, {b: ()}
9993 parse: instruction: maybe-convert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {b: ()}
9993 parse:   ingredient: {y: "variant"}
9993 parse:   product: {y1: ("address" "number")}
9993 parse:   product: {z: "boolean"}
9992 load: after rewriting: {y1: ("address" "number")}, {z: "boolean"} <- maybe-convert {b: ()}, {y: "variant"}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {y0: ()}
9993 parse:   ingredient: {y1: ()}
9993 parse:   product: {11: "boolean", "raw": ()}
9992 load: after rewriting: {11: "boolean", "raw": ()} <- equal {y0: ()}, {y1: ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {y1: (), "lookup": ()}
9993 parse:   product: {12: "number", "raw": ()}
9992 load: after rewriting: {12: "number", "raw": ()} <- copy {y1: (), "lookup": ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: y0 => ("address" "number")
9992 transform: y0 <= ("address" "number")
9992 transform: y0 <= ("address" "number")
9992 transform: a => "foo"
9992 transform: a <= "foo"
9992 transform: b => "foo"
9992 transform: a <= "foo"
9992 transform: b <= "foo"
9992 transform: b <= "foo"
9992 transform: y1 => ("address" "number")
9992 transform: z => "boolean"
9992 transform: y0 <= ("address" "number")
9992 transform: y1 <= ("address" "number")
9992 transform: y1 <= ("address" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {y0: ("address" "number")} <- new {number: "type"}
9993 transform: {y0: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: {a: "foo"} <- merge {1: "literal", "y": ()}, {y0: ("address" "number")}
9993 transform: {b: "foo"} <- deep-copy {a: "foo"}
9993 transform: {10: "boolean", "raw": ()} <- equal {a: "foo"}, {b: "foo"}
9993 transform: {y1: ("address" "number")}, {z: "boolean"} <- maybe-convert {b: "foo"}, {y: "variant"}
9993 transform: {11: "boolean", "raw": ()} <- equal {y0: ("address" "number")}, {y1: ("address" "number")}
9993 transform: {12: "number", "raw": ()} <- copy {y1: ("address" "number"), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: y0 => ("address" "number")
9992 transform: a => "foo"
9992 transform: b => "foo"
9992 transform: y1 => ("address" "number")
9992 transform: z => "boolean"
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign y0 1
9993 name: assign a 2
9993 name: assign b 4
9993 name: variant y of type foo has tag 1
9993 name: assign y1 6
9993 name: assign z 7
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {10: "boolean", "raw": ()} <- equal {a: ()}, {b: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {11: "boolean", "raw": ()} <- equal {y0: ()}, {y1: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {y0: ("address" "number")} <- new {number: "type"}
9993 transform: - compute address offsets for {y0: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: - compute address offsets for {a: "foo"} <- merge {1: "literal", "y": ()}, {y0: ("address" "number")}
9994 transform: compute address offsets for exclusive container foo
9993 transform: - compute address offsets for {b: "foo"} <- deep-copy {a: "foo"}
9994 transform: compute address offsets for exclusive container foo
9994 transform: compute address offsets for exclusive container foo
9993 transform: - compute address offsets for {10: "boolean", "raw": ()} <- equal {a: "foo"}, {b: "foo"}
9994 transform: compute address offsets for exclusive container foo
9994 transform: compute address offsets for exclusive container foo
9993 transform: - compute address offsets for {y1: ("address" "number")}, {z: "boolean"} <- maybe-convert {b: "foo"}, {y: "variant"}
9994 transform: compute address offsets for exclusive container foo
9993 transform: - compute address offsets for {11: "boolean", "raw": ()} <- equal {y0: ("address" "number")}, {y1: ("address" "number")}
9993 transform: - compute address offsets for {12: "number", "raw": ()} <- copy {y1: ("address" "number"), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: copy ...
9992 transform: merge ...
9992 transform: deep-copy ...
9992 transform: equal ...
9992 transform: maybe-convert ...
9992 transform: equal ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "number" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 2
9999 transform: checking exclusive container {a: "foo"} vs ingredient 0
9999 transform: tag: 1
9999 transform: 1 vs 2
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 8 in location 1001
 102 run: {y0: ("address" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1010
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1010: 0 -> 1
9999 mem: storing 1010 in location 1003
 102 run: {y0: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9999 mem: location 1003 is 1010
9999 mem: skipping refcount at 1010
9999 mem: storing 34 in location 1011
 102 run: {a: "foo"} <- merge {1: "literal", "y": ()}, {y0: ("address" "number")}
9999 mem: location 1003 is 1010
9999 mem: incrementing refcount of 1010: 1 -> 2
9999 mem: storing 1 in location 1004
9999 mem: storing 1010 in location 1005
 102 run: {b: "foo"} <- deep-copy {a: "foo"}
9999 mem: location 1004 is 1
9999 mem: location 1005 is 1010
9991 run: deep-copy: allocating space for temporary
9999 mem: allocating size 2
9999 mem: new alloc: 1012
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: location 1004 is 1
9999 mem: location 1005 is 1010
9991 run: deep-copy: scanning for addresses in [1, 1010]
9991 run: deep-copy: copying address 1005
9999 mem: location 1005 is 1010
9999 mem: skipping refcount at 1010
9991 run: deep-copy: copying address 1011
9999 mem: location 1005 is 1010
9999 mem: skipping refcount at 1010
9999 mem: allocating size 3
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9991 run: deep-copy: new address is 1014
9991 run: recursing on payload 1005 {: ("address" "number"), "raw": (), "lookup": ()}
9999 mem: location 1005 is 1010
9999 mem: skipping refcount at 1010
9999 mem: location 1011 is 34
9991 run: deep-copy: writing result 1014: 34
9991 run: deep-copy: writing temporary 1012: 1014
9999 mem: location 1012 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 0
9991 run: deep-copy: really writing to 1012 {: ("address" "number"), "raw": (), "lookup": ()} (old value 0 new value 34)
9999 mem: location 1012 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 34 in location 1015
9991 run: deep-copy: output is 34
9991 run: deep-copy: reclaiming temporary
9999 mem: location 1012 is 1014
9999 mem: skipping refcount at 1014
9999 abandon: updating refcounts inside 1012: number
9999 abandon: saving 1012 in free-list of size 2
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1 in location 1006
9999 mem: storing 1014 in location 1007
 102 run: {10: "boolean", "raw": ()} <- equal {a: "foo"}, {b: "foo"}
9999 mem: location 1004 is 1
9999 mem: location 1005 is 1010
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1014
9999 mem: storing 0 in location 10
 102 run: {y1: ("address" "number")}, {z: "boolean"} <- maybe-convert {b: "foo"}, {y: "variant"}
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1014
9999 mem: storing 1 in location 1009
9999 mem: location 1008 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1008
 102 run: {11: "boolean", "raw": ()} <- equal {y0: ("address" "number")}, {y1: ("address" "number")}
9999 mem: location 1003 is 1010
9999 mem: location 1008 is 1014
9999 mem: storing 0 in location 11
 102 run: {12: "number", "raw": ()} <- copy {y1: ("address" "number"), "lookup": ()}
9999 mem: location 1008 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 34
9999 mem: storing 34 in location 12
 102 run: reply 
9999 mem: clearing y0:address:number
9999 mem: location 1003 is 1010
9999 mem: skipping refcount at 1010
9999 mem: decrementing refcount of 1010: 2 -> 1
9999 mem: storing 0 in location 1003
9999 mem: clearing a:foo
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: clearing b:foo
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: clearing y1:address:number
9999 mem: location 1008 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1008
9999 mem: clearing z:boolean
9999 mem: storing 0 in location 1009
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 1
