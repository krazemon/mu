9991 parse: --- defining container foo1
9999 parse: type number: 1000
9993 parse:   element: {p: ("address" "number")}
9991 parse: --- defining container foo2
9999 parse: type number: 1001
9993 parse:   element: {p: ("address" "foo1")}
9991 parse: --- defining exclusive-container foo3
9999 parse: type number: 1002
9993 parse:   element: {p: ("address" "foo1")}
9993 parse:   element: {q: ("address" "foo2")}
9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {x: ("address" "number")}
9992 load: after rewriting: {x: ("address" "number")} <- new {number: "type"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {x: (), "lookup": ()}
9992 load: after rewriting: {x: (), "lookup": ()} <- copy {34: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {foo1: "type"}
9993 parse:   product: {a: ("address" "foo1")}
9992 load: after rewriting: {a: ("address" "foo1")} <- new {foo1: "type"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ()}
9993 parse:   product: {a: (), "lookup": ()}
9992 load: after rewriting: {a: (), "lookup": ()} <- merge {x: ()}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {foo2: "type"}
9993 parse:   product: {b: ("address" "foo2")}
9992 load: after rewriting: {b: ("address" "foo2")} <- new {foo2: "type"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {a: ()}
9993 parse:   product: {b: (), "lookup": ()}
9992 load: after rewriting: {b: (), "lookup": ()} <- merge {a: ()}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "literal", "q": ()}
9993 parse:   ingredient: {b: ()}
9993 parse:   product: {c: "foo3"}
9992 load: after rewriting: {c: "foo3"} <- merge {1: "literal", "q": ()}, {b: ()}
9993 parse: instruction: deep-copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {c: ()}
9993 parse:   product: {d: "foo3"}
9992 load: after rewriting: {d: "foo3"} <- deep-copy {c: ()}
9993 parse: instruction: maybe-convert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {d: ()}
9993 parse:   ingredient: {q: "variant"}
9993 parse:   product: {e: ("address" "foo2")}
9993 parse:   product: {z: "boolean"}
9992 load: after rewriting: {e: ("address" "foo2")}, {z: "boolean"} <- maybe-convert {d: ()}, {q: "variant"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {e: (), "lookup": ()}
9993 parse:   ingredient: {p: "offset"}
9993 parse:   product: {f: ("address" "foo1")}
9992 load: after rewriting: {f: ("address" "foo1")} <- get {e: (), "lookup": ()}, {p: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {f: (), "lookup": ()}
9993 parse:   ingredient: {p: "offset"}
9993 parse:   product: {g: ("address" "number")}
9992 load: after rewriting: {g: ("address" "number")} <- get {f: (), "lookup": ()}, {p: "offset"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {g: (), "lookup": ()}
9993 parse:   product: {1: "number", "raw": ()}
9992 load: after rewriting: {1: "number", "raw": ()} <- copy {g: (), "lookup": ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9992 transform: x <= ("address" "number")
9992 transform: a => ("address" "foo1")
9992 transform: x <= ("address" "number")
9992 transform: a <= ("address" "foo1")
9992 transform: b => ("address" "foo2")
9992 transform: a <= ("address" "foo1")
9992 transform: b <= ("address" "foo2")
9992 transform: b <= ("address" "foo2")
9992 transform: c => "foo3"
9992 transform: c <= "foo3"
9992 transform: d => "foo3"
9992 transform: d <= "foo3"
9992 transform: e => ("address" "foo2")
9992 transform: z => "boolean"
9992 transform: e <= ("address" "foo2")
9992 transform: f => ("address" "foo1")
9992 transform: f <= ("address" "foo1")
9992 transform: g => ("address" "number")
9992 transform: g <= ("address" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "number")} <- new {number: "type"}
9993 transform: {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: {a: ("address" "foo1")} <- new {foo1: "type"}
9993 transform: {a: ("address" "foo1"), "lookup": ()} <- merge {x: ("address" "number")}
9993 transform: {b: ("address" "foo2")} <- new {foo2: "type"}
9993 transform: {b: ("address" "foo2"), "lookup": ()} <- merge {a: ("address" "foo1")}
9993 transform: {c: "foo3"} <- merge {1: "literal", "q": ()}, {b: ("address" "foo2")}
9993 transform: {d: "foo3"} <- deep-copy {c: "foo3"}
9993 transform: {e: ("address" "foo2")}, {z: "boolean"} <- maybe-convert {d: "foo3"}, {q: "variant"}
9993 transform: {f: ("address" "foo1")} <- get {e: ("address" "foo2"), "lookup": ()}, {p: "offset"}
9993 transform: {g: ("address" "number")} <- get {f: ("address" "foo1"), "lookup": ()}, {p: "offset"}
9993 transform: {1: "number", "raw": ()} <- copy {g: ("address" "number"), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9992 transform: a => ("address" "foo1")
9992 transform: b => ("address" "foo2")
9992 transform: c => "foo3"
9992 transform: d => "foo3"
9992 transform: e => ("address" "foo2")
9992 transform: z => "boolean"
9992 transform: f => ("address" "foo1")
9992 transform: g => ("address" "number")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign x 1
9993 name: assign a 2
9993 name: assign b 3
9993 name: assign c 4
9993 name: assign d 6
9993 name: variant q of type foo3 has tag 1
9993 name: assign e 8
9993 name: assign z 9
9993 name: element p of type foo2 is at offset 0
9993 name: assign f 10
9993 name: element p of type foo1 is at offset 0
9993 name: assign g 11
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "number")} <- new {number: "type"}
9993 transform: - compute address offsets for {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: - compute address offsets for {a: ("address" "foo1")} <- new {foo1: "type"}
9994 transform: compute address offsets for container foo1
9993 transform: checking container foo1, element 0
9993 transform: address at offset 0
9993 transform: - compute address offsets for {a: ("address" "foo1"), "lookup": ()} <- merge {x: ("address" "number")}
9993 transform: - compute address offsets for {b: ("address" "foo2")} <- new {foo2: "type"}
9994 transform: compute address offsets for container foo2
9993 transform: checking container foo2, element 0
9993 transform: address at offset 0
9993 transform: - compute address offsets for {b: ("address" "foo2"), "lookup": ()} <- merge {a: ("address" "foo1")}
9993 transform: - compute address offsets for {c: "foo3"} <- merge {1: "literal", "q": ()}, {b: ("address" "foo2")}
9994 transform: compute address offsets for exclusive container foo3
9993 transform: - compute address offsets for {d: "foo3"} <- deep-copy {c: "foo3"}
9994 transform: compute address offsets for exclusive container foo3
9994 transform: compute address offsets for exclusive container foo3
9993 transform: - compute address offsets for {e: ("address" "foo2")}, {z: "boolean"} <- maybe-convert {d: "foo3"}, {q: "variant"}
9994 transform: compute address offsets for exclusive container foo3
9993 transform: - compute address offsets for {f: ("address" "foo1")} <- get {e: ("address" "foo2"), "lookup": ()}, {p: "offset"}
9993 transform: - compute address offsets for {g: ("address" "number")} <- get {f: ("address" "foo1"), "lookup": ()}, {p: "offset"}
9993 transform: - compute address offsets for {1: "number", "raw": ()} <- copy {g: ("address" "number"), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: copy ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: merge ...
9992 transform: deep-copy ...
9992 transform: maybe-convert ...
9992 transform: get ...
9992 transform: get ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "number" is 1
9992 new: size of "foo1" is 1
9992 new: size of "foo2" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 1
9999 transform: checking container {a: "foo1"} || {p: ("address" "number")} vs ingredient 0
9999 transform: 0 vs 1
9999 transform: checking container {b: "foo2"} || {p: ("address" "foo1")} vs ingredient 0
9999 transform: 0 vs 2
9999 transform: checking exclusive container {c: "foo3"} vs ingredient 0
9999 transform: tag: 1
9999 transform: 1 vs 2
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 12 in location 1001
 102 run: {x: ("address" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1003
 102 run: {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9999 mem: location 1003 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 34 in location 1015
 102 run: {a: ("address" "foo1")} <- new {foo1: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1016
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1016: 0 -> 1
9999 mem: storing 1016 in location 1004
 102 run: {a: ("address" "foo1"), "lookup": ()} <- merge {x: ("address" "number")}
9999 mem: location 1003 is 1014
9999 mem: location 1004 is 1016
9999 mem: skipping refcount at 1016
9999 mem: location 1004 is 1016
9999 mem: skipping refcount at 1016
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1017
 102 run: {b: ("address" "foo2")} <- new {foo2: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1018
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1018: 0 -> 1
9999 mem: storing 1018 in location 1005
 102 run: {b: ("address" "foo2"), "lookup": ()} <- merge {a: ("address" "foo1")}
9999 mem: location 1004 is 1016
9999 mem: location 1005 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1005 is 1018
9999 mem: skipping refcount at 1018
9999 mem: incrementing refcount of 1016: 1 -> 2
9999 mem: storing 1016 in location 1019
 102 run: {c: "foo3"} <- merge {1: "literal", "q": ()}, {b: ("address" "foo2")}
9999 mem: location 1005 is 1018
9999 mem: incrementing refcount of 1018: 1 -> 2
9999 mem: storing 1 in location 1006
9999 mem: storing 1018 in location 1007
 102 run: {d: "foo3"} <- deep-copy {c: "foo3"}
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1018
9991 run: deep-copy: allocating space for temporary
9999 mem: allocating size 2
9999 mem: new alloc: 1020
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1018
9991 run: deep-copy: scanning for addresses in [1, 1018]
9991 run: deep-copy: copying address 1007
9999 mem: location 1007 is 1018
9999 mem: skipping refcount at 1018
9991 run: deep-copy: copying address 1019
9999 mem: location 1007 is 1018
9999 mem: skipping refcount at 1018
9999 mem: allocating size 3
9999 mem: new alloc: 1022
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9991 run: deep-copy: new address is 1022
9991 run: recursing on payload 1007 {: ("address" "foo2"), "raw": (), "lookup": ()}
9999 mem: location 1007 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1016
9991 run: deep-copy: scanning for addresses in 1016
9991 run: deep-copy: copying address 1019
9999 mem: location 1019 is 1016
9999 mem: skipping refcount at 1016
9991 run: deep-copy: copying address 1017
9999 mem: location 1019 is 1016
9999 mem: skipping refcount at 1016
9999 mem: allocating size 3
9999 mem: new alloc: 1025
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9991 run: deep-copy: new address is 1025
9991 run: recursing on payload 1019 {: ("address" "foo1"), "raw": (), "lookup": ()}
9999 mem: location 1019 is 1016
9999 mem: skipping refcount at 1016
9999 mem: location 1017 is 1014
9991 run: deep-copy: scanning for addresses in 1014
9991 run: deep-copy: copying address 1017
9999 mem: location 1017 is 1014
9999 mem: skipping refcount at 1014
9991 run: deep-copy: copying address 1015
9999 mem: location 1017 is 1014
9999 mem: skipping refcount at 1014
9999 mem: allocating size 3
9999 mem: new alloc: 1028
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9991 run: deep-copy: new address is 1028
9991 run: recursing on payload 1017 {: ("address" "number"), "raw": (), "lookup": ()}
9999 mem: location 1017 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 34
9991 run: deep-copy: writing result 1028: 34
9991 run: deep-copy: writing temporary 1020: 1028
9999 mem: location 1020 is 1028
9999 mem: skipping refcount at 1028
9999 mem: location 1029 is 0
9991 run: deep-copy: really writing to 1020 {: ("address" "number"), "raw": (), "lookup": ()} (old value 0 new value 34)
9999 mem: location 1020 is 1028
9999 mem: skipping refcount at 1028
9999 mem: storing 34 in location 1029
9991 run: deep-copy: output is 34
9991 run: deep-copy: writing result 1025: 1028
9991 run: deep-copy: writing temporary 1020: 1025
9999 mem: location 1020 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9991 run: deep-copy: really writing to 1020 {: ("address" "foo1"), "raw": (), "lookup": ()} (old value 0 new value 1028)
9999 mem: location 1020 is 1025
9999 mem: skipping refcount at 1025
9999 mem: incrementing refcount of 1028: 0 -> 1
9999 mem: storing 1028 in location 1026
9991 run: deep-copy: output is 1028
9991 run: deep-copy: writing result 1022: 1025
9991 run: deep-copy: writing temporary 1020: 1022
9999 mem: location 1020 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1023 is 0
9991 run: deep-copy: really writing to 1020 {: ("address" "foo2"), "raw": (), "lookup": ()} (old value 0 new value 1025)
9999 mem: location 1020 is 1022
9999 mem: skipping refcount at 1022
9999 mem: incrementing refcount of 1025: 0 -> 1
9999 mem: storing 1025 in location 1023
9991 run: deep-copy: output is 1025
9991 run: deep-copy: reclaiming temporary
9999 mem: location 1020 is 1022
9999 mem: skipping refcount at 1022
9999 abandon: updating refcounts inside 1020: number
9999 abandon: saving 1020 in free-list of size 2
9999 mem: incrementing refcount of 1022: 0 -> 1
9999 mem: storing 1 in location 1008
9999 mem: storing 1022 in location 1009
 102 run: {e: ("address" "foo2")}, {z: "boolean"} <- maybe-convert {d: "foo3"}, {q: "variant"}
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1022
9999 mem: storing 1 in location 1011
9999 mem: location 1010 is 0
9999 mem: incrementing refcount of 1022: 1 -> 2
9999 mem: storing 1022 in location 1010
 102 run: {f: ("address" "foo1")} <- get {e: ("address" "foo2"), "lookup": ()}, {p: "offset"}
9999 mem: location 1010 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1023 is 1025
9999 mem: location 1010 is 1022
9999 mem: skipping refcount at 1022
9998 run: address to copy is 1023
9998 run: its type is ("address" "foo1")
9999 mem: location 1023 is 1025
9999 mem: location 1012 is 0
9999 mem: incrementing refcount of 1025: 1 -> 2
9999 mem: storing 1025 in location 1012
 102 run: {g: ("address" "number")} <- get {f: ("address" "foo1"), "lookup": ()}, {p: "offset"}
9999 mem: location 1012 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 1028
9999 mem: location 1012 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is ("address" "number")
9999 mem: location 1026 is 1028
9999 mem: location 1013 is 0
9999 mem: incrementing refcount of 1028: 1 -> 2
9999 mem: storing 1028 in location 1013
 102 run: {1: "number", "raw": ()} <- copy {g: ("address" "number"), "lookup": ()}
9999 mem: location 1013 is 1028
9999 mem: skipping refcount at 1028
9999 mem: location 1029 is 34
9999 mem: storing 34 in location 1
 102 run: reply 
9999 mem: clearing x:address:number
9999 mem: location 1003 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1003
9999 mem: clearing a:address:foo1
9999 mem: location 1004 is 1016
9999 mem: skipping refcount at 1016
9999 mem: decrementing refcount of 1016: 2 -> 1
9999 mem: storing 0 in location 1004
9999 mem: clearing b:address:foo2
9999 mem: location 1005 is 1018
9999 mem: skipping refcount at 1018
9999 mem: decrementing refcount of 1018: 2 -> 1
9999 mem: storing 0 in location 1005
9999 mem: clearing c:foo3
9999 mem: decrementing refcount of 1018: 1 -> 0
9999 mem: automatically abandoning 1018
9999 abandon: updating refcounts inside 1018: foo1
9999 mem: decrementing refcount of 1016: 1 -> 0
9999 mem: automatically abandoning 1016
9999 abandon: updating refcounts inside 1016: number
9999 abandon: saving 1016 in free-list of size 2
9999 abandon: saving 1018 in free-list of size 2
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: clearing d:foo3
9999 mem: decrementing refcount of 1022: 2 -> 1
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: clearing e:address:foo2
9999 mem: location 1010 is 1022
9999 mem: skipping refcount at 1022
9999 mem: decrementing refcount of 1022: 1 -> 0
9999 mem: automatically abandoning 1022
9999 abandon: updating refcounts inside 1022: foo2
9999 mem: decrementing refcount of 1025: 2 -> 1
9999 abandon: saving 1022 in free-list of size 2
9999 mem: storing 0 in location 1010
9999 mem: clearing z:boolean
9999 mem: storing 0 in location 1011
9999 mem: clearing f:address:foo1
9999 mem: location 1012 is 1025
9999 mem: skipping refcount at 1025
9999 mem: decrementing refcount of 1025: 1 -> 0
9999 mem: automatically abandoning 1025
9999 abandon: updating refcounts inside 1025: foo1
9999 mem: decrementing refcount of 1028: 2 -> 1
9999 abandon: saving 1025 in free-list of size 2
9999 mem: storing 0 in location 1012
9999 mem: clearing g:address:number
9999 mem: location 1013 is 1028
9999 mem: skipping refcount at 1028
9999 mem: decrementing refcount of 1028: 1 -> 0
9999 mem: automatically abandoning 1028
9999 abandon: updating refcounts inside 1028: number
9999 abandon: saving 1028 in free-list of size 2
9999 mem: storing 0 in location 1013
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 1
