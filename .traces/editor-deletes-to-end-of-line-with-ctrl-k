9991 parse: --- defining scenario_editor-deletes-to-end-of-line-with-ctrl-k
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {10: "literal", "width": ()}
9993 parse:   ingredient: {5: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {5: "literal", "height": ()}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"123\n456": "literal-string"}
9993 parse:   product: {1: ("address" "array" "character")}
9992 load: after rewriting: {1: ("address" "array" "character")} <- new {"123\n456": "literal-string"}
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {1: ("address" "array" "character")}
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {0: "literal", "left": ()}
9993 parse:   ingredient: {10: "literal", "right": ()}
9993 parse:   product: {2: ("address" "editor-data")}
9992 load: after rewriting: {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {10: "literal", "right": ()}
9993 parse: instruction: assume-console
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    left-click 1, 1\n    press ctrl-k\n  ": "literal-string"}
9992 load: after rewriting: assume-console {"\n    left-click 1, 1\n    press ctrl-k\n  ": "literal-string"}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .          .\n    .1         .\n    .456       .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .          .\n    .1         .\n    .456       .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
9999 parse: recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- deduce types for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9992 transform: screen => ("address" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- collect surrounding spaces for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- transform names for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9992 transform: instruction {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {5: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "screen")}
9992 transform: instruction {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {10: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "array" "character")} {screen: ("address" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "editor-data")} {screen: ("address" "screen")}
9992 transform: --- compute address offsets for scenario_editor-deletes-to-end-of-line-with-ctrl-k
9993 transform: - compute address offsets for {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {5: "literal", "height": ()}
9993 transform: - compute address offsets for {1: ("address" "array" "character")} <- new {"123\n456": "literal-string"}
9993 transform: - compute address offsets for {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {10: "literal", "right": ()}
9993 transform: - compute address offsets for assume-console {"\n    left-click 1, 1\n    press ctrl-k\n  ": "literal-string"}
9993 transform: - compute address offsets for run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9993 transform: - compute address offsets for screen-should-contain {"\n    .          .\n    .1         .\n    .456       .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- transform braces for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9992 transform: assume-screen ...
9992 transform: new ...
9992 transform: new-editor ...
9992 transform: assume-console ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- type-check calls inside recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- check types of reply instructions in recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- type-check merge instructions in recipe scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- checking reply instructions against header for scenario_editor-deletes-to-end-of-line-with-ctrl-k
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-deletes-to-end-of-line-with-ctrl-k
 102 run: {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {5: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1004
 103 run: {result: ("address" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1008: 0 -> 1
9999 mem: storing 1008 in location 1005
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 10
9999 mem: location 1004 is 5
9999 mem: storing 50 in location 1006
 103 run: {data: ("address" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 50
9999 mem: array size is 50
9999 mem: allocating size 102
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
9999 mem: storing 0 in location 1059
9999 mem: storing 0 in location 1060
9999 mem: storing 0 in location 1061
9999 mem: storing 0 in location 1062
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
9999 mem: storing 0 in location 1065
9999 mem: storing 0 in location 1066
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
9999 mem: storing 0 in location 1071
9999 mem: storing 0 in location 1072
9999 mem: storing 0 in location 1073
9999 mem: storing 0 in location 1074
9999 mem: storing 0 in location 1075
9999 mem: storing 0 in location 1076
9999 mem: storing 0 in location 1077
9999 mem: storing 0 in location 1078
9999 mem: storing 0 in location 1079
9999 mem: storing 0 in location 1080
9999 mem: storing 0 in location 1081
9999 mem: storing 0 in location 1082
9999 mem: storing 0 in location 1083
9999 mem: storing 0 in location 1084
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: storing 0 in location 1087
9999 mem: storing 0 in location 1088
9999 mem: storing 0 in location 1089
9999 mem: storing 0 in location 1090
9999 mem: storing 0 in location 1091
9999 mem: storing 0 in location 1092
9999 mem: storing 0 in location 1093
9999 mem: storing 0 in location 1094
9999 mem: storing 0 in location 1095
9999 mem: storing 0 in location 1096
9999 mem: storing 0 in location 1097
9999 mem: storing 0 in location 1098
9999 mem: storing 0 in location 1099
9999 mem: storing 0 in location 1100
9999 mem: storing 0 in location 1101
9999 mem: storing 0 in location 1102
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
9999 mem: storing 0 in location 1105
9999 mem: storing 0 in location 1106
9999 mem: storing 0 in location 1107
9999 mem: storing 0 in location 1108
9999 mem: storing 0 in location 1109
9999 mem: storing 0 in location 1110
9999 mem: storing 0 in location 1111
9999 mem: storing 0 in location 1112
9999 mem: storing 0 in location 1113
9999 mem: storing 0 in location 1114
9999 mem: storing 0 in location 1115
9999 mem: storing 50 in location 1015
9999 mem: location 1007 is 0
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1007
 103 run: {result: ("address" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "array" "screen-cell")}
9999 mem: location 1004 is 5
9999 mem: location 1003 is 10
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 5 in location 1009
9999 mem: storing 10 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "screen")} <- clear-screen {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1116
9999 mem: storing 0 in location 1116
9999 mem: storing 0 in location 1117
9999 mem: storing 0 in location 1118
9999 mem: storing 0 in location 1119
9999 mem: storing 0 in location 1120
9999 mem: storing 0 in location 1121
9999 mem: storing 0 in location 1122
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
9999 mem: storing 0 in location 1125
9999 mem: storing 8 in location 1117
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1008: 1 -> 2
9999 mem: storing 1008 in location 1119
 104 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1120 is 0
9999 mem: incrementing refcount of 1014: 2 -> 3
9999 mem: storing 1014 in location 1120
 104 run: {max: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1121
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1122
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 0
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 0
9998 run: address to copy to is 1016
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 0
9999 mem: storing 1 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 1
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 1
9998 run: address to copy to is 1018
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 1
9999 mem: storing 2 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 2
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 2
9998 run: address to copy to is 1020
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 2
9999 mem: storing 3 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 3
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 3
9998 run: address to copy to is 1022
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 3
9999 mem: storing 4 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 4
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 4
9998 run: address to copy to is 1024
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 4
9999 mem: storing 5 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 5
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 5
9998 run: address to copy to is 1026
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 5
9999 mem: storing 6 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 6
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 6
9998 run: address to copy to is 1028
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 6
9999 mem: storing 7 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 7
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 7
9998 run: address to copy to is 1030
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 7
9999 mem: storing 8 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 8
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 8
9998 run: address to copy to is 1032
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 8
9999 mem: storing 9 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 9
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 9
9998 run: address to copy to is 1034
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 9
9999 mem: storing 10 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 10
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 10
9998 run: address to copy to is 1036
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 10
9999 mem: storing 11 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 11
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 11
9998 run: address to copy to is 1038
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 11
9999 mem: storing 12 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 12
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 12
9998 run: address to copy to is 1040
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 12
9999 mem: storing 13 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 13
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 13
9998 run: address to copy to is 1042
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 13
9999 mem: storing 14 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 14
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 14
9998 run: address to copy to is 1044
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 14
9999 mem: storing 15 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 15
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 15
9998 run: address to copy to is 1046
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1046
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 15
9999 mem: storing 16 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 16
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 16
9998 run: address to copy to is 1048
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1048
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 16
9999 mem: storing 17 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 17
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 17
9998 run: address to copy to is 1050
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1050
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 17
9999 mem: storing 18 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 18
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 18
9998 run: address to copy to is 1052
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1052
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 18
9999 mem: storing 19 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 19
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 19
9998 run: address to copy to is 1054
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 19
9999 mem: storing 20 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 20
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 20
9998 run: address to copy to is 1056
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1056
9999 mem: storing 7 in location 1057
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 20
9999 mem: storing 21 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 21
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 21
9998 run: address to copy to is 1058
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1058
9999 mem: storing 7 in location 1059
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 21
9999 mem: storing 22 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 22
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 22
9998 run: address to copy to is 1060
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1060
9999 mem: storing 7 in location 1061
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 22
9999 mem: storing 23 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 23
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 23
9998 run: address to copy to is 1062
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1062
9999 mem: storing 7 in location 1063
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 23
9999 mem: storing 24 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 24
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 24
9998 run: address to copy to is 1064
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 24
9999 mem: storing 25 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 25
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 25
9998 run: address to copy to is 1066
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1066
9999 mem: storing 7 in location 1067
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 25
9999 mem: storing 26 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 26
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 26
9998 run: address to copy to is 1068
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1068
9999 mem: storing 7 in location 1069
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 26
9999 mem: storing 27 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 27
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 27
9998 run: address to copy to is 1070
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1070
9999 mem: storing 7 in location 1071
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 27
9999 mem: storing 28 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 28
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 28
9998 run: address to copy to is 1072
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1072
9999 mem: storing 7 in location 1073
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 28
9999 mem: storing 29 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 29
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 29
9998 run: address to copy to is 1074
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 29
9999 mem: storing 30 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 30
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 30
9998 run: address to copy to is 1076
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1076
9999 mem: storing 7 in location 1077
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 30
9999 mem: storing 31 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 31
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 31
9998 run: address to copy to is 1078
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1078
9999 mem: storing 7 in location 1079
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 31
9999 mem: storing 32 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 32
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 32
9998 run: address to copy to is 1080
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1080
9999 mem: storing 7 in location 1081
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 32
9999 mem: storing 33 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 33
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 33
9998 run: address to copy to is 1082
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1082
9999 mem: storing 7 in location 1083
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 33
9999 mem: storing 34 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 34
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 34
9998 run: address to copy to is 1084
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1084
9999 mem: storing 7 in location 1085
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 34
9999 mem: storing 35 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 35
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 35
9998 run: address to copy to is 1086
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1086
9999 mem: storing 7 in location 1087
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 35
9999 mem: storing 36 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 36
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 36
9998 run: address to copy to is 1088
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1088
9999 mem: storing 7 in location 1089
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 36
9999 mem: storing 37 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 37
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 37
9998 run: address to copy to is 1090
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1090
9999 mem: storing 7 in location 1091
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 37
9999 mem: storing 38 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 38
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 38
9998 run: address to copy to is 1092
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1092
9999 mem: storing 7 in location 1093
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 38
9999 mem: storing 39 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 39
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 39
9998 run: address to copy to is 1094
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1094
9999 mem: storing 7 in location 1095
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 39
9999 mem: storing 40 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 40
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 40
9998 run: address to copy to is 1096
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1096
9999 mem: storing 7 in location 1097
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 40
9999 mem: storing 41 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 41
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 41
9998 run: address to copy to is 1098
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1098
9999 mem: storing 7 in location 1099
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 41
9999 mem: storing 42 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 42
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 42
9998 run: address to copy to is 1100
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1100
9999 mem: storing 7 in location 1101
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 42
9999 mem: storing 43 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 43
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 43
9998 run: address to copy to is 1102
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1102
9999 mem: storing 7 in location 1103
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 43
9999 mem: storing 44 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 44
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 44
9998 run: address to copy to is 1104
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 44
9999 mem: storing 45 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 45
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 45
9998 run: address to copy to is 1106
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1106
9999 mem: storing 7 in location 1107
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 45
9999 mem: storing 46 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 46
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 46
9998 run: address to copy to is 1108
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1108
9999 mem: storing 7 in location 1109
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 46
9999 mem: storing 47 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 47
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 47
9998 run: address to copy to is 1110
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1110
9999 mem: storing 7 in location 1111
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 47
9999 mem: storing 48 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 48
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 48
9998 run: address to copy to is 1112
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1112
9999 mem: storing 7 in location 1113
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 48
9999 mem: storing 49 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 49
9999 mem: location 1121 is 50
9999 mem: storing 0 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1124
9999 mem: storing 7 in location 1125
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1120 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1122 is 49
9998 run: address to copy to is 1114
9999 mem: location 1124 is 0
9999 mem: location 1125 is 7
9999 mem: storing 0 in location 1114
9999 mem: storing 7 in location 1115
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1122 is 49
9999 mem: storing 50 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1122 is 50
9999 mem: location 1121 is 50
9999 mem: storing 1 in location 1123
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1123 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1119 is 1008
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1005
 103 run: reply {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: location 900 is 0
9999 mem: incrementing refcount of 1008: 2 -> 3
9999 mem: storing 1008 in location 900
 102 run: {1: ("address" "array" "character")} <- new {"123\n456": "literal-string"}
9999 mem: new string alloc: 1126
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 1126: 0 -> 1
9999 mem: storing 1126 in location 1
 102 run: {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {10: "literal", "right": ()}
9999 mem: location 1 is 1126
9999 mem: location 900 is 1008
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1135
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
9999 mem: storing 0 in location 1139
9999 mem: storing 0 in location 1140
9999 mem: storing 0 in location 1141
9999 mem: storing 0 in location 1142
9999 mem: storing 0 in location 1143
9999 mem: storing 7 in location 1136
 103 run: {s: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1138 is 0
9999 mem: incrementing refcount of 1126: 1 -> 2
9999 mem: storing 1126 in location 1138
 103 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1139 is 0
9999 mem: incrementing refcount of 1008: 3 -> 4
9999 mem: storing 1008 in location 1139
 103 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1140
 103 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1141
 103 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1141 is 10
9999 mem: storing 9 in location 1141
 103 run: {result: ("address" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1144
9999 mem: storing 0 in location 1144
9999 mem: storing 0 in location 1145
9999 mem: storing 0 in location 1146
9999 mem: storing 0 in location 1147
9999 mem: storing 0 in location 1148
9999 mem: storing 0 in location 1149
9999 mem: storing 0 in location 1150
9999 mem: storing 0 in location 1151
9999 mem: storing 0 in location 1152
9999 mem: storing 0 in location 1153
9999 mem: storing 0 in location 1154
9999 mem: storing 0 in location 1155
9999 mem: storing 0 in location 1156
9999 mem: location 1142 is 0
9999 mem: incrementing refcount of 1144: 0 -> 1
9999 mem: storing 1144 in location 1142
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {left: "offset"}, {left: "number"}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 0
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1150 is 0
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1140 is 0
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1149
9999 mem: storing 0 in location 1149
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {right: "offset"}, {right: "number"}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 0
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1150 is 0
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1141 is 9
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1150
9999 mem: storing 9 in location 1150
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {1: "literal", "top": ()}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 0
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1152
9999 mem: storing 1 in location 1152
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {left: "number"}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 0
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1140 is 0
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1153
9999 mem: storing 0 in location 1153
 103 run: {init: ("address" "duplex-list" "character")} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1157
9999 mem: storing 0 in location 1157
9999 mem: storing 0 in location 1158
9999 mem: storing 0 in location 1159
9999 mem: storing 0 in location 1160
9999 mem: storing 0 in location 1161
9999 mem: storing 0 in location 1162
9999 mem: storing 4 in location 1158
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1160
 104 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1161 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1161
 104 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1163
9999 mem: storing 0 in location 1163
9999 mem: storing 0 in location 1164
9999 mem: storing 0 in location 1165
9999 mem: storing 0 in location 1166
9999 mem: location 1162 is 0
9999 mem: incrementing refcount of 1163: 0 -> 1
9999 mem: storing 1163 in location 1162
 104 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1160 is 167
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1162 is 1163
9999 mem: skipping refcount at 1163
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 167 in location 1164
9999 mem: storing 0 in location 1165
9999 mem: storing 0 in location 1166
 104 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1161 is 0
9998 run: jumping to instruction 8
 104 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1162 is 1163
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1163
9999 mem: location 1143 is 0
9999 mem: incrementing refcount of 1163: 1 -> 2
9999 mem: storing 1163 in location 1143
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {data: "offset"}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 0
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1143 is 1163
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1145
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1163: 2 -> 3
9999 mem: storing 1163 in location 1145
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1143 is 1163
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1146
9999 mem: location 1146 is 0
9999 mem: incrementing refcount of 1163: 3 -> 4
9999 mem: storing 1163 in location 1146
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1143 is 1163
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1148
9999 mem: location 1148 is 0
9999 mem: incrementing refcount of 1163: 4 -> 5
9999 mem: storing 1163 in location 1148
 103 run: {result: ("address" "editor-data")} <- insert-text {result: ("address" "editor-data")}, {s: ("address" "array" "character")}
9999 mem: location 1142 is 1144
9999 mem: location 1138 is 1126
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1144: 1 -> 2
9999 mem: storing 1144 in location 1119
 104 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1120 is 0
9999 mem: incrementing refcount of 1126: 2 -> 3
9999 mem: storing 1126 in location 1120
 104 run: jump-if {text: ("address" "array" "character")}, {: "offset"}
9999 mem: location 1120 is 1126
9998 run: jumping to instruction 6
 104 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9999 mem: storing 7 in location 1121
 104 run: jump-if {len: "number"}, {: "offset"}
9999 mem: location 1121 is 7
9998 run: jumping to instruction 11
 104 run: {idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1122
 104 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1119 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1119 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1145
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1145 is 1163
9999 mem: location 1123 is 0
9999 mem: incrementing refcount of 1163: 5 -> 6
9999 mem: storing 1163 in location 1123
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 0
9999 mem: location 1121 is 7
9999 mem: storing 0 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9998 run: base address is 1127
9999 mem: location 1122 is 0
9998 run: address to copy is 1128
9998 run: its type is character
9999 mem: location 1128 is 49
9999 mem: storing 49 in location 1125
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1125 is 49
9999 mem: location 1123 is 1163
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1167
9999 mem: storing 0 in location 1167
9999 mem: storing 0 in location 1168
9999 mem: storing 0 in location 1169
9999 mem: storing 0 in location 1170
9999 mem: storing 0 in location 1171
9999 mem: storing 0 in location 1172
9999 mem: storing 0 in location 1173
9999 mem: storing 5 in location 1168
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 49 in location 1170
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1163: 6 -> 7
9999 mem: storing 1163 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1174
9999 mem: storing 0 in location 1174
9999 mem: storing 0 in location 1175
9999 mem: storing 0 in location 1176
9999 mem: storing 0 in location 1177
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1174: 0 -> 1
9999 mem: storing 1174 in location 1172
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1172 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 0
9999 mem: location 1176 is 0
9999 mem: location 1177 is 0
9999 mem: location 1170 is 49
9999 mem: location 1172 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy to is 1175
9999 mem: storing 49 in location 1175
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1171 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 0
9999 mem: location 1166 is 0
9999 mem: location 1171 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1171 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 0
9999 mem: location 1166 is 0
9999 mem: location 1172 is 1174
9999 mem: location 1171 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy to is 1165
9999 mem: location 1165 is 0
9999 mem: incrementing refcount of 1174: 1 -> 2
9999 mem: storing 1174 in location 1165
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 0
9999 mem: location 1177 is 0
9999 mem: location 1171 is 1163
9999 mem: location 1172 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy to is 1177
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1163: 7 -> 8
9999 mem: storing 1163 in location 1177
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 0
9999 mem: location 1177 is 1163
9999 mem: location 1173 is 0
9999 mem: location 1172 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy to is 1176
9999 mem: location 1176 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1176
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1173 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1171 is 1163
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1163
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1178
9999 mem: storing 0 in location 1178
9999 mem: storing 0 in location 1179
9999 mem: storing 0 in location 1180
9999 mem: storing 0 in location 1181
9999 mem: storing 0 in location 1182
9999 mem: storing 3 in location 1179
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1163: 8 -> 9
9999 mem: storing 1163 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1163
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 1174
9999 mem: location 1166 is 0
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 1174
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1174: 2 -> 3
9999 mem: storing 1174 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1174
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1174
9999 mem: location 1123 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 9 -> 8
9999 mem: incrementing refcount of 1174: 3 -> 4
9999 mem: storing 1174 in location 1123
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1122 is 0
9999 mem: storing 1 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 1
9999 mem: location 1121 is 7
9999 mem: storing 0 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9998 run: base address is 1127
9999 mem: location 1122 is 1
9998 run: address to copy is 1129
9998 run: its type is character
9999 mem: location 1129 is 50
9999 mem: storing 50 in location 1125
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1125 is 50
9999 mem: location 1123 is 1174
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 50 in location 1170
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1174: 4 -> 5
9999 mem: storing 1174 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1183
9999 mem: storing 0 in location 1183
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
9999 mem: storing 0 in location 1186
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1183: 0 -> 1
9999 mem: storing 1183 in location 1172
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1172 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 0
9999 mem: location 1185 is 0
9999 mem: location 1186 is 0
9999 mem: location 1170 is 50
9999 mem: location 1172 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy to is 1184
9999 mem: storing 50 in location 1184
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1171 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 0
9999 mem: location 1177 is 1163
9999 mem: location 1171 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1171 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 0
9999 mem: location 1177 is 1163
9999 mem: location 1172 is 1183
9999 mem: location 1171 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy to is 1176
9999 mem: location 1176 is 0
9999 mem: incrementing refcount of 1183: 1 -> 2
9999 mem: storing 1183 in location 1176
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 0
9999 mem: location 1186 is 0
9999 mem: location 1171 is 1174
9999 mem: location 1172 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy to is 1186
9999 mem: location 1186 is 0
9999 mem: incrementing refcount of 1174: 5 -> 6
9999 mem: storing 1174 in location 1186
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1174
9999 mem: location 1173 is 0
9999 mem: location 1172 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy to is 1185
9999 mem: location 1185 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1185
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1173 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1171 is 1174
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1174
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 6 -> 7
9999 mem: storing 1174 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1183: 2 -> 3
9999 mem: storing 1183 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1183
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1183
9999 mem: location 1123 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 7 -> 6
9999 mem: incrementing refcount of 1183: 3 -> 4
9999 mem: storing 1183 in location 1123
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1122 is 1
9999 mem: storing 2 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 2
9999 mem: location 1121 is 7
9999 mem: storing 0 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9998 run: base address is 1127
9999 mem: location 1122 is 2
9998 run: address to copy is 1130
9998 run: its type is character
9999 mem: location 1130 is 51
9999 mem: storing 51 in location 1125
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1125 is 51
9999 mem: location 1123 is 1183
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 51 in location 1170
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1183: 4 -> 5
9999 mem: storing 1183 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1187
9999 mem: storing 0 in location 1187
9999 mem: storing 0 in location 1188
9999 mem: storing 0 in location 1189
9999 mem: storing 0 in location 1190
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1187: 0 -> 1
9999 mem: storing 1187 in location 1172
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1172 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 0
9999 mem: location 1189 is 0
9999 mem: location 1190 is 0
9999 mem: location 1170 is 51
9999 mem: location 1172 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy to is 1188
9999 mem: storing 51 in location 1188
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1171 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1174
9999 mem: location 1171 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1171 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1174
9999 mem: location 1172 is 1187
9999 mem: location 1171 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy to is 1185
9999 mem: location 1185 is 0
9999 mem: incrementing refcount of 1187: 1 -> 2
9999 mem: storing 1187 in location 1185
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 0
9999 mem: location 1190 is 0
9999 mem: location 1171 is 1183
9999 mem: location 1172 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy to is 1190
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1183: 5 -> 6
9999 mem: storing 1183 in location 1190
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 0
9999 mem: location 1190 is 1183
9999 mem: location 1173 is 0
9999 mem: location 1172 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy to is 1189
9999 mem: location 1189 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1189
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1173 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1171 is 1183
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1183
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1183: 6 -> 7
9999 mem: storing 1183 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1183
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 1187
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1187: 2 -> 3
9999 mem: storing 1187 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1187
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1187
9999 mem: location 1123 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 7 -> 6
9999 mem: incrementing refcount of 1187: 3 -> 4
9999 mem: storing 1187 in location 1123
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1122 is 2
9999 mem: storing 3 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 3
9999 mem: location 1121 is 7
9999 mem: storing 0 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9998 run: base address is 1127
9999 mem: location 1122 is 3
9998 run: address to copy is 1131
9998 run: its type is character
9999 mem: location 1131 is 10
9999 mem: storing 10 in location 1125
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1125 is 10
9999 mem: location 1123 is 1187
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1170
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1187: 4 -> 5
9999 mem: storing 1187 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1191
9999 mem: storing 0 in location 1191
9999 mem: storing 0 in location 1192
9999 mem: storing 0 in location 1193
9999 mem: storing 0 in location 1194
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1191: 0 -> 1
9999 mem: storing 1191 in location 1172
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1172 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 0
9999 mem: location 1193 is 0
9999 mem: location 1194 is 0
9999 mem: location 1170 is 10
9999 mem: location 1172 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy to is 1192
9999 mem: storing 10 in location 1192
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1171 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 0
9999 mem: location 1190 is 1183
9999 mem: location 1171 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1189
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1189 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1171 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 0
9999 mem: location 1190 is 1183
9999 mem: location 1172 is 1191
9999 mem: location 1171 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy to is 1189
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1191: 1 -> 2
9999 mem: storing 1191 in location 1189
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 0
9999 mem: location 1194 is 0
9999 mem: location 1171 is 1187
9999 mem: location 1172 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy to is 1194
9999 mem: location 1194 is 0
9999 mem: incrementing refcount of 1187: 5 -> 6
9999 mem: storing 1187 in location 1194
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 0
9999 mem: location 1194 is 1187
9999 mem: location 1173 is 0
9999 mem: location 1172 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy to is 1193
9999 mem: location 1193 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1193
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1173 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1171 is 1187
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1187
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1187: 6 -> 7
9999 mem: storing 1187 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1187
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1189
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1189 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 2 -> 3
9999 mem: storing 1191 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1191
9999 mem: location 1123 is 1187
9999 mem: skipping refcount at 1187
9999 mem: decrementing refcount of 1187: 7 -> 6
9999 mem: incrementing refcount of 1191: 3 -> 4
9999 mem: storing 1191 in location 1123
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1122 is 3
9999 mem: storing 4 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 4
9999 mem: location 1121 is 7
9999 mem: storing 0 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9998 run: base address is 1127
9999 mem: location 1122 is 4
9998 run: address to copy is 1132
9998 run: its type is character
9999 mem: location 1132 is 52
9999 mem: storing 52 in location 1125
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1125 is 52
9999 mem: location 1123 is 1191
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 52 in location 1170
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1191: 4 -> 5
9999 mem: storing 1191 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1195
9999 mem: storing 0 in location 1195
9999 mem: storing 0 in location 1196
9999 mem: storing 0 in location 1197
9999 mem: storing 0 in location 1198
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1195: 0 -> 1
9999 mem: storing 1195 in location 1172
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1172 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 0
9999 mem: location 1197 is 0
9999 mem: location 1198 is 0
9999 mem: location 1170 is 52
9999 mem: location 1172 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy to is 1196
9999 mem: storing 52 in location 1196
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1171 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 0
9999 mem: location 1194 is 1187
9999 mem: location 1171 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1171 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 0
9999 mem: location 1194 is 1187
9999 mem: location 1172 is 1195
9999 mem: location 1171 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy to is 1193
9999 mem: location 1193 is 0
9999 mem: incrementing refcount of 1195: 1 -> 2
9999 mem: storing 1195 in location 1193
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 0
9999 mem: location 1198 is 0
9999 mem: location 1171 is 1191
9999 mem: location 1172 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy to is 1198
9999 mem: location 1198 is 0
9999 mem: incrementing refcount of 1191: 5 -> 6
9999 mem: storing 1191 in location 1198
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 0
9999 mem: location 1198 is 1191
9999 mem: location 1173 is 0
9999 mem: location 1172 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy to is 1197
9999 mem: location 1197 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1197
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1173 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1171 is 1191
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1191
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1191: 6 -> 7
9999 mem: storing 1191 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1191
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1195: 2 -> 3
9999 mem: storing 1195 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1195
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1195
9999 mem: location 1123 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 7 -> 6
9999 mem: incrementing refcount of 1195: 3 -> 4
9999 mem: storing 1195 in location 1123
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1122 is 4
9999 mem: storing 5 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 5
9999 mem: location 1121 is 7
9999 mem: storing 0 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9998 run: base address is 1127
9999 mem: location 1122 is 5
9998 run: address to copy is 1133
9998 run: its type is character
9999 mem: location 1133 is 53
9999 mem: storing 53 in location 1125
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1125 is 53
9999 mem: location 1123 is 1195
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 53 in location 1170
9990 schedule: insert_2/insert-text/new-editor/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1195: 4 -> 5
9999 mem: storing 1195 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1199
9999 mem: storing 0 in location 1199
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
9999 mem: storing 0 in location 1202
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1199: 0 -> 1
9999 mem: storing 1199 in location 1172
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1172 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 0
9999 mem: location 1201 is 0
9999 mem: location 1202 is 0
9999 mem: location 1170 is 53
9999 mem: location 1172 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1200
9999 mem: storing 53 in location 1200
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1171 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 0
9999 mem: location 1198 is 1191
9999 mem: location 1171 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1171 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 0
9999 mem: location 1198 is 1191
9999 mem: location 1172 is 1199
9999 mem: location 1171 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy to is 1197
9999 mem: location 1197 is 0
9999 mem: incrementing refcount of 1199: 1 -> 2
9999 mem: storing 1199 in location 1197
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 0
9999 mem: location 1202 is 0
9999 mem: location 1171 is 1195
9999 mem: location 1172 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1202
9999 mem: location 1202 is 0
9999 mem: incrementing refcount of 1195: 5 -> 6
9999 mem: storing 1195 in location 1202
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 0
9999 mem: location 1202 is 1195
9999 mem: location 1173 is 0
9999 mem: location 1172 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1201
9999 mem: location 1201 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1201
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1173 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1171 is 1195
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1195
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1195: 6 -> 7
9999 mem: storing 1195 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1195
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1199: 2 -> 3
9999 mem: storing 1199 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1199
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1199
9999 mem: location 1123 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 7 -> 6
9999 mem: incrementing refcount of 1199: 3 -> 4
9999 mem: storing 1199 in location 1123
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1122 is 5
9999 mem: storing 6 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 6
9999 mem: location 1121 is 7
9999 mem: storing 0 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1120 is 1126
9999 mem: skipping refcount at 1126
9998 run: base address is 1127
9999 mem: location 1122 is 6
9998 run: address to copy is 1134
9998 run: its type is character
9999 mem: location 1134 is 54
9999 mem: storing 54 in location 1125
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1125 is 54
9999 mem: location 1123 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 54 in location 1170
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1199: 4 -> 5
9999 mem: storing 1199 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1203
9999 mem: storing 0 in location 1203
9999 mem: storing 0 in location 1204
9999 mem: storing 0 in location 1205
9999 mem: storing 0 in location 1206
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1203: 0 -> 1
9999 mem: storing 1203 in location 1172
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1172 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 0
9999 mem: location 1205 is 0
9999 mem: location 1206 is 0
9999 mem: location 1170 is 54
9999 mem: location 1172 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1204
9999 mem: storing 54 in location 1204
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1171 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 0
9999 mem: location 1202 is 1195
9999 mem: location 1171 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1171 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 0
9999 mem: location 1202 is 1195
9999 mem: location 1172 is 1203
9999 mem: location 1171 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1201
9999 mem: location 1201 is 0
9999 mem: incrementing refcount of 1203: 1 -> 2
9999 mem: storing 1203 in location 1201
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 0
9999 mem: location 1171 is 1199
9999 mem: location 1172 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1206
9999 mem: location 1206 is 0
9999 mem: incrementing refcount of 1199: 5 -> 6
9999 mem: storing 1199 in location 1206
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1172 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1173 is 0
9999 mem: location 1172 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1205
9999 mem: location 1205 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1205
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1173 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1171 is 1199
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1199: 6 -> 7
9999 mem: storing 1199 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1199
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1203: 2 -> 3
9999 mem: storing 1203 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1203
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1203
9999 mem: location 1123 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 7 -> 6
9999 mem: incrementing refcount of 1203: 3 -> 4
9999 mem: storing 1203 in location 1123
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1122 is 6
9999 mem: storing 7 in location 1122
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1122 is 7
9999 mem: location 1121 is 7
9999 mem: storing 1 in location 1124
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 1
9998 run: jumping to instruction 22
 104 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1119 is 1144
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1144
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1144 in location 1142
 103 run: _, _, {screen: ("address" "screen")}, {result: ("address" "editor-data")} <- render {screen: ("address" "screen")}, {result: ("address" "editor-data")}
9999 mem: location 1139 is 1008
9999 mem: location 1142 is 1144
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 mem: new alloc: 1207
9999 mem: storing 0 in location 1207
9999 mem: storing 0 in location 1208
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
9999 mem: storing 0 in location 1211
9999 mem: storing 0 in location 1212
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
9999 mem: storing 0 in location 1215
9999 mem: storing 0 in location 1216
9999 mem: storing 0 in location 1217
9999 mem: storing 0 in location 1218
9999 mem: storing 0 in location 1219
9999 mem: storing 0 in location 1220
9999 mem: storing 0 in location 1221
9999 mem: storing 0 in location 1222
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
9999 mem: storing 0 in location 1225
9999 mem: storing 0 in location 1226
9999 mem: storing 0 in location 1227
9999 mem: storing 0 in location 1228
9999 mem: storing 0 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
9999 mem: storing 0 in location 1232
9999 mem: storing 0 in location 1233
9999 mem: storing 0 in location 1234
9999 mem: storing 26 in location 1208
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1210 is 0
9999 mem: incrementing refcount of 1008: 4 -> 5
9999 mem: storing 1008 in location 1210
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1211 is 0
9999 mem: incrementing refcount of 1144: 2 -> 3
9999 mem: storing 1144 in location 1211
 104 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1211 is 1144
9998 run: jumping to instruction 6
 104 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1212
 104 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1210 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1181
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1181 is 1008
9998 run: jump-unless fell through
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1182
 105 run: return {height: "number"}
9999 mem: location 1182 is 5
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 5
9999 mem: storing 5 in location 1213
 104 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 9
9999 mem: storing 9 in location 1214
 104 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1163
9999 mem: location 1215 is 0
9999 mem: incrementing refcount of 1163: 8 -> 9
9999 mem: storing 1163 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1163
9999 mem: location 1216 is 0
9999 mem: incrementing refcount of 1163: 9 -> 10
9999 mem: storing 1163 in location 1216
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1163
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1163: 10 -> 11
9999 mem: storing 1163 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1163
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 1174
9999 mem: location 1166 is 0
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 1174
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1174: 6 -> 7
9999 mem: storing 1174 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1174
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1174
9999 mem: location 1215 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 11 -> 10
9999 mem: incrementing refcount of 1174: 7 -> 8
9999 mem: storing 1174 in location 1215
 104 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1217
 104 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1218
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1212 is 0
9999 mem: storing 0 in location 1219
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1220
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 0
9999 mem: storing 0 in location 1221
 104 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1148
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1148 is 1163
9999 mem: location 1222 is 0
9999 mem: incrementing refcount of 1163: 10 -> 11
9999 mem: storing 1163 in location 1222
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1218 is 1
9999 mem: location 1219 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 6 -> 7
9999 mem: storing 1008 in location 1160
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1161
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 1
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1210 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1210
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1174
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 0
9999 mem: location 1221 is 0
9999 mem: storing 1 in location 1225
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
 104 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1163
9999 mem: location 1222 is 1163
9999 mem: skipping refcount at 1163
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1163 in location 1222
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1215 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1175
9998 run: its type is "character"
9999 mem: location 1175 is 49
9999 mem: storing 49 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 49
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1235
9999 mem: storing 0 in location 1235
9999 mem: storing 0 in location 1236
9999 mem: storing 0 in location 1237
9999 mem: storing 0 in location 1238
9999 mem: storing 0 in location 1239
9999 mem: storing 0 in location 1240
9999 mem: storing 0 in location 1241
9999 mem: storing 0 in location 1242
9999 mem: storing 0 in location 1243
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
9999 mem: storing 0 in location 1246
9999 mem: storing 10 in location 1236
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1238
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 49 in location 1239
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1238 is 7
9999 mem: storing 1 in location 1240
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1239 is 49
9999 mem: storing 0 in location 1241
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1242
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1239 is 49
9999 mem: storing 0 in location 1244
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1244 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1245
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1238 is 7
9999 abandon: updating refcounts inside 1235: (array number)
9999 abandon: saving 1235 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 49
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 0
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 49
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 mem: new alloc: 1247
9999 mem: storing 0 in location 1247
9999 mem: storing 0 in location 1248
9999 mem: storing 0 in location 1249
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
9999 mem: storing 0 in location 1256
9999 mem: storing 0 in location 1257
9999 mem: storing 0 in location 1258
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
9999 mem: storing 0 in location 1261
9999 mem: storing 0 in location 1262
9999 mem: storing 0 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
9999 mem: storing 0 in location 1266
9999 mem: storing 0 in location 1267
9999 mem: storing 0 in location 1268
9999 mem: storing 0 in location 1269
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 24 in location 1248
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 7 -> 8
9999 mem: storing 1008 in location 1250
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 49 in location 1251
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 49
  90 print-character: 49 
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1260
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 49
9999 mem: storing 0 in location 1261
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 0
9999 mem: storing 10 in location 1264
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 3 -> 4
9999 mem: storing 1014 in location 1265
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 49
9999 mem: storing 0 in location 1267
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 49
9999 mem: location 1252 is 7
9999 mem: storing 49 in location 1269
9999 mem: storing 7 in location 1270
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 10
9998 run: address to copy to is 1036
9999 mem: location 1269 is 49
9999 mem: location 1270 is 7
9999 mem: storing 49 in location 1036
9999 mem: storing 7 in location 1037
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 1
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1174
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 8 -> 9
9999 mem: storing 1174 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1183: 6 -> 7
9999 mem: storing 1183 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1183
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1183
9999 mem: location 1215 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 9 -> 8
9999 mem: incrementing refcount of 1183: 7 -> 8
9999 mem: storing 1183 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1163
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1163: 11 -> 12
9999 mem: storing 1163 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1163
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 1174
9999 mem: location 1166 is 0
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 1174
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1174: 8 -> 9
9999 mem: storing 1174 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1174
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1174
9999 mem: location 1216 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 12 -> 11
9999 mem: incrementing refcount of 1174: 9 -> 10
9999 mem: storing 1174 in location 1216
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 0
9999 mem: storing 1 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1183
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 0
9999 mem: storing 0 in location 1225
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1215 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1184
9998 run: its type is "character"
9999 mem: location 1184 is 50
9999 mem: storing 50 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 50
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1235
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1238
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 50 in location 1239
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1238 is 7
9999 mem: storing 1 in location 1240
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1239 is 50
9999 mem: storing 0 in location 1241
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1242
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1239 is 50
9999 mem: storing 0 in location 1244
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1244 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1245
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1238 is 7
9999 abandon: updating refcounts inside 1235: (array number)
9999 abandon: saving 1235 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 50
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 50
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 8 -> 9
9999 mem: storing 1008 in location 1250
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 50 in location 1251
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 50
  90 print-character: 50 
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1260
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 50
9999 mem: storing 0 in location 1261
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 1
9999 mem: storing 11 in location 1264
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 4 -> 5
9999 mem: storing 1014 in location 1265
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 50
9999 mem: storing 0 in location 1267
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 50
9999 mem: location 1252 is 7
9999 mem: storing 50 in location 1269
9999 mem: storing 7 in location 1270
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 11
9998 run: address to copy to is 1038
9999 mem: location 1269 is 50
9999 mem: location 1270 is 7
9999 mem: storing 50 in location 1038
9999 mem: storing 7 in location 1039
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 2
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1183
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1183: 8 -> 9
9999 mem: storing 1183 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1183
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 1187
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1187: 6 -> 7
9999 mem: storing 1187 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1187
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1187
9999 mem: location 1215 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 9 -> 8
9999 mem: incrementing refcount of 1187: 7 -> 8
9999 mem: storing 1187 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1174
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 10 -> 11
9999 mem: storing 1174 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1183: 8 -> 9
9999 mem: storing 1183 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1183
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1183
9999 mem: location 1216 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 11 -> 10
9999 mem: incrementing refcount of 1183: 9 -> 10
9999 mem: storing 1183 in location 1216
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 1
9999 mem: storing 2 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1187
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1221 is 0
9999 mem: storing 0 in location 1225
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1215 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1188
9998 run: its type is "character"
9999 mem: location 1188 is 51
9999 mem: storing 51 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 51
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1235
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1238
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 51 in location 1239
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1238 is 7
9999 mem: storing 1 in location 1240
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1239 is 51
9999 mem: storing 0 in location 1241
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1242
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1239 is 51
9999 mem: storing 0 in location 1244
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1244 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1245
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1238 is 7
9999 abandon: updating refcounts inside 1235: (array number)
9999 abandon: saving 1235 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 51
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 51
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 9 -> 10
9999 mem: storing 1008 in location 1250
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 51 in location 1251
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 51
  90 print-character: 51 
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1260
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 51
9999 mem: storing 0 in location 1261
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 2
9999 mem: storing 12 in location 1264
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 5 -> 6
9999 mem: storing 1014 in location 1265
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 51
9999 mem: storing 0 in location 1267
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 51
9999 mem: location 1252 is 7
9999 mem: storing 51 in location 1269
9999 mem: storing 7 in location 1270
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 12
9998 run: address to copy to is 1040
9999 mem: location 1269 is 51
9999 mem: location 1270 is 7
9999 mem: storing 51 in location 1040
9999 mem: storing 7 in location 1041
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 3
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1187
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1187: 8 -> 9
9999 mem: storing 1187 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1187
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1189
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1189 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 6 -> 7
9999 mem: storing 1191 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1191
9999 mem: location 1215 is 1187
9999 mem: skipping refcount at 1187
9999 mem: decrementing refcount of 1187: 9 -> 8
9999 mem: incrementing refcount of 1191: 7 -> 8
9999 mem: storing 1191 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1183
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1183: 10 -> 11
9999 mem: storing 1183 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1183
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 1187
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1187: 8 -> 9
9999 mem: storing 1187 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1187
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1187
9999 mem: location 1216 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 11 -> 10
9999 mem: incrementing refcount of 1187: 9 -> 10
9999 mem: storing 1187 in location 1216
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 2
9999 mem: storing 3 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1191
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 3
9999 mem: location 1221 is 0
9999 mem: storing 0 in location 1225
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1215 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1192
9998 run: its type is "character"
9999 mem: location 1192 is 10
9999 mem: storing 10 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 10
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1235
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1238
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1239
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1238 is 7
9999 mem: storing 1 in location 1240
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1239 is 10
9999 mem: storing 0 in location 1241
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1242
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1239 is 10
9999 mem: storing 0 in location 1244
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1244 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1245
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1238 is 7
9999 abandon: updating refcounts inside 1235: (array number)
9999 abandon: saving 1235 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 10
9999 mem: storing 1 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
9990 schedule: render/new-editor/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {left-of-cursor?: "boolean"} <- lesser-than {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 3
9999 mem: location 1221 is 0
9999 mem: storing 0 in location 1228
 104 run: jump-unless {left-of-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 46
 104 run: clear-line-delimited {screen: ("address" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1219 is 3
9999 mem: location 1214 is 9
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1008: 10 -> 11
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1120
 105 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1121
 105 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1122
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1123
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 3
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 11 -> 12
9999 mem: storing 1008 in location 1250
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1260
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 3
9999 mem: storing 13 in location 1264
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 6 -> 7
9999 mem: storing 1014 in location 1265
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 13
9998 run: address to copy to is 1042
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 4 in location 1260
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 4
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 3
9999 mem: storing 4 in location 1120
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 4
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 12 -> 13
9999 mem: storing 1008 in location 1250
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1260
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 4
9999 mem: storing 14 in location 1264
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 7 -> 8
9999 mem: storing 1014 in location 1265
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 14
9998 run: address to copy to is 1044
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1044
9999 mem: storing 7 in location 1045
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 5 in location 1260
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 5
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 4
9999 mem: storing 5 in location 1120
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 5
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 13 -> 14
9999 mem: storing 1008 in location 1250
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1260
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 5
9999 mem: storing 15 in location 1264
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 8 -> 9
9999 mem: storing 1014 in location 1265
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 15
9998 run: address to copy to is 1046
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1046
9999 mem: storing 7 in location 1047
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 6 in location 1260
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 6
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 5
9999 mem: storing 6 in location 1120
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 6
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 14 -> 15
9999 mem: storing 1008 in location 1250
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1260
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 6
9999 mem: storing 16 in location 1264
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 9 -> 10
9999 mem: storing 1014 in location 1265
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 16
9998 run: address to copy to is 1048
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1048
9999 mem: storing 7 in location 1049
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 7 in location 1260
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 7
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 6
9999 mem: storing 7 in location 1120
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 7
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 15 -> 16
9999 mem: storing 1008 in location 1250
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1260
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 7
9999 mem: storing 17 in location 1264
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 10 -> 11
9999 mem: storing 1014 in location 1265
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 17
9998 run: address to copy to is 1050
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1050
9999 mem: storing 7 in location 1051
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 8 in location 1260
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 8
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 7
9999 mem: storing 8 in location 1120
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 8
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 16 -> 17
9999 mem: storing 1008 in location 1250
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1260
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 8
9999 mem: storing 18 in location 1264
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 11 -> 12
9999 mem: storing 1014 in location 1265
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 18
9998 run: address to copy to is 1052
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1052
9999 mem: storing 7 in location 1053
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 9 in location 1260
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 9
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 8
9999 mem: storing 9 in location 1120
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 9
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 17 -> 18
9999 mem: storing 1008 in location 1250
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1260
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 9
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 9
9999 mem: storing 19 in location 1264
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 12 -> 13
9999 mem: storing 1014 in location 1265
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 19
9998 run: address to copy to is 1054
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1054
9999 mem: storing 7 in location 1055
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1271 is 9
9999 mem: storing 1 in location 1272
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 1
9998 run: jumping to instruction 80
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 9
9999 mem: storing 10 in location 1120
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 10
9999 mem: location 1121 is 9
9999 mem: storing 1 in location 1125
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 1
9998 run: jumping to instruction 16
 105 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1119 is 1008
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
 104 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1218 is 1
9999 mem: storing 2 in location 1218
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1212 is 0
9999 mem: storing 0 in location 1219
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1218 is 2
9999 mem: location 1219 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 18 -> 19
9999 mem: storing 1008 in location 1160
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1161
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 2
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1210 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1210
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1191
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1191: 8 -> 9
9999 mem: storing 1191 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1191
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1195: 6 -> 7
9999 mem: storing 1195 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1195
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1195
9999 mem: location 1215 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 9 -> 8
9999 mem: incrementing refcount of 1195: 7 -> 8
9999 mem: storing 1195 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1187
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1187: 10 -> 11
9999 mem: storing 1187 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1187
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1189
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1189 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 8 -> 9
9999 mem: storing 1191 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1191
9999 mem: location 1216 is 1187
9999 mem: skipping refcount at 1187
9999 mem: decrementing refcount of 1187: 11 -> 10
9999 mem: incrementing refcount of 1191: 9 -> 10
9999 mem: storing 1191 in location 1216
 104 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1195
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1215 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1196
9998 run: its type is "character"
9999 mem: location 1196 is 52
9999 mem: storing 52 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 52
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1235
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1238
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 52 in location 1239
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1238 is 7
9999 mem: storing 1 in location 1240
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1239 is 52
9999 mem: storing 0 in location 1241
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1242
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1239 is 52
9999 mem: storing 0 in location 1244
9990 schedule: get-color/render/new-editor/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1244 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1245
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1238 is 7
9999 abandon: updating refcounts inside 1235: (array number)
9999 abandon: saving 1235 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 52
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 0
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 52
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 19 -> 20
9999 mem: storing 1008 in location 1250
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 52 in location 1251
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 52
  90 print-character: 52 
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1260
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 52
9999 mem: storing 0 in location 1261
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 0
9999 mem: storing 20 in location 1264
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 13 -> 14
9999 mem: storing 1014 in location 1265
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 52
9999 mem: storing 0 in location 1267
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 52
9999 mem: location 1252 is 7
9999 mem: storing 52 in location 1269
9999 mem: storing 7 in location 1270
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 20
9998 run: address to copy to is 1056
9999 mem: location 1269 is 52
9999 mem: location 1270 is 7
9999 mem: storing 52 in location 1056
9999 mem: storing 7 in location 1057
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 1
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1195
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1195: 8 -> 9
9999 mem: storing 1195 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1195
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1199: 6 -> 7
9999 mem: storing 1199 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1199
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1199
9999 mem: location 1215 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 9 -> 8
9999 mem: incrementing refcount of 1199: 7 -> 8
9999 mem: storing 1199 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1191
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1191: 10 -> 11
9999 mem: storing 1191 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1191
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1195: 8 -> 9
9999 mem: storing 1195 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1195
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1195
9999 mem: location 1216 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 11 -> 10
9999 mem: incrementing refcount of 1195: 9 -> 10
9999 mem: storing 1195 in location 1216
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 0
9999 mem: storing 1 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1199
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 53
9999 mem: storing 53 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 53
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1235
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1238
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 53 in location 1239
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1238 is 7
9999 mem: storing 1 in location 1240
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1239 is 53
9999 mem: storing 0 in location 1241
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1242
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1239 is 53
9999 mem: storing 0 in location 1244
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1244 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1245
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1238 is 7
9999 abandon: updating refcounts inside 1235: (array number)
9999 abandon: saving 1235 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 53
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 53
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 20 -> 21
9999 mem: storing 1008 in location 1250
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 53 in location 1251
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 53
  90 print-character: 53 
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1260
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 53
9999 mem: storing 0 in location 1261
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 1
9999 mem: storing 21 in location 1264
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 14 -> 15
9999 mem: storing 1014 in location 1265
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 53
9999 mem: storing 0 in location 1267
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 53
9999 mem: location 1252 is 7
9999 mem: storing 53 in location 1269
9999 mem: storing 7 in location 1270
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 21
9998 run: address to copy to is 1058
9999 mem: location 1269 is 53
9999 mem: location 1270 is 7
9999 mem: storing 53 in location 1058
9999 mem: storing 7 in location 1059
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 2
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1199: 8 -> 9
9999 mem: storing 1199 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1199
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1203: 4 -> 5
9999 mem: storing 1203 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1203
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1203
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 9 -> 8
9999 mem: incrementing refcount of 1203: 5 -> 6
9999 mem: storing 1203 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1195
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1195: 10 -> 11
9999 mem: storing 1195 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1195
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1199: 8 -> 9
9999 mem: storing 1199 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1199
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1199
9999 mem: location 1216 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 11 -> 10
9999 mem: incrementing refcount of 1199: 9 -> 10
9999 mem: storing 1199 in location 1216
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 1
9999 mem: storing 2 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1203
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 54
9999 mem: storing 54 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 54
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1235
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1238
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 54 in location 1239
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1238 is 7
9999 mem: storing 1 in location 1240
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1239 is 54
9999 mem: storing 0 in location 1241
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1242
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1240 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1239 is 54
9999 mem: storing 0 in location 1244
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1244 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1238 is 7
9999 mem: storing 0 in location 1245
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1238 is 7
9999 abandon: updating refcounts inside 1235: (array number)
9999 abandon: saving 1235 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 54
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 54
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 21 -> 22
9999 mem: storing 1008 in location 1250
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 54 in location 1251
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 54
  90 print-character: 54 
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1260
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 54
9999 mem: storing 0 in location 1261
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 2
9999 mem: storing 22 in location 1264
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 15 -> 16
9999 mem: storing 1014 in location 1265
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 54
9999 mem: storing 0 in location 1267
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 54
9999 mem: location 1252 is 7
9999 mem: storing 54 in location 1269
9999 mem: storing 7 in location 1270
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 22
9998 run: address to copy to is 1060
9999 mem: location 1269 is 54
9999 mem: location 1270 is 7
9999 mem: storing 54 in location 1060
9999 mem: storing 7 in location 1061
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 3
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1203
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1203: 6 -> 7
9999 mem: storing 1203 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1203
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1181 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: location 1182 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 0
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 7 -> 6
9999 mem: storing 0 in location 1215
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1199: 10 -> 11
9999 mem: storing 1199 in location 1181
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1199
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1203: 6 -> 7
9999 mem: storing 1203 in location 1182
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1203
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1203
9999 mem: location 1216 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 11 -> 10
9999 mem: incrementing refcount of 1203: 7 -> 8
9999 mem: storing 1203 in location 1216
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 2
9999 mem: storing 3 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 70
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1215 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1147
9999 mem: location 1147 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1147
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 104 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 3
9999 mem: location 1221 is 0
9999 mem: storing 0 in location 1231
 104 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1224 is 0
9999 mem: location 1231 is 0
9999 mem: storing 0 in location 1232
 104 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1233
 104 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1232 is 0
9999 mem: location 1233 is 0
9999 mem: storing 0 in location 1234
 104 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 82
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1218 is 2
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1151
9999 mem: storing 2 in location 1151
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1220 is 1
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1152
9999 mem: storing 1 in location 1152
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1221 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1153
9999 mem: storing 0 in location 1153
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1222 is 1163
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1148
9999 mem: location 1148 is 1163
9999 mem: skipping refcount at 1163
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1163 in location 1148
 104 run: return {row: "number"}, {column: "number"}, {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1218 is 2
9999 mem: location 1219 is 3
9999 mem: location 1210 is 1008
9999 mem: location 1211 is 1144
9999 abandon: updating refcounts inside 1207: (array number)
9999 abandon: saving 1207 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 2
9998 run: result 1 is 3
9998 run: result 2 is 1008
9998 run: result 3 is 1144
9999 mem: location 1139 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1139
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1144 in location 1142
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {indent?: "offset"}, {1: "literal", "true": ()}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1154
9999 mem: storing 1 in location 1154
 103 run: reply {result: ("address" "editor-data")}, {screen: ("address" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1142 is 1144
9999 mem: location 1139 is 1008
9999 abandon: updating refcounts inside 1135: (array number)
9999 abandon: saving 1135 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1144
9999 mem: location 2 is 0
9999 mem: incrementing refcount of 1144: 3 -> 4
9999 mem: storing 1144 in location 2
 102 run: assume-console {"\n    left-click 1, 1\n    press ctrl-k\n  ": "literal-string"}
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "literal"}
9993 parse:   ingredient: {1: "literal"}
9992 load: after rewriting: left-click {1: "literal"}, {1: "literal"}
9993 parse: instruction: press
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {ctrl-k: ()}
9992 load: after rewriting: press {ctrl-k: ()}
9999 mem: storing 'left-click' event starting at 1275
9999 mem: storing 'press' event starting at 1279
9999 mem: storing console in 1283
9999 mem: storing console data in 1285
 102 run: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {console: ("address" "console")}
9993 parse:   ingredient: {2: ("address" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9992 transform: console => ("address" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")} -> {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1283
9999 mem: location 2 is 1144
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1286
9999 mem: storing 0 in location 1286
9999 mem: storing 0 in location 1287
9999 mem: storing 0 in location 1288
9999 mem: storing 0 in location 1289
9999 mem: storing 0 in location 1290
9999 mem: storing 0 in location 1291
9999 mem: storing 0 in location 1292
9999 mem: storing 0 in location 1293
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 0 in location 1299
9999 mem: storing 0 in location 1300
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: storing 17 in location 1287
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1289 is 0
9999 mem: incrementing refcount of 1008: 22 -> 23
9999 mem: storing 1008 in location 1289
 104 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1283: 0 -> 1
9999 mem: storing 1283 in location 1290
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1291 is 0
9999 mem: incrementing refcount of 1144: 4 -> 5
9999 mem: storing 1144 in location 1291
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1292
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 0
9999 mem: storing 0 in location 1293
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1289 is 1008
9999 mem: location 1292 is 1
9999 mem: location 1293 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 23 -> 24
9999 mem: storing 1008 in location 1160
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1161
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 1
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1289 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1289
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1290 is 1283
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1305
9999 mem: storing 0 in location 1305
9999 mem: storing 0 in location 1306
9999 mem: storing 0 in location 1307
9999 mem: storing 0 in location 1308
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: storing 0 in location 1311
9999 mem: storing 0 in location 1312
9999 mem: storing 0 in location 1313
9999 mem: storing 0 in location 1314
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: storing 12 in location 1306
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1308 is 0
9999 mem: incrementing refcount of 1283: 1 -> 2
9999 mem: storing 1283 in location 1308
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1308 is 1283
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 0
9999 mem: location 1285 is 1273
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy is 1284
9998 run: its type is "number"
9999 mem: location 1284 is 0
9999 mem: storing 0 in location 1309
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 0
9999 mem: location 1285 is 1273
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy is 1285
9998 run: its type is ("address" "array" "event")
9999 mem: location 1285 is 1273
9999 mem: location 1310 is 0
9999 mem: incrementing refcount of 1273: 1 -> 2
9999 mem: storing 1273 in location 1310
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1310 is 1273
9999 mem: skipping refcount at 1273
9999 mem: storing 2 in location 1311
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1309 is 0
9999 mem: location 1311 is 2
9999 mem: storing 0 in location 1312
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1310 is 1273
9999 mem: skipping refcount at 1273
9998 run: base address is 1274
9999 mem: location 1309 is 0
9998 run: address to copy is 1275
9998 run: its type is event
9999 mem: location 1275 is 2
9999 mem: location 1276 is 65513
9999 mem: location 1277 is 1
9999 mem: location 1278 is 1
9999 mem: storing 2 in location 1314
9999 mem: storing 65513 in location 1315
9999 mem: storing 1 in location 1316
9999 mem: storing 1 in location 1317
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1309 is 0
9999 mem: storing 1 in location 1309
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 0
9999 mem: location 1285 is 1273
9999 mem: location 1309 is 1
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy to is 1284
9999 mem: storing 1 in location 1284
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1314 is 2
9999 mem: location 1315 is 65513
9999 mem: location 1316 is 1
9999 mem: location 1317 is 1
9999 mem: location 1308 is 1283
9999 abandon: updating refcounts inside 1305: (array number)
9999 abandon: saving 1305 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 1, 1]
9998 run: result 1 is 1283
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1294
9999 mem: storing 65513 in location 1295
9999 mem: storing 1 in location 1296
9999 mem: storing 1 in location 1297
9999 mem: location 1290 is 1283
9999 mem: skipping refcount at 1283
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1283 in location 1290
9999 mem: storing 1 in location 1298
9999 mem: storing 0 in location 1299
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1298 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1294 is 2
9999 mem: location 1295 is 65513
9999 mem: location 1296 is 1
9999 mem: location 1297 is 1
9999 mem: storing 1 in location 1303
9999 mem: storing 65513 in location 1300
9999 mem: storing 1 in location 1301
9999 mem: storing 1 in location 1302
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1303 is 1
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {t: "touch-event"}
9999 mem: location 1289 is 1008
9999 mem: location 1291 is 1144
9999 mem: location 1300 is 65513
9999 mem: location 1301 is 1
9999 mem: location 1302 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1319
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
9999 mem: storing 0 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
9999 mem: storing 0 in location 1329
9999 mem: storing 0 in location 1330
9999 mem: storing 0 in location 1331
9999 mem: storing 0 in location 1332
9999 mem: storing 0 in location 1333
9999 mem: storing 0 in location 1334
9999 mem: storing 0 in location 1335
9999 mem: storing 0 in location 1336
9999 mem: storing 0 in location 1337
9999 mem: storing 0 in location 1338
9999 mem: storing 0 in location 1339
9999 mem: storing 0 in location 1340
9999 mem: storing 0 in location 1341
9999 mem: storing 0 in location 1342
9999 mem: storing 0 in location 1343
9999 mem: storing 0 in location 1344
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 31 in location 1320
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1322 is 0
9999 mem: incrementing refcount of 1008: 24 -> 25
9999 mem: storing 1008 in location 1322
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1323 is 0
9999 mem: incrementing refcount of 1144: 5 -> 6
9999 mem: storing 1144 in location 1323
 105 run: {t: "touch-event"} <- next-ingredient-without-typechecking 
9999 mem: storing 65513 in location 1324
9999 mem: storing 1 in location 1325
9999 mem: storing 1 in location 1326
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1323 is 1144
9998 run: jumping to instruction 7
 105 run: {click-row: "number"} <- get {t: "touch-event"}, {row: "offset"}
9999 mem: location 1324 is 65513
9999 mem: location 1325 is 1
9999 mem: location 1326 is 1
9998 run: address to copy is 1325
9998 run: its type is "number"
9999 mem: location 1325 is 1
9999 mem: storing 1 in location 1327
 105 run: jump-if {click-row: "number"}, {: "offset"}
9999 mem: location 1327 is 1
9998 run: jumping to instruction 12
 105 run: {click-column: "number"} <- get {t: "touch-event"}, {column: "offset"}
9999 mem: location 1324 is 65513
9999 mem: location 1325 is 1
9999 mem: location 1326 is 1
9998 run: address to copy is 1326
9998 run: its type is "number"
9999 mem: location 1326 is 1
9999 mem: storing 1 in location 1328
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1329
 105 run: {too-far-left?: "boolean"} <- lesser-than {click-column: "number"}, {left: "number"}
9999 mem: location 1328 is 1
9999 mem: location 1329 is 0
9999 mem: storing 0 in location 1330
 105 run: jump-unless {too-far-left?: "boolean"}, {: "offset"}
9999 mem: location 1330 is 0
9998 run: jumping to instruction 19
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 9
9999 mem: storing 9 in location 1331
 105 run: {too-far-right?: "boolean"} <- greater-than {click-column: "number"}, {right: "number"}
9999 mem: location 1328 is 1
9999 mem: location 1331 is 9
9999 mem: storing 0 in location 1332
 105 run: jump-unless {too-far-right?: "boolean"}, {: "offset"}
9999 mem: location 1332 is 0
9998 run: jumping to instruction 25
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1333
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 0
9999 mem: storing 0 in location 1334
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1163
9999 mem: location 1335 is 0
9999 mem: incrementing refcount of 1163: 11 -> 12
9999 mem: storing 1163 in location 1335
 105 run: {editor: ("address" "editor-data")} <- snap-cursor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {click-row: "number"}, {click-column: "number"}
9999 mem: location 1322 is 1008
9999 mem: location 1323 is 1144
9999 mem: location 1327 is 1
9999 mem: location 1328 is 1
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1207
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1210 is 0
9999 mem: incrementing refcount of 1008: 25 -> 26
9999 mem: storing 1008 in location 1210
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1211 is 0
9999 mem: incrementing refcount of 1144: 6 -> 7
9999 mem: storing 1144 in location 1211
 106 run: {target-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1212
 106 run: {target-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1213
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1211 is 1144
9998 run: jumping to instruction 8
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1214
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 9
9999 mem: storing 9 in location 1215
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1210 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1008: 26 -> 27
9999 mem: storing 1008 in location 1181
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1181 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1182
 107 run: return {height: "number"}
9999 mem: location 1182 is 5
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1216
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1163
9999 mem: location 1217 is 0
9999 mem: incrementing refcount of 1163: 12 -> 13
9999 mem: storing 1163 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1163
9999 mem: location 1218 is 0
9999 mem: incrementing refcount of 1163: 13 -> 14
9999 mem: storing 1163 in location 1218
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1163
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1163: 14 -> 15
9999 mem: storing 1163 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1163
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 1174
9999 mem: location 1166 is 0
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 1174
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1174: 10 -> 11
9999 mem: storing 1174 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1174
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1174
9999 mem: location 1217 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 15 -> 14
9999 mem: incrementing refcount of 1174: 11 -> 12
9999 mem: storing 1174 in location 1217
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1219
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1214 is 0
9999 mem: storing 0 in location 1220
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {target-row: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1212 is 1
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1152
9999 mem: storing 1 in location 1152
 106 run: {cursor-row: "number"} <- copy {target-row: "number"}
9999 mem: location 1212 is 1
9999 mem: storing 1 in location 1221
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {target-column: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1213 is 1
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1153
9999 mem: storing 1 in location 1153
 106 run: {cursor-column: "number"} <- copy {target-column: "number"}
9999 mem: location 1213 is 1
9999 mem: storing 1 in location 1222
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1148
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1148 is 1163
9999 mem: location 1223 is 0
9999 mem: incrementing refcount of 1163: 14 -> 15
9999 mem: storing 1163 in location 1223
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 1174
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1216 is 5
9999 mem: storing 0 in location 1224
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1
9999 mem: storing 1 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1220 is 0
9999 mem: location 1222 is 1
9999 mem: storing 0 in location 1226
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1226 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1217 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1217 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1175
9998 run: its type is "character"
9999 mem: location 1175 is 49
9999 mem: storing 49 in location 1227
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1227 is 49
9999 mem: storing 0 in location 1228
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1220 is 0
9999 mem: location 1215 is 9
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1174
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 12 -> 13
9999 mem: storing 1174 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1183: 10 -> 11
9999 mem: storing 1183 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1183
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: location 1217 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 13 -> 12
9999 mem: incrementing refcount of 1183: 11 -> 12
9999 mem: storing 1183 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1163
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1163: 15 -> 16
9999 mem: storing 1163 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1163
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 1174
9999 mem: location 1166 is 0
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 1174
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1174: 12 -> 13
9999 mem: storing 1174 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1174
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1174
9999 mem: location 1218 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 16 -> 15
9999 mem: incrementing refcount of 1174: 13 -> 14
9999 mem: storing 1174 in location 1218
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1220 is 0
9999 mem: storing 1 in location 1220
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 1183
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1216 is 5
9999 mem: storing 0 in location 1224
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1
9999 mem: storing 1 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
9990 schedule: snap-cursor/move-cursor-in-editor/editor-event-loop/run_1001/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1220 is 1
9999 mem: location 1222 is 1
9999 mem: storing 1 in location 1226
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1226 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1174
9999 mem: location 1223 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 15 -> 14
9999 mem: incrementing refcount of 1174: 14 -> 15
9999 mem: storing 1174 in location 1223
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1163
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1223 is 1174
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1148
9999 mem: location 1148 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 14 -> 13
9999 mem: incrementing refcount of 1174: 15 -> 16
9999 mem: storing 1174 in location 1148
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1217 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1217 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1184
9998 run: its type is "character"
9999 mem: location 1184 is 50
9999 mem: storing 50 in location 1227
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1227 is 50
9999 mem: storing 0 in location 1228
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1220 is 1
9999 mem: location 1215 is 9
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1183
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1183: 12 -> 13
9999 mem: storing 1183 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1183
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 1187
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1187: 10 -> 11
9999 mem: storing 1187 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1187
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1187
9999 mem: location 1217 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 13 -> 12
9999 mem: incrementing refcount of 1187: 11 -> 12
9999 mem: storing 1187 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1174
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 16 -> 17
9999 mem: storing 1174 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1183: 12 -> 13
9999 mem: storing 1183 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1183
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: location 1218 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 17 -> 16
9999 mem: incrementing refcount of 1183: 13 -> 14
9999 mem: storing 1183 in location 1218
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1220 is 1
9999 mem: storing 2 in location 1220
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 1187
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1216 is 5
9999 mem: storing 0 in location 1224
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1
9999 mem: storing 1 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1220 is 2
9999 mem: location 1222 is 1
9999 mem: storing 0 in location 1226
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1226 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1217 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1217 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1188
9998 run: its type is "character"
9999 mem: location 1188 is 51
9999 mem: storing 51 in location 1227
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1227 is 51
9999 mem: storing 0 in location 1228
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1220 is 2
9999 mem: location 1215 is 9
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1187
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1187: 12 -> 13
9999 mem: storing 1187 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1187
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1189
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1189 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 10 -> 11
9999 mem: storing 1191 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: location 1217 is 1187
9999 mem: skipping refcount at 1187
9999 mem: decrementing refcount of 1187: 13 -> 12
9999 mem: incrementing refcount of 1191: 11 -> 12
9999 mem: storing 1191 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1183
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1183: 14 -> 15
9999 mem: storing 1183 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1183
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 1187
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1187: 12 -> 13
9999 mem: storing 1187 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1187
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1187
9999 mem: location 1218 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 15 -> 14
9999 mem: incrementing refcount of 1187: 13 -> 14
9999 mem: storing 1187 in location 1218
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1220 is 2
9999 mem: storing 3 in location 1220
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 1191
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1216 is 5
9999 mem: storing 0 in location 1224
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1
9999 mem: storing 1 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1220 is 3
9999 mem: location 1222 is 1
9999 mem: storing 0 in location 1226
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1226 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1217 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1217 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1192
9998 run: its type is "character"
9999 mem: location 1192 is 10
9999 mem: storing 10 in location 1227
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1227 is 10
9999 mem: storing 1 in location 1228
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1
9999 mem: storing 1 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
 106 run: {left-of-cursor?: "boolean"} <- lesser-than {column: "number"}, {cursor-column: "number"}
9999 mem: location 1220 is 3
9999 mem: location 1222 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {left-of-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 48
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1219 is 1
9999 mem: storing 2 in location 1219
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1214 is 0
9999 mem: storing 0 in location 1220
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1191: 12 -> 13
9999 mem: storing 1191 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1195: 10 -> 11
9999 mem: storing 1195 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1195
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: location 1217 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 13 -> 12
9999 mem: incrementing refcount of 1195: 11 -> 12
9999 mem: storing 1195 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1187
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1187: 14 -> 15
9999 mem: storing 1187 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1187
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1189
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1189 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 12 -> 13
9999 mem: storing 1191 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: location 1218 is 1187
9999 mem: skipping refcount at 1187
9999 mem: decrementing refcount of 1187: 15 -> 14
9999 mem: incrementing refcount of 1191: 13 -> 14
9999 mem: storing 1191 in location 1218
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 24
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 1195
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1216 is 5
9999 mem: storing 0 in location 1224
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1217 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1217 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1196
9998 run: its type is "character"
9999 mem: location 1196 is 52
9999 mem: storing 52 in location 1227
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1227 is 52
9999 mem: storing 0 in location 1228
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1220 is 0
9999 mem: location 1215 is 9
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1195
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1195: 12 -> 13
9999 mem: storing 1195 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1199: 10 -> 11
9999 mem: storing 1199 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1199
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: location 1217 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 13 -> 12
9999 mem: incrementing refcount of 1199: 11 -> 12
9999 mem: storing 1199 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1191: 14 -> 15
9999 mem: storing 1191 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1195: 12 -> 13
9999 mem: storing 1195 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1195
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: location 1218 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 15 -> 14
9999 mem: incrementing refcount of 1195: 13 -> 14
9999 mem: storing 1195 in location 1218
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1220 is 0
9999 mem: storing 1 in location 1220
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 1199
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1216 is 5
9999 mem: storing 0 in location 1224
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1217 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1217 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 53
9999 mem: storing 53 in location 1227
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1227 is 53
9999 mem: storing 0 in location 1228
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1220 is 1
9999 mem: location 1215 is 9
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1199: 12 -> 13
9999 mem: storing 1199 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1203: 8 -> 9
9999 mem: storing 1203 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1203
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: location 1217 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 13 -> 12
9999 mem: incrementing refcount of 1203: 9 -> 10
9999 mem: storing 1203 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1195
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1195: 14 -> 15
9999 mem: storing 1195 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1199: 12 -> 13
9999 mem: storing 1199 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1199
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: location 1218 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 15 -> 14
9999 mem: incrementing refcount of 1199: 13 -> 14
9999 mem: storing 1199 in location 1218
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1220 is 1
9999 mem: storing 2 in location 1220
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 1203
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1216 is 5
9999 mem: storing 0 in location 1224
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1225
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1217 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1217 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 54
9999 mem: storing 54 in location 1227
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1227 is 54
9999 mem: storing 0 in location 1228
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1220 is 2
9999 mem: location 1215 is 9
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1217 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1203: 10 -> 11
9999 mem: storing 1203 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1203
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1181 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: location 1182 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 0
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: location 1217 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 11 -> 10
9999 mem: storing 0 in location 1217
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1218 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1199: 14 -> 15
9999 mem: storing 1199 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1203: 10 -> 11
9999 mem: storing 1203 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1203
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: location 1218 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 15 -> 14
9999 mem: incrementing refcount of 1203: 11 -> 12
9999 mem: storing 1203 in location 1218
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1220 is 2
9999 mem: storing 3 in location 1220
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1217 is 0
9998 run: jumping to instruction 66
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1225
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1220 is 3
9999 mem: location 1222 is 1
9999 mem: storing 0 in location 1231
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1225 is 0
9999 mem: location 1231 is 0
9999 mem: storing 0 in location 1232
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1233
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1232 is 0
9999 mem: location 1233 is 0
9999 mem: storing 0 in location 1234
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 80
 106 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1211 is 1144
9999 abandon: updating refcounts inside 1207: (array number)
9999 abandon: saving 1207 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1144
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1144 in location 1323
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1336
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1163
9999 mem: location 1337 is 0
9999 mem: incrementing refcount of 1163: 13 -> 14
9999 mem: storing 1163 in location 1337
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1338
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 1
9999 mem: storing 1 in location 1339
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1336 is 0
9998 run: jumping to instruction 50
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1235
9999 mem: location 1341 is 0
9999 mem: incrementing refcount of 1235: 0 -> 1
9999 mem: storing 1235 in location 1341
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1333 is 1
9999 mem: location 1334 is 0
9999 mem: location 1335 is 1163
9999 mem: location 1338 is 1
9999 mem: location 1339 is 1
9999 mem: location 1337 is 1163
9999 mem: location 1336 is 0
9999 mem: location 1341 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1341 is 1235
9999 mem: skipping refcount at 1235
9999 mem: incrementing refcount of 1163: 14 -> 15
9999 mem: incrementing refcount of 1163: 15 -> 16
9999 mem: storing 1 in location 1236
9999 mem: storing 1 in location 1237
9999 mem: storing 0 in location 1238
9999 mem: storing 1163 in location 1239
9999 mem: storing 1 in location 1240
9999 mem: storing 1 in location 1241
9999 mem: storing 1163 in location 1242
9999 mem: storing 0 in location 1243
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1323 is 1144
9999 mem: location 1341 is 1235
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1144: 7 -> 8
9999 mem: storing 1144 in location 1170
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1235: 1 -> 2
9999 mem: storing 1235 in location 1171
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1155
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1155 is 0
9999 mem: location 1172 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1172
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1171 is 1235
9999 mem: location 1172 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1235: 2 -> 3
9999 mem: storing 1235 in location 1160
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1161 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1161
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1352
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: location 1162 is 0
9999 mem: incrementing refcount of 1352: 0 -> 1
9999 mem: storing 1352 in location 1162
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1160 is 1235
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1352
9999 mem: skipping refcount at 1352
9999 mem: location 1162 is 1352
9999 mem: skipping refcount at 1352
9999 mem: incrementing refcount of 1235: 3 -> 4
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1235 in location 1353
9999 mem: storing 0 in location 1354
 107 run: return {result: ("address" "list" "address" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1162 is 1352
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1352
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1352: 1 -> 2
9999 mem: storing 1352 in location 1172
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1172 is 1352
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1155
9999 mem: location 1155 is 0
9999 mem: incrementing refcount of 1352: 2 -> 3
9999 mem: storing 1352 in location 1155
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1156
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1156 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1173 is 0
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1156
9999 mem: location 1156 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1156
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1170 is 1144
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1144
9999 mem: location 1323 is 1144
9999 mem: skipping refcount at 1144
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1144 in location 1323
 105 run: return {1: "literal", "true": ()}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1323 is 1144
9999 abandon: updating refcounts inside 1319: (array number)
9999 abandon: saving 1319 in free-list of size 33
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump {+next-event: "label"}
9998 run: jumping to instruction 6
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1292
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 1
9999 mem: storing 1 in location 1293
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1289 is 1008
9999 mem: location 1292 is 1
9999 mem: location 1293 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 27 -> 28
9999 mem: storing 1008 in location 1160
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1161
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1162
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 1
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 1
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1289 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1289
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1290 is 1283
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1305
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1308 is 0
9999 mem: incrementing refcount of 1283: 2 -> 3
9999 mem: storing 1283 in location 1308
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1308 is 1283
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 1
9999 mem: location 1285 is 1273
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy is 1284
9998 run: its type is "number"
9999 mem: location 1284 is 1
9999 mem: storing 1 in location 1309
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 1
9999 mem: location 1285 is 1273
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy is 1285
9998 run: its type is ("address" "array" "event")
9999 mem: location 1285 is 1273
9999 mem: location 1310 is 0
9999 mem: incrementing refcount of 1273: 2 -> 3
9999 mem: storing 1273 in location 1310
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1310 is 1273
9999 mem: skipping refcount at 1273
9999 mem: storing 2 in location 1311
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1309 is 1
9999 mem: location 1311 is 2
9999 mem: storing 0 in location 1312
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1310 is 1273
9999 mem: skipping refcount at 1273
9998 run: base address is 1274
9999 mem: location 1309 is 1
9998 run: address to copy is 1279
9998 run: its type is event
9999 mem: location 1279 is 0
9999 mem: location 1280 is 11
9999 mem: location 1281 is 0
9999 mem: location 1282 is 0
9999 mem: storing 0 in location 1314
9999 mem: storing 11 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1309 is 1
9999 mem: storing 2 in location 1309
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 1
9999 mem: location 1285 is 1273
9999 mem: location 1309 is 2
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy to is 1284
9999 mem: storing 2 in location 1284
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1314 is 0
9999 mem: location 1315 is 11
9999 mem: location 1316 is 0
9999 mem: location 1317 is 0
9999 mem: location 1308 is 1283
9999 abandon: updating refcounts inside 1305: (array number)
9999 abandon: saving 1305 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 11, 0, 0]
9998 run: result 1 is 1283
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1294
9999 mem: storing 11 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: location 1290 is 1283
9999 mem: skipping refcount at 1283
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1283 in location 1290
9999 mem: storing 1 in location 1298
9999 mem: storing 0 in location 1299
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1298 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1294 is 0
9999 mem: location 1295 is 11
9999 mem: location 1296 is 0
9999 mem: location 1297 is 0
9999 mem: storing 0 in location 1303
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1303 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1303 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {e: "event"}
9999 mem: location 1289 is 1008
9999 mem: location 1291 is 1144
9999 mem: location 1294 is 0
9999 mem: location 1295 is 11
9999 mem: location 1296 is 0
9999 mem: location 1297 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 102
9999 mem: allocating size 104
9999 mem: new alloc: 1355
9999 mem: storing 0 in location 1355
9999 mem: storing 0 in location 1356
9999 mem: storing 0 in location 1357
9999 mem: storing 0 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: storing 0 in location 1367
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: storing 0 in location 1377
9999 mem: storing 0 in location 1378
9999 mem: storing 0 in location 1379
9999 mem: storing 0 in location 1380
9999 mem: storing 0 in location 1381
9999 mem: storing 0 in location 1382
9999 mem: storing 0 in location 1383
9999 mem: storing 0 in location 1384
9999 mem: storing 0 in location 1385
9999 mem: storing 0 in location 1386
9999 mem: storing 0 in location 1387
9999 mem: storing 0 in location 1388
9999 mem: storing 0 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: storing 0 in location 1398
9999 mem: storing 0 in location 1399
9999 mem: storing 0 in location 1400
9999 mem: storing 0 in location 1401
9999 mem: storing 0 in location 1402
9999 mem: storing 0 in location 1403
9999 mem: storing 0 in location 1404
9999 mem: storing 0 in location 1405
9999 mem: storing 0 in location 1406
9999 mem: storing 0 in location 1407
9999 mem: storing 0 in location 1408
9999 mem: storing 0 in location 1409
9999 mem: storing 0 in location 1410
9999 mem: storing 0 in location 1411
9999 mem: storing 0 in location 1412
9999 mem: storing 0 in location 1413
9999 mem: storing 0 in location 1414
9999 mem: storing 0 in location 1415
9999 mem: storing 0 in location 1416
9999 mem: storing 0 in location 1417
9999 mem: storing 0 in location 1418
9999 mem: storing 0 in location 1419
9999 mem: storing 0 in location 1420
9999 mem: storing 0 in location 1421
9999 mem: storing 0 in location 1422
9999 mem: storing 0 in location 1423
9999 mem: storing 0 in location 1424
9999 mem: storing 0 in location 1425
9999 mem: storing 0 in location 1426
9999 mem: storing 0 in location 1427
9999 mem: storing 0 in location 1428
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: storing 0 in location 1439
9999 mem: storing 0 in location 1440
9999 mem: storing 0 in location 1441
9999 mem: storing 0 in location 1442
9999 mem: storing 0 in location 1443
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: storing 0 in location 1451
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 102 in location 1356
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1358 is 0
9999 mem: incrementing refcount of 1008: 28 -> 29
9999 mem: storing 1008 in location 1358
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1359 is 0
9999 mem: incrementing refcount of 1144: 8 -> 9
9999 mem: storing 1144 in location 1359
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1360
9999 mem: storing 11 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1364
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1359 is 1144
9998 run: jumping to instruction 8
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1358 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1008: 29 -> 30
9999 mem: storing 1008 in location 1181
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1181 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1182
 106 run: return {width: "number"}
9999 mem: location 1182 is 10
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1365
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1358 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1008: 30 -> 31
9999 mem: storing 1008 in location 1181
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1181 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1182
 106 run: return {height: "number"}
9999 mem: location 1182 is 5
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1366
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1367
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 9
9999 mem: storing 9 in location 1368
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1148
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1148 is 1174
9999 mem: location 1369 is 0
9999 mem: incrementing refcount of 1174: 16 -> 17
9999 mem: storing 1174 in location 1369
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1370
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 1
9999 mem: storing 1 in location 1371
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1370 is 1
9999 mem: storing 1 in location 1372
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1371 is 1
9999 mem: storing 1 in location 1373
 105 run: {c: "character"}, {is-unicode?: "boolean"} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1360 is 0
9999 mem: location 1361 is 11
9999 mem: location 1362 is 0
9999 mem: location 1363 is 0
9999 mem: storing 1 in location 1375
9999 mem: storing 11 in location 1374
 105 run: jump-unless {is-unicode?: "boolean"}, {: "offset"}
9999 mem: location 1375 is 1
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: "character"}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1374 is 11
9999 mem: storing 0 in location 1376
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1376 is 0
9998 run: jumping to instruction 73
 105 run: {undo?: "boolean"} <- equal {c: "character"}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1374 is 11
9999 mem: storing 0 in location 1414
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1414 is 0
9998 run: jumping to instruction 128
 105 run: {page-up?: "boolean"} <- equal {c: "character"}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1374 is 11
9999 mem: storing 0 in location 1418
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1418 is 0
9998 run: jumping to instruction 167
 105 run: {page-down?: "boolean"} <- equal {c: "character"}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1374 is 11
9999 mem: storing 0 in location 1429
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1429 is 0
9998 run: jumping to instruction 206
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: "character"}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1374 is 11
9999 mem: storing 1 in location 1430
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1430 is 1
9998 run: jump-unless fell through
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1163
9999 mem: location 1422 is 0
9999 mem: incrementing refcount of 1163: 16 -> 17
9999 mem: storing 1163 in location 1422
 105 run: {deleted-cells: ("address" "duplex-list" "character")} <- delete-to-end-of-line {editor: ("address" "editor-data")}
9999 mem: location 1359 is 1144
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1144: 9 -> 10
9999 mem: storing 1144 in location 1119
 106 run: {start: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1119 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1119 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1148
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1148 is 1174
9999 mem: location 1120 is 0
9999 mem: incrementing refcount of 1174: 17 -> 18
9999 mem: storing 1174 in location 1120
 106 run: {end: ("address" "duplex-list" "character")} <- next_2 {start: ("address" "duplex-list" "character")}
9999 mem: location 1120 is 1174
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 18 -> 19
9999 mem: storing 1174 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1183: 14 -> 15
9999 mem: storing 1183 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1183
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: location 1121 is 0
9999 mem: incrementing refcount of 1183: 15 -> 16
9999 mem: storing 1183 in location 1121
 106 run: {at-end-of-text?: "boolean"} <- equal {end: ("address" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1121 is 1183
9999 mem: storing 0 in location 1122
 106 run: jump-if {at-end-of-text?: "boolean"}, {: "offset"}
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: {curr: "character"} <- get {end: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1121 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1121 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1184
9998 run: its type is "character"
9999 mem: location 1184 is 50
9999 mem: storing 50 in location 1123
 106 run: {at-end-of-line?: "boolean"} <- equal {curr: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1123 is 50
9999 mem: storing 0 in location 1124
 106 run: jump-if {at-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 106 run: {end: ("address" "duplex-list" "character")} <- next_2 {end: ("address" "duplex-list" "character")}
9999 mem: location 1121 is 1183
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1183: 16 -> 17
9999 mem: storing 1183 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1183
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1181 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 1187
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1187: 14 -> 15
9999 mem: storing 1187 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1187
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1187
9999 mem: location 1121 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 17 -> 16
9999 mem: incrementing refcount of 1187: 15 -> 16
9999 mem: storing 1187 in location 1121
 106 run: jump {: "offset"}
9998 run: jumping to instruction 5
 106 run: {at-end-of-text?: "boolean"} <- equal {end: ("address" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1121 is 1187
9999 mem: storing 0 in location 1122
 106 run: jump-if {at-end-of-text?: "boolean"}, {: "offset"}
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: {curr: "character"} <- get {end: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1121 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1121 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1188
9998 run: its type is "character"
9999 mem: location 1188 is 51
9999 mem: storing 51 in location 1123
 106 run: {at-end-of-line?: "boolean"} <- equal {curr: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1123 is 51
9999 mem: storing 0 in location 1124
 106 run: jump-if {at-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 106 run: {end: ("address" "duplex-list" "character")} <- next_2 {end: ("address" "duplex-list" "character")}
9999 mem: location 1121 is 1187
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1187: 16 -> 17
9999 mem: storing 1187 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1187
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1181 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy is 1189
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1189 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 14 -> 15
9999 mem: storing 1191 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: location 1121 is 1187
9999 mem: skipping refcount at 1187
9999 mem: decrementing refcount of 1187: 17 -> 16
9999 mem: incrementing refcount of 1191: 15 -> 16
9999 mem: storing 1191 in location 1121
 106 run: jump {: "offset"}
9998 run: jumping to instruction 5
 106 run: {at-end-of-text?: "boolean"} <- equal {end: ("address" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1121 is 1191
9999 mem: storing 0 in location 1122
 106 run: jump-if {at-end-of-text?: "boolean"}, {: "offset"}
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: {curr: "character"} <- get {end: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1121 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1121 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1192
9998 run: its type is "character"
9999 mem: location 1192 is 10
9999 mem: storing 10 in location 1123
 106 run: {at-end-of-line?: "boolean"} <- equal {curr: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1123 is 10
9999 mem: storing 1 in location 1124
 106 run: jump-if {at-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 1
9998 run: jumping to instruction 12
 106 run: {result: ("address" "duplex-list" "character")} <- next_2 {start: ("address" "duplex-list" "character")}
9999 mem: location 1120 is 1174
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 19 -> 20
9999 mem: storing 1174 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1183: 16 -> 17
9999 mem: storing 1183 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1183
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: location 1125 is 0
9999 mem: incrementing refcount of 1183: 17 -> 18
9999 mem: storing 1183 in location 1125
 106 run: remove-between_2 {start: ("address" "duplex-list" "character")}, {end: ("address" "duplex-list" "character")}
9999 mem: location 1120 is 1174
9999 mem: location 1121 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 107 run: {start: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1174: 20 -> 21
9999 mem: storing 1174 in location 1003
 107 run: {end: ("address" "duplex-list" "character"), "contained-in": "start"} <- next-ingredient-without-typechecking 
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1191: 16 -> 17
9999 mem: storing 1191 in location 1004
 107 run: {next: ("address" "duplex-list" "character")} <- get {start: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1003 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1003 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1183
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1183: 18 -> 19
9999 mem: storing 1183 in location 1005
 107 run: {nothing-to-delete?: "boolean"} <- equal {next: ("address" "duplex-list" "character")}, {end: ("address" "duplex-list" "character")}
9999 mem: location 1005 is 1183
9999 mem: location 1004 is 1191
9999 mem: storing 0 in location 1006
 107 run: jump-unless {nothing-to-delete?: "boolean"}, {: "offset"}
9999 mem: location 1006 is 0
9998 run: jumping to instruction 8
 107 run: assert {next: ("address" "duplex-list" "character")}, {"malformed duplex list": "literal-string"}
9999 mem: location 1005 is 1183
 107 run: {next: ("address" "duplex-list" "character"), "lookup": ()} <- put {next: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {0: "literal"}
9999 mem: location 1005 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 50
9999 mem: location 1185 is 1187
9999 mem: location 1186 is 1174
9999 mem: location 1005 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy to is 1186
9999 mem: location 1186 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 21 -> 20
9999 mem: storing 0 in location 1186
 107 run: {start: ("address" "duplex-list" "character"), "lookup": ()} <- put {start: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {end: ("address" "duplex-list" "character")}
9999 mem: location 1003 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1183
9999 mem: location 1177 is 1163
9999 mem: location 1004 is 1191
9999 mem: location 1003 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy to is 1176
9999 mem: location 1176 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 19 -> 18
9999 mem: incrementing refcount of 1191: 17 -> 18
9999 mem: storing 1191 in location 1176
 107 run: jump-if {end: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 1191
9998 run: jumping to instruction 15
 107 run: {prev: ("address" "duplex-list" "character")} <- get {end: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1004 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1004 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1187
9999 mem: location 1007 is 0
9999 mem: incrementing refcount of 1187: 16 -> 17
9999 mem: storing 1187 in location 1007
 107 run: assert {prev: ("address" "duplex-list" "character")}, {"malformed duplex list - 2": "literal-string"}
9999 mem: location 1007 is 1187
 107 run: {prev: ("address" "duplex-list" "character"), "lookup": ()} <- put {prev: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9999 mem: location 1007 is 1187
9999 mem: skipping refcount at 1187
9999 mem: location 1188 is 51
9999 mem: location 1189 is 1191
9999 mem: location 1190 is 1183
9999 mem: location 1007 is 1187
9999 mem: skipping refcount at 1187
9998 run: address to copy to is 1189
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 18 -> 17
9999 mem: storing 0 in location 1189
 107 run: {end: ("address" "duplex-list" "character"), "lookup": ()} <- put {end: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1004 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1187
9999 mem: location 1003 is 1174
9999 mem: location 1004 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy to is 1194
9999 mem: location 1194 is 1187
9999 mem: skipping refcount at 1187
9999 mem: decrementing refcount of 1187: 17 -> 16
9999 mem: incrementing refcount of 1174: 20 -> 21
9999 mem: storing 1174 in location 1194
 107 run: reply {start: ("address" "duplex-list" "character"), "same-as-ingredient": "0"}
9999 mem: location 1003 is 1174
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 6
 106 run: reply {result: ("address" "duplex-list" "character")}, {editor: ("address" "editor-data"), "same-as-ingredient": "0"}
9999 mem: location 1125 is 1183
9999 mem: location 1119 is 1144
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1183
9999 mem: location 1431 is 0
9999 mem: incrementing refcount of 1183: 18 -> 19
9999 mem: storing 1183 in location 1431
 105 run: jump-unless {deleted-cells: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1431 is 1183
9998 run: jump-unless fell through
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1163
9999 mem: location 1424 is 0
9999 mem: incrementing refcount of 1163: 17 -> 18
9999 mem: storing 1163 in location 1424
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1370
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 1
9999 mem: storing 1 in location 1371
 105 run: {deleted-until: ("address" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1369 is 1174
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 106 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 21 -> 22
9999 mem: storing 1174 in location 1181
 106 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 106 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1191
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 17 -> 18
9999 mem: storing 1191 in location 1182
 106 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1191
9999 mem: location 1432 is 0
9999 mem: incrementing refcount of 1191: 18 -> 19
9999 mem: storing 1191 in location 1432
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 mem: new alloc: 1459
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: storing 0 in location 1461
9999 mem: storing 0 in location 1462
9999 mem: storing 0 in location 1463
9999 mem: storing 0 in location 1464
9999 mem: storing 0 in location 1465
9999 mem: storing 0 in location 1466
9999 mem: storing 0 in location 1467
9999 mem: storing 0 in location 1468
9999 mem: storing 0 in location 1469
9999 mem: storing 0 in location 1470
9999 mem: location 1378 is 0
9999 mem: incrementing refcount of 1459: 0 -> 1
9999 mem: storing 1459 in location 1378
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {2: "literal", "delete-operation": ()}, {save-row: "number", "before": ()}, {save-column: "number", "before": ()}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {deleted-cells: ("address" "duplex-list" "character"), "deleted": ()}, {before-cursor: ("address" "duplex-list" "character"), "delete-from": ()}, {deleted-until: ("address" "duplex-list" "character")}, {0: "literal", "never-coalesce": ()}
9999 mem: location 1372 is 1
9999 mem: location 1373 is 1
9999 mem: location 1422 is 1163
9999 mem: location 1370 is 1
9999 mem: location 1371 is 1
9999 mem: location 1424 is 1163
9999 mem: location 1431 is 1183
9999 mem: location 1369 is 1174
9999 mem: location 1432 is 1191
9999 mem: location 1378 is 1459
9999 mem: skipping refcount at 1459
9999 mem: location 1378 is 1459
9999 mem: skipping refcount at 1459
9999 mem: incrementing refcount of 1163: 18 -> 19
9999 mem: incrementing refcount of 1163: 19 -> 20
9999 mem: incrementing refcount of 1183: 19 -> 20
9999 mem: incrementing refcount of 1174: 22 -> 23
9999 mem: incrementing refcount of 1191: 19 -> 20
9999 mem: storing 2 in location 1460
9999 mem: storing 1 in location 1461
9999 mem: storing 1 in location 1462
9999 mem: storing 1163 in location 1463
9999 mem: storing 1 in location 1464
9999 mem: storing 1 in location 1465
9999 mem: storing 1163 in location 1466
9999 mem: storing 1183 in location 1467
9999 mem: storing 1174 in location 1468
9999 mem: storing 1191 in location 1469
9999 mem: storing 0 in location 1470
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1359 is 1144
9999 mem: location 1378 is 1459
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1167
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1144: 10 -> 11
9999 mem: storing 1144 in location 1170
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1459: 1 -> 2
9999 mem: storing 1459 in location 1171
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1155
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1155 is 1352
9999 mem: location 1172 is 0
9999 mem: incrementing refcount of 1352: 3 -> 4
9999 mem: storing 1352 in location 1172
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1171 is 1459
9999 mem: location 1172 is 1352
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1459: 2 -> 3
9999 mem: storing 1459 in location 1160
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1161 is 0
9999 mem: incrementing refcount of 1352: 4 -> 5
9999 mem: storing 1352 in location 1161
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1471
9999 mem: storing 0 in location 1471
9999 mem: storing 0 in location 1472
9999 mem: storing 0 in location 1473
9999 mem: location 1162 is 0
9999 mem: incrementing refcount of 1471: 0 -> 1
9999 mem: storing 1471 in location 1162
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1160 is 1459
9999 mem: location 1161 is 1352
9999 mem: location 1162 is 1471
9999 mem: skipping refcount at 1471
9999 mem: location 1162 is 1471
9999 mem: skipping refcount at 1471
9999 mem: incrementing refcount of 1459: 3 -> 4
9999 mem: incrementing refcount of 1352: 5 -> 6
9999 mem: storing 1459 in location 1472
9999 mem: storing 1352 in location 1473
 107 run: return {result: ("address" "list" "address" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1162 is 1471
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1471
9999 mem: location 1172 is 1352
9999 mem: skipping refcount at 1352
9999 mem: decrementing refcount of 1352: 6 -> 5
9999 mem: incrementing refcount of 1471: 1 -> 2
9999 mem: storing 1471 in location 1172
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1352
9999 mem: location 1156 is 0
9999 mem: location 1172 is 1471
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1155
9999 mem: location 1155 is 1352
9999 mem: skipping refcount at 1352
9999 mem: decrementing refcount of 1352: 5 -> 4
9999 mem: incrementing refcount of 1471: 2 -> 3
9999 mem: storing 1471 in location 1155
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1156
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1156 is 0
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1173 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1173
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1173 is 0
9999 mem: location 1170 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1156
9999 mem: location 1156 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1156
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1170 is 1144
9999 abandon: updating refcounts inside 1167: (array number)
9999 abandon: saving 1167 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1144
9999 mem: location 1359 is 1144
9999 mem: skipping refcount at 1144
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1144 in location 1359
 105 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1364
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1358 is 1008
9999 mem: location 1359 is 1144
9999 mem: location 1364 is 1
9999 abandon: updating refcounts inside 1355: (array number)
9999 abandon: saving 1355 in free-list of size 104
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1144
9998 run: result 2 is 1
9999 mem: location 1289 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1289
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1144 in location 1291
9999 mem: storing 1 in location 1304
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1304 is 1
9998 run: jump-unless fell through
 104 run: {screen: ("address" "screen")} <- editor-render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1289 is 1008
9999 mem: location 1291 is 1144
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1135
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1138 is 0
9999 mem: incrementing refcount of 1008: 31 -> 32
9999 mem: storing 1008 in location 1138
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1139 is 0
9999 mem: incrementing refcount of 1144: 11 -> 12
9999 mem: storing 1144 in location 1139
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1139 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1139 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1140
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1139 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1139 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 9
9999 mem: storing 9 in location 1141
 105 run: {row: "number"}, {column: "number"} <- render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1138 is 1008
9999 mem: location 1139 is 1144
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1207
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1210 is 0
9999 mem: incrementing refcount of 1008: 32 -> 33
9999 mem: storing 1008 in location 1210
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1211 is 0
9999 mem: incrementing refcount of 1144: 12 -> 13
9999 mem: storing 1144 in location 1211
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1211 is 1144
9998 run: jumping to instruction 6
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1212
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1210 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1008: 33 -> 34
9999 mem: storing 1008 in location 1181
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1181 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1182
 107 run: return {height: "number"}
9999 mem: location 1182 is 5
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1213
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 9
9999 mem: storing 9 in location 1214
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1163
9999 mem: location 1215 is 0
9999 mem: incrementing refcount of 1163: 20 -> 21
9999 mem: storing 1163 in location 1215
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1163
9999 mem: location 1216 is 0
9999 mem: incrementing refcount of 1163: 21 -> 22
9999 mem: storing 1163 in location 1216
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1163
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1163: 22 -> 23
9999 mem: storing 1163 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1163
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 1174
9999 mem: location 1166 is 0
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 1174
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1174: 23 -> 24
9999 mem: storing 1174 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1174
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1174
9999 mem: location 1215 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 23 -> 22
9999 mem: incrementing refcount of 1174: 24 -> 25
9999 mem: storing 1174 in location 1215
 106 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1217
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1218
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1212 is 0
9999 mem: storing 0 in location 1219
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1220
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 1
9999 mem: storing 1 in location 1221
9990 schedule: render/editor-render/editor-event-loop/run_1001/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1148
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1148 is 1174
9999 mem: location 1222 is 0
9999 mem: incrementing refcount of 1174: 25 -> 26
9999 mem: storing 1174 in location 1222
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1218 is 1
9999 mem: location 1219 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 34 -> 35
9999 mem: storing 1008 in location 1160
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1161
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 1
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1210 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1210
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1174
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 0
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1225
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1191
9999 mem: location 1177 is 1163
9999 mem: location 1215 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1175
9998 run: its type is "character"
9999 mem: location 1175 is 49
9999 mem: storing 49 in location 1226
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 49
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1474
9999 mem: storing 0 in location 1474
9999 mem: storing 0 in location 1475
9999 mem: storing 0 in location 1476
9999 mem: storing 0 in location 1477
9999 mem: storing 0 in location 1478
9999 mem: storing 0 in location 1479
9999 mem: storing 0 in location 1480
9999 mem: storing 0 in location 1481
9999 mem: storing 0 in location 1482
9999 mem: storing 0 in location 1483
9999 mem: storing 0 in location 1484
9999 mem: storing 0 in location 1485
9999 mem: storing 10 in location 1475
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1477
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 49 in location 1478
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1477 is 7
9999 mem: storing 1 in location 1479
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1478 is 49
9999 mem: storing 0 in location 1480
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1480 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1481
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1481 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1478 is 49
9999 mem: storing 0 in location 1483
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1483 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1484
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1484 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1477 is 7
9999 abandon: updating refcounts inside 1474: (array number)
9999 abandon: saving 1474 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 49
9999 mem: storing 0 in location 1227
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 0
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 49
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 35 -> 36
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 49 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 49
  90 print-character: 49 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 49
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 0
9999 mem: storing 10 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 16 -> 17
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 49
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 49
9999 mem: location 1252 is 7
9999 mem: storing 49 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 10
9998 run: address to copy to is 1036
9999 mem: location 1269 is 49
9999 mem: location 1270 is 7
9999 mem: storing 49 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 1
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1174
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 26 -> 27
9999 mem: storing 1174 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1191
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 20 -> 21
9999 mem: storing 1191 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: location 1215 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 27 -> 26
9999 mem: incrementing refcount of 1191: 21 -> 22
9999 mem: storing 1191 in location 1215
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1163
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1163: 22 -> 23
9999 mem: storing 1163 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1163
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 167
9999 mem: location 1165 is 1174
9999 mem: location 1166 is 0
9999 mem: location 1181 is 1163
9999 mem: skipping refcount at 1163
9998 run: address to copy is 1165
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1165 is 1174
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1174: 26 -> 27
9999 mem: storing 1174 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1174
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1174
9999 mem: location 1216 is 1163
9999 mem: skipping refcount at 1163
9999 mem: decrementing refcount of 1163: 23 -> 22
9999 mem: incrementing refcount of 1174: 27 -> 28
9999 mem: storing 1174 in location 1216
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 0
9999 mem: storing 1 in location 1219
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1191
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1
9999 mem: storing 1 in location 1225
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1174
9999 mem: location 1222 is 1174
9999 mem: skipping refcount at 1174
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1174 in location 1222
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1174
9999 mem: location 1215 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1192
9998 run: its type is "character"
9999 mem: location 1192 is 10
9999 mem: storing 10 in location 1226
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1474
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1477
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1478
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1477 is 7
9999 mem: storing 1 in location 1479
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1478 is 10
9999 mem: storing 0 in location 1480
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1480 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1481
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1481 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1478 is 10
9999 mem: storing 0 in location 1483
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1483 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1484
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1484 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1477 is 7
9999 abandon: updating refcounts inside 1474: (array number)
9999 abandon: saving 1474 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 10
9999 mem: storing 1 in location 1227
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1
9999 mem: storing 1 in location 1224
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 106 run: {left-of-cursor?: "boolean"} <- lesser-than {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1228
 106 run: jump-unless {left-of-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jumping to instruction 46
 106 run: clear-line-delimited {screen: ("address" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1219 is 1
9999 mem: location 1214 is 9
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1008: 36 -> 37
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1120
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1121
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1122
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1123
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 1
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 1
9999 mem: storing 11 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 17 -> 18
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 11
9998 run: address to copy to is 1038
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1038
9999 mem: storing 7 in location 1039
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 2
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 1
9999 mem: storing 2 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 2
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 2
9999 mem: storing 12 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 18 -> 19
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 12
9998 run: address to copy to is 1040
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1040
9999 mem: storing 7 in location 1041
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 3
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 2
9999 mem: storing 3 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 3
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 39 -> 40
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 3
9999 mem: storing 13 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 19 -> 20
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 13
9998 run: address to copy to is 1042
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 4 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 4
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 3
9999 mem: storing 4 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 4
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 40 -> 41
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 4
9999 mem: storing 14 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 20 -> 21
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 14
9998 run: address to copy to is 1044
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1044
9999 mem: storing 7 in location 1045
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 5 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 5
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 4
9999 mem: storing 5 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 5
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 5
9999 mem: storing 15 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 21 -> 22
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 15
9998 run: address to copy to is 1046
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1046
9999 mem: storing 7 in location 1047
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 6 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 6
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 5
9999 mem: storing 6 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 6
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
9990 schedule: print/clear-line-delimited/render/editor-render/editor-event-loop/run_1001/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 42 -> 43
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 6
9999 mem: storing 16 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 22 -> 23
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 16
9998 run: address to copy to is 1048
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1048
9999 mem: storing 7 in location 1049
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 7 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 7
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 6
9999 mem: storing 7 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 7
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 43 -> 44
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 7
9999 mem: storing 17 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 23 -> 24
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 17
9998 run: address to copy to is 1050
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1050
9999 mem: storing 7 in location 1051
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 8 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 8
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 7
9999 mem: storing 8 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 8
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 8
9999 mem: storing 18 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 24 -> 25
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 18
9998 run: address to copy to is 1052
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1052
9999 mem: storing 7 in location 1053
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 9 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 9
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 8
9999 mem: storing 9 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 9
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 45 -> 46
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 9
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1256 is 10
9999 mem: storing 10 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 10
9999 mem: location 1260 is 9
9999 mem: storing 19 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 25 -> 26
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 19
9998 run: address to copy to is 1054
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1054
9999 mem: storing 7 in location 1055
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1271 is 9
9999 mem: storing 1 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 1
9998 run: jumping to instruction 80
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 9
9999 mem: storing 10 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 10
9999 mem: location 1121 is 9
9999 mem: storing 1 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1119 is 1008
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1218 is 1
9999 mem: storing 2 in location 1218
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1212 is 0
9999 mem: storing 0 in location 1219
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1218 is 2
9999 mem: location 1219 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 46 -> 47
9999 mem: storing 1008 in location 1160
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1161
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 2
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1210 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1210
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1191: 22 -> 23
9999 mem: storing 1191 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1174
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1195: 14 -> 15
9999 mem: storing 1195 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1195
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: location 1215 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 23 -> 22
9999 mem: incrementing refcount of 1195: 15 -> 16
9999 mem: storing 1195 in location 1215
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1174
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1174: 28 -> 29
9999 mem: storing 1174 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1174
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 49
9999 mem: location 1176 is 1191
9999 mem: location 1177 is 1163
9999 mem: location 1181 is 1174
9999 mem: skipping refcount at 1174
9998 run: address to copy is 1176
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1176 is 1191
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1191: 22 -> 23
9999 mem: storing 1191 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1191
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: location 1216 is 1174
9999 mem: skipping refcount at 1174
9999 mem: decrementing refcount of 1174: 29 -> 28
9999 mem: incrementing refcount of 1191: 23 -> 24
9999 mem: storing 1191 in location 1216
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1195
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1215 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1196
9998 run: its type is "character"
9999 mem: location 1196 is 52
9999 mem: storing 52 in location 1226
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 52
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1474
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1477
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 52 in location 1478
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1477 is 7
9999 mem: storing 1 in location 1479
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1478 is 52
9999 mem: storing 0 in location 1480
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1480 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1481
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1481 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1478 is 52
9999 mem: storing 0 in location 1483
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1483 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1484
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1484 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1477 is 7
9999 abandon: updating refcounts inside 1474: (array number)
9999 abandon: saving 1474 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 52
9999 mem: storing 0 in location 1227
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 0
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 52
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 47 -> 48
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 52 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 52
  90 print-character: 52 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 52
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 0
9999 mem: storing 20 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 26 -> 27
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 52
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 52
9999 mem: location 1252 is 7
9999 mem: storing 52 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 20
9998 run: address to copy to is 1056
9999 mem: location 1269 is 52
9999 mem: location 1270 is 7
9999 mem: storing 52 in location 1056
9999 mem: storing 7 in location 1057
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 1
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1195
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1195: 16 -> 17
9999 mem: storing 1195 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1199: 14 -> 15
9999 mem: storing 1199 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1199
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: location 1215 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 17 -> 16
9999 mem: incrementing refcount of 1199: 15 -> 16
9999 mem: storing 1199 in location 1215
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1191: 24 -> 25
9999 mem: storing 1191 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 10
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1174
9999 mem: location 1181 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1195: 16 -> 17
9999 mem: storing 1195 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1195
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: location 1216 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 25 -> 24
9999 mem: incrementing refcount of 1195: 17 -> 18
9999 mem: storing 1195 in location 1216
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 0
9999 mem: storing 1 in location 1219
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1199
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 53
9999 mem: storing 53 in location 1226
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 53
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1474
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1477
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 53 in location 1478
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1477 is 7
9999 mem: storing 1 in location 1479
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1478 is 53
9999 mem: storing 0 in location 1480
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1480 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1481
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1481 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1478 is 53
9999 mem: storing 0 in location 1483
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1483 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1484
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1484 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1477 is 7
9999 abandon: updating refcounts inside 1474: (array number)
9999 abandon: saving 1474 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 53
9999 mem: storing 0 in location 1227
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 53
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 48 -> 49
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 53 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 53
  90 print-character: 53 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 53
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 1
9999 mem: storing 21 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 27 -> 28
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 53
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 53
9999 mem: location 1252 is 7
9999 mem: storing 53 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 21
9998 run: address to copy to is 1058
9999 mem: location 1269 is 53
9999 mem: location 1270 is 7
9999 mem: storing 53 in location 1058
9999 mem: storing 7 in location 1059
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 2
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1199: 16 -> 17
9999 mem: storing 1199 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1203: 12 -> 13
9999 mem: storing 1203 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1203
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 17 -> 16
9999 mem: incrementing refcount of 1203: 13 -> 14
9999 mem: storing 1203 in location 1215
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1195
9999 trace: incrementing callstack depth to 6
9990 schedule: next_2/render/editor-render/editor-event-loop/run_1001/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1195: 18 -> 19
9999 mem: storing 1195 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 52
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1181 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1199: 16 -> 17
9999 mem: storing 1199 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1199
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: location 1216 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 19 -> 18
9999 mem: incrementing refcount of 1199: 17 -> 18
9999 mem: storing 1199 in location 1216
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 1
9999 mem: storing 2 in location 1219
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1203
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 54
9999 mem: storing 54 in location 1226
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 54
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1474
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1477
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 54 in location 1478
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1477 is 7
9999 mem: storing 1 in location 1479
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1478 is 54
9999 mem: storing 0 in location 1480
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1480 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1481
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1481 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1478 is 54
9999 mem: storing 0 in location 1483
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1483 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1477 is 7
9999 mem: storing 0 in location 1484
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1484 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1477 is 7
9999 abandon: updating refcounts inside 1474: (array number)
9999 abandon: saving 1474 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 54
9999 mem: storing 0 in location 1227
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1008
9999 mem: location 1226 is 54
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 49 -> 50
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 54 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1254
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 54
  90 print-character: 54 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 54
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 2
9999 mem: storing 22 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 28 -> 29
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 54
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 54
9999 mem: location 1252 is 7
9999 mem: storing 54 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 22
9998 run: address to copy to is 1060
9999 mem: location 1269 is 54
9999 mem: location 1270 is 7
9999 mem: storing 54 in location 1060
9999 mem: storing 7 in location 1061
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 3
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1215 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1203: 14 -> 15
9999 mem: storing 1203 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1203
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 54
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1181 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: location 1182 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 0
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 15 -> 14
9999 mem: storing 0 in location 1215
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1199: 18 -> 19
9999 mem: storing 1199 in location 1181
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1181 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1203: 14 -> 15
9999 mem: storing 1203 in location 1182
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1182 is 1203
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: location 1216 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 19 -> 18
9999 mem: incrementing refcount of 1203: 15 -> 16
9999 mem: storing 1203 in location 1216
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 2
9999 mem: storing 3 in location 1219
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 70
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1215 is 0
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1147
9999 mem: location 1147 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1147
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1224
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 3
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1231
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1224 is 0
9999 mem: location 1231 is 0
9999 mem: storing 0 in location 1232
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1218 is 2
9999 mem: location 1220 is 1
9999 mem: storing 0 in location 1233
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1232 is 0
9999 mem: location 1233 is 0
9999 mem: storing 0 in location 1234
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 82
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1218 is 2
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1151
9999 mem: storing 2 in location 1151
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1220 is 1
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1152
9999 mem: storing 1 in location 1152
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1221 is 1
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1153
9999 mem: storing 1 in location 1153
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1222 is 1174
9999 mem: location 1211 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1148
9999 mem: location 1148 is 1174
9999 mem: skipping refcount at 1174
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1174 in location 1148
 106 run: return {row: "number"}, {column: "number"}, {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1218 is 2
9999 mem: location 1219 is 3
9999 mem: location 1210 is 1008
9999 mem: location 1211 is 1144
9999 abandon: updating refcounts inside 1207: (array number)
9999 abandon: saving 1207 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 2
9998 run: result 1 is 3
9999 mem: storing 2 in location 1142
9999 mem: storing 3 in location 1143
 105 run: clear-line-delimited {screen: ("address" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1138 is 1008
9999 mem: location 1143 is 3
9999 mem: location 1141 is 9
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1008: 50 -> 51
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1120
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1121
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1122
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1123
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 3
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 51 -> 52
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 3
9999 mem: storing 23 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 29 -> 30
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 23
9998 run: address to copy to is 1062
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1062
9999 mem: storing 7 in location 1063
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 4 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 4
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 3
9999 mem: storing 4 in location 1120
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 4
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 52 -> 53
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 4
9999 mem: storing 24 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 30 -> 31
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 24
9998 run: address to copy to is 1064
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1064
9999 mem: storing 7 in location 1065
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 5 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 5
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 4
9999 mem: storing 5 in location 1120
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 5
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 53 -> 54
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 5
9999 mem: storing 25 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 31 -> 32
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 25
9998 run: address to copy to is 1066
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1066
9999 mem: storing 7 in location 1067
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 6 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 6
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 5
9999 mem: storing 6 in location 1120
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 6
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 54 -> 55
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 6
9999 mem: storing 26 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 32 -> 33
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 26
9998 run: address to copy to is 1068
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1068
9999 mem: storing 7 in location 1069
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 7 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 7
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 6
9999 mem: storing 7 in location 1120
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 7
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 55 -> 56
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 7
9999 mem: storing 27 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 33 -> 34
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 27
9998 run: address to copy to is 1070
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1070
9999 mem: storing 7 in location 1071
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 8 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 8
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 7
9999 mem: storing 8 in location 1120
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 8
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 56 -> 57
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
9990 schedule: print/clear-line-delimited/editor-render/editor-event-loop/run_1001/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 8
9999 mem: storing 28 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 34 -> 35
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 28
9998 run: address to copy to is 1072
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1072
9999 mem: storing 7 in location 1073
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 9 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 9
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 8
9999 mem: storing 9 in location 1120
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 9
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 57 -> 58
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 9
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1256 is 10
9999 mem: storing 20 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 20
9999 mem: location 1260 is 9
9999 mem: storing 29 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 35 -> 36
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 29
9998 run: address to copy to is 1074
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1074
9999 mem: storing 7 in location 1075
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1271 is 9
9999 mem: storing 1 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 1
9998 run: jumping to instruction 80
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 9
9999 mem: storing 10 in location 1120
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 10
9999 mem: location 1121 is 9
9999 mem: storing 1 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 1
9998 run: jumping to instruction 16
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1119 is 1008
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1142 is 2
9999 mem: storing 3 in location 1142
 105 run: draw-horizontal {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}, {9480: "literal", "horizontal-dotted": ()}
9999 mem: location 1138 is 1008
9999 mem: location 1142 is 3
9999 mem: location 1140 is 0
9999 mem: location 1141 is 9
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1305
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1308 is 0
9999 mem: incrementing refcount of 1008: 58 -> 59
9999 mem: storing 1008 in location 1308
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1309
 106 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1310
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1311
 106 run: {style: "character"}, {style-found?: "boolean"} <- next-ingredient 
9999 mem: storing 9480 in location 1312
9999 mem: storing 1 in location 1313
 106 run: jump-if {style-found?: "boolean"}, {: "offset"}
9999 mem: location 1313 is 1
9998 run: jumping to instruction 9
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1314
9999 mem: storing 0 in location 1315
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1315 is 0
9998 run: jump-if fell through
 106 run: {color: "number"} <- copy {245: "literal", "grey": ()}
9999 mem: storing 245 in location 1314
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1317 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1316
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {x: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1309 is 3
9999 mem: location 1310 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 59 -> 60
9999 mem: storing 1008 in location 1160
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1161
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 3
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1308 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1308
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 0
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 60 -> 61
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 0
9999 mem: storing 30 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 36 -> 37
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 30
9998 run: address to copy to is 1076
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1076
9999 mem: storing 245 in location 1077
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 1
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 0
9999 mem: storing 1 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 1
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 61 -> 62
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 1
9999 mem: storing 31 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 37 -> 38
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 31
9998 run: address to copy to is 1078
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1078
9999 mem: storing 245 in location 1079
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 2
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 1
9999 mem: storing 2 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 2
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 62 -> 63
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 2
9999 mem: storing 32 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 38 -> 39
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 32
9998 run: address to copy to is 1080
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1080
9999 mem: storing 245 in location 1081
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 3
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 2
9999 mem: storing 3 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 3
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 63 -> 64
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 3
9999 mem: storing 33 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 39 -> 40
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 33
9998 run: address to copy to is 1082
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1082
9999 mem: storing 245 in location 1083
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 4 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 4
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 3
9999 mem: storing 4 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 4
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 64 -> 65
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 4
9999 mem: storing 34 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 40 -> 41
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 34
9998 run: address to copy to is 1084
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1084
9999 mem: storing 245 in location 1085
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 5 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 5
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 4
9999 mem: storing 5 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 5
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 65 -> 66
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 5
9999 mem: storing 35 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 41 -> 42
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 35
9998 run: address to copy to is 1086
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1086
9999 mem: storing 245 in location 1087
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 6 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 6
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 5
9999 mem: storing 6 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 6
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 66 -> 67
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
9990 schedule: print/draw-horizontal/editor-render/editor-event-loop/run_1001/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 6
9999 mem: storing 36 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 42 -> 43
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 36
9998 run: address to copy to is 1088
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1088
9999 mem: storing 245 in location 1089
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 7 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 7
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 6
9999 mem: storing 7 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 7
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 67 -> 68
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 7
9999 mem: storing 37 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 43 -> 44
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 37
9998 run: address to copy to is 1090
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1090
9999 mem: storing 245 in location 1091
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 8 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 8
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 7
9999 mem: storing 8 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 8
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 68 -> 69
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 8
9999 mem: storing 38 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 44 -> 45
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 38
9998 run: address to copy to is 1092
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1092
9999 mem: storing 245 in location 1093
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 9 in location 1260
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 9
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 8
9999 mem: storing 9 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 9
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1308 is 1008
9999 mem: location 1312 is 9480
9999 mem: location 1314 is 245
9999 mem: location 1316 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 69 -> 70
9999 mem: storing 1008 in location 1250
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1251
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1252
9999 mem: storing 1 in location 1253
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 3
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1260
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 9
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1261
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 3
9999 mem: location 1256 is 10
9999 mem: storing 30 in location 1264
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 30
9999 mem: location 1260 is 9
9999 mem: storing 39 in location 1264
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 45 -> 46
9999 mem: storing 1014 in location 1265
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 9480
9999 mem: storing 0 in location 1267
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 9480
9999 mem: location 1252 is 245
9999 mem: storing 9480 in location 1269
9999 mem: storing 245 in location 1270
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 39
9998 run: address to copy to is 1094
9999 mem: location 1269 is 9480
9999 mem: location 1270 is 245
9999 mem: storing 9480 in location 1094
9999 mem: storing 245 in location 1095
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1271 is 9
9999 mem: storing 1 in location 1272
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 1
9998 run: jumping to instruction 80
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1310 is 9
9999 mem: storing 10 in location 1310
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1310 is 10
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1318
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 0
9998 run: jumping to instruction 27
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1308 is 1008
9999 abandon: updating refcounts inside 1305: (array number)
9999 abandon: saving 1305 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1142 is 3
9999 mem: storing 4 in location 1142
 105 run: clear-screen-from {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1138 is 1008
9999 mem: location 1142 is 4
9999 mem: location 1140 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 9
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1008: 70 -> 71
9999 mem: storing 1008 in location 1003
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1004
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1006
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1007
 106 run: jump-if {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 4
9999 mem: location 1005 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 71 -> 72
9999 mem: storing 1008 in location 1160
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1161
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 4
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1003
 106 run: clear-line-delimited {screen: ("address" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1005 is 0
9999 mem: location 1007 is 9
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1008: 72 -> 73
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1120
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1121
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1122
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1123
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 0
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 73 -> 74
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 0
9999 mem: storing 40 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 46 -> 47
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 40
9998 run: address to copy to is 1096
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1096
9999 mem: storing 7 in location 1097
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 1
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 0
9999 mem: storing 1 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 1
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 74 -> 75
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 1
9999 mem: storing 41 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 47 -> 48
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 41
9998 run: address to copy to is 1098
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1098
9999 mem: storing 7 in location 1099
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 2
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 1
9999 mem: storing 2 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 2
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 75 -> 76
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 2
9999 mem: storing 42 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 48 -> 49
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 42
9998 run: address to copy to is 1100
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1100
9999 mem: storing 7 in location 1101
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 3
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 2
9999 mem: storing 3 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 3
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 76 -> 77
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 3
9999 mem: storing 43 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 49 -> 50
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 43
9998 run: address to copy to is 1102
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1102
9999 mem: storing 7 in location 1103
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
9990 schedule: print/clear-line-delimited/clear-screen-from/editor-render/editor-event-loop/run_1001/scenario_editor-deletes-to-end-of-line-with-ctrl-k
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 4 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 4
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 3
9999 mem: storing 4 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 4
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 77 -> 78
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 4
9999 mem: storing 44 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 50 -> 51
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 44
9998 run: address to copy to is 1104
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1104
9999 mem: storing 7 in location 1105
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 5 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 5
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 4
9999 mem: storing 5 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 5
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 78 -> 79
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 5
9999 mem: storing 45 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 51 -> 52
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 45
9998 run: address to copy to is 1106
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1106
9999 mem: storing 7 in location 1107
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 6 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 6
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 5
9999 mem: storing 6 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 6
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 6
9999 mem: storing 46 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 52 -> 53
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 46
9998 run: address to copy to is 1108
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1108
9999 mem: storing 7 in location 1109
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 7 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 7
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 6
9999 mem: storing 7 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 7
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 80 -> 81
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 7
9999 mem: storing 47 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 53 -> 54
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 47
9998 run: address to copy to is 1110
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1110
9999 mem: storing 7 in location 1111
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 7
9999 mem: storing 8 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 8
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 7
9999 mem: storing 8 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 8
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 81 -> 82
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 8
9999 mem: storing 48 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 54 -> 55
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 48
9998 run: address to copy to is 1112
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1112
9999 mem: storing 7 in location 1113
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 8
9999 mem: location 1271 is 9
9999 mem: storing 0 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 8
9999 mem: storing 9 in location 1260
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1260 is 9
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 8
9999 mem: storing 9 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 9
9999 mem: location 1121 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1247
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 82 -> 83
9999 mem: storing 1008 in location 1250
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1251
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1252
9999 mem: storing 1 in location 1253
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1254
9999 mem: storing 1 in location 1255
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1255 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1251 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1250 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1256
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1257
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1258
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1258 is 4
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1257 is 5
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1260
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1260 is 9
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1256 is 10
9999 mem: storing 1 in location 1259
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1261
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1261 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1256 is 10
9999 mem: storing 40 in location 1264
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1264 is 40
9999 mem: location 1260 is 9
9999 mem: storing 49 in location 1264
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1014: 55 -> 56
9999 mem: storing 1014 in location 1265
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1266
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1251 is 32
9999 mem: storing 0 in location 1267
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1251 is 32
9999 mem: location 1252 is 7
9999 mem: storing 32 in location 1269
9999 mem: storing 7 in location 1270
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1265 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1264 is 49
9998 run: address to copy to is 1114
9999 mem: location 1269 is 32
9999 mem: location 1270 is 7
9999 mem: storing 32 in location 1114
9999 mem: storing 7 in location 1115
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1256 is 10
9999 mem: storing 9 in location 1271
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 9
9999 mem: location 1271 is 9
9999 mem: storing 1 in location 1272
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 1
9998 run: jumping to instruction 80
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1250 is 1008
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1120 is 9
9999 mem: storing 10 in location 1120
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1120 is 10
9999 mem: location 1121 is 9
9999 mem: storing 1 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1119 is 1008
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: clear-rest-of-screen {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 4
9999 mem: location 1006 is 0
9999 mem: location 1007 is 9
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1486
9999 mem: storing 0 in location 1486
9999 mem: storing 0 in location 1487
9999 mem: storing 0 in location 1488
9999 mem: storing 0 in location 1489
9999 mem: storing 0 in location 1490
9999 mem: storing 0 in location 1491
9999 mem: storing 0 in location 1492
9999 mem: storing 0 in location 1493
9999 mem: storing 0 in location 1494
9999 mem: storing 7 in location 1487
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1489 is 0
9999 mem: incrementing refcount of 1008: 83 -> 84
9999 mem: storing 1008 in location 1489
 107 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1490
 107 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1491
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1492
 107 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1490 is 4
9999 mem: storing 5 in location 1490
 107 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1489 is 1008
9999 mem: location 1490 is 5
9999 mem: location 1491 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 84 -> 85
9999 mem: storing 1008 in location 1160
 108 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1161
 108 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1162
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 5
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 5 in location 1011
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: location 1489 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1489
 107 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1489 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1008: 85 -> 86
9999 mem: storing 1008 in location 1181
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1181 is 1008
9998 run: jump-unless fell through
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1181 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1182
 108 run: return {height: "number"}
9999 mem: location 1182 is 5
9999 abandon: updating refcounts inside 1178: (array number)
9999 abandon: saving 1178 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 5
9999 mem: storing 5 in location 1493
 107 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1490 is 5
9999 mem: location 1493 is 5
9999 mem: storing 1 in location 1494
 107 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1494 is 1
9998 run: jumping to instruction 15
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1489 is 1008
9999 abandon: updating refcounts inside 1486: (array number)
9999 abandon: saving 1486 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
 105 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1138 is 1008
9999 mem: location 1139 is 1144
9999 abandon: updating refcounts inside 1135: (array number)
9999 abandon: saving 1135 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1289 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1289
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1152
9998 run: its type is "number"
9999 mem: location 1152 is 1
9999 mem: storing 1 in location 1292
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1163
9999 mem: location 1147 is 0
9999 mem: location 1148 is 1174
9999 mem: location 1149 is 0
9999 mem: location 1150 is 9
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1
9999 mem: location 1154 is 1
9999 mem: location 1155 is 1471
9999 mem: location 1156 is 0
9999 mem: location 1291 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1153
9998 run: its type is "number"
9999 mem: location 1153 is 1
9999 mem: storing 1 in location 1293
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1289 is 1008
9999 mem: location 1292 is 1
9999 mem: location 1293 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1157
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1008: 86 -> 87
9999 mem: storing 1008 in location 1160
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1161
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1162
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1160 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1161 is 1
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1162 is 1
9999 mem: location 1160 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1160 is 1008
9999 abandon: updating refcounts inside 1157: (array number)
9999 abandon: saving 1157 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1289 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1289
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1290 is 1283
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1305
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1308 is 0
9999 mem: incrementing refcount of 1283: 3 -> 4
9999 mem: storing 1283 in location 1308
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1308 is 1283
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 2
9999 mem: location 1285 is 1273
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy is 1284
9998 run: its type is "number"
9999 mem: location 1284 is 2
9999 mem: storing 2 in location 1309
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9999 mem: location 1284 is 2
9999 mem: location 1285 is 1273
9999 mem: location 1308 is 1283
9999 mem: skipping refcount at 1283
9998 run: address to copy is 1285
9998 run: its type is ("address" "array" "event")
9999 mem: location 1285 is 1273
9999 mem: location 1310 is 0
9999 mem: incrementing refcount of 1273: 3 -> 4
9999 mem: storing 1273 in location 1310
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1310 is 1273
9999 mem: skipping refcount at 1273
9999 mem: storing 2 in location 1311
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1309 is 2
9999 mem: location 1311 is 2
9999 mem: storing 1 in location 1312
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1178
9999 mem: location 1313 is 0
9999 mem: incrementing refcount of 1178: 0 -> 1
9999 mem: storing 1178 in location 1313
 105 run: return {dummy: ("address" "event"), "lookup": ()}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1313 is 1178
9999 mem: skipping refcount at 1178
9999 mem: location 1179 is 0
9999 mem: location 1180 is 0
9999 mem: location 1181 is 0
9999 mem: location 1182 is 0
9999 mem: location 1308 is 1283
9999 abandon: updating refcounts inside 1305: (array number)
9999 abandon: saving 1305 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1283
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: location 1290 is 1283
9999 mem: skipping refcount at 1283
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1283 in location 1290
9999 mem: storing 1 in location 1298
9999 mem: storing 1 in location 1299
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1298 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {console: ("address" "console"), "same-as-ingredient": "1"}, {editor: ("address" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1289 is 1008
9999 mem: location 1290 is 1283
9999 mem: location 1291 is 1144
9999 abandon: updating refcounts inside 1286: (array number)
9999 abandon: saving 1286 in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .          .\n    .1         .\n    .456       .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
