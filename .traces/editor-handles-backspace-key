 102 run: assume-console {"\n    left-click 1, 1\n    press backspace\n  ": "literal-string"}
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "literal"}
9993 parse:   ingredient: {1: "literal"}
9992 load: after rewriting: left-click {1: "literal"}, {1: "literal"}
9993 parse: instruction: press
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {backspace: ()}
9992 load: after rewriting: press {backspace: ()}
9999 mem: storing 'left-click' event starting at 1278
9999 mem: storing 'press' event starting at 1282
9999 mem: storing console in 1286
9999 mem: storing console data in 1288
 102 run: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n    4:number <- get *2:address:editor-data, cursor-row:offset\n    5:number <- get *2:address:editor-data, cursor-column:offset\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {console: ("address" "console")}
9993 parse:   ingredient: {2: ("address" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-row: "offset"}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-column: "offset"}
9993 parse:   product: {5: "number"}
9992 load: after rewriting: {5: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9992 transform: console => ("address" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element cursor-row of type editor-data is at offset 7
9993 name: element cursor-column of type editor-data is at offset 8
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")} -> {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform: get ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1286
9999 mem: location 2 is 1140
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1289
9999 mem: storing 0 in location 1289
9999 mem: storing 0 in location 1290
9999 mem: storing 0 in location 1291
9999 mem: storing 0 in location 1292
9999 mem: storing 0 in location 1293
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 0 in location 1299
9999 mem: storing 0 in location 1300
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: storing 0 in location 1305
9999 mem: storing 0 in location 1306
9999 mem: storing 0 in location 1307
9999 mem: storing 17 in location 1290
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1292
9999 mem: incrementing refcount of 1008: 65 -> 66
 104 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1286 in location 1293
9999 mem: incrementing refcount of 1286: 0 -> 1
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1294
9999 mem: incrementing refcount of 1140: 6 -> 7
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1295
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1296
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1292 is 1008
9999 mem: location 1295 is 1
9999 mem: location 1296 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1156
9999 mem: incrementing refcount of 1008: 66 -> 67
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1158
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 0
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 67 -> 66
9999 mem: storing 1008 in location 1292
9999 mem: incrementing refcount of 1008: 66 -> 67
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1293 is 1286
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1253
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1286 in location 1256
9999 mem: incrementing refcount of 1286: 1 -> 2
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1256 is 1286
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 0
9999 mem: location 1288 is 1276
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy is 1287
9998 run: its type is "number"
9999 mem: location 1287 is 0
9999 mem: storing 0 in location 1257
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 0
9999 mem: location 1288 is 1276
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy is 1288
9998 run: its type is ("address" "array" "event")
9999 mem: location 1288 is 1276
9999 mem: storing 1276 in location 1258
9999 mem: incrementing refcount of 1276: 1 -> 2
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1258 is 1276
9999 mem: skipping refcount at 1276
9999 mem: storing 2 in location 1259
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1257 is 0
9999 mem: location 1259 is 2
9999 mem: storing 0 in location 1260
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1258 is 1276
9999 mem: skipping refcount at 1276
9998 run: base address is 1277
9999 mem: location 1257 is 0
9998 run: address to copy is 1278
9998 run: its type is event
9999 mem: location 1278 is 2
9999 mem: location 1279 is 65513
9999 mem: location 1280 is 1
9999 mem: location 1281 is 1
9999 mem: storing 2 in location 1262
9999 mem: storing 65513 in location 1263
9999 mem: storing 1 in location 1264
9999 mem: storing 1 in location 1265
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1257 is 0
9999 mem: storing 1 in location 1257
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 0
9999 mem: location 1288 is 1276
9999 mem: location 1257 is 1
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy to is 1287
9999 mem: storing 1 in location 1287
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1262 is 2
9999 mem: location 1263 is 65513
9999 mem: location 1264 is 1
9999 mem: location 1265 is 1
9999 mem: location 1256 is 1286
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 1, 1]
9998 run: result 1 is 1286
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1297
9999 mem: storing 65513 in location 1298
9999 mem: storing 1 in location 1299
9999 mem: storing 1 in location 1300
9999 mem: decrementing refcount of 1286: 2 -> 1
9999 mem: storing 1286 in location 1293
9999 mem: incrementing refcount of 1286: 1 -> 2
9999 mem: storing 1 in location 1301
9999 mem: storing 0 in location 1302
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1302 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1297 is 2
9999 mem: location 1298 is 65513
9999 mem: location 1299 is 1
9999 mem: location 1300 is 1
9999 mem: storing 65513 in location 1303
9999 mem: storing 1 in location 1304
9999 mem: storing 1 in location 1305
9999 mem: storing 1 in location 1306
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 1
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {t: "touch-event"}
9999 mem: location 1292 is 1008
9999 mem: location 1294 is 1140
9999 mem: location 1303 is 65513
9999 mem: location 1304 is 1
9999 mem: location 1305 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1308
9999 mem: storing 0 in location 1308
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: storing 0 in location 1311
9999 mem: storing 0 in location 1312
9999 mem: storing 0 in location 1313
9999 mem: storing 0 in location 1314
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
9999 mem: storing 0 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
9999 mem: storing 0 in location 1329
9999 mem: storing 0 in location 1330
9999 mem: storing 0 in location 1331
9999 mem: storing 0 in location 1332
9999 mem: storing 0 in location 1333
9999 mem: storing 0 in location 1334
9999 mem: storing 0 in location 1335
9999 mem: storing 0 in location 1336
9999 mem: storing 0 in location 1337
9999 mem: storing 0 in location 1338
9999 mem: storing 0 in location 1339
9999 mem: storing 0 in location 1340
9999 mem: storing 31 in location 1309
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1311
9999 mem: incrementing refcount of 1008: 67 -> 68
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1312
9999 mem: incrementing refcount of 1140: 7 -> 8
 105 run: {t: "touch-event"} <- next-ingredient-without-typechecking 
9999 mem: storing 65513 in location 1313
9999 mem: storing 1 in location 1314
9999 mem: storing 1 in location 1315
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1312 is 1140
9998 run: jumping to instruction 7
 105 run: {click-row: "number"} <- get {t: "touch-event"}, {row: "offset"}
9999 mem: location 1313 is 65513
9999 mem: location 1314 is 1
9999 mem: location 1315 is 1
9998 run: address to copy is 1314
9998 run: its type is "number"
9999 mem: location 1314 is 1
9999 mem: storing 1 in location 1316
 105 run: jump-if {click-row: "number"}, {: "offset"}
9999 mem: location 1316 is 1
9998 run: jumping to instruction 12
 105 run: {click-column: "number"} <- get {t: "touch-event"}, {column: "offset"}
9999 mem: location 1313 is 65513
9999 mem: location 1314 is 1
9999 mem: location 1315 is 1
9998 run: address to copy is 1315
9998 run: its type is "number"
9999 mem: location 1315 is 1
9999 mem: storing 1 in location 1317
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1318
 105 run: {too-far-left?: "boolean"} <- lesser-than {click-column: "number"}, {left: "number"}
9999 mem: location 1317 is 1
9999 mem: location 1318 is 0
9999 mem: storing 0 in location 1319
 105 run: jump-unless {too-far-left?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 0
9998 run: jumping to instruction 19
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1146
9998 run: its type is "number"
9999 mem: location 1146 is 9
9999 mem: storing 9 in location 1320
 105 run: {too-far-right?: "boolean"} <- greater-than {click-column: "number"}, {right: "number"}
9999 mem: location 1317 is 1
9999 mem: location 1320 is 9
9999 mem: storing 0 in location 1321
 105 run: jump-unless {too-far-right?: "boolean"}, {: "offset"}
9999 mem: location 1321 is 0
9998 run: jumping to instruction 25
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1322
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1323
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: storing 1159 in location 1324
9999 mem: incrementing refcount of 1159: 10 -> 11
 105 run: {editor: ("address" "editor-data")} <- snap-cursor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {click-row: "number"}, {click-column: "number"}
9999 mem: location 1311 is 1008
9999 mem: location 1312 is 1140
9999 mem: location 1316 is 1
9999 mem: location 1317 is 1
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1187
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1190
9999 mem: incrementing refcount of 1008: 68 -> 69
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1191
9999 mem: incrementing refcount of 1140: 8 -> 9
 106 run: {target-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1192
 106 run: {target-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1193
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1191 is 1140
9998 run: jumping to instruction 8
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1194
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1146
9998 run: its type is "number"
9999 mem: location 1146 is 9
9999 mem: storing 9 in location 1195
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1190 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1177
9999 mem: incrementing refcount of 1008: 69 -> 70
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1177 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1178
 107 run: return {height: "number"}
9999 mem: location 1178 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1196
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: storing 1159 in location 1197
9999 mem: incrementing refcount of 1159: 11 -> 12
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1159
9999 mem: storing 1159 in location 1198
9999 mem: incrementing refcount of 1159: 12 -> 13
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1177
9999 mem: incrementing refcount of 1159: 13 -> 14
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1159
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1170
9999 mem: location 1162 is 0
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1170
9999 mem: storing 1170 in location 1178
9999 mem: incrementing refcount of 1170: 12 -> 13
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1170
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1170
9999 mem: decrementing refcount of 1159: 14 -> 13
9999 mem: storing 1170 in location 1197
9999 mem: incrementing refcount of 1170: 13 -> 14
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1199
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1194 is 0
9999 mem: storing 0 in location 1200
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {target-row: "number"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1192 is 1
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1148
9999 mem: storing 1 in location 1148
 106 run: {cursor-row: "number"} <- copy {target-row: "number"}
9999 mem: location 1192 is 1
9999 mem: storing 1 in location 1201
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {target-column: "number"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1193 is 1
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1149
9999 mem: storing 1 in location 1149
 106 run: {cursor-column: "number"} <- copy {target-column: "number"}
9999 mem: location 1193 is 1
9999 mem: storing 1 in location 1202
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1159
9999 mem: storing 1159 in location 1203
9999 mem: incrementing refcount of 1159: 13 -> 14
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 1170
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1196 is 5
9999 mem: storing 0 in location 1204
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1204 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1205 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 0
9999 mem: location 1202 is 1
9999 mem: storing 0 in location 1206
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1206 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1197 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1171
9998 run: its type is "character"
9999 mem: location 1171 is 97
9999 mem: storing 97 in location 1207
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1207 is 97
9999 mem: storing 0 in location 1208
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1200 is 0
9999 mem: location 1195 is 9
9999 mem: storing 0 in location 1210
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1170
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1170 in location 1177
9999 mem: incrementing refcount of 1170: 14 -> 15
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1170
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1172
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1172 is 1179
9999 mem: storing 1179 in location 1178
9999 mem: incrementing refcount of 1179: 12 -> 13
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1179
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1179
9999 mem: decrementing refcount of 1170: 15 -> 14
9999 mem: storing 1179 in location 1197
9999 mem: incrementing refcount of 1179: 13 -> 14
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1177
9999 mem: incrementing refcount of 1159: 14 -> 15
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1159
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1170
9999 mem: location 1162 is 0
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1170
9999 mem: storing 1170 in location 1178
9999 mem: incrementing refcount of 1170: 14 -> 15
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1170
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1170
9999 mem: decrementing refcount of 1159: 15 -> 14
9999 mem: storing 1170 in location 1198
9999 mem: incrementing refcount of 1170: 15 -> 16
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1200 is 0
9999 mem: storing 1 in location 1200
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 1179
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1196 is 5
9999 mem: storing 0 in location 1204
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1204 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1205 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 1
9999 mem: location 1202 is 1
9999 mem: storing 1 in location 1206
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1206 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1170
9999 mem: decrementing refcount of 1159: 14 -> 13
9999 mem: storing 1170 in location 1203
9999 mem: incrementing refcount of 1170: 16 -> 17
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1203 is 1170
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1144
9999 mem: storing 1170 in location 1144
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1170
9999 mem: location 1197 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1180
9998 run: its type is "character"
9999 mem: location 1180 is 98
9999 mem: storing 98 in location 1207
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1207 is 98
9999 mem: storing 0 in location 1208
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1200 is 1
9999 mem: location 1195 is 9
9999 mem: storing 0 in location 1210
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1179
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1179 in location 1177
9999 mem: incrementing refcount of 1179: 14 -> 15
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1179
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1170
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1181
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1181 is 1183
9999 mem: storing 1183 in location 1178
9999 mem: incrementing refcount of 1183: 11 -> 12
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1183
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: decrementing refcount of 1179: 15 -> 14
9999 mem: storing 1183 in location 1197
9999 mem: incrementing refcount of 1183: 12 -> 13
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1170
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1170 in location 1177
9999 mem: incrementing refcount of 1170: 17 -> 18
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1170
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1172
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1172 is 1179
9999 mem: storing 1179 in location 1178
9999 mem: incrementing refcount of 1179: 14 -> 15
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1179
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1179
9999 mem: decrementing refcount of 1170: 18 -> 17
9999 mem: storing 1179 in location 1198
9999 mem: incrementing refcount of 1179: 15 -> 16
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1200 is 1
9999 mem: storing 2 in location 1200
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 1183
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1196 is 5
9999 mem: storing 0 in location 1204
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1204 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1205 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 2
9999 mem: location 1202 is 1
9999 mem: storing 0 in location 1206
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1206 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1179
9999 mem: location 1197 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1184
9998 run: its type is "character"
9999 mem: location 1184 is 99
9999 mem: storing 99 in location 1207
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1207 is 99
9999 mem: storing 0 in location 1208
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1200 is 2
9999 mem: location 1195 is 9
9999 mem: storing 0 in location 1210
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1183
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1183 in location 1177
9999 mem: incrementing refcount of 1183: 13 -> 14
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1183
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1179
9999 mem: location 1177 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 0
9999 mem: storing 0 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1183: 14 -> 13
9999 mem: storing 0 in location 1197
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1179
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1179 in location 1177
9999 mem: incrementing refcount of 1179: 16 -> 17
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1179
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1170
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1181
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1181 is 1183
9999 mem: storing 1183 in location 1178
9999 mem: incrementing refcount of 1183: 13 -> 14
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1183
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: decrementing refcount of 1179: 17 -> 16
9999 mem: storing 1183 in location 1198
9999 mem: incrementing refcount of 1183: 14 -> 15
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1200 is 2
9999 mem: storing 3 in location 1200
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 66
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 3
9999 mem: location 1202 is 1
9999 mem: storing 0 in location 1211
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1205 is 1
9999 mem: location 1211 is 0
9999 mem: storing 0 in location 1212
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 0 in location 1213
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1212 is 0
9999 mem: location 1213 is 0
9999 mem: storing 0 in location 1214
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jumping to instruction 80
 106 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1191 is 1140
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1140
9999 mem: decrementing refcount of 1140: 9 -> 8
9999 mem: storing 1140 in location 1312
9999 mem: incrementing refcount of 1140: 8 -> 9
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1325
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: storing 1159 in location 1326
9999 mem: incrementing refcount of 1159: 13 -> 14
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1327
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1312 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 1
9999 mem: storing 1 in location 1328
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1325 is 0
9998 run: jumping to instruction 50
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1215
9999 mem: storing 1215 in location 1330
9999 mem: incrementing refcount of 1215: 0 -> 1
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1322 is 1
9999 mem: location 1323 is 0
9999 mem: location 1324 is 1159
9999 mem: location 1327 is 1
9999 mem: location 1328 is 1
9999 mem: location 1326 is 1159
9999 mem: location 1325 is 0
9999 mem: location 1330 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1330 is 1215
9999 mem: skipping refcount at 1215
9999 mem: storing 1 in location 1216
9999 mem: storing 1 in location 1217
9999 mem: storing 0 in location 1218
9999 mem: storing 1159 in location 1219
9999 mem: storing 1 in location 1220
9999 mem: storing 1 in location 1221
9999 mem: storing 1159 in location 1222
9999 mem: storing 0 in location 1223
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1312 is 1140
9999 mem: location 1330 is 1215
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1163
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1166
9999 mem: incrementing refcount of 1140: 9 -> 10
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1215 in location 1167
9999 mem: incrementing refcount of 1215: 1 -> 2
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1151
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1168
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1167 is 1215
9999 mem: location 1168 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1215 in location 1156
9999 mem: incrementing refcount of 1215: 2 -> 3
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1157
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1341
9999 mem: storing 0 in location 1341
9999 mem: storing 0 in location 1342
9999 mem: storing 0 in location 1343
9999 mem: storing 1341 in location 1158
9999 mem: incrementing refcount of 1341: 0 -> 1
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1341
9999 mem: skipping refcount at 1341
9999 mem: location 1158 is 1341
9999 mem: skipping refcount at 1341
9999 mem: storing 1215 in location 1342
9999 mem: storing 0 in location 1343
 107 run: return {result: ("address" "list" "address" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1158 is 1341
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1341
9999 mem: storing 1341 in location 1168
9999 mem: incrementing refcount of 1341: 1 -> 2
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1168 is 1341
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1151
9999 mem: storing 1341 in location 1151
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1152
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1152 is 0
9999 mem: storing 0 in location 1169
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: storing 0 in location 1169
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1169 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1152
9999 mem: storing 0 in location 1152
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1166 is 1140
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1140
9999 mem: decrementing refcount of 1140: 10 -> 9
9999 mem: storing 1140 in location 1312
9999 mem: incrementing refcount of 1140: 9 -> 10
 105 run: return {1: "literal", "true": ()}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1312 is 1140
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump {+next-event: "label"}
9998 run: jumping to instruction 6
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1295
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 1
9999 mem: storing 1 in location 1296
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1292 is 1008
9999 mem: location 1295 is 1
9999 mem: location 1296 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1156
9999 mem: incrementing refcount of 1008: 70 -> 71
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1158
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 71 -> 70
9999 mem: storing 1008 in location 1292
9999 mem: incrementing refcount of 1008: 70 -> 71
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1293 is 1286
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1253
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1286 in location 1256
9999 mem: incrementing refcount of 1286: 2 -> 3
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1256 is 1286
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 1
9999 mem: location 1288 is 1276
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy is 1287
9998 run: its type is "number"
9999 mem: location 1287 is 1
9999 mem: storing 1 in location 1257
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 1
9999 mem: location 1288 is 1276
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy is 1288
9998 run: its type is ("address" "array" "event")
9999 mem: location 1288 is 1276
9999 mem: storing 1276 in location 1258
9999 mem: incrementing refcount of 1276: 2 -> 3
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1258 is 1276
9999 mem: skipping refcount at 1276
9999 mem: storing 2 in location 1259
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1257 is 1
9999 mem: location 1259 is 2
9999 mem: storing 0 in location 1260
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1258 is 1276
9999 mem: skipping refcount at 1276
9998 run: base address is 1277
9999 mem: location 1257 is 1
9998 run: address to copy is 1282
9998 run: its type is event
9999 mem: location 1282 is 0
9999 mem: location 1283 is 8
9999 mem: location 1284 is 0
9999 mem: location 1285 is 0
9999 mem: storing 0 in location 1262
9999 mem: storing 8 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1257 is 1
9999 mem: storing 2 in location 1257
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 1
9999 mem: location 1288 is 1276
9999 mem: location 1257 is 2
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy to is 1287
9999 mem: storing 2 in location 1287
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1262 is 0
9999 mem: location 1263 is 8
9999 mem: location 1264 is 0
9999 mem: location 1265 is 0
9999 mem: location 1256 is 1286
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 8, 0, 0]
9998 run: result 1 is 1286
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1297
9999 mem: storing 8 in location 1298
9999 mem: storing 0 in location 1299
9999 mem: storing 0 in location 1300
9999 mem: decrementing refcount of 1286: 3 -> 2
9999 mem: storing 1286 in location 1293
9999 mem: incrementing refcount of 1286: 2 -> 3
9999 mem: storing 1 in location 1301
9999 mem: storing 0 in location 1302
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1302 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1297 is 0
9999 mem: location 1298 is 8
9999 mem: location 1299 is 0
9999 mem: location 1300 is 0
9999 mem: storing 0 in location 1306
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jumping to instruction 18
9990 schedule: editor-event-loop/run_1001/scenario_editor-handles-backspace-key
 104 run: jump-if {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {e: "event"}
9999 mem: location 1292 is 1008
9999 mem: location 1294 is 1140
9999 mem: location 1297 is 0
9999 mem: location 1298 is 8
9999 mem: location 1299 is 0
9999 mem: location 1300 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 102
9999 mem: allocating size 104
9999 mem: new alloc: 1344
9999 mem: storing 0 in location 1344
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: storing 0 in location 1355
9999 mem: storing 0 in location 1356
9999 mem: storing 0 in location 1357
9999 mem: storing 0 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: storing 0 in location 1367
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: storing 0 in location 1377
9999 mem: storing 0 in location 1378
9999 mem: storing 0 in location 1379
9999 mem: storing 0 in location 1380
9999 mem: storing 0 in location 1381
9999 mem: storing 0 in location 1382
9999 mem: storing 0 in location 1383
9999 mem: storing 0 in location 1384
9999 mem: storing 0 in location 1385
9999 mem: storing 0 in location 1386
9999 mem: storing 0 in location 1387
9999 mem: storing 0 in location 1388
9999 mem: storing 0 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: storing 0 in location 1398
9999 mem: storing 0 in location 1399
9999 mem: storing 0 in location 1400
9999 mem: storing 0 in location 1401
9999 mem: storing 0 in location 1402
9999 mem: storing 0 in location 1403
9999 mem: storing 0 in location 1404
9999 mem: storing 0 in location 1405
9999 mem: storing 0 in location 1406
9999 mem: storing 0 in location 1407
9999 mem: storing 0 in location 1408
9999 mem: storing 0 in location 1409
9999 mem: storing 0 in location 1410
9999 mem: storing 0 in location 1411
9999 mem: storing 0 in location 1412
9999 mem: storing 0 in location 1413
9999 mem: storing 0 in location 1414
9999 mem: storing 0 in location 1415
9999 mem: storing 0 in location 1416
9999 mem: storing 0 in location 1417
9999 mem: storing 0 in location 1418
9999 mem: storing 0 in location 1419
9999 mem: storing 0 in location 1420
9999 mem: storing 0 in location 1421
9999 mem: storing 0 in location 1422
9999 mem: storing 0 in location 1423
9999 mem: storing 0 in location 1424
9999 mem: storing 0 in location 1425
9999 mem: storing 0 in location 1426
9999 mem: storing 0 in location 1427
9999 mem: storing 0 in location 1428
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: storing 0 in location 1439
9999 mem: storing 0 in location 1440
9999 mem: storing 0 in location 1441
9999 mem: storing 0 in location 1442
9999 mem: storing 0 in location 1443
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 102 in location 1345
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1347
9999 mem: incrementing refcount of 1008: 71 -> 72
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1348
9999 mem: incrementing refcount of 1140: 10 -> 11
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1349
9999 mem: storing 8 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1353
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1348 is 1140
9998 run: jumping to instruction 8
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1347 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1177
9999 mem: incrementing refcount of 1008: 72 -> 73
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1177 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1178
 106 run: return {width: "number"}
9999 mem: location 1178 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1354
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1347 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1177
9999 mem: incrementing refcount of 1008: 73 -> 74
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1177 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1178
 106 run: return {height: "number"}
9999 mem: location 1178 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1355
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1356
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1146
9998 run: its type is "number"
9999 mem: location 1146 is 9
9999 mem: storing 9 in location 1357
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1170
9999 mem: storing 1170 in location 1358
9999 mem: incrementing refcount of 1170: 17 -> 18
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1359
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 1
9999 mem: storing 1 in location 1360
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1359 is 1
9999 mem: storing 1 in location 1361
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1360 is 1
9999 mem: storing 1 in location 1362
 105 run: {c: "character"}, {is-unicode?: "boolean"} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1349 is 0
9999 mem: location 1350 is 8
9999 mem: location 1351 is 0
9999 mem: location 1352 is 0
9999 mem: storing 8 in location 1363
9999 mem: storing 1 in location 1364
 105 run: jump-unless {is-unicode?: "boolean"}, {: "offset"}
9999 mem: location 1364 is 1
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: "character"}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1365
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1365 is 0
9998 run: jumping to instruction 73
 105 run: {undo?: "boolean"} <- equal {c: "character"}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1403
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1403 is 0
9998 run: jumping to instruction 128
 105 run: {page-up?: "boolean"} <- equal {c: "character"}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1407
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1407 is 0
9998 run: jumping to instruction 167
 105 run: {page-down?: "boolean"} <- equal {c: "character"}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1418
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1418 is 0
9998 run: jumping to instruction 206
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: "character"}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1419
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1419 is 0
9998 run: jumping to instruction 227
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: "character"}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1422
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1422 is 0
9998 run: jumping to instruction 249
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: "character"}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1423
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1423 is 0
9998 run: jumping to instruction 285
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: "character"}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1363 is 8
9999 mem: storing 0 in location 1424
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1424 is 0
9998 run: jumping to instruction 321
 105 run: {delete-previous-character?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1363 is 8
9999 mem: storing 1 in location 1425
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1425 is 1
9998 run: jump-unless fell through
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: storing 1159 in location 1411
9999 mem: incrementing refcount of 1159: 14 -> 15
 105 run: {editor: ("address" "editor-data")}, {screen: ("address" "screen")}, {go-render?: "boolean"}, {backspaced-cell: ("address" "duplex-list" "character")} <- delete-before-cursor {editor: ("address" "editor-data")}, {screen: ("address" "screen")}
9999 mem: location 1348 is 1140
9999 mem: location 1347 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 22
9999 mem: allocating size 24
9999 mem: new alloc: 1448
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: storing 0 in location 1451
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: storing 0 in location 1461
9999 mem: storing 0 in location 1462
9999 mem: storing 0 in location 1463
9999 mem: storing 0 in location 1464
9999 mem: storing 0 in location 1465
9999 mem: storing 0 in location 1466
9999 mem: storing 0 in location 1467
9999 mem: storing 0 in location 1468
9999 mem: storing 0 in location 1469
9999 mem: storing 0 in location 1470
9999 mem: storing 0 in location 1471
9999 mem: storing 22 in location 1449
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1451
9999 mem: incrementing refcount of 1140: 11 -> 12
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1452
9999 mem: incrementing refcount of 1008: 74 -> 75
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1170
9999 mem: storing 1170 in location 1453
9999 mem: incrementing refcount of 1170: 18 -> 19
 106 run: {data: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1141
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1141 is 1159
9999 mem: storing 1159 in location 1454
9999 mem: incrementing refcount of 1159: 15 -> 16
 106 run: {prev: ("address" "duplex-list" "character")} <- prev_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1453 is 1170
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1170 in location 1177
9999 mem: incrementing refcount of 1170: 19 -> 20
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1170
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1173
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1173 is 1159
9999 mem: storing 1159 in location 1178
9999 mem: incrementing refcount of 1159: 16 -> 17
 107 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1178 is 1159
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1159
9999 mem: storing 1159 in location 1455
9999 mem: incrementing refcount of 1159: 17 -> 18
 106 run: {go-render?: "boolean"}, {backspaced-cell: ("address" "duplex-list" "character")} <- copy {0: "literal", "no-more-render": ()}, {0: "literal", "nothing-deleted": ()}
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
 106 run: jump-if {prev: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1455 is 1159
9998 run: jumping to instruction 10
 106 run: trace {10: "literal"}, {"app": "literal-string"}, {"delete-before-cursor": "literal-string"}
  10 app: delete-before-cursor 
 106 run: {original-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1458
 106 run: {editor: ("address" "editor-data")}, {scroll?: "boolean"} <- move-cursor-coordinates-left {editor: ("address" "editor-data")}
9999 mem: location 1451 is 1140
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 20
9999 mem: allocating size 22
9999 mem: new alloc: 1472
9999 mem: storing 0 in location 1472
9999 mem: storing 0 in location 1473
9999 mem: storing 0 in location 1474
9999 mem: storing 0 in location 1475
9999 mem: storing 0 in location 1476
9999 mem: storing 0 in location 1477
9999 mem: storing 0 in location 1478
9999 mem: storing 0 in location 1479
9999 mem: storing 0 in location 1480
9999 mem: storing 0 in location 1481
9999 mem: storing 0 in location 1482
9999 mem: storing 0 in location 1483
9999 mem: storing 0 in location 1484
9999 mem: storing 0 in location 1485
9999 mem: storing 0 in location 1486
9999 mem: storing 0 in location 1487
9999 mem: storing 0 in location 1488
9999 mem: storing 0 in location 1489
9999 mem: storing 0 in location 1490
9999 mem: storing 0 in location 1491
9999 mem: storing 0 in location 1492
9999 mem: storing 0 in location 1493
9999 mem: storing 20 in location 1473
 107 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1475
9999 mem: incrementing refcount of 1140: 12 -> 13
 107 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1170
9999 mem: storing 1170 in location 1476
9999 mem: incrementing refcount of 1170: 20 -> 21
 107 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1477
 107 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 1
9999 mem: storing 1 in location 1478
 107 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1479
 107 run: {at-left-margin?: "boolean"} <- equal {cursor-column: "number"}, {left: "number"}
9999 mem: location 1478 is 1
9999 mem: location 1479 is 0
9999 mem: storing 0 in location 1480
 107 run: jump-if {at-left-margin?: "boolean"}, {: "offset"}
9999 mem: location 1480 is 0
9998 run: jump-if fell through
 107 run: trace {10: "literal"}, {"app": "literal-string"}, {"decrementing cursor column": "literal-string"}
  10 app: decrementing cursor column 
 107 run: {cursor-column: "number"} <- subtract {cursor-column: "number"}, {1: "literal"}
9999 mem: location 1478 is 1
9999 mem: storing 0 in location 1478
 107 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 1
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1478 is 0
9999 mem: location 1475 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1149
9999 mem: storing 0 in location 1149
 107 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1481
 107 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0"}, {go-render?: "boolean"}
9999 mem: location 1475 is 1140
9999 mem: location 1481 is 0
9999 abandon: saving in free-list of size 22
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1140
9998 run: result 1 is 0
9999 mem: decrementing refcount of 1140: 13 -> 12
9999 mem: storing 1140 in location 1451
9999 mem: incrementing refcount of 1140: 12 -> 13
9999 mem: storing 0 in location 1459
 106 run: {backspaced-cell: ("address" "duplex-list" "character")} <- copy {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1453 is 1170
9999 mem: storing 1170 in location 1457
9999 mem: incrementing refcount of 1170: 21 -> 22
 106 run: {data: ("address" "duplex-list" "character")} <- remove_2 {before-cursor: ("address" "duplex-list" "character")}, {data: ("address" "duplex-list" "character")}
9999 mem: location 1453 is 1170
9999 mem: location 1454 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1163
 107 run: {x: ("address" "duplex-list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9999 mem: storing 1170 in location 1166
9999 mem: incrementing refcount of 1170: 22 -> 23
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1167
9999 mem: incrementing refcount of 1159: 18 -> 19
 107 run: jump-if {x: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1170
9998 run: jumping to instruction 6
 107 run: {next-node: ("address" "duplex-list" "character")} <- get {x: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1172
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1172 is 1179
9999 mem: storing 1179 in location 1168
9999 mem: incrementing refcount of 1179: 16 -> 17
 107 run: {prev-node: ("address" "duplex-list" "character")} <- get {x: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1173
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1173 is 1159
9999 mem: storing 1159 in location 1169
9999 mem: incrementing refcount of 1159: 19 -> 20
 107 run: {x: ("address" "duplex-list" "character"), "lookup": ()} <- put {x: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy to is 1172
9999 mem: storing 0 in location 1172
 107 run: {x: ("address" "duplex-list" "character"), "lookup": ()} <- put {x: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {0: "literal"}
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 0
9999 mem: location 1173 is 1159
9999 mem: location 1166 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy to is 1173
9999 mem: storing 0 in location 1173
 107 run: jump-unless {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1179
9998 run: jump-unless fell through
 107 run: {next-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {prev-node: ("address" "duplex-list" "character")}
9999 mem: location 1168 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1170
9999 mem: location 1169 is 1159
9999 mem: location 1168 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy to is 1182
9999 mem: storing 1159 in location 1182
 107 run: jump-unless {prev-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1169 is 1159
9998 run: jump-unless fell through
 107 run: {prev-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {prev-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1169 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1170
9999 mem: location 1162 is 0
9999 mem: location 1168 is 1179
9999 mem: location 1169 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy to is 1161
9999 mem: storing 1179 in location 1161
 107 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1167 is 1159
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1159
9999 mem: decrementing refcount of 1159: 20 -> 19
9999 mem: storing 1159 in location 1454
9999 mem: incrementing refcount of 1159: 19 -> 20
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1455 is 1159
9999 mem: decrementing refcount of 1170: 23 -> 22
9999 mem: storing 1159 in location 1453
9999 mem: incrementing refcount of 1159: 20 -> 21
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1170
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1453 is 1159
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1144
9999 mem: storing 1159 in location 1144
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1456
 106 run: jump-unless {scroll?: "boolean"}, {: "offset"}
9999 mem: location 1459 is 0
9998 run: jumping to instruction 22
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1452 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1177
9999 mem: incrementing refcount of 1008: 75 -> 76
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1177 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1178
 107 run: return {width: "number"}
9999 mem: location 1178 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1460
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1461
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1462
 106 run: {same-row?: "boolean"} <- equal {cursor-row: "number"}, {original-row: "number"}
9999 mem: location 1461 is 1
9999 mem: location 1458 is 1
9999 mem: storing 1 in location 1463
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1456
 106 run: jump-if {same-row?: "boolean"}, {: "offset"}
9999 mem: location 1463 is 1
9998 run: jumping to instruction 31
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1464
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1451 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1146
9998 run: its type is "number"
9999 mem: location 1146 is 9
9999 mem: storing 9 in location 1465
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1453 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1177
9999 mem: incrementing refcount of 1159: 21 -> 22
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1159
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1179
9999 mem: location 1162 is 0
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1179
9999 mem: storing 1179 in location 1178
9999 mem: incrementing refcount of 1179: 17 -> 18
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1179
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1179
9999 mem: storing 1179 in location 1466
9999 mem: incrementing refcount of 1179: 18 -> 19
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1452 is 1008
9999 mem: location 1461 is 1
9999 mem: location 1462 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1156
9999 mem: incrementing refcount of 1008: 76 -> 77
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1158
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 0
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 77 -> 76
9999 mem: storing 1008 in location 1452
9999 mem: incrementing refcount of 1008: 76 -> 77
 106 run: {curr-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1462 is 0
9999 mem: storing 0 in location 1467
 106 run: {at-right?: "boolean"} <- greater-or-equal {curr-column: "number"}, {right: "number"}
9999 mem: location 1467 is 0
9999 mem: location 1465 is 9
9999 mem: storing 0 in location 1468
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1456
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1468 is 0
9998 run: jumping to instruction 43
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1466 is 1179
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1466 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1159
9999 mem: location 1466 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1180
9998 run: its type is "character"
9999 mem: location 1180 is 98
9999 mem: storing 98 in location 1469
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1469 is 98
9999 mem: storing 0 in location 1470
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1470 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {currc: "character"}
9999 mem: location 1452 is 1008
9999 mem: location 1469 is 98
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1227
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1230
9999 mem: incrementing refcount of 1008: 77 -> 78
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1231
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1232
9999 mem: storing 0 in location 1233
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1232
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1234
9999 mem: storing 0 in location 1235
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1235 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1234
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1231 is 98
  90 print-character: 98 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1230 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1236
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1237
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1238
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1238 is 1
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1237 is 5
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1240
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1240 is 0
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1240 is 0
9999 mem: location 1236 is 10
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 98
9999 mem: storing 0 in location 1241
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1236 is 10
9999 mem: storing 10 in location 1244
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1244 is 10
9999 mem: location 1240 is 0
9999 mem: storing 10 in location 1244
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1245
9999 mem: incrementing refcount of 1014: 45 -> 46
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1246
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1231 is 98
9999 mem: storing 0 in location 1247
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1231 is 98
9999 mem: location 1232 is 7
9999 mem: storing 98 in location 1249
9999 mem: storing 7 in location 1250
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1244 is 10
9998 run: address to copy to is 1036
9999 mem: location 1249 is 98
9999 mem: location 1250 is 7
9999 mem: storing 98 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1236 is 10
9999 mem: storing 9 in location 1251
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1240 is 0
9999 mem: location 1251 is 9
9999 mem: storing 0 in location 1252
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1252 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1240 is 0
9999 mem: storing 1 in location 1240
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 1
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1230 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 78 -> 77
9999 mem: storing 1008 in location 1452
9999 mem: incrementing refcount of 1008: 77 -> 78
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1467 is 0
9999 mem: storing 1 in location 1467
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1466 is 1179
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1179 in location 1177
9999 mem: incrementing refcount of 1179: 19 -> 20
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1179
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1159
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1181
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1181 is 1183
9999 mem: storing 1183 in location 1178
9999 mem: incrementing refcount of 1183: 15 -> 16
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1183
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: decrementing refcount of 1179: 20 -> 19
9999 mem: storing 1183 in location 1466
9999 mem: incrementing refcount of 1183: 16 -> 17
 106 run: jump {: "offset"}
9998 run: jumping to instruction 38
 106 run: {at-right?: "boolean"} <- greater-or-equal {curr-column: "number"}, {right: "number"}
9999 mem: location 1467 is 1
9999 mem: location 1465 is 9
9999 mem: storing 0 in location 1468
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1456
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1468 is 0
9998 run: jumping to instruction 43
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1466 is 1183
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1466 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1179
9999 mem: location 1466 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1184
9998 run: its type is "character"
9999 mem: location 1184 is 99
9999 mem: storing 99 in location 1469
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1469 is 99
9999 mem: storing 0 in location 1470
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1470 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {currc: "character"}
9999 mem: location 1452 is 1008
9999 mem: location 1469 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1227
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1230
9999 mem: incrementing refcount of 1008: 78 -> 79
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1231
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1232
9999 mem: storing 0 in location 1233
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1232
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1234
9999 mem: storing 0 in location 1235
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1235 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1234
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1231 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1230 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1236
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1237
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1238
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1238 is 1
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1237 is 5
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1240
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1240 is 1
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1240 is 1
9999 mem: location 1236 is 10
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 99
9999 mem: storing 0 in location 1241
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1236 is 10
9999 mem: storing 10 in location 1244
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1244 is 10
9999 mem: location 1240 is 1
9999 mem: storing 11 in location 1244
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1245
9999 mem: incrementing refcount of 1014: 46 -> 47
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1246
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1231 is 99
9999 mem: storing 0 in location 1247
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1231 is 99
9999 mem: location 1232 is 7
9999 mem: storing 99 in location 1249
9999 mem: storing 7 in location 1250
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1244 is 11
9998 run: address to copy to is 1038
9999 mem: location 1249 is 99
9999 mem: location 1250 is 7
9999 mem: storing 99 in location 1038
9999 mem: storing 7 in location 1039
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1236 is 10
9999 mem: storing 9 in location 1251
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1240 is 1
9999 mem: location 1251 is 9
9999 mem: storing 0 in location 1252
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1252 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1240 is 1
9999 mem: storing 2 in location 1240
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 2
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1230 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 79 -> 78
9999 mem: storing 1008 in location 1452
9999 mem: incrementing refcount of 1008: 78 -> 79
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1467 is 1
9999 mem: storing 2 in location 1467
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1466 is 1183
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1183 in location 1177
9999 mem: incrementing refcount of 1183: 17 -> 18
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1183
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1179
9999 mem: location 1177 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 0
9999 mem: storing 0 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1183: 18 -> 17
9999 mem: storing 0 in location 1466
 106 run: jump {: "offset"}
9998 run: jumping to instruction 38
 106 run: {at-right?: "boolean"} <- greater-or-equal {curr-column: "number"}, {right: "number"}
9999 mem: location 1467 is 2
9999 mem: location 1465 is 9
9999 mem: storing 0 in location 1468
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1456
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1468 is 0
9998 run: jumping to instruction 43
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1466 is 0
9998 run: jumping to instruction 52
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1471
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}
9999 mem: location 1452 is 1008
9999 mem: location 1471 is 32
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1227
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1230
9999 mem: incrementing refcount of 1008: 79 -> 80
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1231
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1232
9999 mem: storing 0 in location 1233
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1232
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1234
9999 mem: storing 0 in location 1235
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1235 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1234
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1231 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1230 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1236
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1237
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1238
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1238 is 1
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1237 is 5
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1240
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1240 is 2
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1240 is 2
9999 mem: location 1236 is 10
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 32
9999 mem: storing 0 in location 1241
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1236 is 10
9999 mem: storing 10 in location 1244
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1244 is 10
9999 mem: location 1240 is 2
9999 mem: storing 12 in location 1244
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1245
9999 mem: incrementing refcount of 1014: 47 -> 48
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1246
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1231 is 32
9999 mem: storing 0 in location 1247
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1231 is 32
9999 mem: location 1232 is 7
9999 mem: storing 32 in location 1249
9999 mem: storing 7 in location 1250
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1244 is 12
9998 run: address to copy to is 1040
9999 mem: location 1249 is 32
9999 mem: location 1250 is 7
9999 mem: storing 32 in location 1040
9999 mem: storing 7 in location 1041
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1236 is 10
9999 mem: storing 9 in location 1251
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1240 is 2
9999 mem: location 1251 is 9
9999 mem: storing 0 in location 1252
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1252 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1240 is 2
9999 mem: storing 3 in location 1240
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 3
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1230 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 1008 in location 1452
9999 mem: incrementing refcount of 1008: 79 -> 80
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1456
 106 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "screen"), "same-as-ingredient": "1"}, {go-render?: "boolean"}, {backspaced-cell: ("address" "duplex-list" "character")}
9999 mem: location 1451 is 1140
9999 mem: location 1452 is 1008
9999 mem: location 1456 is 0
9999 mem: location 1457 is 1170
9999 abandon: saving in free-list of size 24
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1140
9998 run: result 1 is 1008
9998 run: result 2 is 0
9998 run: result 3 is 1170
9999 mem: decrementing refcount of 1140: 13 -> 12
9999 mem: storing 1140 in location 1348
9999 mem: incrementing refcount of 1140: 12 -> 13
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 1008 in location 1347
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 0 in location 1353
9999 mem: storing 1170 in location 1426
9999 mem: incrementing refcount of 1170: 22 -> 23
 105 run: jump-unless {backspaced-cell: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1426 is 1170
9998 run: jump-unless fell through
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: storing 1159 in location 1413
9999 mem: incrementing refcount of 1159: 22 -> 23
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1359
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1360
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1159
9999 mem: decrementing refcount of 1170: 23 -> 22
9999 mem: storing 1159 in location 1358
9999 mem: incrementing refcount of 1159: 23 -> 24
 105 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1348 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1151
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1151 is 1341
9999 mem: storing 1341 in location 1368
9999 mem: incrementing refcount of 1341: 2 -> 3
 105 run: jump-unless {undo: ("address" "list" "address" "operation")}, {: "offset"}
9999 mem: location 1368 is 1341
9998 run: jump-unless fell through
 105 run: {op: ("address" "operation")} <- first_3 {undo: ("address" "list" "address" "operation")}
9999 mem: location 1368 is 1341
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 106 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1341 in location 1177
9999 mem: incrementing refcount of 1341: 3 -> 4
 106 run: {result: ("address" "operation")} <- get {in: ("address" "list" "address" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1177 is 1341
9999 mem: skipping refcount at 1341
9999 mem: location 1342 is 1215
9999 mem: location 1343 is 0
9999 mem: location 1177 is 1341
9999 mem: skipping refcount at 1341
9998 run: address to copy is 1342
9998 run: its type is ("address" "operation")
9999 mem: location 1342 is 1215
9999 mem: storing 1215 in location 1178
9999 mem: incrementing refcount of 1215: 3 -> 4
 106 run: reply {result: ("address" "operation")}
9999 mem: location 1178 is 1215
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1215
9999 mem: storing 1215 in location 1367
9999 mem: incrementing refcount of 1215: 4 -> 5
 105 run: {deletion: "delete-operation"}, {is-delete?: "boolean"} <- maybe-convert {op: ("address" "operation"), "lookup": ()}, {delete: "variant"}
9999 mem: location 1367 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 1
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 1
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 0
9999 mem: location 1224 is 0
9999 mem: location 1225 is 0
9999 mem: location 1226 is 0
9999 mem: location 1367 is 1215
9999 mem: skipping refcount at 1215
9999 mem: storing 0 in location 1379
 105 run: jump-unless {is-delete?: "boolean"}, {: "offset"}
9999 mem: location 1379 is 0
9998 run: jumping to instruction 352
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 mem: new alloc: 1494
9999 mem: storing 0 in location 1494
9999 mem: storing 0 in location 1495
9999 mem: storing 0 in location 1496
9999 mem: storing 0 in location 1497
9999 mem: storing 0 in location 1498
9999 mem: storing 0 in location 1499
9999 mem: storing 0 in location 1500
9999 mem: storing 0 in location 1501
9999 mem: storing 0 in location 1502
9999 mem: storing 0 in location 1503
9999 mem: storing 0 in location 1504
9999 mem: storing 0 in location 1505
9999 mem: decrementing refcount of 1215: 5 -> 4
9999 mem: storing 1494 in location 1367
9999 mem: incrementing refcount of 1494: 0 -> 1
 105 run: {deleted-until: ("address" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1358 is 1159
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 106 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1177
9999 mem: incrementing refcount of 1159: 24 -> 25
 106 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1159
9998 run: jumping to instruction 5
 106 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1179
9999 mem: location 1162 is 0
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1179
9999 mem: storing 1179 in location 1178
9999 mem: incrementing refcount of 1179: 19 -> 20
 106 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1179
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1179
9999 mem: storing 1179 in location 1421
9999 mem: incrementing refcount of 1179: 20 -> 21
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {2: "literal", "delete-operation": ()}, {save-row: "number", "before": ()}, {save-column: "number", "before": ()}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {backspaced-cell: ("address" "duplex-list" "character"), "deleted": ()}, {before-cursor: ("address" "duplex-list" "character"), "delete-from": ()}, {deleted-until: ("address" "duplex-list" "character")}, {1: "literal", "coalesce-backspace": ()}
9999 mem: location 1361 is 1
9999 mem: location 1362 is 1
9999 mem: location 1411 is 1159
9999 mem: location 1359 is 1
9999 mem: location 1360 is 1
9999 mem: location 1413 is 1159
9999 mem: location 1426 is 1170
9999 mem: location 1358 is 1159
9999 mem: location 1421 is 1179
9999 mem: location 1367 is 1494
9999 mem: skipping refcount at 1494
9999 mem: location 1367 is 1494
9999 mem: skipping refcount at 1494
9999 mem: storing 2 in location 1495
9999 mem: storing 1 in location 1496
9999 mem: storing 1 in location 1497
9999 mem: storing 1159 in location 1498
9999 mem: storing 1 in location 1499
9999 mem: storing 1 in location 1500
9999 mem: storing 1159 in location 1501
9999 mem: storing 1170 in location 1502
9999 mem: storing 1159 in location 1503
9999 mem: storing 1179 in location 1504
9999 mem: storing 1 in location 1505
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1348 is 1140
9999 mem: location 1367 is 1494
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1163
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1166
9999 mem: incrementing refcount of 1140: 13 -> 14
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1494 in location 1167
9999 mem: incrementing refcount of 1494: 1 -> 2
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1151
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1151 is 1341
9999 mem: storing 1341 in location 1168
9999 mem: incrementing refcount of 1341: 4 -> 5
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1167 is 1494
9999 mem: location 1168 is 1341
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1494 in location 1156
9999 mem: incrementing refcount of 1494: 2 -> 3
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1341 in location 1157
9999 mem: incrementing refcount of 1341: 5 -> 6
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1506
9999 mem: storing 0 in location 1506
9999 mem: storing 0 in location 1507
9999 mem: storing 0 in location 1508
9999 mem: storing 1506 in location 1158
9999 mem: incrementing refcount of 1506: 0 -> 1
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1156 is 1494
9999 mem: location 1157 is 1341
9999 mem: location 1158 is 1506
9999 mem: skipping refcount at 1506
9999 mem: location 1158 is 1506
9999 mem: skipping refcount at 1506
9999 mem: storing 1494 in location 1507
9999 mem: storing 1341 in location 1508
 107 run: return {result: ("address" "list" "address" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1158 is 1506
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1506
9999 mem: decrementing refcount of 1341: 6 -> 5
9999 mem: storing 1506 in location 1168
9999 mem: incrementing refcount of 1506: 1 -> 2
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1341
9999 mem: location 1152 is 0
9999 mem: location 1168 is 1506
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1151
9999 mem: storing 1506 in location 1151
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1506
9999 mem: location 1152 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1152
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1152 is 0
9999 mem: storing 0 in location 1169
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: storing 0 in location 1169
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1506
9999 mem: location 1152 is 0
9999 mem: location 1169 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1152
9999 mem: storing 0 in location 1152
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1166 is 1140
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1140
9999 mem: decrementing refcount of 1140: 14 -> 13
9999 mem: storing 1140 in location 1348
9999 mem: incrementing refcount of 1140: 13 -> 14
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1347 is 1008
9999 mem: location 1348 is 1140
9999 mem: location 1353 is 0
9999 abandon: saving in free-list of size 104
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1140
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 1008 in location 1292
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: decrementing refcount of 1140: 14 -> 13
9999 mem: storing 1140 in location 1294
9999 mem: incrementing refcount of 1140: 13 -> 14
9999 mem: storing 0 in location 1307
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 25
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1506
9999 mem: location 1152 is 0
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1295
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1506
9999 mem: location 1152 is 0
9999 mem: location 1294 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1296
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1292 is 1008
9999 mem: location 1295 is 1
9999 mem: location 1296 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1156
9999 mem: incrementing refcount of 1008: 80 -> 81
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1158
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 0
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 81 -> 80
9999 mem: storing 1008 in location 1292
9999 mem: incrementing refcount of 1008: 80 -> 81
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1293 is 1286
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1253
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1286 in location 1256
9999 mem: incrementing refcount of 1286: 3 -> 4
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1256 is 1286
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 2
9999 mem: location 1288 is 1276
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy is 1287
9998 run: its type is "number"
9999 mem: location 1287 is 2
9999 mem: storing 2 in location 1257
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9999 mem: location 1287 is 2
9999 mem: location 1288 is 1276
9999 mem: location 1256 is 1286
9999 mem: skipping refcount at 1286
9998 run: address to copy is 1288
9998 run: its type is ("address" "array" "event")
9999 mem: location 1288 is 1276
9999 mem: storing 1276 in location 1258
9999 mem: incrementing refcount of 1276: 3 -> 4
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1258 is 1276
9999 mem: skipping refcount at 1276
9999 mem: storing 2 in location 1259
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1257 is 2
9999 mem: location 1259 is 2
9999 mem: storing 1 in location 1260
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
9999 mem: storing 1174 in location 1261
9999 mem: incrementing refcount of 1174: 0 -> 1
 105 run: return {dummy: ("address" "event"), "lookup": ()}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1261 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 0
9999 mem: location 1176 is 0
9999 mem: location 1177 is 0
9999 mem: location 1178 is 0
9999 mem: location 1256 is 1286
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1286
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 0 in location 1299
9999 mem: storing 0 in location 1300
9999 mem: decrementing refcount of 1286: 4 -> 3
9999 mem: storing 1286 in location 1293
9999 mem: incrementing refcount of 1286: 3 -> 4
9999 mem: storing 1 in location 1301
9999 mem: storing 1 in location 1302
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1302 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {console: ("address" "console"), "same-as-ingredient": "1"}, {editor: ("address" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1292 is 1008
9999 mem: location 1293 is 1286
9999 mem: location 1294 is 1140
9999 abandon: saving in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: {4: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1506
9999 mem: location 1152 is 0
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 4
 103 run: {5: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1506
9999 mem: location 1152 is 0
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 5
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .          .\n    .bc        .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
 102 run: memory-should-contain {"\n    4 <- 1\n    5 <- 0\n  ": "literal-string"}
9999 run: checking location 4
9999 run: checking location 5
 102 run: check-trace-count-for-label {3: "literal"}, {"print-character": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
