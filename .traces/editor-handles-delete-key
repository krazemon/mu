 102 run: assume-console {"\n    press delete\n  ": "literal-string"}
9993 parse: instruction: press
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {delete: ()}
9992 load: after rewriting: press {delete: ()}
9999 mem: storing 'press' event starting at 1401
9999 mem: storing console in 1405
9999 mem: storing console data in 1407
 102 run: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1002
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {console: ("address" "shared" "console")}
9993 parse:   ingredient: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 parse: recipe run_1002 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1002
9991 transform: --- rewrite 'stash' instructions in recipe run_1002
9991 transform: --- fill in reply ingredients from header for recipe run_1002
9991 transform: --- deduce types for recipe run_1002
9992 transform: screen => ("address" "shared" "screen")
9992 transform: console => ("address" "shared" "console")
9991 transform: --- check for invalid types in recipe run_1002
9991 transform: --- collect surrounding spaces for recipe run_1002
9991 transform: --- transform names for recipe run_1002
9991 transform: --- resolve ambiguous calls for recipe run_1002
9992 transform: instruction editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")} -> {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")}
9991 transform: --- compute instruction operations for recipe run_1002
9991 transform: --- transform braces for recipe run_1002
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1002
9991 transform: --- type-check 'call' instructions inside recipe run_1002
9991 transform: --- type-check calls inside recipe run_1002
9991 transform: --- convert 'new' to 'allocate' for recipe run_1002
9991 transform: --- type-check merge instructions in recipe run_1002
9991 transform: --- check types of reply instructions in recipe run_1002
9991 transform: --- checking reply instructions against header for run_1002
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1405
9999 mem: location 2 is 1140
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 abandon: picking up space from free-list of size 16
9999 mem: new alloc from free list: 1285
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1288
9999 mem: incrementing refcount of 1008: 77 -> 78
 104 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1405 in location 1289
9999 mem: incrementing refcount of 1405: 0 -> 1
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1290
9999 mem: incrementing refcount of 1140: 10 -> 11
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1291
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1292
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1288 is 1008
9999 mem: location 1291 is 1
9999 mem: location 1292 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1156
9999 mem: incrementing refcount of 1008: 78 -> 79
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1158
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 0
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 79 -> 78
9999 mem: storing 1008 in location 1288
9999 mem: incrementing refcount of 1008: 78 -> 79
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1289 is 1405
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1253
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1405 in location 1256
9999 mem: incrementing refcount of 1405: 1 -> 2
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1256 is 1405
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9999 mem: location 1406 is 0
9999 mem: location 1407 is 1399
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9998 run: address to copy is 1406
9998 run: its type is "number"
9999 mem: location 1406 is 0
9999 mem: storing 0 in location 1257
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9999 mem: location 1406 is 0
9999 mem: location 1407 is 1399
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9998 run: address to copy is 1407
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1407 is 1399
9999 mem: storing 1399 in location 1258
9999 mem: incrementing refcount of 1399: 1 -> 2
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1258 is 1399
9999 mem: skipping refcount at 1399
9999 mem: storing 1 in location 1259
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1257 is 0
9999 mem: location 1259 is 1
9999 mem: storing 0 in location 1260
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1258 is 1399
9999 mem: skipping refcount at 1399
9998 run: base address is 1400
9999 mem: location 1257 is 0
9998 run: address to copy is 1401
9998 run: its type is event
9999 mem: location 1401 is 1
9999 mem: location 1402 is 65522
9999 mem: location 1403 is 0
9999 mem: location 1404 is 0
9999 mem: storing 1 in location 1262
9999 mem: storing 65522 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1257 is 0
9999 mem: storing 1 in location 1257
 105 run: {console: ("address" "shared" "console"), "lookup": ()} <- put {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9999 mem: location 1406 is 0
9999 mem: location 1407 is 1399
9999 mem: location 1257 is 1
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9998 run: address to copy to is 1406
9999 mem: storing 1 in location 1406
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1262 is 1
9999 mem: location 1263 is 65522
9999 mem: location 1264 is 0
9999 mem: location 1265 is 0
9999 mem: location 1256 is 1405
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [1, 65522, 0, 0]
9998 run: result 1 is 1405
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 1 in location 1293
9999 mem: storing 65522 in location 1294
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: decrementing refcount of 1405: 2 -> 1
9999 mem: storing 1405 in location 1289
9999 mem: incrementing refcount of 1405: 1 -> 2
9999 mem: storing 1 in location 1297
9999 mem: storing 0 in location 1298
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1297 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1298 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: ("address" "touch-event")} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1293 is 1
9999 mem: location 1294 is 65522
9999 mem: location 1295 is 0
9999 mem: location 1296 is 0
9999 mem: storing 0 in location 1299
 104 run: jump-unless {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1299 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1299 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {e: "event"}
9999 mem: location 1288 is 1008
9999 mem: location 1290 is 1140
9999 mem: location 1293 is 1
9999 mem: location 1294 is 65522
9999 mem: location 1295 is 0
9999 mem: location 1296 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 74
9999 mem: allocating size 76
9999 abandon: picking up space from free-list of size 76
9999 mem: new alloc from free list: 1301
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1304
9999 mem: incrementing refcount of 1008: 79 -> 80
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1305
9999 mem: incrementing refcount of 1140: 11 -> 12
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1306
9999 mem: storing 65522 in location 1307
9999 mem: storing 0 in location 1308
9999 mem: storing 0 in location 1309
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1310
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1305 is 1140
9998 run: jumping to instruction 7
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1304 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1408
9999 mem: storing 3 in location 1409
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1411
9999 mem: incrementing refcount of 1008: 80 -> 81
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1411 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1411 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1411 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1412
 106 run: return {width: "number"}
9999 mem: location 1412 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1311
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1304 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1411
9999 mem: incrementing refcount of 1008: 81 -> 82
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1411 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1411 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1411 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1412
 106 run: return {height: "number"}
9999 mem: location 1412 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1312
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1313
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1146
9998 run: its type is "number"
9999 mem: location 1146 is 9
9999 mem: storing 9 in location 1314
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1144 is 1159
9999 mem: storing 1159 in location 1315
9999 mem: incrementing refcount of 1159: 20 -> 21
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1316
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1317
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1316 is 1
9999 mem: storing 1 in location 1318
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1317 is 0
9999 mem: storing 0 in location 1319
 105 run: {c: ("address" "character")} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1306 is 1
9999 mem: location 1307 is 65522
9999 mem: location 1308 is 0
9999 mem: location 1309 is 0
9999 mem: storing 0 in location 1320
 105 run: jump-unless {c: ("address" "character")}, {: "offset"}
9999 mem: location 1320 is 0
9998 run: jumping to instruction 449
 105 run: {k: ("address" "number")} <- maybe-convert {e: "event"}, {keycode: "variant"}
9999 mem: location 1306 is 1
9999 mem: location 1307 is 65522
9999 mem: location 1308 is 0
9999 mem: location 1309 is 0
9999 mem: storing 1307 in location 1364
 105 run: assert {k: ("address" "number")}, {"event was of unknown type; neither keyboard nor mouse": "literal-string"}
9999 mem: location 1364 is 1307
 105 run: {page-up?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65519: "literal", "page-up": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1337
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1337 is 0
9998 run: jumping to instruction 490
 105 run: {page-down?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65518: "literal", "page-down": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1348
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1348 is 0
9998 run: jumping to instruction 528
 105 run: {move-to-end-of-line?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65520: "literal", "end": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1353
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 563
 105 run: {move-to-start-of-line?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65521: "literal", "home": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1354
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1354 is 0
9998 run: jumping to instruction 598
 105 run: {move-to-next-line?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65516: "literal", "down-arrow": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1365
 105 run: jump-unless {move-to-next-line?: "boolean"}, {: "offset"}
9999 mem: location 1365 is 0
9998 run: jumping to instruction 632
 105 run: {move-to-previous-line?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65517: "literal", "up-arrow": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1366
 105 run: jump-unless {move-to-previous-line?: "boolean"}, {: "offset"}
9999 mem: location 1366 is 0
9998 run: jumping to instruction 666
 105 run: {move-to-previous-character?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65515: "literal", "left-arrow": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1367
 105 run: jump-unless {move-to-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1367 is 0
9998 run: jumping to instruction 707
 105 run: {move-to-next-character?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65514: "literal", "right-arrow": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 0 in location 1369
 105 run: jump-unless {move-to-next-character?: "boolean"}, {: "offset"}
9999 mem: location 1369 is 0
9998 run: jumping to instruction 746
 105 run: {delete-next-character?: "boolean"} <- equal {k: ("address" "number"), "lookup": ()}, {65522: "literal", "delete": ()}
9999 mem: location 1364 is 1307
9999 mem: location 1307 is 65522
9999 mem: storing 1 in location 1371
 105 run: jump-unless {delete-next-character?: "boolean"}, {: "offset"}
9999 mem: location 1371 is 1
9998 run: jump-unless fell through
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: storing 1159 in location 1341
9999 mem: incrementing refcount of 1159: 21 -> 22
 105 run: {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}, {go-render?: "boolean"}, {deleted-cell: ("address" "shared" "duplex-list" "character")} <- delete-at-cursor {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}
9999 mem: location 1305 is 1140
9999 mem: location 1304 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 abandon: picking up space from free-list of size 19
9999 mem: new alloc from free list: 1377
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1140 in location 1380
9999 mem: incrementing refcount of 1140: 12 -> 13
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1381
9999 mem: incrementing refcount of 1008: 82 -> 83
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1144 is 1159
9999 mem: storing 1159 in location 1382
9999 mem: incrementing refcount of 1159: 22 -> 23
 106 run: {data: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1141
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1141 is 1159
9999 mem: storing 1159 in location 1383
9999 mem: incrementing refcount of 1159: 23 -> 24
 106 run: {deleted-cell: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1382 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1411
9999 mem: incrementing refcount of 1159: 24 -> 25
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1411 is 1159
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1411 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1179
9999 mem: location 1162 is 0
9999 mem: location 1411 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1161 is 1179
9999 mem: storing 1179 in location 1412
9999 mem: incrementing refcount of 1179: 17 -> 18
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1412 is 1179
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1179
9999 mem: storing 1179 in location 1384
9999 mem: incrementing refcount of 1179: 18 -> 19
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1385
 106 run: jump-if {deleted-cell: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1384 is 1179
9998 run: jumping to instruction 9
 106 run: {currc: "character"} <- get {deleted-cell: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1384 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1159
9999 mem: location 1384 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1180
9998 run: its type is "character"
9999 mem: location 1180 is 98
9999 mem: storing 98 in location 1386
 106 run: {data: ("address" "shared" "duplex-list" "character")} <- remove_2 {deleted-cell: ("address" "shared" "duplex-list" "character")}, {data: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1384 is 1179
9999 mem: location 1383 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1163
 107 run: {x: ("address" "shared" "duplex-list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9999 mem: storing 1179 in location 1166
9999 mem: incrementing refcount of 1179: 19 -> 20
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1167
9999 mem: incrementing refcount of 1159: 25 -> 26
 107 run: jump-if {x: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1166 is 1179
9998 run: jumping to instruction 5
 107 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {x: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1159
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1181
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1181 is 1183
9999 mem: storing 1183 in location 1168
9999 mem: incrementing refcount of 1183: 13 -> 14
 107 run: {prev-node: ("address" "shared" "duplex-list" "character")} <- get {x: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1159
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1182
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1182 is 1159
9999 mem: storing 1159 in location 1169
9999 mem: incrementing refcount of 1159: 26 -> 27
 107 run: {x: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {x: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1159
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy to is 1181
9999 mem: storing 0 in location 1181
 107 run: {x: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {x: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {0: "literal"}
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 0
9999 mem: location 1182 is 1159
9999 mem: location 1166 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy to is 1182
9999 mem: storing 0 in location 1182
 107 run: jump-unless {next-node: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1183
9998 run: jump-unless fell through
 107 run: {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {prev-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1179
9999 mem: location 1169 is 1159
9999 mem: location 1168 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy to is 1186
9999 mem: storing 1159 in location 1186
 107 run: jump-unless {prev-node: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1169 is 1159
9998 run: jump-unless fell through
 107 run: {prev-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {prev-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1169 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1179
9999 mem: location 1162 is 0
9999 mem: location 1168 is 1183
9999 mem: location 1169 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy to is 1161
9999 mem: storing 1183 in location 1161
 107 run: return {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1167 is 1159
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1159
9999 mem: decrementing refcount of 1159: 27 -> 26
9999 mem: storing 1159 in location 1383
9999 mem: incrementing refcount of 1159: 26 -> 27
 106 run: {deleted-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1386 is 98
9999 mem: storing 0 in location 1387
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1385
 106 run: jump-unless {deleted-newline?: "boolean"}, {1: "offset"}
9999 mem: location 1387 is 0
9998 run: jumping to instruction 15
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1382 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1411
9999 mem: incrementing refcount of 1159: 27 -> 28
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1411 is 1159
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1411 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1183
9999 mem: location 1162 is 0
9999 mem: location 1411 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1161 is 1183
9999 mem: storing 1183 in location 1412
9999 mem: incrementing refcount of 1183: 14 -> 15
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1412 is 1183
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: storing 1183 in location 1388
9999 mem: incrementing refcount of 1183: 15 -> 16
 106 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1389
 106 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1380 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1390
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1381 is 1008
9999 mem: location 1389 is 1
9999 mem: location 1390 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1156
9999 mem: incrementing refcount of 1008: 83 -> 84
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1158
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 0
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 84 -> 83
9999 mem: storing 1008 in location 1381
9999 mem: incrementing refcount of 1008: 83 -> 84
 106 run: {curr-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1391
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1381 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1411
9999 mem: incrementing refcount of 1008: 84 -> 85
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1411 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1411 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1411 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1412
 107 run: return {width: "number"}
9999 mem: location 1412 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1392
 106 run: {at-right?: "boolean"} <- greater-or-equal {curr-column: "number"}, {screen-width: "number"}
9999 mem: location 1391 is 0
9999 mem: location 1392 is 10
9999 mem: storing 0 in location 1393
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1385
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 26
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1388 is 1183
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1388 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1159
9999 mem: location 1388 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1184
9998 run: its type is "character"
9999 mem: location 1184 is 99
9999 mem: storing 99 in location 1386
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1386 is 99
9999 mem: storing 0 in location 1394
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1381 is 1008
9999 mem: location 1386 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1227
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1230
9999 mem: incrementing refcount of 1008: 85 -> 86
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1231
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1232
9999 mem: storing 0 in location 1233
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1232
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1234
9999 mem: storing 0 in location 1235
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1235 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1234
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1231 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1230 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1236
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1237
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1238
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1238 is 1
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1237 is 5
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1240
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1240 is 0
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1240 is 0
9999 mem: location 1236 is 10
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 99
9999 mem: storing 0 in location 1241
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1236 is 10
9999 mem: storing 10 in location 1244
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1244 is 10
9999 mem: location 1240 is 0
9999 mem: storing 10 in location 1244
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1245
9999 mem: incrementing refcount of 1014: 48 -> 49
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1246
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1231 is 99
9999 mem: storing 0 in location 1247
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1231 is 99
9999 mem: location 1232 is 7
9999 mem: storing 99 in location 1249
9999 mem: storing 7 in location 1250
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1244 is 10
9998 run: address to copy to is 1036
9999 mem: location 1249 is 99
9999 mem: location 1250 is 7
9999 mem: storing 99 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1236 is 10
9999 mem: storing 9 in location 1251
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1240 is 0
9999 mem: location 1251 is 9
9999 mem: storing 0 in location 1252
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1252 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1240 is 0
9999 mem: storing 1 in location 1240
9990 schedule: print/delete-at-cursor/handle-keyboard-event/editor-event-loop/run_1002/scenario_editor-handles-delete-key
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 1
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1230 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 86 -> 85
9999 mem: storing 1008 in location 1381
9999 mem: incrementing refcount of 1008: 85 -> 86
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1391 is 0
9999 mem: storing 1 in location 1391
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1388 is 1183
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1183 in location 1411
9999 mem: incrementing refcount of 1183: 16 -> 17
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1411 is 1183
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1411 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1159
9999 mem: location 1411 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1185 is 0
9999 mem: storing 0 in location 1412
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1412 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1183: 17 -> 16
9999 mem: storing 0 in location 1388
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {at-right?: "boolean"} <- greater-or-equal {curr-column: "number"}, {screen-width: "number"}
9999 mem: location 1391 is 1
9999 mem: location 1392 is 10
9999 mem: storing 0 in location 1393
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1385
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 26
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1388 is 0
9998 run: jumping to instruction 34
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1395
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}
9999 mem: location 1381 is 1008
9999 mem: location 1395 is 32
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1227
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1230
9999 mem: incrementing refcount of 1008: 86 -> 87
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1231
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1232
9999 mem: storing 0 in location 1233
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1232
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1234
9999 mem: storing 0 in location 1235
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1235 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1234
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1231 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1230 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1236
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1237
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1238
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1238 is 1
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1237 is 5
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1240
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1240 is 1
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1240 is 1
9999 mem: location 1236 is 10
9999 mem: storing 1 in location 1239
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1239 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 32
9999 mem: storing 0 in location 1241
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1241 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1238 is 1
9999 mem: location 1236 is 10
9999 mem: storing 10 in location 1244
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1244 is 10
9999 mem: location 1240 is 1
9999 mem: storing 11 in location 1244
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1245
9999 mem: incrementing refcount of 1014: 49 -> 50
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1246
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1231 is 32
9999 mem: storing 0 in location 1247
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1231 is 32
9999 mem: location 1232 is 7
9999 mem: storing 32 in location 1249
9999 mem: storing 7 in location 1250
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1245 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1244 is 11
9998 run: address to copy to is 1038
9999 mem: location 1249 is 32
9999 mem: location 1250 is 7
9999 mem: storing 32 in location 1038
9999 mem: storing 7 in location 1039
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1236 is 10
9999 mem: storing 9 in location 1251
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1240 is 1
9999 mem: location 1251 is 9
9999 mem: storing 0 in location 1252
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1252 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1240 is 1
9999 mem: storing 2 in location 1240
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 2
9999 mem: location 1230 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1230 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 87 -> 86
9999 mem: storing 1008 in location 1381
9999 mem: incrementing refcount of 1008: 86 -> 87
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1385
 106 run: reply {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}, {go-render?: "boolean"}, {deleted-cell: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1380 is 1140
9999 mem: location 1381 is 1008
9999 mem: location 1385 is 0
9999 mem: location 1384 is 1179
9999 abandon: saving in free-list of size 19
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1140
9998 run: result 1 is 1008
9998 run: result 2 is 0
9998 run: result 3 is 1179
9999 mem: decrementing refcount of 1140: 13 -> 12
9999 mem: storing 1140 in location 1305
9999 mem: incrementing refcount of 1140: 12 -> 13
9999 mem: decrementing refcount of 1008: 87 -> 86
9999 mem: storing 1008 in location 1304
9999 mem: incrementing refcount of 1008: 86 -> 87
9999 mem: storing 0 in location 1310
9999 mem: storing 1179 in location 1372
9999 mem: incrementing refcount of 1179: 20 -> 21
 105 run: jump-unless {deleted-cell: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1372 is 1179
9998 run: jump-unless fell through
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: storing 1159 in location 1343
9999 mem: incrementing refcount of 1159: 28 -> 29
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1316
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1317
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1144 is 1159
9999 mem: decrementing refcount of 1159: 29 -> 28
9999 mem: storing 1159 in location 1315
9999 mem: incrementing refcount of 1159: 28 -> 29
 105 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1305 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1151
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1151 is 1396
9999 mem: storing 1396 in location 1324
9999 mem: incrementing refcount of 1396: 2 -> 3
 105 run: jump-unless {undo: ("address" "shared" "list" "address" "shared" "operation")}, {: "offset"}
9999 mem: location 1324 is 1396
9998 run: jump-unless fell through
 105 run: {op: ("address" "shared" "operation")} <- first_3 {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1324 is 1396
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 106 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1396 in location 1411
9999 mem: incrementing refcount of 1396: 3 -> 4
 106 run: {result: ("address" "shared" "operation")} <- get {in: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1411 is 1396
9999 mem: skipping refcount at 1396
9999 mem: location 1397 is 1215
9999 mem: location 1398 is 0
9999 mem: location 1411 is 1396
9999 mem: skipping refcount at 1396
9998 run: address to copy is 1397
9998 run: its type is ("address" "shared" "operation")
9999 mem: location 1397 is 1215
9999 mem: storing 1215 in location 1412
9999 mem: incrementing refcount of 1215: 3 -> 4
 106 run: reply {result: ("address" "shared" "operation")}
9999 mem: location 1412 is 1215
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1215
9999 mem: storing 1215 in location 1323
9999 mem: incrementing refcount of 1215: 4 -> 5
 105 run: {deletion: ("address" "delete-operation")} <- maybe-convert {op: ("address" "shared" "operation"), "lookup": ()}, {delete: "variant"}
9999 mem: location 1323 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 2
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1179
9999 mem: location 1226 is 2
9999 mem: location 1323 is 1215
9999 mem: skipping refcount at 1215
9999 mem: storing 1217 in location 1325
 105 run: jump-unless {deletion: ("address" "delete-operation")}, {: "offset"}
9999 mem: location 1325 is 1217
9998 run: jump-unless fell through
 105 run: {previous-coalesce-tag: "number"} <- get {deletion: ("address" "delete-operation"), "lookup": ()}, {tag: "offset"}
9999 mem: location 1325 is 1217
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1179
9999 mem: location 1226 is 2
9999 mem: location 1325 is 1217
9998 run: address to copy is 1226
9998 run: its type is "number"
9999 mem: location 1226 is 2
9999 mem: storing 2 in location 1344
 105 run: {coalesce?: "boolean"} <- equal {previous-coalesce-tag: "number"}, {2: "literal", "coalesce-delete": ()}
9999 mem: location 1344 is 2
9999 mem: storing 1 in location 1345
 105 run: jump-unless {coalesce?: "boolean"}, {: "offset"}
9999 mem: location 1345 is 1
9998 run: jump-unless fell through
 105 run: {delete-until: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1315 is 1159
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1159 in location 1411
9999 mem: incrementing refcount of 1159: 29 -> 30
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1411 is 1159
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1411 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1183
9999 mem: location 1162 is 0
9999 mem: location 1411 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1161 is 1183
9999 mem: storing 1183 in location 1412
9999 mem: incrementing refcount of 1183: 16 -> 17
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1412 is 1183
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1183
9999 mem: storing 1183 in location 1373
9999 mem: incrementing refcount of 1183: 17 -> 18
 105 run: {deletion: ("address" "delete-operation"), "lookup": ()} <- put {deletion: ("address" "delete-operation"), "lookup": ()}, {delete-until: "offset"}, {delete-until: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1325 is 1217
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1179
9999 mem: location 1226 is 2
9999 mem: location 1373 is 1183
9999 mem: location 1325 is 1217
9998 run: address to copy to is 1225
9999 mem: storing 1183 in location 1225
 105 run: {deleted-so-far: ("address" "shared" "duplex-list" "character")} <- get {deletion: ("address" "delete-operation"), "lookup": ()}, {deleted-text: "offset"}
9999 mem: location 1325 is 1217
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1183
9999 mem: location 1226 is 2
9999 mem: location 1325 is 1217
9998 run: address to copy is 1223
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1223 is 1170
9999 mem: storing 1170 in location 1374
9999 mem: incrementing refcount of 1170: 16 -> 17
 105 run: {deleted-so-far: ("address" "shared" "duplex-list" "character")} <- append_5 {deleted-so-far: ("address" "shared" "duplex-list" "character")}, {deleted-cell: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1374 is 1170
9999 mem: location 1372 is 1179
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1170 in location 1156
9999 mem: incrementing refcount of 1170: 17 -> 18
 106 run: {new: ("address" "shared" "duplex-list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9999 mem: storing 1179 in location 1157
9999 mem: incrementing refcount of 1179: 21 -> 22
 106 run: {last: ("address" "shared" "duplex-list" "character")} <- last_2 {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1156 is 1170
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1413
9999 mem: storing 4 in location 1414
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1170 in location 1416
9999 mem: incrementing refcount of 1170: 18 -> 19
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- copy {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1416 is 1170
9999 mem: storing 1170 in location 1417
9999 mem: incrementing refcount of 1170: 19 -> 20
 107 run: {next: ("address" "shared" "duplex-list" "character")} <- next_2 {result: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1417 is 1170
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
 108 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1170 in location 1411
9999 mem: incrementing refcount of 1170: 20 -> 21
 108 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1411 is 1170
9998 run: jumping to instruction 4
 108 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1411 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 0
9999 mem: location 1173 is 0
9999 mem: location 1411 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1172
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1172 is 0
9999 mem: storing 0 in location 1412
 108 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1412 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1418
 107 run: jump-unless {next: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1418 is 0
9998 run: jumping to instruction 8
 107 run: reply {result: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1417 is 1170
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1170
9999 mem: storing 1170 in location 1158
9999 mem: incrementing refcount of 1170: 21 -> 22
 106 run: {last: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {last: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1158 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 0
9999 mem: location 1173 is 0
9999 mem: location 1157 is 1179
9999 mem: location 1158 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy to is 1172
9999 mem: storing 1179 in location 1172
 106 run: jump-if {new: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1157 is 1179
9998 run: jumping to instruction 7
 106 run: {new: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {last: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1157 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 0
9999 mem: location 1182 is 0
9999 mem: location 1158 is 1170
9999 mem: location 1157 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy to is 1182
9999 mem: storing 1170 in location 1182
 106 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1170
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1170
9999 mem: decrementing refcount of 1170: 22 -> 21
9999 mem: storing 1170 in location 1374
9999 mem: incrementing refcount of 1170: 21 -> 22
 105 run: {deletion: ("address" "delete-operation"), "lookup": ()} <- put {deletion: ("address" "delete-operation"), "lookup": ()}, {deleted-text: "offset"}, {deleted-so-far: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1325 is 1217
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1183
9999 mem: location 1226 is 2
9999 mem: location 1374 is 1170
9999 mem: location 1325 is 1217
9998 run: address to copy to is 1223
9999 mem: storing 1170 in location 1223
 105 run: {deletion: ("address" "delete-operation"), "lookup": ()} <- put {deletion: ("address" "delete-operation"), "lookup": ()}, {after-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1325 is 1217
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1183
9999 mem: location 1226 is 2
9999 mem: location 1316 is 1
9999 mem: location 1325 is 1217
9998 run: address to copy to is 1220
9999 mem: storing 1 in location 1220
 105 run: {deletion: ("address" "delete-operation"), "lookup": ()} <- put {deletion: ("address" "delete-operation"), "lookup": ()}, {after-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1325 is 1217
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1183
9999 mem: location 1226 is 2
9999 mem: location 1317 is 0
9999 mem: location 1325 is 1217
9998 run: address to copy to is 1221
9999 mem: storing 0 in location 1221
 105 run: {deletion: ("address" "delete-operation"), "lookup": ()} <- put {deletion: ("address" "delete-operation"), "lookup": ()}, {after-top-of-screen: "offset"}, {top-after: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1325 is 1217
9999 mem: location 1217 is 1
9999 mem: location 1218 is 0
9999 mem: location 1219 is 1159
9999 mem: location 1220 is 1
9999 mem: location 1221 is 0
9999 mem: location 1222 is 1159
9999 mem: location 1223 is 1170
9999 mem: location 1224 is 1159
9999 mem: location 1225 is 1183
9999 mem: location 1226 is 2
9999 mem: location 1343 is 1159
9999 mem: location 1325 is 1217
9998 run: address to copy to is 1222
9999 mem: storing 1159 in location 1222
 105 run: jump {+handle-keyboard-event_1_278+done-adding-delete-operation: "label"}
9998 run: jumping to instruction 783
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1304 is 1008
9999 mem: location 1305 is 1140
9999 mem: location 1310 is 0
9999 abandon: saving in free-list of size 76
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1140
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1008: 87 -> 86
9999 mem: storing 1008 in location 1288
9999 mem: incrementing refcount of 1008: 86 -> 87
9999 mem: decrementing refcount of 1140: 13 -> 12
9999 mem: storing 1140 in location 1290
9999 mem: incrementing refcount of 1140: 12 -> 13
9999 mem: storing 0 in location 1300
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1300 is 0
9998 run: jumping to instruction 25
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1291
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1396
9999 mem: location 1152 is 0
9999 mem: location 1290 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1292
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1288 is 1008
9999 mem: location 1291 is 1
9999 mem: location 1292 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1156
9999 mem: incrementing refcount of 1008: 87 -> 88
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1158
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 0
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 88 -> 87
9999 mem: storing 1008 in location 1288
9999 mem: incrementing refcount of 1008: 87 -> 88
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1289 is 1405
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1253
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1405 in location 1256
9999 mem: incrementing refcount of 1405: 2 -> 3
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1256 is 1405
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9999 mem: location 1406 is 1
9999 mem: location 1407 is 1399
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9998 run: address to copy is 1406
9998 run: its type is "number"
9999 mem: location 1406 is 1
9999 mem: storing 1 in location 1257
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9999 mem: location 1406 is 1
9999 mem: location 1407 is 1399
9999 mem: location 1256 is 1405
9999 mem: skipping refcount at 1405
9998 run: address to copy is 1407
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1407 is 1399
9999 mem: storing 1399 in location 1258
9999 mem: incrementing refcount of 1399: 2 -> 3
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1258 is 1399
9999 mem: skipping refcount at 1399
9999 mem: storing 1 in location 1259
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1257 is 1
9999 mem: location 1259 is 1
9999 mem: storing 1 in location 1260
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "shared" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1408
9999 mem: storing 1408 in location 1261
9999 mem: incrementing refcount of 1408: 0 -> 1
 105 run: return {dummy: ("address" "shared" "event"), "lookup": ()}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1261 is 1408
9999 mem: skipping refcount at 1408
9999 mem: location 1409 is 0
9999 mem: location 1410 is 0
9999 mem: location 1411 is 0
9999 mem: location 1412 is 0
9999 mem: location 1256 is 1405
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1405
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1293
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: decrementing refcount of 1405: 3 -> 2
9999 mem: storing 1405 in location 1289
9999 mem: incrementing refcount of 1405: 2 -> 3
9999 mem: storing 1 in location 1297
9999 mem: storing 1 in location 1298
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1297 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1298 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {console: ("address" "shared" "console"), "same-as-ingredient": "1"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1288 is 1008
9999 mem: location 1289 is 1405
9999 mem: location 1290 is 1140
9999 abandon: saving in free-list of size 16
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .          .\n    .c         .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
 102 run: check-trace-count-for-label {2: "literal"}, {"print-character": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
