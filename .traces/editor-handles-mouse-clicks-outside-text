 102 run: assume-console {"\n    left-click 1, 7  # last line, to the right of text\n  ": "literal-string"}
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "literal"}
9993 parse:   ingredient: {7: "literal"}
9992 load: after rewriting: left-click {1: "literal"}, {7: "literal"}
9999 mem: storing 'left-click' event starting at 1255
9999 mem: storing console in 1259
9999 mem: storing console data in 1261
 102 run: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n    3:number <- get *2:address:editor-data, cursor-row:offset\n    4:number <- get *2:address:editor-data, cursor-column:offset\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {console: ("address" "console")}
9993 parse:   ingredient: {2: ("address" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-row: "offset"}
9993 parse:   product: {3: "number"}
9992 load: after rewriting: {3: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-column: "offset"}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9992 transform: console => ("address" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element cursor-row of type editor-data is at offset 7
9993 name: element cursor-column of type editor-data is at offset 8
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")} -> {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9993 transform: - compute address offsets for {3: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9993 transform: - compute address offsets for {4: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform: get ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1259
9999 mem: location 2 is 1140
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1262
9999 mem: storing 0 in location 1262
9999 mem: storing 0 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
9999 mem: storing 0 in location 1266
9999 mem: storing 0 in location 1267
9999 mem: storing 0 in location 1268
9999 mem: storing 0 in location 1269
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: storing 0 in location 1276
9999 mem: storing 0 in location 1277
9999 mem: storing 0 in location 1278
9999 mem: storing 0 in location 1279
9999 mem: storing 0 in location 1280
9999 mem: storing 17 in location 1263
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1265 is 0
9999 mem: incrementing refcount of 1008: 4 -> 5
9999 mem: storing 1008 in location 1265
 104 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1266 is 0
9999 mem: incrementing refcount of 1259: 1 -> 2
9999 mem: storing 1259 in location 1266
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1267 is 0
9999 mem: incrementing refcount of 1140: 3 -> 4
9999 mem: storing 1140 in location 1267
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1268
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1269
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1265 is 1008
9999 mem: location 1268 is 1
9999 mem: location 1269 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1156
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1158
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 0
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1157
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1153
9999 abandon: updating refcounts inside 1153: (array number)
9999 abandon: saving 1153 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1265
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1266 is 1259
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1281
9999 mem: storing 0 in location 1281
9999 mem: storing 0 in location 1282
9999 mem: storing 0 in location 1283
9999 mem: storing 0 in location 1284
9999 mem: storing 0 in location 1285
9999 mem: storing 0 in location 1286
9999 mem: storing 0 in location 1287
9999 mem: storing 0 in location 1288
9999 mem: storing 0 in location 1289
9999 mem: storing 0 in location 1290
9999 mem: storing 0 in location 1291
9999 mem: storing 0 in location 1292
9999 mem: storing 0 in location 1293
9999 mem: storing 0 in location 1294
9999 mem: storing 12 in location 1282
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1284 is 0
9999 mem: incrementing refcount of 1259: 2 -> 3
9999 mem: storing 1259 in location 1284
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1284 is 1259
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9999 mem: location 1260 is 0
9999 mem: location 1261 is 1253
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9998 run: address to copy is 1260
9998 run: its type is "number"
9999 mem: location 1260 is 0
9999 mem: storing 0 in location 1285
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9999 mem: location 1260 is 0
9999 mem: location 1261 is 1253
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9998 run: address to copy is 1261
9998 run: its type is ("address" "array" "event")
9999 mem: location 1261 is 1253
9999 mem: location 1286 is 0
9999 mem: incrementing refcount of 1253: 1 -> 2
9999 mem: storing 1253 in location 1286
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1286 is 1253
9999 mem: skipping refcount at 1253
9999 mem: storing 1 in location 1287
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1285 is 0
9999 mem: location 1287 is 1
9999 mem: storing 0 in location 1288
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1288 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1286 is 1253
9999 mem: skipping refcount at 1253
9998 run: base address is 1254
9999 mem: location 1285 is 0
9998 run: address to copy is 1255
9998 run: its type is event
9999 mem: location 1255 is 2
9999 mem: location 1256 is 65513
9999 mem: location 1257 is 1
9999 mem: location 1258 is 7
9999 mem: storing 2 in location 1290
9999 mem: storing 65513 in location 1291
9999 mem: storing 1 in location 1292
9999 mem: storing 7 in location 1293
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1285 is 0
9999 mem: storing 1 in location 1285
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9999 mem: location 1260 is 0
9999 mem: location 1261 is 1253
9999 mem: location 1285 is 1
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9998 run: address to copy to is 1260
9999 mem: storing 1 in location 1260
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1290 is 2
9999 mem: location 1291 is 65513
9999 mem: location 1292 is 1
9999 mem: location 1293 is 7
9999 mem: location 1284 is 1259
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1285
9999 mem: clearing buf:address:array:event
9999 mem: location 1286 is 1253
9999 mem: skipping refcount at 1253
9999 mem: decrementing refcount of 1253: 2 -> 1
9999 mem: storing 0 in location 1286
9999 mem: clearing max:number
9999 mem: storing 0 in location 1287
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1288
9999 mem: clearing dummy:address:event
9999 mem: location 1289 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1289
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1285
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1294
9999 mem: automatically abandoning 1281
9999 abandon: updating refcounts inside 1281: (array number)
9999 abandon: saving 1281 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 1, 7]
9998 run: result 1 is 1259
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1270
9999 mem: storing 65513 in location 1271
9999 mem: storing 1 in location 1272
9999 mem: storing 7 in location 1273
9999 mem: storing 1259 in location 1266
9999 mem: storing 1 in location 1274
9999 mem: storing 0 in location 1275
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1274 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1275 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1270 is 2
9999 mem: location 1271 is 65513
9999 mem: location 1272 is 1
9999 mem: location 1273 is 7
9999 mem: storing 1 in location 1279
9999 mem: storing 65513 in location 1276
9999 mem: storing 1 in location 1277
9999 mem: storing 7 in location 1278
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1279 is 1
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {t: "touch-event"}
9999 mem: location 1265 is 1008
9999 mem: location 1267 is 1140
9999 mem: location 1276 is 65513
9999 mem: location 1277 is 1
9999 mem: location 1278 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1295
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 0 in location 1299
9999 mem: storing 0 in location 1300
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: storing 0 in location 1305
9999 mem: storing 0 in location 1306
9999 mem: storing 0 in location 1307
9999 mem: storing 0 in location 1308
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: storing 0 in location 1311
9999 mem: storing 0 in location 1312
9999 mem: storing 0 in location 1313
9999 mem: storing 0 in location 1314
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
9999 mem: storing 0 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 31 in location 1296
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1298 is 0
9999 mem: incrementing refcount of 1008: 6 -> 7
9999 mem: storing 1008 in location 1298
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1299 is 0
9999 mem: incrementing refcount of 1140: 4 -> 5
9999 mem: storing 1140 in location 1299
 105 run: {t: "touch-event"} <- next-ingredient-without-typechecking 
9999 mem: storing 65513 in location 1300
9999 mem: storing 1 in location 1301
9999 mem: storing 7 in location 1302
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1299 is 1140
9998 run: jumping to instruction 7
 105 run: {click-row: "number"} <- get {t: "touch-event"}, {row: "offset"}
9999 mem: location 1300 is 65513
9999 mem: location 1301 is 1
9999 mem: location 1302 is 7
9998 run: address to copy is 1301
9998 run: its type is "number"
9999 mem: location 1301 is 1
9999 mem: storing 1 in location 1303
 105 run: jump-if {click-row: "number"}, {: "offset"}
9999 mem: location 1303 is 1
9998 run: jumping to instruction 12
 105 run: {click-column: "number"} <- get {t: "touch-event"}, {column: "offset"}
9999 mem: location 1300 is 65513
9999 mem: location 1301 is 1
9999 mem: location 1302 is 7
9998 run: address to copy is 1302
9998 run: its type is "number"
9999 mem: location 1302 is 7
9999 mem: storing 7 in location 1304
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1305
 105 run: {too-far-left?: "boolean"} <- lesser-than {click-column: "number"}, {left: "number"}
9999 mem: location 1304 is 7
9999 mem: location 1305 is 0
9999 mem: storing 0 in location 1306
 105 run: jump-unless {too-far-left?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jumping to instruction 19
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1146
9998 run: its type is "number"
9999 mem: location 1146 is 9
9999 mem: storing 9 in location 1307
 105 run: {too-far-right?: "boolean"} <- greater-than {click-column: "number"}, {right: "number"}
9999 mem: location 1304 is 7
9999 mem: location 1307 is 9
9999 mem: storing 0 in location 1308
 105 run: jump-unless {too-far-right?: "boolean"}, {: "offset"}
9999 mem: location 1308 is 0
9998 run: jumping to instruction 25
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1309
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1310
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: location 1311 is 0
9999 mem: incrementing refcount of 1159: 7 -> 8
9999 mem: storing 1159 in location 1311
 105 run: {editor: ("address" "editor-data")} <- snap-cursor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {click-row: "number"}, {click-column: "number"}
9999 mem: location 1298 is 1008
9999 mem: location 1299 is 1140
9999 mem: location 1303 is 1
9999 mem: location 1304 is 7
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1187
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1008: 7 -> 8
9999 mem: storing 1008 in location 1190
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1191 is 0
9999 mem: incrementing refcount of 1140: 5 -> 6
9999 mem: storing 1140 in location 1191
 106 run: {target-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1192
 106 run: {target-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1193
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1191 is 1140
9998 run: jumping to instruction 8
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1145
9998 run: its type is "number"
9999 mem: location 1145 is 0
9999 mem: storing 0 in location 1194
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1146
9998 run: its type is "number"
9999 mem: location 1146 is 9
9999 mem: storing 9 in location 1195
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1190 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1008: 8 -> 9
9999 mem: storing 1008 in location 1177
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1177 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1178
 107 run: return {height: "number"}
9999 mem: location 1178 is 5
9999 mem: clearing screen:address:screen
9999 mem: location 1177 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 9 -> 8
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1196
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: location 1197 is 0
9999 mem: incrementing refcount of 1159: 8 -> 9
9999 mem: storing 1159 in location 1197
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1159
9999 mem: location 1198 is 0
9999 mem: incrementing refcount of 1159: 9 -> 10
9999 mem: storing 1159 in location 1198
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1159: 10 -> 11
9999 mem: storing 1159 in location 1177
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1159
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1170
9999 mem: location 1162 is 0
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1170
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1170: 5 -> 6
9999 mem: storing 1170 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1170
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 11 -> 10
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1170
9999 mem: storing 1170 in location 1197
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1199
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1194 is 0
9999 mem: storing 0 in location 1200
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {target-row: "number"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1192 is 1
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1148
9999 mem: storing 1 in location 1148
 106 run: {cursor-row: "number"} <- copy {target-row: "number"}
9999 mem: location 1192 is 1
9999 mem: storing 1 in location 1201
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {target-column: "number"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1193 is 7
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1149
9999 mem: storing 7 in location 1149
 106 run: {cursor-column: "number"} <- copy {target-column: "number"}
9999 mem: location 1193 is 7
9999 mem: storing 7 in location 1202
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 7
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1159
9999 mem: location 1203 is 0
9999 mem: incrementing refcount of 1159: 10 -> 11
9999 mem: storing 1159 in location 1203
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 1170
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1196 is 5
9999 mem: storing 0 in location 1204
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1204 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1205 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 0
9999 mem: location 1202 is 7
9999 mem: storing 0 in location 1206
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1206 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1197 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1171
9998 run: its type is "character"
9999 mem: location 1171 is 97
9999 mem: storing 97 in location 1207
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1207 is 97
9999 mem: storing 0 in location 1208
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1200 is 0
9999 mem: location 1195 is 9
9999 mem: storing 0 in location 1210
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jumping to instruction 61
9990 schedule: snap-cursor/move-cursor-in-editor/editor-event-loop/run_1001/scenario_editor-handles-mouse-clicks-outside-text
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1170
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1170: 6 -> 7
9999 mem: storing 1170 in location 1177
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1170
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1172
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1172 is 1179
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1179: 5 -> 6
9999 mem: storing 1179 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1179
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9999 mem: decrementing refcount of 1170: 7 -> 6
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1179
9999 mem: storing 1179 in location 1197
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1159
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1159: 11 -> 12
9999 mem: storing 1159 in location 1177
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1159
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 167
9999 mem: location 1161 is 1170
9999 mem: location 1162 is 0
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1170
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1170: 6 -> 7
9999 mem: storing 1170 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1170
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1177 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 12 -> 11
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1170
9999 mem: storing 1170 in location 1198
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1200 is 0
9999 mem: storing 1 in location 1200
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 1179
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1196 is 5
9999 mem: storing 0 in location 1204
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1204 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1205 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 1
9999 mem: location 1202 is 7
9999 mem: storing 0 in location 1206
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1206 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1170
9999 mem: location 1197 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1180
9998 run: its type is "character"
9999 mem: location 1180 is 98
9999 mem: storing 98 in location 1207
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1207 is 98
9999 mem: storing 0 in location 1208
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1200 is 1
9999 mem: location 1195 is 9
9999 mem: storing 0 in location 1210
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1179
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1179: 6 -> 7
9999 mem: storing 1179 in location 1177
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1179
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1170
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1181
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1181 is 1183
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1183: 2 -> 3
9999 mem: storing 1183 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1183
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9999 mem: decrementing refcount of 1179: 7 -> 6
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: storing 1183 in location 1197
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1170
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1170: 7 -> 8
9999 mem: storing 1170 in location 1177
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1170
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9999 mem: location 1171 is 97
9999 mem: location 1172 is 1179
9999 mem: location 1173 is 1159
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9998 run: address to copy is 1172
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1172 is 1179
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1179: 6 -> 7
9999 mem: storing 1179 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1179
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1177 is 1170
9999 mem: skipping refcount at 1170
9999 mem: decrementing refcount of 1170: 8 -> 7
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1179
9999 mem: storing 1179 in location 1198
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1200 is 1
9999 mem: storing 2 in location 1200
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 1183
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1196 is 5
9999 mem: storing 0 in location 1204
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1204 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1205 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 2
9999 mem: location 1202 is 7
9999 mem: storing 0 in location 1206
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1206 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1179
9999 mem: location 1197 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1184
9998 run: its type is "character"
9999 mem: location 1184 is 99
9999 mem: storing 99 in location 1207
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1207 is 99
9999 mem: storing 0 in location 1208
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1200 is 2
9999 mem: location 1195 is 9
9999 mem: storing 0 in location 1210
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1197 is 1183
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1183: 3 -> 4
9999 mem: storing 1183 in location 1177
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1183
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1183
9999 mem: skipping refcount at 1183
9999 mem: location 1184 is 99
9999 mem: location 1185 is 0
9999 mem: location 1186 is 1179
9999 mem: location 1177 is 1183
9999 mem: skipping refcount at 1183
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 0
9999 mem: location 1178 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 0
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1177 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 4 -> 3
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1197
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1179
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1177 is 0
9999 mem: incrementing refcount of 1179: 7 -> 8
9999 mem: storing 1179 in location 1177
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1177 is 1179
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9999 mem: location 1180 is 98
9999 mem: location 1181 is 1183
9999 mem: location 1182 is 1170
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9998 run: address to copy is 1181
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1181 is 1183
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1183: 3 -> 4
9999 mem: storing 1183 in location 1178
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1178 is 1183
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1177 is 1179
9999 mem: skipping refcount at 1179
9999 mem: decrementing refcount of 1179: 8 -> 7
9999 mem: storing 0 in location 1177
9999 mem: automatically abandoning 1174
9999 abandon: updating refcounts inside 1174: (array number)
9999 abandon: saving 1174 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1183
9999 mem: storing 1183 in location 1198
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1200 is 2
9999 mem: storing 3 in location 1200
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 66
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 1 in location 1205
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1200 is 3
9999 mem: location 1202 is 7
9999 mem: storing 1 in location 1211
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1205 is 1
9999 mem: location 1211 is 1
9999 mem: storing 1 in location 1212
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1199 is 1
9999 mem: location 1201 is 1
9999 mem: storing 0 in location 1213
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1212 is 1
9999 mem: location 1213 is 0
9999 mem: storing 1 in location 1214
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 1
9998 run: jump-unless fell through
 106 run: {cursor-row: "number"} <- copy {row: "number"}
9999 mem: location 1199 is 1
9999 mem: storing 1 in location 1201
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 7
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1201 is 1
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1148
9999 mem: storing 1 in location 1148
 106 run: {cursor-column: "number"} <- copy {column: "number"}
9999 mem: location 1200 is 3
9999 mem: storing 3 in location 1202
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 7
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1202 is 3
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1149
9999 mem: storing 3 in location 1149
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1198 is 1183
9999 mem: location 1203 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 11 -> 10
9999 mem: incrementing refcount of 1183: 4 -> 5
9999 mem: storing 1183 in location 1203
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1159
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1203 is 1183
9999 mem: location 1191 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1144
9999 mem: location 1144 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 10 -> 9
9999 mem: incrementing refcount of 1183: 5 -> 6
9999 mem: storing 1183 in location 1144
 106 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1191 is 1140
9999 mem: clearing screen:address:screen
9999 mem: location 1190 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 8 -> 7
9999 mem: storing 0 in location 1190
9999 mem: clearing target-row:number
9999 mem: storing 0 in location 1192
9999 mem: clearing target-column:number
9999 mem: storing 0 in location 1193
9999 mem: clearing left:number
9999 mem: storing 0 in location 1194
9999 mem: clearing right:number
9999 mem: storing 0 in location 1195
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1196
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1197 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1197
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1198 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 6 -> 5
9999 mem: storing 0 in location 1198
9999 mem: clearing curr
9999 mem: location 1197 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1197
9999 mem: clearing row:number
9999 mem: storing 0 in location 1199
9999 mem: clearing column:number
9999 mem: storing 0 in location 1200
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1201
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1202
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1203 is 1183
9999 mem: skipping refcount at 1183
9999 mem: decrementing refcount of 1183: 5 -> 4
9999 mem: storing 0 in location 1203
9999 mem: clearing off-screen?:boolean
9999 mem: storing 0 in location 1204
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1205
9999 mem: clearing at-cursor?:boolean
9999 mem: storing 0 in location 1206
9999 mem: clearing before-cursor
9999 mem: location 1203 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1203
9999 mem: clearing c:character
9999 mem: storing 0 in location 1207
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1208
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1205
9999 mem: clearing left-of-cursor?:boolean
9999 mem: storing 0 in location 1209
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1202
9999 mem: clearing before-cursor
9999 mem: location 1203 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1203
9999 mem: clearing row
9999 mem: storing 0 in location 1199
9999 mem: clearing column
9999 mem: storing 0 in location 1200
9999 mem: clearing curr
9999 mem: location 1197 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1197
9999 mem: clearing prev
9999 mem: location 1198 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1198
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1210
9999 mem: clearing column
9999 mem: storing 0 in location 1200
9999 mem: clearing row
9999 mem: storing 0 in location 1199
9999 mem: clearing curr
9999 mem: location 1197 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1197
9999 mem: clearing prev
9999 mem: location 1198 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1198
9999 mem: clearing column
9999 mem: storing 0 in location 1200
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1205
9999 mem: clearing cursor-outside-line?:boolean
9999 mem: storing 0 in location 1211
9999 mem: clearing before-cursor-on-same-line?:boolean
9999 mem: storing 0 in location 1212
9999 mem: clearing above-cursor-row?:boolean
9999 mem: storing 0 in location 1213
9999 mem: clearing before-cursor?:boolean
9999 mem: storing 0 in location 1214
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1201
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1202
9999 mem: clearing before-cursor
9999 mem: location 1203 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1203
9999 mem: automatically abandoning 1187
9999 abandon: updating refcounts inside 1187: (array number)
9999 abandon: saving 1187 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1140
9999 mem: storing 1140 in location 1299
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1312
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1142
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1142 is 1159
9999 mem: location 1313 is 0
9999 mem: incrementing refcount of 1159: 9 -> 10
9999 mem: storing 1159 in location 1313
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1314
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 3
9999 mem: storing 3 in location 1315
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jumping to instruction 50
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1215
9999 mem: location 1317 is 0
9999 mem: incrementing refcount of 1215: 0 -> 1
9999 mem: storing 1215 in location 1317
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1309 is 1
9999 mem: location 1310 is 0
9999 mem: location 1311 is 1159
9999 mem: location 1314 is 1
9999 mem: location 1315 is 3
9999 mem: location 1313 is 1159
9999 mem: location 1312 is 0
9999 mem: location 1317 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1317 is 1215
9999 mem: skipping refcount at 1215
9999 mem: incrementing refcount of 1159: 10 -> 11
9999 mem: incrementing refcount of 1159: 11 -> 12
9999 mem: storing 1 in location 1216
9999 mem: storing 1 in location 1217
9999 mem: storing 0 in location 1218
9999 mem: storing 1159 in location 1219
9999 mem: storing 1 in location 1220
9999 mem: storing 3 in location 1221
9999 mem: storing 1159 in location 1222
9999 mem: storing 0 in location 1223
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1299 is 1140
9999 mem: location 1317 is 1215
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1163
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1140: 6 -> 7
9999 mem: storing 1140 in location 1166
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1215: 1 -> 2
9999 mem: storing 1215 in location 1167
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1151
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1151 is 0
9999 mem: location 1168 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1168
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1167 is 1215
9999 mem: location 1168 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1215: 2 -> 3
9999 mem: storing 1215 in location 1156
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1157 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1157
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1328
9999 mem: storing 0 in location 1328
9999 mem: storing 0 in location 1329
9999 mem: storing 0 in location 1330
9999 mem: location 1158 is 0
9999 mem: incrementing refcount of 1328: 0 -> 1
9999 mem: storing 1328 in location 1158
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1328
9999 mem: skipping refcount at 1328
9999 mem: location 1158 is 1328
9999 mem: skipping refcount at 1328
9999 mem: incrementing refcount of 1215: 3 -> 4
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1215 in location 1329
9999 mem: storing 0 in location 1330
 107 run: reply {result: ("address" "list" "address" "operation")}
9999 mem: location 1158 is 1328
9999 mem: clearing x:_elem
9999 mem: location 1156 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing in:address:list:_elem
9999 mem: location 1157 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1157
9999 mem: automatically abandoning 1153
9999 abandon: updating refcounts inside 1153: (array number)
9999 abandon: saving 1153 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1328
9999 mem: storing 1328 in location 1168
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1168 is 1328
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1151
9999 mem: location 1151 is 0
9999 mem: incrementing refcount of 1328: 1 -> 2
9999 mem: storing 1328 in location 1151
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1328
9999 mem: location 1152 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1152
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1152 is 0
9999 mem: location 1169 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1169
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1169 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1169
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1328
9999 mem: location 1152 is 0
9999 mem: location 1169 is 0
9999 mem: location 1166 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy to is 1152
9999 mem: location 1152 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1152
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1166 is 1140
9999 mem: clearing op:address:operation
9999 mem: location 1167 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 3 -> 2
9999 mem: storing 0 in location 1167
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1168 is 1328
9999 mem: skipping refcount at 1328
9999 mem: decrementing refcount of 1328: 2 -> 1
9999 mem: storing 0 in location 1168
9999 mem: clearing undo
9999 mem: location 1168 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1168
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1169 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1169
9999 mem: clearing redo
9999 mem: location 1169 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1169
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1140
9999 mem: storing 1140 in location 1299
 105 run: return {1: "literal", "true": ()}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1299 is 1140
9999 mem: clearing screen:address:screen
9999 mem: location 1298 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 0 in location 1298
9999 mem: clearing editor:address:editor-data
9999 mem: location 1299 is 1140
9999 mem: skipping refcount at 1140
9999 mem: decrementing refcount of 1140: 7 -> 6
9999 mem: storing 0 in location 1299
9999 mem: clearing t:touch-event
9999 mem: storing 0 in location 1300
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: clearing click-row:number
9999 mem: storing 0 in location 1303
9999 mem: clearing click-column:number
9999 mem: storing 0 in location 1304
9999 mem: clearing left:number
9999 mem: storing 0 in location 1305
9999 mem: clearing too-far-left?:boolean
9999 mem: storing 0 in location 1306
9999 mem: clearing right:number
9999 mem: storing 0 in location 1307
9999 mem: clearing too-far-right?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1309
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1310
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1311 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 12 -> 11
9999 mem: storing 0 in location 1311
9999 mem: clearing editor
9999 mem: location 1299 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1299
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1312
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1313 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 11 -> 10
9999 mem: storing 0 in location 1313
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1314
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1315
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1316 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1316
9999 mem: clearing op:address:operation
9999 mem: location 1317 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 2 -> 1
9999 mem: storing 0 in location 1317
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1325
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1326
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1327
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: clearing op:address:operation
9999 mem: location 1317 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1317
9999 mem: clearing editor
9999 mem: location 1299 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1299
9999 mem: automatically abandoning 1295
9999 abandon: updating refcounts inside 1295: (array number)
9999 abandon: saving 1295 in free-list of size 33
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump {+next-event: "label"}
9998 run: jumping to instruction 6
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1328
9999 mem: location 1152 is 0
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 1268
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1328
9999 mem: location 1152 is 0
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 3
9999 mem: storing 3 in location 1269
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1265 is 1008
9999 mem: location 1268 is 1
9999 mem: location 1269 is 3
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1153
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1008: 6 -> 7
9999 mem: storing 1008 in location 1156
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1157
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1158
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1156 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1157 is 1
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 3
9999 mem: location 1156 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1156 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1157
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1153
9999 abandon: updating refcounts inside 1153: (array number)
9999 abandon: saving 1153 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1265
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1266 is 1259
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1281
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1284 is 0
9999 mem: incrementing refcount of 1259: 3 -> 4
9999 mem: storing 1259 in location 1284
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1284 is 1259
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9999 mem: location 1260 is 1
9999 mem: location 1261 is 1253
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9998 run: address to copy is 1260
9998 run: its type is "number"
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1285
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9999 mem: location 1260 is 1
9999 mem: location 1261 is 1253
9999 mem: location 1284 is 1259
9999 mem: skipping refcount at 1259
9998 run: address to copy is 1261
9998 run: its type is ("address" "array" "event")
9999 mem: location 1261 is 1253
9999 mem: location 1286 is 0
9999 mem: incrementing refcount of 1253: 1 -> 2
9999 mem: storing 1253 in location 1286
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1286 is 1253
9999 mem: skipping refcount at 1253
9999 mem: storing 1 in location 1287
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1285 is 1
9999 mem: location 1287 is 1
9999 mem: storing 1 in location 1288
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1288 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1174
9999 mem: location 1289 is 0
9999 mem: incrementing refcount of 1174: 0 -> 1
9999 mem: storing 1174 in location 1289
 105 run: return {dummy: ("address" "event"), "lookup": ()}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1289 is 1174
9999 mem: skipping refcount at 1174
9999 mem: location 1175 is 0
9999 mem: location 1176 is 0
9999 mem: location 1177 is 0
9999 mem: location 1178 is 0
9999 mem: location 1284 is 1259
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1285
9999 mem: clearing buf:address:array:event
9999 mem: location 1286 is 1253
9999 mem: skipping refcount at 1253
9999 mem: decrementing refcount of 1253: 2 -> 1
9999 mem: storing 0 in location 1286
9999 mem: clearing max:number
9999 mem: storing 0 in location 1287
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1288
9999 mem: clearing result
9999 mem: storing 0 in location 1290
9999 mem: storing 0 in location 1291
9999 mem: storing 0 in location 1292
9999 mem: storing 0 in location 1293
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1285
9999 mem: clearing result:event
9999 mem: storing 0 in location 1290
9999 mem: storing 0 in location 1291
9999 mem: storing 0 in location 1292
9999 mem: storing 0 in location 1293
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1294
9999 mem: automatically abandoning 1281
9999 abandon: updating refcounts inside 1281: (array number)
9999 abandon: saving 1281 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1259
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: storing 1259 in location 1266
9999 mem: storing 1 in location 1274
9999 mem: storing 1 in location 1275
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1274 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1275 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {console: ("address" "console"), "same-as-ingredient": "1"}, {editor: ("address" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1265 is 1008
9999 mem: location 1266 is 1259
9999 mem: location 1267 is 1140
9999 mem: clearing screen:address:screen
9999 mem: location 1265 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 0 in location 1265
9999 mem: clearing console:address:console
9999 mem: location 1266 is 1259
9999 mem: skipping refcount at 1259
9999 mem: decrementing refcount of 1259: 4 -> 3
9999 mem: storing 0 in location 1266
9999 mem: clearing editor:address:editor-data
9999 mem: location 1267 is 1140
9999 mem: skipping refcount at 1140
9999 mem: decrementing refcount of 1140: 6 -> 5
9999 mem: storing 0 in location 1267
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1268
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1269
9999 mem: clearing screen
9999 mem: location 1265 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1265
9999 mem: clearing e:event
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: clearing console:address:console
9999 mem: location 1266 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1266
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1274
9999 mem: clearing quit?:boolean
9999 mem: storing 0 in location 1275
9999 mem: clearing t:touch-event
9999 mem: storing 0 in location 1276
9999 mem: storing 0 in location 1277
9999 mem: storing 0 in location 1278
9999 mem: clearing is-touch?:boolean
9999 mem: storing 0 in location 1279
9999 mem: clearing screen
9999 mem: location 1265 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1265
9999 mem: clearing editor
9999 mem: location 1267 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1267
9999 mem: clearing go-render?:boolean
9999 mem: storing 0 in location 1280
9999 mem: clearing screen
9999 mem: location 1265 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1262
9999 abandon: updating refcounts inside 1262: (array number)
9999 abandon: saving 1262 in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: {3: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1328
9999 mem: location 1152 is 0
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 1
9999 mem: storing 1 in location 3
 103 run: {4: "number"} <- get {2: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9999 mem: location 1141 is 1159
9999 mem: location 1142 is 1159
9999 mem: location 1143 is 0
9999 mem: location 1144 is 1183
9999 mem: location 1145 is 0
9999 mem: location 1146 is 9
9999 mem: location 1147 is 1
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1150 is 1
9999 mem: location 1151 is 1328
9999 mem: location 1152 is 0
9999 mem: location 2 is 1140
9999 mem: skipping refcount at 1140
9998 run: address to copy is 1149
9998 run: its type is "number"
9999 mem: location 1149 is 3
9999 mem: storing 3 in location 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    3 <- 1  # cursor row\n    4 <- 3  # cursor column\n  ": "literal-string"}
9999 run: checking location 3
9999 run: checking location 4
 102 run: check-trace-count-for-label {0: "literal"}, {"print-character": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
