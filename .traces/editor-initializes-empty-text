9991 parse: --- defining scenario_editor-initializes-empty-text
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal", "width": ()}
9993 parse:   ingredient: {5: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:array:character <- new []\n    2:address:shared:editor-data <- new-editor 1:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n    3:number <- get *2:address:shared:editor-data, cursor-row:offset\n    4:number <- get *2:address:shared:editor-data, cursor-column:offset\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:shared:array:character <- new []\n    2:address:shared:editor-data <- new-editor 1:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n    3:number <- get *2:address:shared:editor-data, cursor-row:offset\n    4:number <- get *2:address:shared:editor-data, cursor-column:offset\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 1  # cursor row\n    4 <- 0  # cursor column\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    3 <- 1  # cursor row\n    4 <- 0  # cursor column\n  ": "literal-string"}
9999 parse: recipe scenario_editor-initializes-empty-text has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-initializes-empty-text
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-initializes-empty-text
9991 transform: --- deduce types for recipe scenario_editor-initializes-empty-text
9992 transform: screen => ("address" "shared" "screen")
9993 transform: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9993 transform: run {"\n    1:address:shared:array:character <- new []\n    2:address:shared:editor-data <- new-editor 1:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n    3:number <- get *2:address:shared:editor-data, cursor-row:offset\n    4:number <- get *2:address:shared:editor-data, cursor-column:offset\n  ": "literal-string"}
9993 transform: screen-should-contain {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    3 <- 1  # cursor row\n    4 <- 0  # cursor column\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-initializes-empty-text
9991 transform: --- deduce types for recipe scenario_editor-initializes-empty-text
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-initializes-empty-text
9991 transform: --- collect surrounding spaces for recipe scenario_editor-initializes-empty-text
9991 transform: --- transform names for recipe scenario_editor-initializes-empty-text
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-initializes-empty-text
9992 transform: instruction {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe scenario_editor-initializes-empty-text
9991 transform: --- transform braces for recipe scenario_editor-initializes-empty-text
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_editor-initializes-empty-text
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-initializes-empty-text
9991 transform: --- type-check calls inside recipe scenario_editor-initializes-empty-text
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-initializes-empty-text
9991 transform: --- check types of reply instructions in recipe scenario_editor-initializes-empty-text
9991 transform: --- type-check merge instructions in recipe scenario_editor-initializes-empty-text
9991 transform: --- checking reply instructions against header for scenario_editor-initializes-empty-text
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-initializes-empty-text
 102 run: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1004
 103 run: {result: ("address" "shared" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 0 -> 1
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 5
9999 mem: location 1004 is 5
9999 mem: storing 25 in location 1006
 103 run: {data: ("address" "shared" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 25
9999 mem: array size is 25
9999 mem: allocating size 52
9999 mem: new alloc: 1014
9999 mem: storing 25 in location 1015
9999 mem: storing 1014 in location 1007
9999 mem: incrementing refcount of 1014: 0 -> 1
 103 run: {result: ("address" "shared" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "shared" "array" "screen-cell")}
9999 mem: location 1004 is 5
9999 mem: location 1003 is 5
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: storing 5 in location 1009
9999 mem: storing 5 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "shared" "screen")} <- clear-screen {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1066
9999 mem: storing 8 in location 1067
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1069
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1069 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1070
9999 mem: incrementing refcount of 1014: 1 -> 2
 104 run: {max: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1071
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1072
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 0
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 0
9998 run: address to copy to is 1016
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 0
9999 mem: storing 1 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 1
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 1
9998 run: address to copy to is 1018
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 1
9999 mem: storing 2 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 2
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 2
9998 run: address to copy to is 1020
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 2
9999 mem: storing 3 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 3
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 3
9998 run: address to copy to is 1022
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 3
9999 mem: storing 4 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 4
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 4
9998 run: address to copy to is 1024
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 4
9999 mem: storing 5 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 5
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 5
9998 run: address to copy to is 1026
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 5
9999 mem: storing 6 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 6
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 6
9998 run: address to copy to is 1028
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 6
9999 mem: storing 7 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 7
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 7
9998 run: address to copy to is 1030
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 7
9999 mem: storing 8 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 8
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 8
9998 run: address to copy to is 1032
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 8
9999 mem: storing 9 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 9
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 9
9998 run: address to copy to is 1034
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 9
9999 mem: storing 10 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 10
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 10
9998 run: address to copy to is 1036
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 10
9999 mem: storing 11 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 11
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 11
9998 run: address to copy to is 1038
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 11
9999 mem: storing 12 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 12
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 12
9998 run: address to copy to is 1040
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 12
9999 mem: storing 13 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 13
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 13
9998 run: address to copy to is 1042
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 13
9999 mem: storing 14 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 14
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 14
9998 run: address to copy to is 1044
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 14
9999 mem: storing 15 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 15
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 15
9998 run: address to copy to is 1046
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1046
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 15
9999 mem: storing 16 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 16
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 16
9998 run: address to copy to is 1048
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1048
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 16
9999 mem: storing 17 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 17
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 17
9998 run: address to copy to is 1050
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1050
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 17
9999 mem: storing 18 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 18
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 18
9998 run: address to copy to is 1052
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1052
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 18
9999 mem: storing 19 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 19
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 19
9998 run: address to copy to is 1054
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 19
9999 mem: storing 20 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 20
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 20
9998 run: address to copy to is 1056
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1056
9999 mem: storing 7 in location 1057
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 20
9999 mem: storing 21 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 21
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 21
9998 run: address to copy to is 1058
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1058
9999 mem: storing 7 in location 1059
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 21
9999 mem: storing 22 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 22
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 22
9998 run: address to copy to is 1060
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1060
9999 mem: storing 7 in location 1061
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 22
9999 mem: storing 23 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 23
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 23
9998 run: address to copy to is 1062
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1062
9999 mem: storing 7 in location 1063
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 23
9999 mem: storing 24 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 24
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 24
9998 run: address to copy to is 1064
9999 mem: location 1074 is 0
9999 mem: location 1075 is 7
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 24
9999 mem: storing 25 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 25
9999 mem: location 1071 is 25
9999 mem: storing 1 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1069 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 2 -> 1
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: reply {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
9999 mem: incrementing refcount of 1008: 2 -> 3
 102 run: run {"\n    1:address:shared:array:character <- new []\n    2:address:shared:editor-data <- new-editor 1:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n    3:number <- get *2:address:shared:editor-data, cursor-row:offset\n    4:number <- get *2:address:shared:editor-data, cursor-column:offset\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"": "literal-string"}
9993 parse:   product: {1: ("address" "shared" "array" "character")}
9992 load: after rewriting: {1: ("address" "shared" "array" "character")} <- new {"": "literal-string"}
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {1: ("address" "shared" "array" "character")}
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {0: "literal", "left": ()}
9993 parse:   ingredient: {5: "literal", "right": ()}
9993 parse:   product: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "shared" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-row: "offset"}
9993 parse:   product: {3: "number"}
9992 load: after rewriting: {3: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "shared" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-column: "offset"}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element cursor-row of type editor-data is at offset 7
9993 name: element cursor-column of type editor-data is at offset 8
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: new-editor ...
9992 transform: get ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "shared" "array" "character")} <- new {"": "literal-string"}
9999 mem: new string alloc: 1076
9999 mem: storing 1076 in location 1
9999 mem: incrementing refcount of 1076: 0 -> 1
 103 run: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9999 mem: location 1 is 1076
9999 mem: location 900 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1078
9999 mem: storing 7 in location 1079
 104 run: {s: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1076 in location 1081
9999 mem: incrementing refcount of 1076: 1 -> 2
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1082
9999 mem: incrementing refcount of 1008: 3 -> 4
 104 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1083
 104 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1084
 104 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1084 is 5
9999 mem: storing 4 in location 1084
 104 run: {result: ("address" "shared" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1087
9999 mem: storing 1087 in location 1085
9999 mem: incrementing refcount of 1087: 0 -> 1
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}, {left: "number"}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1095 is 0
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1083 is 0
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1092
9999 mem: storing 0 in location 1092
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}, {right: "number"}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1095 is 0
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1084 is 4
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1093
9999 mem: storing 4 in location 1093
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {1: "literal", "top": ()}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 0
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1095
9999 mem: storing 1 in location 1095
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {left: "number"}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1083 is 0
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1096
9999 mem: storing 0 in location 1096
 104 run: {init: ("address" "shared" "duplex-list" "character")} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1100
9999 mem: storing 4 in location 1101
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1103
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1104
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1106
9999 mem: storing 1106 in location 1105
9999 mem: incrementing refcount of 1106: 0 -> 1
 105 run: {result: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "shared" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1103 is 167
9999 mem: location 1104 is 0
9999 mem: location 1105 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1105 is 1106
9999 mem: skipping refcount at 1106
9999 mem: storing 167 in location 1107
9999 mem: storing 0 in location 1108
9999 mem: storing 0 in location 1109
 105 run: jump-unless {in: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jumping to instruction 8
 105 run: return {result: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1105 is 1106
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1106
9999 mem: storing 1106 in location 1086
9999 mem: incrementing refcount of 1106: 1 -> 2
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1086 is 1106
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1088
9999 mem: storing 1106 in location 1088
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1086 is 1106
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1089
9999 mem: storing 1106 in location 1089
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1086 is 1106
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1091
9999 mem: storing 1106 in location 1091
 104 run: {result: ("address" "shared" "editor-data")} <- insert-text {result: ("address" "shared" "editor-data")}, {s: ("address" "shared" "array" "character")}
9999 mem: location 1085 is 1087
9999 mem: location 1081 is 1076
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1066
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1087 in location 1069
9999 mem: incrementing refcount of 1087: 1 -> 2
 105 run: {text: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1076 in location 1070
9999 mem: incrementing refcount of 1076: 2 -> 3
 105 run: jump-if {text: ("address" "shared" "array" "character")}, {1: "offset"}
9999 mem: location 1070 is 1076
9998 run: jumping to instruction 5
 105 run: {len: "number"} <- length {text: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1070 is 1076
9999 mem: skipping refcount at 1076
9999 mem: storing 0 in location 1071
 105 run: jump-if {len: "number"}, {1: "offset"}
9999 mem: location 1071 is 0
9998 run: jump-if fell through
 105 run: reply {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1069 is 1087
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1087
9999 mem: decrementing refcount of 1087: 2 -> 1
9999 mem: storing 1087 in location 1085
9999 mem: incrementing refcount of 1087: 1 -> 2
 104 run: _, _, {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")} <- render {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")}
9999 mem: location 1082 is 1008
9999 mem: location 1085 is 1087
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 mem: new alloc: 1110
9999 mem: storing 26 in location 1111
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1113
9999 mem: incrementing refcount of 1008: 4 -> 5
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1087 in location 1114
9999 mem: incrementing refcount of 1087: 2 -> 3
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1114 is 1087
9998 run: jumping to instruction 5
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1092
9998 run: its type is "number"
9999 mem: location 1092 is 0
9999 mem: storing 0 in location 1115
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1113 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1138
9999 mem: storing 3 in location 1139
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1141
9999 mem: incrementing refcount of 1008: 5 -> 6
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1141 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1141 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1141 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1142
 106 run: return {height: "number"}
9999 mem: location 1142 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1116
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1093
9998 run: its type is "number"
9999 mem: location 1093 is 4
9999 mem: storing 4 in location 1117
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1089
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1089 is 1106
9999 mem: storing 1106 in location 1118
9999 mem: incrementing refcount of 1106: 2 -> 3
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1106
9999 mem: storing 1106 in location 1119
9999 mem: incrementing refcount of 1106: 3 -> 4
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1106
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1138
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1106 in location 1141
9999 mem: incrementing refcount of 1106: 4 -> 5
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1141 is 1106
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1141 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 167
9999 mem: location 1108 is 0
9999 mem: location 1109 is 0
9999 mem: location 1141 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1108
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1108 is 0
9999 mem: storing 0 in location 1142
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1142 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1106: 5 -> 4
9999 mem: storing 0 in location 1118
 105 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1120
 105 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1121
 105 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1115 is 0
9999 mem: storing 0 in location 1122
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1095
9998 run: its type is "number"
9999 mem: location 1095 is 1
9999 mem: storing 1 in location 1123
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1096
9998 run: its type is "number"
9999 mem: location 1096 is 0
9999 mem: storing 0 in location 1124
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1091
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1091 is 1106
9999 mem: storing 1106 in location 1125
9999 mem: incrementing refcount of 1106: 4 -> 5
 105 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1113 is 1008
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1100
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1103
9999 mem: incrementing refcount of 1008: 6 -> 7
 106 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1104
 106 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1105
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1103 is 1008
9998 run: jump-unless fell through
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1103 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1104 is 1
9999 mem: location 1103 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1103 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1105 is 0
9999 mem: location 1103 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1103 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1113
9999 mem: incrementing refcount of 1008: 6 -> 7
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1118 is 0
9998 run: jumping to instruction 68
 105 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1118 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1090
9999 mem: storing 0 in location 1090
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1121 is 1
9999 mem: location 1123 is 1
9999 mem: storing 1 in location 1127
 105 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1122 is 0
9999 mem: location 1124 is 0
9999 mem: storing 1 in location 1134
 105 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1127 is 1
9999 mem: location 1134 is 1
9999 mem: storing 1 in location 1135
 105 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1121 is 1
9999 mem: location 1123 is 1
9999 mem: storing 0 in location 1136
 105 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1135 is 1
9999 mem: location 1136 is 0
9999 mem: storing 1 in location 1137
 105 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1137 is 1
9998 run: jump-unless fell through
 105 run: {cursor-row: "number"} <- copy {row: "number"}
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1123
 105 run: {cursor-column: "number"} <- copy {column: "number"}
9999 mem: location 1122 is 0
9999 mem: storing 0 in location 1124
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1119 is 1106
9999 mem: decrementing refcount of 1106: 5 -> 4
9999 mem: storing 1106 in location 1125
9999 mem: incrementing refcount of 1106: 4 -> 5
 105 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 0
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1121 is 1
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1094
9999 mem: storing 1 in location 1094
 105 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 1
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1123 is 1
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1095
9999 mem: storing 1 in location 1095
 105 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 1
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1124 is 0
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1096
9999 mem: storing 0 in location 1096
 105 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 1
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1125 is 1106
9999 mem: location 1114 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1091
9999 mem: storing 1106 in location 1091
 105 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1113 is 1008
9999 mem: location 1114 is 1087
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9998 run: result 1 is 0
9998 run: result 2 is 1008
9998 run: result 3 is 1087
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1082
9999 mem: incrementing refcount of 1008: 6 -> 7
9999 mem: decrementing refcount of 1087: 3 -> 2
9999 mem: storing 1087 in location 1085
9999 mem: incrementing refcount of 1087: 2 -> 3
 104 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {indent?: "offset"}, {1: "literal", "true": ()}
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 1
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1085 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy to is 1097
9999 mem: storing 1 in location 1097
 104 run: reply {result: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1085 is 1087
9999 mem: location 1082 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1087
9999 mem: storing 1087 in location 2
9999 mem: incrementing refcount of 1087: 3 -> 4
 103 run: {3: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 2 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 1
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 1
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 2 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1095
9998 run: its type is "number"
9999 mem: location 1095 is 1
9999 mem: storing 1 in location 3
 103 run: {4: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 2 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 1106
9999 mem: location 1089 is 1106
9999 mem: location 1090 is 0
9999 mem: location 1091 is 1106
9999 mem: location 1092 is 0
9999 mem: location 1093 is 4
9999 mem: location 1094 is 1
9999 mem: location 1095 is 1
9999 mem: location 1096 is 0
9999 mem: location 1097 is 1
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 2 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1096
9998 run: its type is "number"
9999 mem: location 1096 is 0
9999 mem: storing 0 in location 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
 102 run: memory-should-contain {"\n    3 <- 1  # cursor row\n    4 <- 0  # cursor column\n  ": "literal-string"}
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
