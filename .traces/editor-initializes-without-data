9991 parse: --- defining scenario_editor-initializes-without-data
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal", "width": ()}
9993 parse:   ingredient: {3: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right\n    2:editor-data <- copy *1:address:shared:editor-data\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right\n    2:editor-data <- copy *1:address:shared:editor-data\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # 2 (data) <- just the § sentinel\n    # 3 (top of screen) <- the § sentinel\n    4 <- 0  # bottom-of-screen; null since text fits on screen\n    # 5 (before cursor) <- the § sentinel\n    6 <- 2  # left\n    7 <- 4  # right  (inclusive)\n    8 <- 1  # bottom\n    9 <- 1  # cursor row\n    10 <- 2  # cursor column\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    # 2 (data) <- just the § sentinel\n    # 3 (top of screen) <- the § sentinel\n    4 <- 0  # bottom-of-screen; null since text fits on screen\n    # 5 (before cursor) <- the § sentinel\n    6 <- 2  # left\n    7 <- 4  # right  (inclusive)\n    8 <- 1  # bottom\n    9 <- 1  # cursor row\n    10 <- 2  # cursor column\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
9999 parse: recipe scenario_editor-initializes-without-data has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-initializes-without-data
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-initializes-without-data
9991 transform: --- deduce types for recipe scenario_editor-initializes-without-data
9992 transform: screen => ("address" "shared" "screen")
9993 transform: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9993 transform: run {"\n    1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right\n    2:editor-data <- copy *1:address:shared:editor-data\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    # 2 (data) <- just the § sentinel\n    # 3 (top of screen) <- the § sentinel\n    4 <- 0  # bottom-of-screen; null since text fits on screen\n    # 5 (before cursor) <- the § sentinel\n    6 <- 2  # left\n    7 <- 4  # right  (inclusive)\n    8 <- 1  # bottom\n    9 <- 1  # cursor row\n    10 <- 2  # cursor column\n  ": "literal-string"}
9993 transform: screen-should-contain {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-initializes-without-data
9991 transform: --- deduce types for recipe scenario_editor-initializes-without-data
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-initializes-without-data
9991 transform: --- collect surrounding spaces for recipe scenario_editor-initializes-without-data
9991 transform: --- transform names for recipe scenario_editor-initializes-without-data
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-initializes-without-data
9992 transform: instruction {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe scenario_editor-initializes-without-data
9991 transform: --- transform braces for recipe scenario_editor-initializes-without-data
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform: screen-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_editor-initializes-without-data
9991 transform: --- perform checks for recipe scenario_editor-initializes-without-data
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-initializes-without-data
9991 transform: --- type-check calls inside recipe scenario_editor-initializes-without-data
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-initializes-without-data
9991 transform: --- type-check merge instructions in recipe scenario_editor-initializes-without-data
9991 transform: --- check types of reply instructions in recipe scenario_editor-initializes-without-data
9991 transform: --- checking reply instructions against header for scenario_editor-initializes-without-data
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-initializes-without-data
 102 run: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1004
 103 run: {result: ("address" "shared" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 0 -> 1
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 5
9999 mem: location 1004 is 3
9999 mem: storing 15 in location 1006
 103 run: {data: ("address" "shared" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 15
9999 mem: array size is 15
9999 mem: allocating size 32
9999 mem: new alloc: 1014
9999 mem: storing 15 in location 1015
9999 mem: storing 1014 in location 1007
9999 mem: incrementing refcount of 1014: 0 -> 1
 103 run: {result: ("address" "shared" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "shared" "array" "screen-cell")}
9999 mem: location 1004 is 3
9999 mem: location 1003 is 5
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: storing 3 in location 1009
9999 mem: storing 5 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "shared" "screen")} <- clear-screen {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1046
9999 mem: storing 7 in location 1047
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1049
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1049 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1050
9999 mem: incrementing refcount of 1014: 1 -> 2
 104 run: {max: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 15 in location 1051
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1052
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 0
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 0
9999 mem: storing 1016 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1016
9999 mem: location 1054 is 1016
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 0
9999 mem: storing 1 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 1
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 1
9999 mem: storing 1018 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1018
9999 mem: location 1054 is 1018
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 1
9999 mem: storing 2 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 2
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 2
9999 mem: storing 1020 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1020
9999 mem: location 1054 is 1020
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 2
9999 mem: storing 3 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 3
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 3
9999 mem: storing 1022 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1022
9999 mem: location 1054 is 1022
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 3
9999 mem: storing 4 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 4
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 4
9999 mem: storing 1024 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1024
9999 mem: location 1054 is 1024
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 4
9999 mem: storing 5 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 5
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 5
9999 mem: storing 1026 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1026
9999 mem: location 1054 is 1026
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 5
9999 mem: storing 6 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 6
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 6
9999 mem: storing 1028 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1028
9999 mem: location 1054 is 1028
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 6
9999 mem: storing 7 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 7
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 7
9999 mem: storing 1030 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1030
9999 mem: location 1054 is 1030
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 7
9999 mem: storing 8 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 8
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 8
9999 mem: storing 1032 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1032
9999 mem: location 1054 is 1032
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 8
9999 mem: storing 9 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 9
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 9
9999 mem: storing 1034 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1034
9999 mem: location 1054 is 1034
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 9
9999 mem: storing 10 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 10
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 10
9999 mem: storing 1036 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1036
9999 mem: location 1054 is 1036
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 10
9999 mem: storing 11 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 11
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 11
9999 mem: storing 1038 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1038
9999 mem: location 1054 is 1038
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 11
9999 mem: storing 12 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 12
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 12
9999 mem: storing 1040 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1040
9999 mem: location 1054 is 1040
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 12
9999 mem: storing 13 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 13
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 13
9999 mem: storing 1042 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1042
9999 mem: location 1054 is 1042
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 13
9999 mem: storing 14 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 14
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 14
9999 mem: storing 1044 in location 1054
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1054 is 1044
9999 mem: location 1054 is 1044
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 14
9999 mem: storing 15 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 15
9999 mem: location 1051 is 15
9999 mem: storing 1 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1049 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 2 -> 1
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: reply {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
9999 mem: incrementing refcount of 1008: 2 -> 3
 102 run: run {"\n    1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right\n    2:editor-data <- copy *1:address:shared:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {0: "literal", "data": ()}
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {2: "literal", "left": ()}
9993 parse:   ingredient: {5: "literal", "right": ()}
9993 parse:   product: {1: ("address" "shared" "editor-data")}
9992 load: after rewriting: {1: ("address" "shared" "editor-data")} <- new-editor {0: "literal", "data": ()}, {screen: ("address" "shared" "screen")}, {2: "literal", "left": ()}, {5: "literal", "right": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "shared" "editor-data"), "lookup": ()}
9993 parse:   product: {2: "editor-data"}
9992 load: after rewriting: {2: "editor-data"} <- copy {1: ("address" "shared" "editor-data"), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "shared" "editor-data")} <- new-editor {0: "literal", "data": ()}, {screen: ("address" "shared" "screen")}, {2: "literal", "left": ()}, {5: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-editor ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "shared" "editor-data")} <- new-editor {0: "literal", "data": ()}, {screen: ("address" "shared" "screen")}, {2: "literal", "left": ()}, {5: "literal", "right": ()}
9999 mem: location 900 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1055
9999 mem: storing 11 in location 1056
 104 run: {s: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1058
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 3 -> 4
 104 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1060
 104 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1061
 104 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1061 is 5
9999 mem: storing 4 in location 1061
 104 run: {result: ("address" "shared" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1068
9999 mem: storing 1068 in location 1062
9999 mem: incrementing refcount of 1068: 0 -> 1
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1073
9999 mem: storing 1073 in location 1063
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {left: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1063 is 1073
9999 mem: storing 2 in location 1073
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 2
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1074
9999 mem: storing 1074 in location 1063
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {right: "number"}
9999 mem: location 1061 is 4
9999 mem: location 1063 is 1074
9999 mem: storing 4 in location 1074
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1076
9999 mem: storing 1076 in location 1063
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {1: "literal", "top": ()}
9999 mem: location 1063 is 1076
9999 mem: storing 1 in location 1076
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1077
9999 mem: storing 1077 in location 1063
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {left: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1063 is 1077
9999 mem: storing 2 in location 1077
 104 run: {init: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1069
9999 mem: storing 1069 in location 1064
 104 run: {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1081
9999 mem: storing 4 in location 1082
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1084
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1085
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1087
9999 mem: storing 1087 in location 1086
9999 mem: incrementing refcount of 1087: 0 -> 1
 105 run: {result: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "shared" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1084 is 167
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1086 is 1087
9999 mem: skipping refcount at 1087
9999 mem: storing 167 in location 1088
9999 mem: storing 0 in location 1089
9999 mem: storing 0 in location 1090
 105 run: jump-unless {in: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1085 is 0
9998 run: jumping to instruction 8
 105 run: return {result: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1086 is 1087
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1087
9999 mem: location 1064 is 1069
9999 mem: storing 1087 in location 1069
9999 mem: incrementing refcount of 1087: 1 -> 2
 104 run: {top-of-screen: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1070
9999 mem: storing 1070 in location 1065
 104 run: {top-of-screen: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1064 is 1069
9999 mem: location 1069 is 1087
9999 mem: location 1065 is 1070
9999 mem: storing 1087 in location 1070
9999 mem: incrementing refcount of 1087: 2 -> 3
 104 run: {y: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1072
9999 mem: storing 1072 in location 1066
 104 run: {y: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1064 is 1069
9999 mem: location 1069 is 1087
9999 mem: location 1066 is 1072
9999 mem: storing 1087 in location 1072
9999 mem: incrementing refcount of 1087: 3 -> 4
 104 run: {result: ("address" "shared" "editor-data")} <- insert-text {result: ("address" "shared" "editor-data")}, {s: ("address" "shared" "array" "character")}
9999 mem: location 1062 is 1068
9999 mem: location 1058 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1091
9999 mem: storing 8 in location 1092
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1068 in location 1094
9999 mem: incrementing refcount of 1068: 1 -> 2
 105 run: {text: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1095
 105 run: jump-if {text: ("address" "shared" "array" "character")}, {1: "offset"}
9999 mem: location 1095 is 0
9998 run: jump-if fell through
 105 run: reply {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1094 is 1068
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1068
9999 mem: decrementing refcount of 1068: 2 -> 1
9999 mem: storing 1068 in location 1062
9999 mem: incrementing refcount of 1068: 1 -> 2
 104 run: {y: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1072
9999 mem: storing 1072 in location 1066
 104 run: {y: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1064 is 1069
9999 mem: location 1069 is 1087
9999 mem: location 1066 is 1072
9999 mem: decrementing refcount of 1087: 4 -> 3
9999 mem: storing 1087 in location 1072
9999 mem: incrementing refcount of 1087: 3 -> 4
 104 run: _, _, {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")} <- render {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 1068
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 28
9999 mem: allocating size 30
9999 mem: new alloc: 1101
9999 mem: storing 28 in location 1102
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1104
9999 mem: incrementing refcount of 1008: 4 -> 5
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1068 in location 1105
9999 mem: incrementing refcount of 1068: 2 -> 3
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1105 is 1068
9998 run: jumping to instruction 5
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1073
9998 run: its type is "number"
9999 mem: location 1073 is 2
9999 mem: storing 2 in location 1106
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1104 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1131
9999 mem: storing 3 in location 1132
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1134
9999 mem: incrementing refcount of 1008: 5 -> 6
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1134 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1134 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1134 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1135
 106 run: return {height: "number"}
9999 mem: location 1135 is 3
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9999 mem: storing 3 in location 1107
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1074
9998 run: its type is "number"
9999 mem: location 1074 is 4
9999 mem: storing 4 in location 1108
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1070
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1070 is 1087
9999 mem: storing 1087 in location 1109
9999 mem: incrementing refcount of 1087: 4 -> 5
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1087
9999 mem: storing 1087 in location 1110
9999 mem: incrementing refcount of 1087: 5 -> 6
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1087
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1131
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1087 in location 1134
9999 mem: incrementing refcount of 1087: 6 -> 7
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1134 is 1087
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1134 is 1087
9999 mem: skipping refcount at 1087
9999 mem: location 1088 is 167
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1134 is 1087
9999 mem: skipping refcount at 1087
9998 run: address to copy is 1089
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1089 is 0
9999 mem: storing 0 in location 1135
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1135 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1087: 7 -> 6
9999 mem: storing 0 in location 1109
 105 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1111
 105 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1112
 105 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1106 is 2
9999 mem: storing 2 in location 1113
 105 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1076
9999 mem: storing 1076 in location 1114
 105 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1077
9999 mem: storing 1077 in location 1115
 105 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1072
9999 mem: storing 1072 in location 1116
 105 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1104 is 1008
9999 mem: location 1112 is 1
9999 mem: location 1113 is 2
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1081
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1084
9999 mem: incrementing refcount of 1008: 6 -> 7
 106 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1085
 106 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1086
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1084 is 1008
9998 run: jump-unless fell through
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1084 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1085 is 1
9999 mem: location 1084 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1084 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1086 is 2
9999 mem: location 1084 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1084 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1104
9999 mem: incrementing refcount of 1008: 6 -> 7
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1109 is 0
9998 run: jumping to instruction 68
 105 run: {bottom-of-screen: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1071
9999 mem: storing 1071 in location 1125
 105 run: {bottom-of-screen: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 0
9999 mem: location 1125 is 1071
9999 mem: storing 0 in location 1071
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1112 is 1
9999 mem: location 1114 is 1076
9999 mem: location 1076 is 1
9999 mem: storing 1 in location 1118
 105 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1113 is 2
9999 mem: location 1115 is 1077
9999 mem: location 1077 is 2
9999 mem: storing 1 in location 1126
 105 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1118 is 1
9999 mem: location 1126 is 1
9999 mem: storing 1 in location 1127
 105 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1112 is 1
9999 mem: location 1114 is 1076
9999 mem: location 1076 is 1
9999 mem: storing 0 in location 1128
 105 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1127 is 1
9999 mem: location 1128 is 0
9999 mem: storing 1 in location 1129
 105 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1129 is 1
9998 run: jump-unless fell through
 105 run: {cursor-row: ("address" "number"), "lookup": ()} <- copy {row: "number"}
9999 mem: location 1112 is 1
9999 mem: location 1114 is 1076
9999 mem: storing 1 in location 1076
 105 run: {cursor-column: ("address" "number"), "lookup": ()} <- copy {column: "number"}
9999 mem: location 1113 is 2
9999 mem: location 1115 is 1077
9999 mem: storing 2 in location 1077
 105 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1087
9999 mem: location 1116 is 1072
9999 mem: decrementing refcount of 1087: 6 -> 5
9999 mem: storing 1087 in location 1072
9999 mem: incrementing refcount of 1087: 5 -> 6
 105 run: {bottom: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 0
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1105 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1075
9999 mem: storing 1075 in location 1130
 105 run: {bottom: ("address" "number"), "lookup": ()} <- copy {row: "number"}
9999 mem: location 1112 is 1
9999 mem: location 1130 is 1075
9999 mem: storing 1 in location 1075
 105 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1112 is 1
9999 mem: location 1113 is 2
9999 mem: location 1104 is 1008
9999 mem: location 1105 is 1068
9999 abandon: saving in free-list of size 30
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9998 run: result 1 is 2
9998 run: result 2 is 1008
9998 run: result 3 is 1068
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 6 -> 7
9999 mem: decrementing refcount of 1068: 3 -> 2
9999 mem: storing 1068 in location 1062
9999 mem: incrementing refcount of 1068: 2 -> 3
 104 run: {indent?: ("address" "boolean")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {indent?: "offset"}
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 1
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1062 is 1068
9999 mem: skipping refcount at 1068
9998 run: address to copy is 1078
9999 mem: storing 1078 in location 1067
 104 run: {indent?: ("address" "boolean"), "lookup": ()} <- copy {1: "literal", "true": ()}
9999 mem: location 1067 is 1078
9999 mem: storing 1 in location 1078
 104 run: reply {result: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1062 is 1068
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1068
9999 mem: storing 1068 in location 1
9999 mem: incrementing refcount of 1068: 3 -> 4
 103 run: {2: "editor-data"} <- copy {1: ("address" "shared" "editor-data"), "lookup": ()}
9999 mem: location 1 is 1068
9999 mem: skipping refcount at 1068
9999 mem: location 1069 is 1087
9999 mem: location 1070 is 1087
9999 mem: location 1071 is 0
9999 mem: location 1072 is 1087
9999 mem: location 1073 is 2
9999 mem: location 1074 is 4
9999 mem: location 1075 is 1
9999 mem: location 1076 is 1
9999 mem: location 1077 is 2
9999 mem: location 1078 is 1
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: storing 1087 in location 2
9999 mem: storing 1087 in location 3
9999 mem: storing 0 in location 4
9999 mem: storing 1087 in location 5
9999 mem: storing 2 in location 6
9999 mem: storing 4 in location 7
9999 mem: storing 1 in location 8
9999 mem: storing 1 in location 9
9999 mem: storing 2 in location 10
9999 mem: storing 1 in location 11
9999 mem: storing 0 in location 12
9999 mem: storing 0 in location 13
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    # 2 (data) <- just the § sentinel\n    # 3 (top of screen) <- the § sentinel\n    4 <- 0  # bottom-of-screen; null since text fits on screen\n    # 5 (before cursor) <- the § sentinel\n    6 <- 2  # left\n    7 <- 4  # right  (inclusive)\n    8 <- 1  # bottom\n    9 <- 1  # cursor row\n    10 <- 2  # cursor column\n  ": "literal-string"}
9999 run: checking location 4
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
 102 run: screen-should-contain {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
