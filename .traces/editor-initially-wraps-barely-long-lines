9991 parse: --- defining scenario_editor-initially-wraps-barely-long-lines
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal", "width": ()}
9993 parse:   ingredient: {5: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    s:address:shared:array:character <- new [abcde]\n    new-editor s:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    s:address:shared:array:character <- new [abcde]\n    new-editor s:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .     .\n    .abcd↩.\n    .e    .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .     .\n    .abcd↩.\n    .e    .\n    .     .\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain-in-color
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {245: "literal", "grey": ()}
9993 parse:   ingredient: {"\n    .     .\n    .    ↩.\n    .     .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain-in-color {245: "literal", "grey": ()}, {"\n    .     .\n    .    ↩.\n    .     .\n    .     .\n  ": "literal-string"}
9999 parse: recipe scenario_editor-initially-wraps-barely-long-lines has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- deduce types for recipe scenario_editor-initially-wraps-barely-long-lines
9992 transform: screen => ("address" "shared" "screen")
9993 transform: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9993 transform: run {"\n    s:address:shared:array:character <- new [abcde]\n    new-editor s:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n  ": "literal-string"}
9993 transform: screen-should-contain {"\n    .     .\n    .abcd↩.\n    .e    .\n    .     .\n  ": "literal-string"}
9993 transform: screen-should-contain-in-color {245: "literal", "grey": ()}, {"\n    .     .\n    .    ↩.\n    .     .\n    .     .\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- deduce types for recipe scenario_editor-initially-wraps-barely-long-lines
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- collect surrounding spaces for recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- transform names for recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-initially-wraps-barely-long-lines
9992 transform: instruction {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- transform braces for recipe scenario_editor-initially-wraps-barely-long-lines
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform: screen-should-contain-in-color ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- perform checks for recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- type-check calls inside recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- type-check merge instructions in recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- check types of reply instructions in recipe scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- checking reply instructions against header for scenario_editor-initially-wraps-barely-long-lines
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-initially-wraps-barely-long-lines
 102 run: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1004
 103 run: {result: ("address" "shared" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 0 -> 1
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 5
9999 mem: location 1004 is 5
9999 mem: storing 25 in location 1006
 103 run: {data: ("address" "shared" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 25
9999 mem: array size is 25
9999 mem: allocating size 52
9999 mem: new alloc: 1014
9999 mem: storing 25 in location 1015
9999 mem: storing 1014 in location 1007
9999 mem: incrementing refcount of 1014: 0 -> 1
 103 run: {result: ("address" "shared" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "shared" "array" "screen-cell")}
9999 mem: location 1004 is 5
9999 mem: location 1003 is 5
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: storing 5 in location 1009
9999 mem: storing 5 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "shared" "screen")} <- clear-screen {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1066
9999 mem: storing 7 in location 1067
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1069
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1069 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1070
9999 mem: incrementing refcount of 1014: 1 -> 2
 104 run: {max: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1071
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1072
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 0
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 0
9999 mem: storing 1016 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1016
9999 mem: location 1074 is 1016
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 0
9999 mem: storing 1 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 1
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 1
9999 mem: storing 1018 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1018
9999 mem: location 1074 is 1018
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 1
9999 mem: storing 2 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 2
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 2
9999 mem: storing 1020 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1020
9999 mem: location 1074 is 1020
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 2
9999 mem: storing 3 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 3
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 3
9999 mem: storing 1022 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1022
9999 mem: location 1074 is 1022
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 3
9999 mem: storing 4 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 4
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 4
9999 mem: storing 1024 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1024
9999 mem: location 1074 is 1024
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 4
9999 mem: storing 5 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 5
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 5
9999 mem: storing 1026 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1026
9999 mem: location 1074 is 1026
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 5
9999 mem: storing 6 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 6
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 6
9999 mem: storing 1028 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1028
9999 mem: location 1074 is 1028
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 6
9999 mem: storing 7 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 7
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 7
9999 mem: storing 1030 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1030
9999 mem: location 1074 is 1030
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 7
9999 mem: storing 8 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 8
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 8
9999 mem: storing 1032 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1032
9999 mem: location 1074 is 1032
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 8
9999 mem: storing 9 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 9
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 9
9999 mem: storing 1034 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1034
9999 mem: location 1074 is 1034
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 9
9999 mem: storing 10 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 10
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 10
9999 mem: storing 1036 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1036
9999 mem: location 1074 is 1036
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 10
9999 mem: storing 11 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 11
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 11
9999 mem: storing 1038 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1038
9999 mem: location 1074 is 1038
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 11
9999 mem: storing 12 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 12
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 12
9999 mem: storing 1040 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1040
9999 mem: location 1074 is 1040
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 12
9999 mem: storing 13 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 13
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 13
9999 mem: storing 1042 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1042
9999 mem: location 1074 is 1042
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 13
9999 mem: storing 14 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 14
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 14
9999 mem: storing 1044 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1044
9999 mem: location 1074 is 1044
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 14
9999 mem: storing 15 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 15
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 15
9999 mem: storing 1046 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1046
9999 mem: location 1074 is 1046
9999 mem: storing 0 in location 1046
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 15
9999 mem: storing 16 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 16
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 16
9999 mem: storing 1048 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1048
9999 mem: location 1074 is 1048
9999 mem: storing 0 in location 1048
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 16
9999 mem: storing 17 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 17
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 17
9999 mem: storing 1050 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1050
9999 mem: location 1074 is 1050
9999 mem: storing 0 in location 1050
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 17
9999 mem: storing 18 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 18
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 18
9999 mem: storing 1052 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1052
9999 mem: location 1074 is 1052
9999 mem: storing 0 in location 1052
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 18
9999 mem: storing 19 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 19
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 19
9999 mem: storing 1054 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1054
9999 mem: location 1074 is 1054
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 19
9999 mem: storing 20 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 20
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 20
9999 mem: storing 1056 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1056
9999 mem: location 1074 is 1056
9999 mem: storing 0 in location 1056
9999 mem: storing 7 in location 1057
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 20
9999 mem: storing 21 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 21
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 21
9999 mem: storing 1058 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1058
9999 mem: location 1074 is 1058
9999 mem: storing 0 in location 1058
9999 mem: storing 7 in location 1059
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 21
9999 mem: storing 22 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 22
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 22
9999 mem: storing 1060 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1060
9999 mem: location 1074 is 1060
9999 mem: storing 0 in location 1060
9999 mem: storing 7 in location 1061
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 22
9999 mem: storing 23 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 23
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 23
9999 mem: storing 1062 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1062
9999 mem: location 1074 is 1062
9999 mem: storing 0 in location 1062
9999 mem: storing 7 in location 1063
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 23
9999 mem: storing 24 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 24
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 24
9999 mem: storing 1064 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1064
9999 mem: location 1074 is 1064
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 24
9999 mem: storing 25 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 25
9999 mem: location 1071 is 25
9999 mem: storing 1 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1069 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 2 -> 1
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: reply {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
9999 mem: incrementing refcount of 1008: 2 -> 3
 102 run: run {"\n    s:address:shared:array:character <- new [abcde]\n    new-editor s:address:shared:array:character, screen:address:shared:screen, 0/left, 5/right\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abcde": "literal-string"}
9993 parse:   product: {s: ("address" "shared" "array" "character")}
9992 load: after rewriting: {s: ("address" "shared" "array" "character")} <- new {"abcde": "literal-string"}
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {s: ("address" "shared" "array" "character")}
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {0: "literal", "left": ()}
9993 parse:   ingredient: {5: "literal", "right": ()}
9992 load: after rewriting: new-editor {s: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: s => ("address" "shared" "array" "character")
9992 transform: screen => ("address" "shared" "screen")
9993 transform: {s: ("address" "shared" "array" "character")} <- new {"abcde": "literal-string"}
9993 transform: new-editor {s: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: s => ("address" "shared" "array" "character")
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign s 1
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction new-editor {s: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: new-editor ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {s: ("address" "shared" "array" "character")} <- new {"abcde": "literal-string"}
9999 mem: new string alloc: 1075
9999 mem: storing 1075 in location 1
9999 mem: incrementing refcount of 1075: 0 -> 1
 103 run: new-editor {s: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9999 mem: location 1 is 1075
9999 mem: location 900 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1082
9999 mem: storing 11 in location 1083
 104 run: {s: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1075 in location 1085
9999 mem: incrementing refcount of 1075: 1 -> 2
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1086
9999 mem: incrementing refcount of 1008: 3 -> 4
 104 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1087
 104 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1088
 104 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1088 is 5
9999 mem: storing 4 in location 1088
 104 run: {result: ("address" "shared" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1095
9999 mem: storing 1095 in location 1089
9999 mem: incrementing refcount of 1095: 0 -> 1
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1103 is 0
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1100
9999 mem: storing 1100 in location 1090
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {left: "number"}
9999 mem: location 1087 is 0
9999 mem: location 1090 is 1100
9999 mem: storing 0 in location 1100
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1103 is 0
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1101
9999 mem: storing 1101 in location 1090
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {right: "number"}
9999 mem: location 1088 is 4
9999 mem: location 1090 is 1101
9999 mem: storing 4 in location 1101
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 0
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1103
9999 mem: storing 1103 in location 1090
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {1: "literal", "top": ()}
9999 mem: location 1090 is 1103
9999 mem: storing 1 in location 1103
 104 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1104
9999 mem: storing 1104 in location 1090
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {left: "number"}
9999 mem: location 1087 is 0
9999 mem: location 1090 is 1104
9999 mem: storing 0 in location 1104
 104 run: {init: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1096
9999 mem: storing 1096 in location 1091
 104 run: {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1108
9999 mem: storing 4 in location 1109
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1111
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1112
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1114
9999 mem: storing 1114 in location 1113
9999 mem: incrementing refcount of 1114: 0 -> 1
 105 run: {result: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "shared" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1111 is 167
9999 mem: location 1112 is 0
9999 mem: location 1113 is 1114
9999 mem: skipping refcount at 1114
9999 mem: location 1113 is 1114
9999 mem: skipping refcount at 1114
9999 mem: storing 167 in location 1115
9999 mem: storing 0 in location 1116
9999 mem: storing 0 in location 1117
 105 run: jump-unless {in: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jumping to instruction 8
 105 run: return {result: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1113 is 1114
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1114
9999 mem: location 1091 is 1096
9999 mem: storing 1114 in location 1096
9999 mem: incrementing refcount of 1114: 1 -> 2
 104 run: {top-of-screen: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 0
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1097
9999 mem: storing 1097 in location 1092
 104 run: {top-of-screen: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1091 is 1096
9999 mem: location 1096 is 1114
9999 mem: location 1092 is 1097
9999 mem: storing 1114 in location 1097
9999 mem: incrementing refcount of 1114: 2 -> 3
 104 run: {y: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1099
9999 mem: storing 1099 in location 1093
 104 run: {y: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1091 is 1096
9999 mem: location 1096 is 1114
9999 mem: location 1093 is 1099
9999 mem: storing 1114 in location 1099
9999 mem: incrementing refcount of 1114: 3 -> 4
 104 run: {result: ("address" "shared" "editor-data")} <- insert-text {result: ("address" "shared" "editor-data")}, {s: ("address" "shared" "array" "character")}
9999 mem: location 1089 is 1095
9999 mem: location 1085 is 1075
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1118
9999 mem: storing 8 in location 1119
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1095 in location 1121
9999 mem: incrementing refcount of 1095: 1 -> 2
 105 run: {text: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1075 in location 1122
9999 mem: incrementing refcount of 1075: 2 -> 3
 105 run: jump-if {text: ("address" "shared" "array" "character")}, {1: "offset"}
9999 mem: location 1122 is 1075
9998 run: jumping to instruction 5
 105 run: {len: "number"} <- length {text: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1122 is 1075
9999 mem: skipping refcount at 1075
9999 mem: storing 5 in location 1123
 105 run: jump-if {len: "number"}, {1: "offset"}
9999 mem: location 1123 is 5
9998 run: jumping to instruction 8
 105 run: {idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1124
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1121 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1121 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1096
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1096 is 1114
9999 mem: storing 1114 in location 1125
9999 mem: incrementing refcount of 1114: 4 -> 5
 105 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1124 is 0
9999 mem: location 1123 is 5
9999 mem: storing 0 in location 1126
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 105 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1122 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1124 is 0
9998 run: address to copy is 1077
9998 run: its type is character
9999 mem: location 1077 is 97
9999 mem: storing 97 in location 1127
 105 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1127 is 97
9999 mem: location 1125 is 1114
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1128
9999 mem: storing 5 in location 1129
 106 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1131
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1114 in location 1132
9999 mem: incrementing refcount of 1114: 5 -> 6
 106 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1135
9999 mem: storing 1135 in location 1133
9999 mem: incrementing refcount of 1135: 0 -> 1
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1133 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 0
9999 mem: location 1137 is 0
9999 mem: location 1138 is 0
9999 mem: location 1131 is 97
9999 mem: location 1133 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy to is 1136
9999 mem: storing 97 in location 1136
 106 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1132 is 1114
9999 mem: skipping refcount at 1114
9999 mem: location 1115 is 167
9999 mem: location 1116 is 0
9999 mem: location 1117 is 0
9999 mem: location 1132 is 1114
9999 mem: skipping refcount at 1114
9998 run: address to copy is 1116
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1116 is 0
9999 mem: storing 0 in location 1134
 106 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1132 is 1114
9999 mem: skipping refcount at 1114
9999 mem: location 1115 is 167
9999 mem: location 1116 is 0
9999 mem: location 1117 is 0
9999 mem: location 1133 is 1135
9999 mem: location 1132 is 1114
9999 mem: skipping refcount at 1114
9998 run: address to copy to is 1116
9999 mem: storing 1135 in location 1116
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 0
9999 mem: location 1138 is 0
9999 mem: location 1132 is 1114
9999 mem: location 1133 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy to is 1138
9999 mem: storing 1114 in location 1138
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 0
9999 mem: location 1138 is 1114
9999 mem: location 1134 is 0
9999 mem: location 1133 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy to is 1137
9999 mem: storing 0 in location 1137
 106 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1134 is 0
9998 run: jump-if fell through
 106 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1132 is 1114
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1125 is 1114
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1139
9999 mem: storing 3 in location 1140
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1114 in location 1142
9999 mem: incrementing refcount of 1114: 6 -> 7
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1114
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1114
9999 mem: skipping refcount at 1114
9999 mem: location 1115 is 167
9999 mem: location 1116 is 1135
9999 mem: location 1117 is 0
9999 mem: location 1142 is 1114
9999 mem: skipping refcount at 1114
9998 run: address to copy is 1116
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1116 is 1135
9999 mem: storing 1135 in location 1143
9999 mem: incrementing refcount of 1135: 1 -> 2
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1135
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1135
9999 mem: decrementing refcount of 1114: 7 -> 6
9999 mem: storing 1135 in location 1125
9999 mem: incrementing refcount of 1135: 2 -> 3
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1124 is 0
9999 mem: storing 1 in location 1124
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1124 is 1
9999 mem: location 1123 is 5
9999 mem: storing 0 in location 1126
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 105 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1122 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1124 is 1
9998 run: address to copy is 1078
9998 run: its type is character
9999 mem: location 1078 is 98
9999 mem: storing 98 in location 1127
 105 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1127 is 98
9999 mem: location 1125 is 1135
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1128
 106 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1131
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1135 in location 1132
9999 mem: incrementing refcount of 1135: 3 -> 4
 106 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1144
9999 mem: storing 1144 in location 1133
9999 mem: incrementing refcount of 1144: 0 -> 1
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1133 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 0
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1131 is 98
9999 mem: location 1133 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1145
9999 mem: storing 98 in location 1145
 106 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1132 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 0
9999 mem: location 1138 is 1114
9999 mem: location 1132 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy is 1137
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1134
 106 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1132 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 0
9999 mem: location 1138 is 1114
9999 mem: location 1133 is 1144
9999 mem: location 1132 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy to is 1137
9999 mem: storing 1144 in location 1137
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 0
9999 mem: location 1147 is 0
9999 mem: location 1132 is 1135
9999 mem: location 1133 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1147
9999 mem: storing 1135 in location 1147
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 0
9999 mem: location 1147 is 1135
9999 mem: location 1134 is 0
9999 mem: location 1133 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1146
9999 mem: storing 0 in location 1146
 106 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1134 is 0
9998 run: jump-if fell through
 106 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1132 is 1135
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1125 is 1135
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1135 in location 1142
9999 mem: incrementing refcount of 1135: 4 -> 5
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1135
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 1144
9999 mem: location 1138 is 1114
9999 mem: location 1142 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy is 1137
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1137 is 1144
9999 mem: storing 1144 in location 1143
9999 mem: incrementing refcount of 1144: 1 -> 2
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1144
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1144
9999 mem: decrementing refcount of 1135: 5 -> 4
9999 mem: storing 1144 in location 1125
9999 mem: incrementing refcount of 1144: 2 -> 3
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1124 is 1
9999 mem: storing 2 in location 1124
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1124 is 2
9999 mem: location 1123 is 5
9999 mem: storing 0 in location 1126
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 105 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1122 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1124 is 2
9998 run: address to copy is 1079
9998 run: its type is character
9999 mem: location 1079 is 99
9999 mem: storing 99 in location 1127
 105 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1127 is 99
9999 mem: location 1125 is 1144
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1128
 106 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1131
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1144 in location 1132
9999 mem: incrementing refcount of 1144: 3 -> 4
 106 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1148
9999 mem: storing 1148 in location 1133
9999 mem: incrementing refcount of 1148: 0 -> 1
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 0
9999 mem: location 1150 is 0
9999 mem: location 1151 is 0
9999 mem: location 1131 is 99
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy to is 1149
9999 mem: storing 99 in location 1149
 106 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1132 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 0
9999 mem: location 1147 is 1135
9999 mem: location 1132 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1146 is 0
9999 mem: storing 0 in location 1134
 106 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1132 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 0
9999 mem: location 1147 is 1135
9999 mem: location 1133 is 1148
9999 mem: location 1132 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy to is 1146
9999 mem: storing 1148 in location 1146
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 0
9999 mem: location 1151 is 0
9999 mem: location 1132 is 1144
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy to is 1151
9999 mem: storing 1144 in location 1151
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 0
9999 mem: location 1151 is 1144
9999 mem: location 1134 is 0
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy to is 1150
9999 mem: storing 0 in location 1150
 106 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1134 is 0
9998 run: jump-if fell through
 106 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1132 is 1144
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1125 is 1144
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1144 in location 1142
9999 mem: incrementing refcount of 1144: 4 -> 5
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1144
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 1148
9999 mem: location 1147 is 1135
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1146 is 1148
9999 mem: storing 1148 in location 1143
9999 mem: incrementing refcount of 1148: 1 -> 2
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1148
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1148
9999 mem: decrementing refcount of 1144: 5 -> 4
9999 mem: storing 1148 in location 1125
9999 mem: incrementing refcount of 1148: 2 -> 3
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1124 is 2
9999 mem: storing 3 in location 1124
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1124 is 3
9999 mem: location 1123 is 5
9999 mem: storing 0 in location 1126
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 105 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1122 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1124 is 3
9998 run: address to copy is 1080
9998 run: its type is character
9999 mem: location 1080 is 100
9999 mem: storing 100 in location 1127
 105 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1127 is 100
9999 mem: location 1125 is 1148
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1128
 106 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1131
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1148 in location 1132
9999 mem: incrementing refcount of 1148: 3 -> 4
 106 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1152
9999 mem: storing 1152 in location 1133
9999 mem: incrementing refcount of 1152: 0 -> 1
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1133 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1131 is 100
9999 mem: location 1133 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1153
9999 mem: storing 100 in location 1153
 106 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1132 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 0
9999 mem: location 1151 is 1144
9999 mem: location 1132 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1150 is 0
9999 mem: storing 0 in location 1134
 106 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1132 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 0
9999 mem: location 1151 is 1144
9999 mem: location 1133 is 1152
9999 mem: location 1132 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy to is 1150
9999 mem: storing 1152 in location 1150
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1132 is 1148
9999 mem: location 1133 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1155
9999 mem: storing 1148 in location 1155
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 0
9999 mem: location 1155 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1133 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1154
9999 mem: storing 0 in location 1154
 106 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1134 is 0
9998 run: jump-if fell through
 106 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1132 is 1148
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1125 is 1148
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1148 in location 1142
9999 mem: incrementing refcount of 1148: 4 -> 5
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1148
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 1152
9999 mem: location 1151 is 1144
9999 mem: location 1142 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1150 is 1152
9999 mem: storing 1152 in location 1143
9999 mem: incrementing refcount of 1152: 1 -> 2
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1152
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1152
9999 mem: decrementing refcount of 1148: 5 -> 4
9999 mem: storing 1152 in location 1125
9999 mem: incrementing refcount of 1152: 2 -> 3
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1124 is 3
9999 mem: storing 4 in location 1124
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1124 is 4
9999 mem: location 1123 is 5
9999 mem: storing 0 in location 1126
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 105 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1122 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1124 is 4
9998 run: address to copy is 1081
9998 run: its type is character
9999 mem: location 1081 is 101
9999 mem: storing 101 in location 1127
 105 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1127 is 101
9999 mem: location 1125 is 1152
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1128
 106 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1131
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1152 in location 1132
9999 mem: incrementing refcount of 1152: 3 -> 4
 106 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1156
9999 mem: storing 1156 in location 1133
9999 mem: incrementing refcount of 1156: 0 -> 1
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1133 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 0
9999 mem: location 1158 is 0
9999 mem: location 1159 is 0
9999 mem: location 1131 is 101
9999 mem: location 1133 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy to is 1157
9999 mem: storing 101 in location 1157
 106 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1132 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 0
9999 mem: location 1155 is 1148
9999 mem: location 1132 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1154 is 0
9999 mem: storing 0 in location 1134
 106 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1132 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 0
9999 mem: location 1155 is 1148
9999 mem: location 1133 is 1156
9999 mem: location 1132 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1154
9999 mem: storing 1156 in location 1154
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 101
9999 mem: location 1158 is 0
9999 mem: location 1159 is 0
9999 mem: location 1132 is 1152
9999 mem: location 1133 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy to is 1159
9999 mem: storing 1152 in location 1159
 106 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1133 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 101
9999 mem: location 1158 is 0
9999 mem: location 1159 is 1152
9999 mem: location 1134 is 0
9999 mem: location 1133 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy to is 1158
9999 mem: storing 0 in location 1158
 106 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1134 is 0
9998 run: jump-if fell through
 106 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1132 is 1152
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1125 is 1152
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1152 in location 1142
9999 mem: incrementing refcount of 1152: 4 -> 5
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1152
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 1156
9999 mem: location 1155 is 1148
9999 mem: location 1142 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1154 is 1156
9999 mem: storing 1156 in location 1143
9999 mem: incrementing refcount of 1156: 1 -> 2
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1156
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1156
9999 mem: decrementing refcount of 1152: 5 -> 4
9999 mem: storing 1156 in location 1125
9999 mem: incrementing refcount of 1156: 2 -> 3
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1124 is 4
9999 mem: storing 5 in location 1124
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1124 is 5
9999 mem: location 1123 is 5
9999 mem: storing 1 in location 1126
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 1
9998 run: jumping to instruction 18
 105 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1121 is 1095
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1095
9999 mem: decrementing refcount of 1095: 2 -> 1
9999 mem: storing 1095 in location 1089
9999 mem: incrementing refcount of 1095: 1 -> 2
 104 run: {y: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1099
9999 mem: storing 1099 in location 1093
 104 run: {y: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1091 is 1096
9999 mem: location 1096 is 1114
9999 mem: location 1093 is 1099
9999 mem: decrementing refcount of 1114: 6 -> 5
9999 mem: storing 1114 in location 1099
9999 mem: incrementing refcount of 1114: 5 -> 6
 104 run: _, _, {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")} <- render {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")}
9999 mem: location 1086 is 1008
9999 mem: location 1089 is 1095
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 28
9999 mem: allocating size 30
9999 mem: new alloc: 1160
9999 mem: storing 28 in location 1161
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1163
9999 mem: incrementing refcount of 1008: 4 -> 5
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1095 in location 1164
9999 mem: incrementing refcount of 1095: 2 -> 3
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1164 is 1095
9998 run: jumping to instruction 5
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1100
9998 run: its type is "number"
9999 mem: location 1100 is 0
9999 mem: storing 0 in location 1165
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1163 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1142
9999 mem: incrementing refcount of 1008: 5 -> 6
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1142 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1142 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1142 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1143
 106 run: return {height: "number"}
9999 mem: location 1143 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1166
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1101
9998 run: its type is "number"
9999 mem: location 1101 is 4
9999 mem: storing 4 in location 1167
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1097
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1097 is 1114
9999 mem: storing 1114 in location 1168
9999 mem: incrementing refcount of 1114: 6 -> 7
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1114
9999 mem: storing 1114 in location 1169
9999 mem: incrementing refcount of 1114: 7 -> 8
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1114
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1114 in location 1142
9999 mem: incrementing refcount of 1114: 8 -> 9
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1114
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1114
9999 mem: skipping refcount at 1114
9999 mem: location 1115 is 167
9999 mem: location 1116 is 1135
9999 mem: location 1117 is 0
9999 mem: location 1142 is 1114
9999 mem: skipping refcount at 1114
9998 run: address to copy is 1116
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1116 is 1135
9999 mem: storing 1135 in location 1143
9999 mem: incrementing refcount of 1135: 4 -> 5
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1135
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1135
9999 mem: decrementing refcount of 1114: 9 -> 8
9999 mem: storing 1135 in location 1168
9999 mem: incrementing refcount of 1135: 5 -> 6
 105 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1170
 105 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1171
 105 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1165 is 0
9999 mem: storing 0 in location 1172
 105 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1103
9999 mem: storing 1103 in location 1173
 105 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1104
9999 mem: storing 1104 in location 1174
 105 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1099
9999 mem: storing 1099 in location 1175
 105 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1163 is 1008
9999 mem: location 1171 is 1
9999 mem: location 1172 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 6 -> 7
 106 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1004
 106 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jump-unless fell through
 106 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1006
 106 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1004 is 1
9999 mem: location 1006 is 1011
9999 mem: storing 1 in location 1011
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1007
 106 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1005 is 0
9999 mem: location 1007 is 1012
9999 mem: storing 0 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1163
9999 mem: incrementing refcount of 1008: 6 -> 7
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1135
9998 run: jump-unless fell through
 105 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1171 is 1
9999 mem: location 1166 is 5
9999 mem: storing 0 in location 1176
 105 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1176 is 0
9998 run: jump-if fell through
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 1
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 1 in location 1177
 105 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1177 is 1
9998 run: jump-unless fell through
 105 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1172 is 0
9999 mem: location 1174 is 1104
9999 mem: location 1104 is 0
9999 mem: storing 1 in location 1178
 105 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1178 is 1
9998 run: jump-unless fell through
 105 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1169 is 1114
9999 mem: location 1175 is 1099
9999 mem: decrementing refcount of 1114: 8 -> 7
9999 mem: storing 1114 in location 1099
9999 mem: incrementing refcount of 1114: 7 -> 8
 105 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1168 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 1144
9999 mem: location 1138 is 1114
9999 mem: location 1168 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy is 1136
9998 run: its type is "character"
9999 mem: location 1136 is 97
9999 mem: storing 97 in location 1179
 105 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1170 is 7
9999 mem: location 1179 is 97
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1190
9999 mem: storing 10 in location 1191
 106 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1193
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1194
 106 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1193 is 7
9999 mem: storing 1 in location 1195
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1194 is 97
9999 mem: storing 0 in location 1196
 106 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1196 is 0
9998 run: jumping to instruction 11
 106 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1197
 106 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 20
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1194 is 97
9999 mem: storing 0 in location 1199
 106 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1199 is 0
9998 run: jumping to instruction 27
 106 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1200
 106 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1200 is 0
9998 run: jumping to instruction 35
 106 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1193 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 7
9999 mem: storing 7 in location 1170
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1179 is 97
9999 mem: storing 0 in location 1180
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1180 is 0
9998 run: jumping to instruction 52
 105 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1172 is 0
9999 mem: location 1167 is 4
9999 mem: storing 0 in location 1182
 105 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1182 is 0
9998 run: jumping to instruction 62
 105 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1163 is 1008
9999 mem: location 1179 is 97
9999 mem: location 1170 is 7
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 mem: new alloc: 1202
9999 mem: storing 25 in location 1203
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 7 -> 8
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1206
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1207
9999 mem: storing 1 in location 1208
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1209
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1206 is 97
  90 print-character: 97 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1205 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1211
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1212
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1213
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1213 is 1
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1212 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 25
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1215
 106 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1211 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1206 is 97
9999 mem: storing 0 in location 1216
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1216 is 0
9998 run: jumping to instruction 44
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1211 is 5
9999 mem: storing 5 in location 1219
 106 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 5
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 5 in location 1219
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1220
9999 mem: incrementing refcount of 1014: 2 -> 3
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1221
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1206 is 97
9999 mem: storing 0 in location 1222
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1222 is 0
9998 run: jumping to instruction 64
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1219 is 5
9999 mem: storing 1026 in location 1224
 106 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1224 is 1026
9999 mem: location 1026 is 0
9999 mem: location 1027 is 7
9999 mem: location 1224 is 1026
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1225
 106 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1206 is 97
9999 mem: location 1225 is 1026
9999 mem: storing 97 in location 1026
 106 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1224 is 1026
9999 mem: location 1026 is 97
9999 mem: location 1027 is 7
9999 mem: location 1224 is 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1226
 106 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1207 is 7
9999 mem: location 1226 is 1027
9999 mem: storing 7 in location 1027
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1211 is 5
9999 mem: storing 4 in location 1227
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1227 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1215 is 1012
9999 mem: storing 1 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1135
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1135 in location 1142
9999 mem: incrementing refcount of 1135: 6 -> 7
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1135
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 1144
9999 mem: location 1138 is 1114
9999 mem: location 1142 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy is 1137
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1137 is 1144
9999 mem: storing 1144 in location 1143
9999 mem: incrementing refcount of 1144: 4 -> 5
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1144
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1144
9999 mem: decrementing refcount of 1135: 7 -> 6
9999 mem: storing 1144 in location 1168
9999 mem: incrementing refcount of 1144: 5 -> 6
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1169 is 1114
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1114 in location 1142
9999 mem: incrementing refcount of 1114: 8 -> 9
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1114
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1114
9999 mem: skipping refcount at 1114
9999 mem: location 1115 is 167
9999 mem: location 1116 is 1135
9999 mem: location 1117 is 0
9999 mem: location 1142 is 1114
9999 mem: skipping refcount at 1114
9998 run: address to copy is 1116
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1116 is 1135
9999 mem: storing 1135 in location 1143
9999 mem: incrementing refcount of 1135: 6 -> 7
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1135
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1135
9999 mem: decrementing refcount of 1114: 9 -> 8
9999 mem: storing 1135 in location 1169
9999 mem: incrementing refcount of 1135: 7 -> 8
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1172 is 0
9999 mem: storing 1 in location 1172
 105 run: jump {: "offset"}
9998 run: jumping to instruction 20
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1144
9998 run: jump-unless fell through
 105 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1171 is 1
9999 mem: location 1166 is 5
9999 mem: storing 0 in location 1176
 105 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1176 is 0
9998 run: jump-if fell through
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 1
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 1 in location 1177
 105 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1177 is 1
9998 run: jump-unless fell through
 105 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1172 is 1
9999 mem: location 1174 is 1104
9999 mem: location 1104 is 0
9999 mem: storing 0 in location 1178
9990 schedule: render/new-editor/run_1001/scenario_editor-initially-wraps-barely-long-lines
 105 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1178 is 0
9998 run: jumping to instruction 30
 105 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1168 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 1148
9999 mem: location 1147 is 1135
9999 mem: location 1168 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1145
9998 run: its type is "character"
9999 mem: location 1145 is 98
9999 mem: storing 98 in location 1179
 105 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1170 is 7
9999 mem: location 1179 is 98
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1190
 106 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1193
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1194
 106 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1193 is 7
9999 mem: storing 1 in location 1195
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1194 is 98
9999 mem: storing 0 in location 1196
 106 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1196 is 0
9998 run: jumping to instruction 11
 106 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1197
 106 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 20
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1194 is 98
9999 mem: storing 0 in location 1199
 106 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1199 is 0
9998 run: jumping to instruction 27
 106 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1200
 106 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1200 is 0
9998 run: jumping to instruction 35
 106 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1193 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 7
9999 mem: storing 7 in location 1170
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1179 is 98
9999 mem: storing 0 in location 1180
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1180 is 0
9998 run: jumping to instruction 52
 105 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1172 is 1
9999 mem: location 1167 is 4
9999 mem: storing 0 in location 1182
 105 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1182 is 0
9998 run: jumping to instruction 62
 105 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1163 is 1008
9999 mem: location 1179 is 98
9999 mem: location 1170 is 7
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1202
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 8 -> 9
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1206
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1207
9999 mem: storing 1 in location 1208
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1209
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1206 is 98
  90 print-character: 98 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1205 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1211
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1212
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1213
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1213 is 1
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1212 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 25
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1215
 106 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1211 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1206 is 98
9999 mem: storing 0 in location 1216
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1216 is 0
9998 run: jumping to instruction 44
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1211 is 5
9999 mem: storing 5 in location 1219
 106 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 5
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 6 in location 1219
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1220
9999 mem: incrementing refcount of 1014: 3 -> 4
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1221
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1206 is 98
9999 mem: storing 0 in location 1222
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1222 is 0
9998 run: jumping to instruction 64
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1219 is 6
9999 mem: storing 1028 in location 1224
 106 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1224 is 1028
9999 mem: location 1028 is 0
9999 mem: location 1029 is 7
9999 mem: location 1224 is 1028
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1225
 106 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1206 is 98
9999 mem: location 1225 is 1028
9999 mem: storing 98 in location 1028
 106 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1224 is 1028
9999 mem: location 1028 is 98
9999 mem: location 1029 is 7
9999 mem: location 1224 is 1028
9998 run: address to copy is 1029
9999 mem: storing 1029 in location 1226
 106 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1207 is 7
9999 mem: location 1226 is 1029
9999 mem: storing 7 in location 1029
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1211 is 5
9999 mem: storing 4 in location 1227
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1227 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1215 is 1012
9999 mem: storing 2 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1144
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1144 in location 1142
9999 mem: incrementing refcount of 1144: 6 -> 7
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1144
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 1148
9999 mem: location 1147 is 1135
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1146 is 1148
9999 mem: storing 1148 in location 1143
9999 mem: incrementing refcount of 1148: 4 -> 5
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1148
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1148
9999 mem: decrementing refcount of 1144: 7 -> 6
9999 mem: storing 1148 in location 1168
9999 mem: incrementing refcount of 1148: 5 -> 6
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1169 is 1135
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1135 in location 1142
9999 mem: incrementing refcount of 1135: 8 -> 9
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1135
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1135
9999 mem: skipping refcount at 1135
9999 mem: location 1136 is 97
9999 mem: location 1137 is 1144
9999 mem: location 1138 is 1114
9999 mem: location 1142 is 1135
9999 mem: skipping refcount at 1135
9998 run: address to copy is 1137
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1137 is 1144
9999 mem: storing 1144 in location 1143
9999 mem: incrementing refcount of 1144: 6 -> 7
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1144
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1144
9999 mem: decrementing refcount of 1135: 9 -> 8
9999 mem: storing 1144 in location 1169
9999 mem: incrementing refcount of 1144: 7 -> 8
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1172 is 1
9999 mem: storing 2 in location 1172
 105 run: jump {: "offset"}
9998 run: jumping to instruction 20
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1148
9998 run: jump-unless fell through
 105 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1171 is 1
9999 mem: location 1166 is 5
9999 mem: storing 0 in location 1176
 105 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1176 is 0
9998 run: jump-if fell through
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 1
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 1 in location 1177
 105 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1177 is 1
9998 run: jump-unless fell through
 105 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1172 is 2
9999 mem: location 1174 is 1104
9999 mem: location 1104 is 0
9999 mem: storing 0 in location 1178
 105 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1178 is 0
9998 run: jumping to instruction 30
 105 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1168 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 1152
9999 mem: location 1151 is 1144
9999 mem: location 1168 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1149
9998 run: its type is "character"
9999 mem: location 1149 is 99
9999 mem: storing 99 in location 1179
 105 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1170 is 7
9999 mem: location 1179 is 99
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1190
 106 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1193
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1194
 106 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1193 is 7
9999 mem: storing 1 in location 1195
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1194 is 99
9999 mem: storing 0 in location 1196
 106 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1196 is 0
9998 run: jumping to instruction 11
 106 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1197
 106 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 20
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1194 is 99
9999 mem: storing 0 in location 1199
 106 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1199 is 0
9998 run: jumping to instruction 27
 106 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1200
 106 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1200 is 0
9998 run: jumping to instruction 35
 106 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1193 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 7
9999 mem: storing 7 in location 1170
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1179 is 99
9999 mem: storing 0 in location 1180
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1180 is 0
9998 run: jumping to instruction 52
 105 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1172 is 2
9999 mem: location 1167 is 4
9999 mem: storing 0 in location 1182
 105 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1182 is 0
9998 run: jumping to instruction 62
 105 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1163 is 1008
9999 mem: location 1179 is 99
9999 mem: location 1170 is 7
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1202
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 9 -> 10
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1206
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1207
9999 mem: storing 1 in location 1208
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1209
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1206 is 99
  90 print-character: 99 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1205 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1211
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1212
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1213
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1213 is 1
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1212 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 25
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1215
 106 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1211 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1206 is 99
9999 mem: storing 0 in location 1216
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1216 is 0
9998 run: jumping to instruction 44
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1211 is 5
9999 mem: storing 5 in location 1219
 106 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 5
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 7 in location 1219
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1220
9999 mem: incrementing refcount of 1014: 4 -> 5
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1221
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1206 is 99
9999 mem: storing 0 in location 1222
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1222 is 0
9998 run: jumping to instruction 64
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1219 is 7
9999 mem: storing 1030 in location 1224
 106 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1224 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 7
9999 mem: location 1224 is 1030
9998 run: address to copy is 1030
9999 mem: storing 1030 in location 1225
 106 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1206 is 99
9999 mem: location 1225 is 1030
9999 mem: storing 99 in location 1030
 106 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1224 is 1030
9999 mem: location 1030 is 99
9999 mem: location 1031 is 7
9999 mem: location 1224 is 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1226
 106 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1207 is 7
9999 mem: location 1226 is 1031
9999 mem: storing 7 in location 1031
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1211 is 5
9999 mem: storing 4 in location 1227
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1227 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1215 is 1012
9999 mem: storing 3 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1148
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1148 in location 1142
9999 mem: incrementing refcount of 1148: 6 -> 7
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1148
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 1152
9999 mem: location 1151 is 1144
9999 mem: location 1142 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1150 is 1152
9999 mem: storing 1152 in location 1143
9999 mem: incrementing refcount of 1152: 4 -> 5
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1152
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1152
9999 mem: decrementing refcount of 1148: 7 -> 6
9999 mem: storing 1152 in location 1168
9999 mem: incrementing refcount of 1152: 5 -> 6
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1169 is 1144
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1144 in location 1142
9999 mem: incrementing refcount of 1144: 8 -> 9
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1144
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9999 mem: location 1145 is 98
9999 mem: location 1146 is 1148
9999 mem: location 1147 is 1135
9999 mem: location 1142 is 1144
9999 mem: skipping refcount at 1144
9998 run: address to copy is 1146
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1146 is 1148
9999 mem: storing 1148 in location 1143
9999 mem: incrementing refcount of 1148: 6 -> 7
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1148
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1148
9999 mem: decrementing refcount of 1144: 9 -> 8
9999 mem: storing 1148 in location 1169
9999 mem: incrementing refcount of 1148: 7 -> 8
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1172 is 2
9999 mem: storing 3 in location 1172
 105 run: jump {: "offset"}
9998 run: jumping to instruction 20
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1152
9998 run: jump-unless fell through
 105 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1171 is 1
9999 mem: location 1166 is 5
9999 mem: storing 0 in location 1176
 105 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1176 is 0
9998 run: jump-if fell through
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 1
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 1 in location 1177
 105 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1177 is 1
9998 run: jump-unless fell through
 105 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1172 is 3
9999 mem: location 1174 is 1104
9999 mem: location 1104 is 0
9999 mem: storing 0 in location 1178
 105 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1178 is 0
9998 run: jumping to instruction 30
 105 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1168 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 1156
9999 mem: location 1155 is 1148
9999 mem: location 1168 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1153
9998 run: its type is "character"
9999 mem: location 1153 is 100
9999 mem: storing 100 in location 1179
 105 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1170 is 7
9999 mem: location 1179 is 100
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1190
 106 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1193
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1194
 106 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1193 is 7
9999 mem: storing 1 in location 1195
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1194 is 100
9999 mem: storing 0 in location 1196
 106 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1196 is 0
9998 run: jumping to instruction 11
 106 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1197
 106 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 20
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1194 is 100
9999 mem: storing 0 in location 1199
 106 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1199 is 0
9998 run: jumping to instruction 27
 106 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1200
 106 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1200 is 0
9998 run: jumping to instruction 35
 106 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1193 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 7
9999 mem: storing 7 in location 1170
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1179 is 100
9999 mem: storing 0 in location 1180
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1180 is 0
9998 run: jumping to instruction 52
 105 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1172 is 3
9999 mem: location 1167 is 4
9999 mem: storing 0 in location 1182
 105 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1182 is 0
9998 run: jumping to instruction 62
 105 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1163 is 1008
9999 mem: location 1179 is 100
9999 mem: location 1170 is 7
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1202
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 10 -> 11
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1206
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1207
9999 mem: storing 1 in location 1208
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1209
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1206 is 100
  90 print-character: 100 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1205 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1211
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1212
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1213
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1213 is 1
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1212 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 25
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1215
 106 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1211 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1206 is 100
9999 mem: storing 0 in location 1216
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1216 is 0
9998 run: jumping to instruction 44
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1211 is 5
9999 mem: storing 5 in location 1219
 106 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 5
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 8 in location 1219
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1220
9999 mem: incrementing refcount of 1014: 5 -> 6
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1221
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1206 is 100
9999 mem: storing 0 in location 1222
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1222 is 0
9998 run: jumping to instruction 64
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1219 is 8
9999 mem: storing 1032 in location 1224
 106 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1224 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1033 is 7
9999 mem: location 1224 is 1032
9998 run: address to copy is 1032
9999 mem: storing 1032 in location 1225
 106 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1206 is 100
9999 mem: location 1225 is 1032
9999 mem: storing 100 in location 1032
 106 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1224 is 1032
9999 mem: location 1032 is 100
9999 mem: location 1033 is 7
9999 mem: location 1224 is 1032
9998 run: address to copy is 1033
9999 mem: storing 1033 in location 1226
 106 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1207 is 7
9999 mem: location 1226 is 1033
9999 mem: storing 7 in location 1033
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1211 is 5
9999 mem: storing 4 in location 1227
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1227 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1215 is 1012
9999 mem: storing 4 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1152
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1152 in location 1142
9999 mem: incrementing refcount of 1152: 6 -> 7
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1152
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 1156
9999 mem: location 1155 is 1148
9999 mem: location 1142 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1154 is 1156
9999 mem: storing 1156 in location 1143
9999 mem: incrementing refcount of 1156: 3 -> 4
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1156
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1156
9999 mem: decrementing refcount of 1152: 7 -> 6
9999 mem: storing 1156 in location 1168
9999 mem: incrementing refcount of 1156: 4 -> 5
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1169 is 1148
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1148 in location 1142
9999 mem: incrementing refcount of 1148: 8 -> 9
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1148
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 99
9999 mem: location 1150 is 1152
9999 mem: location 1151 is 1144
9999 mem: location 1142 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1150 is 1152
9999 mem: storing 1152 in location 1143
9999 mem: incrementing refcount of 1152: 6 -> 7
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1152
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1152
9999 mem: decrementing refcount of 1148: 9 -> 8
9999 mem: storing 1152 in location 1169
9999 mem: incrementing refcount of 1152: 7 -> 8
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1172 is 3
9999 mem: storing 4 in location 1172
 105 run: jump {: "offset"}
9998 run: jumping to instruction 20
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1156
9998 run: jump-unless fell through
 105 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1171 is 1
9999 mem: location 1166 is 5
9999 mem: storing 0 in location 1176
 105 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1176 is 0
9998 run: jump-if fell through
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 1
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 1 in location 1177
 105 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1177 is 1
9998 run: jump-unless fell through
 105 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1172 is 4
9999 mem: location 1174 is 1104
9999 mem: location 1104 is 0
9999 mem: storing 0 in location 1178
 105 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1178 is 0
9998 run: jumping to instruction 30
 105 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1168 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 101
9999 mem: location 1158 is 0
9999 mem: location 1159 is 1152
9999 mem: location 1168 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1157
9998 run: its type is "character"
9999 mem: location 1157 is 101
9999 mem: storing 101 in location 1179
 105 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1170 is 7
9999 mem: location 1179 is 101
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1190
 106 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1193
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1194
 106 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1193 is 7
9999 mem: storing 1 in location 1195
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1194 is 101
9999 mem: storing 0 in location 1196
 106 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1196 is 0
9998 run: jumping to instruction 11
 106 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1197
 106 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 20
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1194 is 101
9999 mem: storing 0 in location 1199
 106 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1199 is 0
9998 run: jumping to instruction 27
 106 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1200
 106 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1200 is 0
9998 run: jumping to instruction 35
 106 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1193 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 7
9999 mem: storing 7 in location 1170
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1179 is 101
9999 mem: storing 0 in location 1180
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1180 is 0
9998 run: jumping to instruction 52
 105 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1172 is 4
9999 mem: location 1167 is 4
9999 mem: storing 1 in location 1182
 105 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1182 is 1
9998 run: jump-unless fell through
 105 run: {wrap-icon: "character"} <- copy {8617: "literal", "loop-back-to-left": ()}
9999 mem: storing 8617 in location 1183
 105 run: print {screen: ("address" "shared" "screen")}, {wrap-icon: "character"}, {245: "literal", "grey": ()}
9999 mem: location 1163 is 1008
9999 mem: location 1183 is 8617
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1202
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 11 -> 12
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 8617 in location 1206
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1207
9999 mem: storing 1 in location 1208
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1209
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1206 is 8617
  90 print-character: 8617 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1205 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1211
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1212
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1213
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1213 is 1
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1212 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 25
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1215
 106 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 4
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1211 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1206 is 8617
9999 mem: storing 0 in location 1216
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1216 is 0
9998 run: jumping to instruction 44
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1213 is 1
9999 mem: location 1211 is 5
9999 mem: storing 5 in location 1219
 106 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 5
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 4
9999 mem: storing 9 in location 1219
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1220
9999 mem: incrementing refcount of 1014: 6 -> 7
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1221
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1206 is 8617
9999 mem: storing 0 in location 1222
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1222 is 0
9998 run: jumping to instruction 64
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1219 is 9
9999 mem: storing 1034 in location 1224
 106 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1224 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1035 is 7
9999 mem: location 1224 is 1034
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1225
 106 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1206 is 8617
9999 mem: location 1225 is 1034
9999 mem: storing 8617 in location 1034
 106 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1224 is 1034
9999 mem: location 1034 is 8617
9999 mem: location 1035 is 7
9999 mem: location 1224 is 1034
9998 run: address to copy is 1035
9999 mem: storing 1035 in location 1226
 106 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1207 is 245
9999 mem: location 1226 is 1035
9999 mem: storing 245 in location 1035
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1211 is 5
9999 mem: storing 4 in location 1227
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1227 is 4
9999 mem: storing 1 in location 1228
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 1
9998 run: jumping to instruction 75
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 5
 105 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1165 is 0
9999 mem: storing 0 in location 1172
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1171 is 1
9999 mem: storing 2 in location 1171
 105 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1163 is 1008
9999 mem: location 1171 is 2
9999 mem: location 1172 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 12 -> 13
 106 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1004
 106 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jump-unless fell through
 106 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1006
 106 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1004 is 2
9999 mem: location 1006 is 1011
9999 mem: storing 2 in location 1011
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1007
 106 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1005 is 0
9999 mem: location 1007 is 1012
9999 mem: storing 0 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 13 -> 12
9999 mem: storing 1008 in location 1163
9999 mem: incrementing refcount of 1008: 12 -> 13
 105 run: jump {+next-character: "label"}
9998 run: jumping to instruction 21
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 1156
9998 run: jump-unless fell through
 105 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1171 is 2
9999 mem: location 1166 is 5
9999 mem: storing 0 in location 1176
 105 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1176 is 0
9998 run: jump-if fell through
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 2
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 0 in location 1177
 105 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1177 is 0
9998 run: jumping to instruction 30
 105 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1168 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 101
9999 mem: location 1158 is 0
9999 mem: location 1159 is 1152
9999 mem: location 1168 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1157
9998 run: its type is "character"
9999 mem: location 1157 is 101
9999 mem: storing 101 in location 1179
 105 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1170 is 7
9999 mem: location 1179 is 101
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1190
 106 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1193
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1194
 106 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1193 is 7
9999 mem: storing 1 in location 1195
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1194 is 101
9999 mem: storing 0 in location 1196
 106 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1196 is 0
9998 run: jumping to instruction 11
 106 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1197
 106 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 20
 106 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1195 is 1
9998 run: jump-unless fell through
 106 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1194 is 101
9999 mem: storing 0 in location 1199
 106 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1199 is 0
9998 run: jumping to instruction 27
 106 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1193 is 7
9999 mem: storing 0 in location 1200
 106 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1200 is 0
9998 run: jumping to instruction 35
 106 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1193 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 7
9999 mem: storing 7 in location 1170
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1179 is 101
9999 mem: storing 0 in location 1180
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1180 is 0
9998 run: jumping to instruction 52
 105 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1172 is 0
9999 mem: location 1167 is 4
9999 mem: storing 0 in location 1182
 105 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1182 is 0
9998 run: jumping to instruction 62
 105 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1163 is 1008
9999 mem: location 1179 is 101
9999 mem: location 1170 is 7
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1202
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 13 -> 14
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1206
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1207
9999 mem: storing 1 in location 1208
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1208 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1209
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1206 is 101
  90 print-character: 101 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1205 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1211
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1212
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1213
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1213 is 2
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1213 is 2
9999 mem: location 1212 is 5
9999 mem: storing 1 in location 1214
9990 schedule: print/render/new-editor/run_1001/scenario_editor-initially-wraps-barely-long-lines
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 25
 106 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1215
 106 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1211 is 5
9999 mem: storing 1 in location 1214
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1214 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1206 is 101
9999 mem: storing 0 in location 1216
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1216 is 0
9998 run: jumping to instruction 44
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1213 is 2
9999 mem: location 1211 is 5
9999 mem: storing 10 in location 1219
 106 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 10
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 10 in location 1219
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1205 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1220
9999 mem: incrementing refcount of 1014: 7 -> 8
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1221
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1206 is 101
9999 mem: storing 0 in location 1222
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1222 is 0
9998 run: jumping to instruction 64
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1220 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1219 is 10
9999 mem: storing 1036 in location 1224
 106 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1224 is 1036
9999 mem: location 1036 is 0
9999 mem: location 1037 is 7
9999 mem: location 1224 is 1036
9998 run: address to copy is 1036
9999 mem: storing 1036 in location 1225
 106 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1206 is 101
9999 mem: location 1225 is 1036
9999 mem: storing 101 in location 1036
 106 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1224 is 1036
9999 mem: location 1036 is 101
9999 mem: location 1037 is 7
9999 mem: location 1224 is 1036
9998 run: address to copy is 1037
9999 mem: storing 1037 in location 1226
 106 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1207 is 7
9999 mem: location 1226 is 1037
9999 mem: storing 7 in location 1037
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1211 is 5
9999 mem: storing 4 in location 1227
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1227 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1215 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1215 is 1012
9999 mem: storing 1 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 5
 105 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 1156
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1156 in location 1142
9999 mem: incrementing refcount of 1156: 5 -> 6
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1156
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 101
9999 mem: location 1158 is 0
9999 mem: location 1159 is 1152
9999 mem: location 1142 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1158
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1158 is 0
9999 mem: storing 0 in location 1143
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1156: 6 -> 5
9999 mem: storing 0 in location 1168
 105 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1169 is 1152
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1139
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1152 in location 1142
9999 mem: incrementing refcount of 1152: 8 -> 9
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1142 is 1152
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1142 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 100
9999 mem: location 1154 is 1156
9999 mem: location 1155 is 1148
9999 mem: location 1142 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1154 is 1156
9999 mem: storing 1156 in location 1143
9999 mem: incrementing refcount of 1156: 5 -> 6
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1143 is 1156
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1156
9999 mem: decrementing refcount of 1152: 9 -> 8
9999 mem: storing 1156 in location 1169
9999 mem: incrementing refcount of 1156: 6 -> 7
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1172 is 0
9999 mem: storing 1 in location 1172
 105 run: jump {: "offset"}
9998 run: jumping to instruction 20
 105 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1168 is 0
9998 run: jumping to instruction 68
 105 run: {bottom-of-screen: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1098
9999 mem: storing 1098 in location 1184
 105 run: {bottom-of-screen: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1168 is 0
9999 mem: location 1184 is 1098
9999 mem: storing 0 in location 1098
 105 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 2
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 0 in location 1177
 105 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1172 is 1
9999 mem: location 1174 is 1104
9999 mem: location 1104 is 0
9999 mem: storing 0 in location 1185
 105 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1177 is 0
9999 mem: location 1185 is 0
9999 mem: storing 0 in location 1186
 105 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1171 is 2
9999 mem: location 1173 is 1103
9999 mem: location 1103 is 1
9999 mem: storing 0 in location 1187
 105 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1186 is 0
9999 mem: location 1187 is 0
9999 mem: storing 0 in location 1188
 105 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1188 is 0
9998 run: jumping to instruction 81
 105 run: {bottom: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 0
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1164 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1102
9999 mem: storing 1102 in location 1189
 105 run: {bottom: ("address" "number"), "lookup": ()} <- copy {row: "number"}
9999 mem: location 1171 is 2
9999 mem: location 1189 is 1102
9999 mem: storing 2 in location 1102
 105 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1171 is 2
9999 mem: location 1172 is 1
9999 mem: location 1163 is 1008
9999 mem: location 1164 is 1095
9999 abandon: saving in free-list of size 30
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 2
9998 run: result 1 is 1
9998 run: result 2 is 1008
9998 run: result 3 is 1095
9999 mem: decrementing refcount of 1008: 14 -> 13
9999 mem: storing 1008 in location 1086
9999 mem: incrementing refcount of 1008: 13 -> 14
9999 mem: decrementing refcount of 1095: 3 -> 2
9999 mem: storing 1095 in location 1089
9999 mem: incrementing refcount of 1095: 2 -> 3
 104 run: {indent?: ("address" "boolean")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {indent?: "offset"}
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9999 mem: location 1096 is 1114
9999 mem: location 1097 is 1114
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: location 1100 is 0
9999 mem: location 1101 is 4
9999 mem: location 1102 is 2
9999 mem: location 1103 is 1
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1089 is 1095
9999 mem: skipping refcount at 1095
9998 run: address to copy is 1105
9999 mem: storing 1105 in location 1094
 104 run: {indent?: ("address" "boolean"), "lookup": ()} <- copy {1: "literal", "true": ()}
9999 mem: location 1094 is 1105
9999 mem: storing 1 in location 1105
 104 run: reply {result: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1089 is 1095
9999 mem: location 1086 is 1008
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .     .\n    .abcd↩.\n    .e    .\n    .     .\n  ": "literal-string"}
 102 run: screen-should-contain-in-color {245: "literal", "grey": ()}, {"\n    .     .\n    .    ↩.\n    .     .\n    .     .\n  ": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
