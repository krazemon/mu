 102 run: assume-console {"\n    left-click 3, 5  # below all text\n    type [e]\n  ": "literal-string"}
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {3: "literal"}
9993 parse:   ingredient: {5: "literal"}
9992 load: after rewriting: left-click {3: "literal"}, {5: "literal"}
9993 parse: instruction: type
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"e": "literal-string"}
9992 load: after rewriting: type {"e": "literal-string"}
9999 mem: storing 'left-click' event starting at 1288
9999 mem: storing 'type' event starting at 1292
9999 mem: storing 'text' tag at 1292
9999 mem: storing character 101 at 1293
9999 mem: storing console in 1296
9999 mem: storing console data in 1298
 102 run: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {console: ("address" "console")}
9993 parse:   ingredient: {2: ("address" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9992 transform: console => ("address" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")} -> {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1296
9999 mem: location 2 is 1142
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1299
9999 mem: storing 0 in location 1299
9999 mem: storing 0 in location 1300
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: storing 0 in location 1305
9999 mem: storing 0 in location 1306
9999 mem: storing 0 in location 1307
9999 mem: storing 0 in location 1308
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: storing 0 in location 1311
9999 mem: storing 0 in location 1312
9999 mem: storing 0 in location 1313
9999 mem: storing 0 in location 1314
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 17 in location 1300
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1302 is 0
9999 mem: incrementing refcount of 1008: 75 -> 76
9999 mem: storing 1008 in location 1302
 104 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1303 is 0
9999 mem: incrementing refcount of 1296: 0 -> 1
9999 mem: storing 1296 in location 1303
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1304 is 0
9999 mem: incrementing refcount of 1142: 6 -> 7
9999 mem: storing 1142 in location 1304
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1305
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1306
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1302 is 1008
9999 mem: location 1305 is 1
9999 mem: location 1306 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1155
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1158 is 0
9999 mem: incrementing refcount of 1008: 76 -> 77
9999 mem: storing 1008 in location 1158
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1159
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1160
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1158 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1159 is 1
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1160 is 0
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1158 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1302 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1302
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1303 is 1296
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1263
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1266 is 0
9999 mem: incrementing refcount of 1296: 1 -> 2
9999 mem: storing 1296 in location 1266
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1266 is 1296
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 0
9999 mem: location 1298 is 1286
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy is 1297
9998 run: its type is "number"
9999 mem: location 1297 is 0
9999 mem: storing 0 in location 1267
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 0
9999 mem: location 1298 is 1286
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy is 1298
9998 run: its type is ("address" "array" "event")
9999 mem: location 1298 is 1286
9999 mem: location 1268 is 0
9999 mem: incrementing refcount of 1286: 1 -> 2
9999 mem: storing 1286 in location 1268
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1268 is 1286
9999 mem: skipping refcount at 1286
9999 mem: storing 2 in location 1269
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1267 is 0
9999 mem: location 1269 is 2
9999 mem: storing 0 in location 1270
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1268 is 1286
9999 mem: skipping refcount at 1286
9998 run: base address is 1287
9999 mem: location 1267 is 0
9998 run: address to copy is 1288
9998 run: its type is event
9999 mem: location 1288 is 2
9999 mem: location 1289 is 65513
9999 mem: location 1290 is 3
9999 mem: location 1291 is 5
9999 mem: storing 2 in location 1272
9999 mem: storing 65513 in location 1273
9999 mem: storing 3 in location 1274
9999 mem: storing 5 in location 1275
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1267 is 0
9999 mem: storing 1 in location 1267
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 0
9999 mem: location 1298 is 1286
9999 mem: location 1267 is 1
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy to is 1297
9999 mem: storing 1 in location 1297
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1272 is 2
9999 mem: location 1273 is 65513
9999 mem: location 1274 is 3
9999 mem: location 1275 is 5
9999 mem: location 1266 is 1296
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 3, 5]
9998 run: result 1 is 1296
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1307
9999 mem: storing 65513 in location 1308
9999 mem: storing 3 in location 1309
9999 mem: storing 5 in location 1310
9999 mem: location 1303 is 1296
9999 mem: skipping refcount at 1296
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1296 in location 1303
9999 mem: storing 1 in location 1311
9999 mem: storing 0 in location 1312
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1311 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1307 is 2
9999 mem: location 1308 is 65513
9999 mem: location 1309 is 3
9999 mem: location 1310 is 5
9999 mem: storing 1 in location 1316
9999 mem: storing 65513 in location 1313
9999 mem: storing 3 in location 1314
9999 mem: storing 5 in location 1315
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 1
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {t: "touch-event"}
9999 mem: location 1302 is 1008
9999 mem: location 1304 is 1142
9999 mem: location 1313 is 65513
9999 mem: location 1314 is 3
9999 mem: location 1315 is 5
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1318
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
9999 mem: storing 0 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
9999 mem: storing 0 in location 1329
9999 mem: storing 0 in location 1330
9999 mem: storing 0 in location 1331
9999 mem: storing 0 in location 1332
9999 mem: storing 0 in location 1333
9999 mem: storing 0 in location 1334
9999 mem: storing 0 in location 1335
9999 mem: storing 0 in location 1336
9999 mem: storing 0 in location 1337
9999 mem: storing 0 in location 1338
9999 mem: storing 0 in location 1339
9999 mem: storing 0 in location 1340
9999 mem: storing 0 in location 1341
9999 mem: storing 0 in location 1342
9999 mem: storing 0 in location 1343
9999 mem: storing 0 in location 1344
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 31 in location 1319
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1321 is 0
9999 mem: incrementing refcount of 1008: 77 -> 78
9999 mem: storing 1008 in location 1321
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1322 is 0
9999 mem: incrementing refcount of 1142: 7 -> 8
9999 mem: storing 1142 in location 1322
 105 run: {t: "touch-event"} <- next-ingredient-without-typechecking 
9999 mem: storing 65513 in location 1323
9999 mem: storing 3 in location 1324
9999 mem: storing 5 in location 1325
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1322 is 1142
9998 run: jumping to instruction 7
 105 run: {click-row: "number"} <- get {t: "touch-event"}, {row: "offset"}
9999 mem: location 1323 is 65513
9999 mem: location 1324 is 3
9999 mem: location 1325 is 5
9998 run: address to copy is 1324
9998 run: its type is "number"
9999 mem: location 1324 is 3
9999 mem: storing 3 in location 1326
 105 run: jump-if {click-row: "number"}, {: "offset"}
9999 mem: location 1326 is 3
9998 run: jumping to instruction 12
 105 run: {click-column: "number"} <- get {t: "touch-event"}, {column: "offset"}
9999 mem: location 1323 is 65513
9999 mem: location 1324 is 3
9999 mem: location 1325 is 5
9998 run: address to copy is 1325
9998 run: its type is "number"
9999 mem: location 1325 is 5
9999 mem: storing 5 in location 1327
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1147
9998 run: its type is "number"
9999 mem: location 1147 is 0
9999 mem: storing 0 in location 1328
 105 run: {too-far-left?: "boolean"} <- lesser-than {click-column: "number"}, {left: "number"}
9999 mem: location 1327 is 5
9999 mem: location 1328 is 0
9999 mem: storing 0 in location 1329
 105 run: jump-unless {too-far-left?: "boolean"}, {: "offset"}
9999 mem: location 1329 is 0
9998 run: jumping to instruction 19
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 9
9999 mem: storing 9 in location 1330
 105 run: {too-far-right?: "boolean"} <- greater-than {click-column: "number"}, {right: "number"}
9999 mem: location 1327 is 5
9999 mem: location 1330 is 9
9999 mem: storing 0 in location 1331
 105 run: jump-unless {too-far-right?: "boolean"}, {: "offset"}
9999 mem: location 1331 is 0
9998 run: jumping to instruction 25
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1332
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1333
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1161
9999 mem: location 1334 is 0
9999 mem: incrementing refcount of 1161: 14 -> 15
9999 mem: storing 1161 in location 1334
 105 run: {editor: ("address" "editor-data")} <- snap-cursor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {click-row: "number"}, {click-column: "number"}
9999 mem: location 1321 is 1008
9999 mem: location 1322 is 1142
9999 mem: location 1326 is 3
9999 mem: location 1327 is 5
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1197
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1200 is 0
9999 mem: incrementing refcount of 1008: 78 -> 79
9999 mem: storing 1008 in location 1200
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1201 is 0
9999 mem: incrementing refcount of 1142: 8 -> 9
9999 mem: storing 1142 in location 1201
 106 run: {target-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1202
 106 run: {target-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1203
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1201 is 1142
9998 run: jumping to instruction 8
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1147
9998 run: its type is "number"
9999 mem: location 1147 is 0
9999 mem: storing 0 in location 1204
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 9
9999 mem: storing 9 in location 1205
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1200 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1179
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1179 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 107 run: return {height: "number"}
9999 mem: location 1180 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1206
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1161
9999 mem: location 1207 is 0
9999 mem: incrementing refcount of 1161: 15 -> 16
9999 mem: storing 1161 in location 1207
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1207 is 1161
9999 mem: location 1208 is 0
9999 mem: incrementing refcount of 1161: 16 -> 17
9999 mem: storing 1161 in location 1208
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1207 is 1161
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1161: 17 -> 18
9999 mem: storing 1161 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1161
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1161
9999 mem: skipping refcount at 1161
9999 mem: location 1162 is 167
9999 mem: location 1163 is 1172
9999 mem: location 1164 is 0
9999 mem: location 1179 is 1161
9999 mem: skipping refcount at 1161
9998 run: address to copy is 1163
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1163 is 1172
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1172: 14 -> 15
9999 mem: storing 1172 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1172
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1172
9999 mem: location 1207 is 1161
9999 mem: skipping refcount at 1161
9999 mem: decrementing refcount of 1161: 18 -> 17
9999 mem: incrementing refcount of 1172: 15 -> 16
9999 mem: storing 1172 in location 1207
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1209
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1204 is 0
9999 mem: storing 0 in location 1210
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {target-row: "number"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 1
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1202 is 3
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1150
9999 mem: storing 3 in location 1150
 106 run: {cursor-row: "number"} <- copy {target-row: "number"}
9999 mem: location 1202 is 3
9999 mem: storing 3 in location 1211
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {target-column: "number"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 3
9999 mem: location 1151 is 0
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1203 is 5
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1151
9999 mem: storing 5 in location 1151
 106 run: {cursor-column: "number"} <- copy {target-column: "number"}
9999 mem: location 1203 is 5
9999 mem: storing 5 in location 1212
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 3
9999 mem: location 1151 is 5
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1161
9999 mem: location 1213 is 0
9999 mem: incrementing refcount of 1161: 17 -> 18
9999 mem: storing 1161 in location 1213
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1207 is 1172
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1206 is 5
9999 mem: storing 0 in location 1214
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1211 is 3
9999 mem: storing 0 in location 1215
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1207 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 97
9999 mem: location 1174 is 1181
9999 mem: location 1175 is 1161
9999 mem: location 1207 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1173
9998 run: its type is "character"
9999 mem: location 1173 is 97
9999 mem: storing 97 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1217 is 97
9999 mem: storing 0 in location 1218
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1218 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1210 is 0
9999 mem: location 1205 is 9
9999 mem: storing 0 in location 1220
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1220 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1207 is 1172
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1172: 16 -> 17
9999 mem: storing 1172 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1172
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 97
9999 mem: location 1174 is 1181
9999 mem: location 1175 is 1161
9999 mem: location 1179 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1174
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1174 is 1181
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1181: 14 -> 15
9999 mem: storing 1181 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1181
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1181
9999 mem: location 1207 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 17 -> 16
9999 mem: incrementing refcount of 1181: 15 -> 16
9999 mem: storing 1181 in location 1207
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1208 is 1161
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1161: 18 -> 19
9999 mem: storing 1161 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1161
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1161
9999 mem: skipping refcount at 1161
9999 mem: location 1162 is 167
9999 mem: location 1163 is 1172
9999 mem: location 1164 is 0
9999 mem: location 1179 is 1161
9999 mem: skipping refcount at 1161
9998 run: address to copy is 1163
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1163 is 1172
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1172: 16 -> 17
9999 mem: storing 1172 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1172
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1172
9999 mem: location 1208 is 1161
9999 mem: skipping refcount at 1161
9999 mem: decrementing refcount of 1161: 19 -> 18
9999 mem: incrementing refcount of 1172: 17 -> 18
9999 mem: storing 1172 in location 1208
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1210 is 0
9999 mem: storing 1 in location 1210
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1207 is 1181
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1206 is 5
9999 mem: storing 0 in location 1214
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1211 is 3
9999 mem: storing 0 in location 1215
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1207 is 1181
9999 mem: skipping refcount at 1181
9999 mem: location 1182 is 98
9999 mem: location 1183 is 1185
9999 mem: location 1184 is 1172
9999 mem: location 1207 is 1181
9999 mem: skipping refcount at 1181
9998 run: address to copy is 1182
9998 run: its type is "character"
9999 mem: location 1182 is 98
9999 mem: storing 98 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1217 is 98
9999 mem: storing 0 in location 1218
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1218 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1210 is 1
9999 mem: location 1205 is 9
9999 mem: storing 0 in location 1220
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1220 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1207 is 1181
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1181: 16 -> 17
9999 mem: storing 1181 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1181
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1181
9999 mem: skipping refcount at 1181
9999 mem: location 1182 is 98
9999 mem: location 1183 is 1185
9999 mem: location 1184 is 1172
9999 mem: location 1179 is 1181
9999 mem: skipping refcount at 1181
9998 run: address to copy is 1183
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1183 is 1185
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1185: 14 -> 15
9999 mem: storing 1185 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1185
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1185
9999 mem: location 1207 is 1181
9999 mem: skipping refcount at 1181
9999 mem: decrementing refcount of 1181: 17 -> 16
9999 mem: incrementing refcount of 1185: 15 -> 16
9999 mem: storing 1185 in location 1207
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1208 is 1172
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1172: 18 -> 19
9999 mem: storing 1172 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1172
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 97
9999 mem: location 1174 is 1181
9999 mem: location 1175 is 1161
9999 mem: location 1179 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1174
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1174 is 1181
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1181: 16 -> 17
9999 mem: storing 1181 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1181
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1181
9999 mem: location 1208 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 19 -> 18
9999 mem: incrementing refcount of 1181: 17 -> 18
9999 mem: storing 1181 in location 1208
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1210 is 1
9999 mem: storing 2 in location 1210
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1207 is 1185
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1206 is 5
9999 mem: storing 0 in location 1214
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1211 is 3
9999 mem: storing 0 in location 1215
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1207 is 1185
9999 mem: skipping refcount at 1185
9999 mem: location 1186 is 99
9999 mem: location 1187 is 1189
9999 mem: location 1188 is 1181
9999 mem: location 1207 is 1185
9999 mem: skipping refcount at 1185
9998 run: address to copy is 1186
9998 run: its type is "character"
9999 mem: location 1186 is 99
9999 mem: storing 99 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1217 is 99
9999 mem: storing 0 in location 1218
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1218 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1210 is 2
9999 mem: location 1205 is 9
9999 mem: storing 0 in location 1220
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1220 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1207 is 1185
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1185: 16 -> 17
9999 mem: storing 1185 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1185
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1185
9999 mem: skipping refcount at 1185
9999 mem: location 1186 is 99
9999 mem: location 1187 is 1189
9999 mem: location 1188 is 1181
9999 mem: location 1179 is 1185
9999 mem: skipping refcount at 1185
9998 run: address to copy is 1187
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1187 is 1189
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1189: 14 -> 15
9999 mem: storing 1189 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1189
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1189
9999 mem: location 1207 is 1185
9999 mem: skipping refcount at 1185
9999 mem: decrementing refcount of 1185: 17 -> 16
9999 mem: incrementing refcount of 1189: 15 -> 16
9999 mem: storing 1189 in location 1207
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1208 is 1181
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1181: 18 -> 19
9999 mem: storing 1181 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1181
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1181
9999 mem: skipping refcount at 1181
9999 mem: location 1182 is 98
9999 mem: location 1183 is 1185
9999 mem: location 1184 is 1172
9999 mem: location 1179 is 1181
9999 mem: skipping refcount at 1181
9998 run: address to copy is 1183
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1183 is 1185
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1185: 16 -> 17
9999 mem: storing 1185 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1185
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1185
9999 mem: location 1208 is 1181
9999 mem: skipping refcount at 1181
9999 mem: decrementing refcount of 1181: 19 -> 18
9999 mem: incrementing refcount of 1185: 17 -> 18
9999 mem: storing 1185 in location 1208
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1210 is 2
9999 mem: storing 3 in location 1210
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1207 is 1189
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1206 is 5
9999 mem: storing 0 in location 1214
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1211 is 3
9999 mem: storing 0 in location 1215
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1207 is 1189
9999 mem: skipping refcount at 1189
9999 mem: location 1190 is 10
9999 mem: location 1191 is 1193
9999 mem: location 1192 is 1185
9999 mem: location 1207 is 1189
9999 mem: skipping refcount at 1189
9998 run: address to copy is 1190
9998 run: its type is "character"
9999 mem: location 1190 is 10
9999 mem: storing 10 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1217 is 10
9999 mem: storing 1 in location 1218
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1218 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 1
9999 mem: location 1211 is 3
9999 mem: storing 0 in location 1215
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 48
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1209 is 1
9999 mem: storing 2 in location 1209
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1204 is 0
9999 mem: storing 0 in location 1210
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1207 is 1189
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1189: 16 -> 17
9999 mem: storing 1189 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1189
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1189
9999 mem: skipping refcount at 1189
9999 mem: location 1190 is 10
9999 mem: location 1191 is 1193
9999 mem: location 1192 is 1185
9999 mem: location 1179 is 1189
9999 mem: skipping refcount at 1189
9998 run: address to copy is 1191
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1191 is 1193
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1193: 12 -> 13
9999 mem: storing 1193 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1193
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1193
9999 mem: location 1207 is 1189
9999 mem: skipping refcount at 1189
9999 mem: decrementing refcount of 1189: 17 -> 16
9999 mem: incrementing refcount of 1193: 13 -> 14
9999 mem: storing 1193 in location 1207
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1208 is 1185
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1185: 18 -> 19
9999 mem: storing 1185 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1185
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1185
9999 mem: skipping refcount at 1185
9999 mem: location 1186 is 99
9999 mem: location 1187 is 1189
9999 mem: location 1188 is 1181
9999 mem: location 1179 is 1185
9999 mem: skipping refcount at 1185
9998 run: address to copy is 1187
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1187 is 1189
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1189: 16 -> 17
9999 mem: storing 1189 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1189
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1189
9999 mem: location 1208 is 1185
9999 mem: skipping refcount at 1185
9999 mem: decrementing refcount of 1185: 19 -> 18
9999 mem: incrementing refcount of 1189: 17 -> 18
9999 mem: storing 1189 in location 1208
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 24
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1207 is 1193
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1209 is 2
9999 mem: location 1206 is 5
9999 mem: storing 0 in location 1214
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 2
9999 mem: location 1211 is 3
9999 mem: storing 0 in location 1215
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1207 is 1193
9999 mem: skipping refcount at 1193
9999 mem: location 1194 is 100
9999 mem: location 1195 is 0
9999 mem: location 1196 is 1189
9999 mem: location 1207 is 1193
9999 mem: skipping refcount at 1193
9998 run: address to copy is 1194
9998 run: its type is "character"
9999 mem: location 1194 is 100
9999 mem: storing 100 in location 1217
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1217 is 100
9999 mem: storing 0 in location 1218
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1218 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1210 is 0
9999 mem: location 1205 is 9
9999 mem: storing 0 in location 1220
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1220 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1207 is 1193
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1193: 14 -> 15
9999 mem: storing 1193 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1193
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1193
9999 mem: skipping refcount at 1193
9999 mem: location 1194 is 100
9999 mem: location 1195 is 0
9999 mem: location 1196 is 1189
9999 mem: location 1179 is 1193
9999 mem: skipping refcount at 1193
9998 run: address to copy is 1195
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1195 is 0
9999 mem: location 1180 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: location 1207 is 1193
9999 mem: skipping refcount at 1193
9999 mem: decrementing refcount of 1193: 15 -> 14
9999 mem: storing 0 in location 1207
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1208 is 1189
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1189: 18 -> 19
9999 mem: storing 1189 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1189
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1189
9999 mem: skipping refcount at 1189
9999 mem: location 1190 is 10
9999 mem: location 1191 is 1193
9999 mem: location 1192 is 1185
9999 mem: location 1179 is 1189
9999 mem: skipping refcount at 1189
9998 run: address to copy is 1191
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1191 is 1193
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1193: 14 -> 15
9999 mem: storing 1193 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1193
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1193
9999 mem: location 1208 is 1189
9999 mem: skipping refcount at 1189
9999 mem: decrementing refcount of 1189: 19 -> 18
9999 mem: incrementing refcount of 1193: 15 -> 16
9999 mem: storing 1193 in location 1208
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1210 is 0
9999 mem: storing 1 in location 1210
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1207 is 0
9998 run: jumping to instruction 66
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 2
9999 mem: location 1211 is 3
9999 mem: storing 0 in location 1215
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1210 is 1
9999 mem: location 1212 is 5
9999 mem: storing 1 in location 1221
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1215 is 0
9999 mem: location 1221 is 1
9999 mem: storing 0 in location 1222
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1209 is 2
9999 mem: location 1211 is 3
9999 mem: storing 1 in location 1223
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1222 is 0
9999 mem: location 1223 is 1
9999 mem: storing 1 in location 1224
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 106 run: {cursor-row: "number"} <- copy {row: "number"}
9999 mem: location 1209 is 2
9999 mem: storing 2 in location 1211
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 3
9999 mem: location 1151 is 5
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1211 is 2
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1150
9999 mem: storing 2 in location 1150
 106 run: {cursor-column: "number"} <- copy {column: "number"}
9999 mem: location 1210 is 1
9999 mem: storing 1 in location 1212
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 5
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1212 is 1
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1151
9999 mem: storing 1 in location 1151
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1208 is 1193
9999 mem: location 1213 is 1161
9999 mem: skipping refcount at 1161
9999 mem: decrementing refcount of 1161: 18 -> 17
9999 mem: incrementing refcount of 1193: 16 -> 17
9999 mem: storing 1193 in location 1213
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1161
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1213 is 1193
9999 mem: location 1201 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1146
9999 mem: location 1146 is 1161
9999 mem: skipping refcount at 1161
9999 mem: decrementing refcount of 1161: 17 -> 16
9999 mem: incrementing refcount of 1193: 17 -> 18
9999 mem: storing 1193 in location 1146
 106 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1201 is 1142
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1142
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1142 in location 1322
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1335
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1161
9999 mem: location 1336 is 0
9999 mem: incrementing refcount of 1161: 16 -> 17
9999 mem: storing 1161 in location 1336
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 2
9999 mem: storing 2 in location 1337
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 1
9999 mem: storing 1 in location 1338
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1335 is 0
9998 run: jumping to instruction 50
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1225
9999 mem: location 1340 is 0
9999 mem: incrementing refcount of 1225: 0 -> 1
9999 mem: storing 1225 in location 1340
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1332 is 1
9999 mem: location 1333 is 0
9999 mem: location 1334 is 1161
9999 mem: location 1337 is 2
9999 mem: location 1338 is 1
9999 mem: location 1336 is 1161
9999 mem: location 1335 is 0
9999 mem: location 1340 is 1225
9999 mem: skipping refcount at 1225
9999 mem: location 1340 is 1225
9999 mem: skipping refcount at 1225
9999 mem: incrementing refcount of 1161: 17 -> 18
9999 mem: incrementing refcount of 1161: 18 -> 19
9999 mem: storing 1 in location 1226
9999 mem: storing 1 in location 1227
9999 mem: storing 0 in location 1228
9999 mem: storing 1161 in location 1229
9999 mem: storing 2 in location 1230
9999 mem: storing 1 in location 1231
9999 mem: storing 1161 in location 1232
9999 mem: storing 0 in location 1233
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1322 is 1142
9999 mem: location 1340 is 1225
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1165
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1142: 9 -> 10
9999 mem: storing 1142 in location 1168
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1169 is 0
9999 mem: incrementing refcount of 1225: 1 -> 2
9999 mem: storing 1225 in location 1169
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1153
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1153 is 0
9999 mem: location 1170 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1170
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1169 is 1225
9999 mem: location 1170 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1155
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1158 is 0
9999 mem: incrementing refcount of 1225: 2 -> 3
9999 mem: storing 1225 in location 1158
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1159 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1159
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1351
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1351: 0 -> 1
9999 mem: storing 1351 in location 1160
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1158 is 1225
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1351
9999 mem: skipping refcount at 1351
9999 mem: location 1160 is 1351
9999 mem: skipping refcount at 1351
9999 mem: incrementing refcount of 1225: 3 -> 4
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1225 in location 1352
9999 mem: storing 0 in location 1353
 107 run: return {result: ("address" "list" "address" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1160 is 1351
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1351
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1351: 1 -> 2
9999 mem: storing 1351 in location 1170
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1170 is 1351
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1153
9999 mem: location 1153 is 0
9999 mem: incrementing refcount of 1351: 2 -> 3
9999 mem: storing 1351 in location 1153
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1154
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1154 is 0
9999 mem: location 1171 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1171
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1171 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1171
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1171 is 0
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1154
9999 mem: location 1154 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1154
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1168 is 1142
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1142
9999 mem: location 1322 is 1142
9999 mem: skipping refcount at 1142
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1142 in location 1322
 105 run: return {1: "literal", "true": ()}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1322 is 1142
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump {+next-event: "label"}
9998 run: jumping to instruction 6
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 2
9999 mem: storing 2 in location 1305
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 1
9999 mem: storing 1 in location 1306
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1302 is 1008
9999 mem: location 1305 is 2
9999 mem: location 1306 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1155
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1158 is 0
9999 mem: incrementing refcount of 1008: 80 -> 81
9999 mem: storing 1008 in location 1158
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1159
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1160
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1158 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1159 is 2
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1160 is 1
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1158 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1302 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1302
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1303 is 1296
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1263
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1266 is 0
9999 mem: incrementing refcount of 1296: 2 -> 3
9999 mem: storing 1296 in location 1266
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1266 is 1296
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 1
9999 mem: location 1298 is 1286
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy is 1297
9998 run: its type is "number"
9999 mem: location 1297 is 1
9999 mem: storing 1 in location 1267
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 1
9999 mem: location 1298 is 1286
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy is 1298
9998 run: its type is ("address" "array" "event")
9999 mem: location 1298 is 1286
9999 mem: location 1268 is 0
9999 mem: incrementing refcount of 1286: 2 -> 3
9999 mem: storing 1286 in location 1268
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1268 is 1286
9999 mem: skipping refcount at 1286
9999 mem: storing 2 in location 1269
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1267 is 1
9999 mem: location 1269 is 2
9999 mem: storing 0 in location 1270
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1268 is 1286
9999 mem: skipping refcount at 1286
9998 run: base address is 1287
9999 mem: location 1267 is 1
9998 run: address to copy is 1292
9998 run: its type is event
9999 mem: location 1292 is 0
9999 mem: location 1293 is 101
9999 mem: location 1294 is 0
9999 mem: location 1295 is 0
9999 mem: storing 0 in location 1272
9999 mem: storing 101 in location 1273
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1267 is 1
9999 mem: storing 2 in location 1267
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 1
9999 mem: location 1298 is 1286
9999 mem: location 1267 is 2
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy to is 1297
9999 mem: storing 2 in location 1297
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1272 is 0
9999 mem: location 1273 is 101
9999 mem: location 1274 is 0
9999 mem: location 1275 is 0
9999 mem: location 1266 is 1296
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 101, 0, 0]
9998 run: result 1 is 1296
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1307
9999 mem: storing 101 in location 1308
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: location 1303 is 1296
9999 mem: skipping refcount at 1296
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1296 in location 1303
9999 mem: storing 1 in location 1311
9999 mem: storing 0 in location 1312
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1311 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1307 is 0
9999 mem: location 1308 is 101
9999 mem: location 1309 is 0
9999 mem: location 1310 is 0
9999 mem: storing 0 in location 1316
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {e: "event"}
9999 mem: location 1302 is 1008
9999 mem: location 1304 is 1142
9999 mem: location 1307 is 0
9999 mem: location 1308 is 101
9999 mem: location 1309 is 0
9999 mem: location 1310 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 102
9999 mem: allocating size 104
9999 mem: new alloc: 1354
9999 mem: storing 0 in location 1354
9999 mem: storing 0 in location 1355
9999 mem: storing 0 in location 1356
9999 mem: storing 0 in location 1357
9999 mem: storing 0 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: storing 0 in location 1367
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: storing 0 in location 1377
9999 mem: storing 0 in location 1378
9999 mem: storing 0 in location 1379
9999 mem: storing 0 in location 1380
9999 mem: storing 0 in location 1381
9999 mem: storing 0 in location 1382
9999 mem: storing 0 in location 1383
9999 mem: storing 0 in location 1384
9999 mem: storing 0 in location 1385
9999 mem: storing 0 in location 1386
9999 mem: storing 0 in location 1387
9999 mem: storing 0 in location 1388
9999 mem: storing 0 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: storing 0 in location 1398
9999 mem: storing 0 in location 1399
9999 mem: storing 0 in location 1400
9999 mem: storing 0 in location 1401
9999 mem: storing 0 in location 1402
9999 mem: storing 0 in location 1403
9999 mem: storing 0 in location 1404
9999 mem: storing 0 in location 1405
9999 mem: storing 0 in location 1406
9999 mem: storing 0 in location 1407
9999 mem: storing 0 in location 1408
9999 mem: storing 0 in location 1409
9999 mem: storing 0 in location 1410
9999 mem: storing 0 in location 1411
9999 mem: storing 0 in location 1412
9999 mem: storing 0 in location 1413
9999 mem: storing 0 in location 1414
9999 mem: storing 0 in location 1415
9999 mem: storing 0 in location 1416
9999 mem: storing 0 in location 1417
9999 mem: storing 0 in location 1418
9999 mem: storing 0 in location 1419
9999 mem: storing 0 in location 1420
9999 mem: storing 0 in location 1421
9999 mem: storing 0 in location 1422
9999 mem: storing 0 in location 1423
9999 mem: storing 0 in location 1424
9999 mem: storing 0 in location 1425
9999 mem: storing 0 in location 1426
9999 mem: storing 0 in location 1427
9999 mem: storing 0 in location 1428
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: storing 0 in location 1439
9999 mem: storing 0 in location 1440
9999 mem: storing 0 in location 1441
9999 mem: storing 0 in location 1442
9999 mem: storing 0 in location 1443
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: storing 0 in location 1451
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 102 in location 1355
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1357 is 0
9999 mem: incrementing refcount of 1008: 81 -> 82
9999 mem: storing 1008 in location 1357
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1358 is 0
9999 mem: incrementing refcount of 1142: 10 -> 11
9999 mem: storing 1142 in location 1358
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1359
9999 mem: storing 101 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1363
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1358 is 1142
9998 run: jumping to instruction 8
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1357 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1008: 82 -> 83
9999 mem: storing 1008 in location 1179
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1179 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 106 run: return {width: "number"}
9999 mem: location 1180 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1364
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1357 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1008: 83 -> 84
9999 mem: storing 1008 in location 1179
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1179 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 106 run: return {height: "number"}
9999 mem: location 1180 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1365
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1147
9998 run: its type is "number"
9999 mem: location 1147 is 0
9999 mem: storing 0 in location 1366
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 9
9999 mem: storing 9 in location 1367
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1193
9999 mem: location 1368 is 0
9999 mem: incrementing refcount of 1193: 18 -> 19
9999 mem: storing 1193 in location 1368
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 2
9999 mem: storing 2 in location 1369
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 1
9999 mem: storing 1 in location 1370
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1369 is 2
9999 mem: storing 2 in location 1371
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1370 is 1
9999 mem: storing 1 in location 1372
 105 run: {c: "character"}, {is-unicode?: "boolean"} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1359 is 0
9999 mem: location 1360 is 101
9999 mem: location 1361 is 0
9999 mem: location 1362 is 0
9999 mem: storing 1 in location 1374
9999 mem: storing 101 in location 1373
 105 run: jump-unless {is-unicode?: "boolean"}, {: "offset"}
9999 mem: location 1374 is 1
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: "character"}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1375
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1375 is 0
9998 run: jumping to instruction 73
 105 run: {undo?: "boolean"} <- equal {c: "character"}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1413
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1413 is 0
9998 run: jumping to instruction 128
 105 run: {page-up?: "boolean"} <- equal {c: "character"}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1417
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1417 is 0
9998 run: jumping to instruction 167
 105 run: {page-down?: "boolean"} <- equal {c: "character"}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1428
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1428 is 0
9998 run: jumping to instruction 206
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: "character"}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1429
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1429 is 0
9998 run: jumping to instruction 227
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: "character"}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1432
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1432 is 0
9998 run: jumping to instruction 249
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: "character"}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1433
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1433 is 0
9998 run: jumping to instruction 285
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: "character"}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1434
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1434 is 0
9998 run: jumping to instruction 321
 105 run: {delete-previous-character?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1435
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1435 is 0
9998 run: jumping to instruction 361
 105 run: {tab?: "boolean"} <- equal {c: "character"}, {9: "literal", "tab": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1438
 105 run: jump-unless {tab?: "boolean"}, {: "offset"}
9999 mem: location 1438 is 0
9998 run: jumping to instruction 399
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1373 is 101
9999 mem: storing 0 in location 1442
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1442 is 0
9998 run: jumping to instruction 421
 105 run: {regular-character?: "boolean"} <- greater-or-equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1373 is 101
9999 mem: storing 1 in location 1443
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1363
 105 run: jump-if {regular-character?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jumping to instruction 427
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1161
9999 mem: location 1421 is 0
9999 mem: incrementing refcount of 1161: 19 -> 20
9999 mem: storing 1161 in location 1421
 105 run: {cursor-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1193
9999 mem: location 1439 is 0
9999 mem: incrementing refcount of 1193: 19 -> 20
9999 mem: storing 1193 in location 1439
 105 run: {editor: ("address" "editor-data")}, {screen: ("address" "screen")}, {go-render?: "boolean"} <- insert-at-cursor {editor: ("address" "editor-data")}, {c: "character"}, {screen: ("address" "screen")}
9999 mem: location 1358 is 1142
9999 mem: location 1373 is 101
9999 mem: location 1357 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 abandon: picking up space from free-list of size 33
9999 mem: new alloc from free list: 1318
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1321 is 0
9999 mem: incrementing refcount of 1142: 11 -> 12
9999 mem: storing 1142 in location 1321
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1322
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1323 is 0
9999 mem: incrementing refcount of 1008: 84 -> 85
9999 mem: storing 1008 in location 1323
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1146
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1146 is 1193
9999 mem: location 1324 is 0
9999 mem: incrementing refcount of 1193: 20 -> 21
9999 mem: storing 1193 in location 1324
 106 run: insert_2 {c: "character"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1322 is 101
9999 mem: location 1324 is 1193
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1165
 107 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1168
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1169 is 0
9999 mem: incrementing refcount of 1193: 21 -> 22
9999 mem: storing 1193 in location 1169
 107 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1458
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: storing 0 in location 1461
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1458: 0 -> 1
9999 mem: storing 1458 in location 1170
 107 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1170 is 1458
9999 mem: skipping refcount at 1458
9999 mem: location 1459 is 0
9999 mem: location 1460 is 0
9999 mem: location 1461 is 0
9999 mem: location 1168 is 101
9999 mem: location 1170 is 1458
9999 mem: skipping refcount at 1458
9998 run: address to copy to is 1459
9999 mem: storing 101 in location 1459
 107 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1169 is 1193
9999 mem: skipping refcount at 1193
9999 mem: location 1194 is 100
9999 mem: location 1195 is 0
9999 mem: location 1196 is 1189
9999 mem: location 1169 is 1193
9999 mem: skipping refcount at 1193
9998 run: address to copy is 1195
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1195 is 0
9999 mem: location 1171 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1171
 107 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1169 is 1193
9999 mem: skipping refcount at 1193
9999 mem: location 1194 is 100
9999 mem: location 1195 is 0
9999 mem: location 1196 is 1189
9999 mem: location 1170 is 1458
9999 mem: location 1169 is 1193
9999 mem: skipping refcount at 1193
9998 run: address to copy to is 1195
9999 mem: location 1195 is 0
9999 mem: incrementing refcount of 1458: 1 -> 2
9999 mem: storing 1458 in location 1195
 107 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1170 is 1458
9999 mem: skipping refcount at 1458
9999 mem: location 1459 is 101
9999 mem: location 1460 is 0
9999 mem: location 1461 is 0
9999 mem: location 1169 is 1193
9999 mem: location 1170 is 1458
9999 mem: skipping refcount at 1458
9998 run: address to copy to is 1461
9999 mem: location 1461 is 0
9999 mem: incrementing refcount of 1193: 22 -> 23
9999 mem: storing 1193 in location 1461
 107 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1170 is 1458
9999 mem: skipping refcount at 1458
9999 mem: location 1459 is 101
9999 mem: location 1460 is 0
9999 mem: location 1461 is 1193
9999 mem: location 1171 is 0
9999 mem: location 1170 is 1458
9999 mem: skipping refcount at 1458
9998 run: address to copy to is 1460
9999 mem: location 1460 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1460
 107 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jump-if fell through
 107 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1169 is 1193
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1324 is 1193
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1193: 23 -> 24
9999 mem: storing 1193 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1193
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1193
9999 mem: skipping refcount at 1193
9999 mem: location 1194 is 100
9999 mem: location 1195 is 1458
9999 mem: location 1196 is 1189
9999 mem: location 1179 is 1193
9999 mem: skipping refcount at 1193
9998 run: address to copy is 1195
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1195 is 1458
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1458: 2 -> 3
9999 mem: storing 1458 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1458
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1458
9999 mem: location 1324 is 1193
9999 mem: skipping refcount at 1193
9999 mem: decrementing refcount of 1193: 24 -> 23
9999 mem: incrementing refcount of 1458: 3 -> 4
9999 mem: storing 1458 in location 1324
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1193
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1324 is 1458
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1146
9999 mem: location 1146 is 1193
9999 mem: skipping refcount at 1193
9999 mem: decrementing refcount of 1193: 23 -> 22
9999 mem: incrementing refcount of 1458: 4 -> 5
9999 mem: storing 1458 in location 1146
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 2
9999 mem: storing 2 in location 1325
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 1
9999 mem: storing 1 in location 1326
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1147
9998 run: its type is "number"
9999 mem: location 1147 is 0
9999 mem: storing 0 in location 1327
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1148
9998 run: its type is "number"
9999 mem: location 1148 is 9
9999 mem: storing 9 in location 1328
 106 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1325 is 2
9999 mem: storing 2 in location 1329
 106 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1326 is 1
9999 mem: storing 1 in location 1330
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1323 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1008: 85 -> 86
9999 mem: storing 1008 in location 1179
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1179 is 1008
9998 run: jump-unless fell through
9990 schedule: screen-width/insert-at-cursor/handle-keyboard-event/editor-event-loop/run_1001/scenario_editor-inserts-characters-at-cursor-4
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 107 run: return {width: "number"}
9999 mem: location 1180 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1331
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1323 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1008: 86 -> 87
9999 mem: storing 1008 in location 1179
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1179 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 107 run: return {height: "number"}
9999 mem: location 1180 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1332
 106 run: {wrap-column: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1328 is 9
9999 mem: storing 8 in location 1333
 106 run: {at-wrap?: "boolean"} <- greater-or-equal {cursor-column: "number"}, {wrap-column: "number"}
9999 mem: location 1326 is 1
9999 mem: location 1333 is 8
9999 mem: storing 0 in location 1334
 106 run: jump-unless {at-wrap?: "boolean"}, {: "offset"}
9999 mem: location 1334 is 0
9998 run: jumping to instruction 47
 106 run: {cursor-column: "number"} <- add {cursor-column: "number"}, {1: "literal"}
9999 mem: location 1326 is 1
9999 mem: storing 2 in location 1326
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 1
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1326 is 2
9999 mem: location 1321 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1151
9999 mem: storing 2 in location 1151
 106 run: {next: ("address" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1324 is 1458
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1458: 5 -> 6
9999 mem: storing 1458 in location 1179
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1458
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1458
9999 mem: skipping refcount at 1458
9999 mem: location 1459 is 101
9999 mem: location 1460 is 0
9999 mem: location 1461 is 1193
9999 mem: location 1179 is 1458
9999 mem: skipping refcount at 1458
9998 run: address to copy is 1460
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1460 is 0
9999 mem: location 1180 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1180
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: location 1341 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1341
 106 run: {at-end?: "boolean"} <- equal {next: ("address" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1341 is 0
9999 mem: storing 1 in location 1342
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1342 is 1
9998 run: jump-unless fell through
 106 run: {bottom: "number"} <- subtract {screen-height: "number"}, {1: "literal"}
9999 mem: location 1332 is 5
9999 mem: storing 4 in location 1343
 106 run: {at-bottom?: "boolean"} <- equal {save-row: "number"}, {bottom: "number"}
9999 mem: location 1329 is 2
9999 mem: location 1343 is 4
9999 mem: storing 0 in location 1344
 106 run: {at-right?: "boolean"} <- equal {save-column: "number"}, {right: "number"}
9999 mem: location 1330 is 1
9999 mem: location 1328 is 9
9999 mem: storing 0 in location 1345
 106 run: {overflow?: "boolean"} <- and {at-bottom?: "boolean"}, {at-right?: "boolean"}
9999 mem: location 1344 is 0
9999 mem: location 1345 is 0
9999 mem: storing 0 in location 1346
 106 run: jump-if {overflow?: "boolean"}, {: "offset"}
9999 mem: location 1346 is 0
9998 run: jump-if fell through
 106 run: move-cursor {screen: ("address" "screen")}, {save-row: "number"}, {save-column: "number"}
9999 mem: location 1323 is 1008
9999 mem: location 1329 is 2
9999 mem: location 1330 is 1
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1155
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1158 is 0
9999 mem: incrementing refcount of 1008: 87 -> 88
9999 mem: storing 1008 in location 1158
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1159
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1160
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1158 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1159 is 2
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1160 is 1
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1158 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
 106 run: print {screen: ("address" "screen")}, {c: "character"}
9999 mem: location 1323 is 1008
9999 mem: location 1322 is 101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1237
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1240 is 0
9999 mem: incrementing refcount of 1008: 88 -> 89
9999 mem: storing 1008 in location 1240
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1241
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1242
9999 mem: storing 0 in location 1243
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1243 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1242
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1244
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1241 is 101
  90 print-character: 101 
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1240 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1246
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1247
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1248
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1248 is 2
9999 mem: storing 1 in location 1249
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1248 is 2
9999 mem: location 1247 is 5
9999 mem: storing 1 in location 1249
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1250
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1250 is 1
9999 mem: storing 1 in location 1249
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1250 is 1
9999 mem: location 1246 is 10
9999 mem: storing 1 in location 1249
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1241 is 101
9999 mem: storing 0 in location 1251
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1248 is 2
9999 mem: location 1246 is 10
9999 mem: storing 20 in location 1254
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1254 is 20
9999 mem: location 1250 is 1
9999 mem: storing 21 in location 1254
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1014: 54 -> 55
9999 mem: storing 1014 in location 1255
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1255 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1256
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1241 is 101
9999 mem: storing 0 in location 1257
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1257 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1241 is 101
9999 mem: location 1242 is 7
9999 mem: storing 101 in location 1259
9999 mem: storing 7 in location 1260
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1255 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1254 is 21
9998 run: address to copy to is 1058
9999 mem: location 1259 is 101
9999 mem: location 1260 is 7
9999 mem: storing 101 in location 1058
9999 mem: storing 7 in location 1059
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1246 is 10
9999 mem: storing 9 in location 1261
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1250 is 1
9999 mem: location 1261 is 9
9999 mem: storing 0 in location 1262
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1262 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1250 is 1
9999 mem: storing 2 in location 1250
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1250 is 2
9999 mem: location 1240 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1340
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "screen"), "same-as-ingredient": "2"}, {go-render?: "boolean"}
9999 mem: location 1321 is 1142
9999 mem: location 1323 is 1008
9999 mem: location 1340 is 0
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1142
9998 run: result 1 is 1008
9998 run: result 2 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1142 in location 1358
9999 mem: location 1357 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1357
9999 mem: storing 0 in location 1363
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1144
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1144 is 1161
9999 mem: location 1423 is 0
9999 mem: incrementing refcount of 1161: 20 -> 21
9999 mem: storing 1161 in location 1423
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 2
9999 mem: storing 2 in location 1369
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 2
9999 mem: storing 2 in location 1370
 105 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1153
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1153 is 1351
9999 mem: location 1378 is 0
9999 mem: incrementing refcount of 1351: 3 -> 4
9999 mem: storing 1351 in location 1378
 105 run: jump-unless {undo: ("address" "list" "address" "operation")}, {: "offset"}
9999 mem: location 1378 is 1351
9998 run: jump-unless fell through
 105 run: {op: ("address" "operation")} <- first_3 {undo: ("address" "list" "address" "operation")}
9999 mem: location 1378 is 1351
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 106 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1351: 4 -> 5
9999 mem: storing 1351 in location 1179
 106 run: {result: ("address" "operation")} <- get {in: ("address" "list" "address" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1179 is 1351
9999 mem: skipping refcount at 1351
9999 mem: location 1352 is 1225
9999 mem: location 1353 is 0
9999 mem: location 1179 is 1351
9999 mem: skipping refcount at 1351
9998 run: address to copy is 1352
9998 run: its type is ("address" "operation")
9999 mem: location 1352 is 1225
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1225: 4 -> 5
9999 mem: storing 1225 in location 1180
 106 run: reply {result: ("address" "operation")}
9999 mem: location 1180 is 1225
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1225
9999 mem: location 1377 is 0
9999 mem: incrementing refcount of 1225: 5 -> 6
9999 mem: storing 1225 in location 1377
 105 run: {typing: "insert-operation"}, {is-insert?: "boolean"} <- maybe-convert {op: ("address" "operation"), "lookup": ()}, {typing: "variant"}
9999 mem: location 1377 is 1225
9999 mem: skipping refcount at 1225
9999 mem: location 1226 is 1
9999 mem: location 1227 is 1
9999 mem: location 1228 is 0
9999 mem: location 1229 is 1161
9999 mem: location 1230 is 2
9999 mem: location 1231 is 1
9999 mem: location 1232 is 1161
9999 mem: location 1233 is 0
9999 mem: location 1234 is 0
9999 mem: location 1235 is 0
9999 mem: location 1236 is 0
9999 mem: location 1377 is 1225
9999 mem: skipping refcount at 1225
9999 mem: storing 0 in location 1411
 105 run: jump-unless {is-insert?: "boolean"}, {: "offset"}
9999 mem: location 1411 is 0
9998 run: jumping to instruction 451
 105 run: {insert-from: ("address" "duplex-list" "character")} <- next_2 {cursor-before: ("address" "duplex-list" "character")}
9999 mem: location 1439 is 1193
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 106 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1193: 22 -> 23
9999 mem: storing 1193 in location 1179
 106 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1193
9998 run: jumping to instruction 5
 106 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1193
9999 mem: skipping refcount at 1193
9999 mem: location 1194 is 100
9999 mem: location 1195 is 1458
9999 mem: location 1196 is 1189
9999 mem: location 1179 is 1193
9999 mem: skipping refcount at 1193
9998 run: address to copy is 1195
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1195 is 1458
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1458: 6 -> 7
9999 mem: storing 1458 in location 1180
 106 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 1458
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1458
9999 mem: location 1412 is 0
9999 mem: incrementing refcount of 1458: 7 -> 8
9999 mem: storing 1458 in location 1412
 105 run: {insert-to: ("address" "duplex-list" "character")} <- next_2 {insert-from: ("address" "duplex-list" "character")}
9999 mem: location 1412 is 1458
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
 106 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1458: 8 -> 9
9999 mem: storing 1458 in location 1179
 106 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1179 is 1458
9998 run: jumping to instruction 5
 106 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1179 is 1458
9999 mem: skipping refcount at 1458
9999 mem: location 1459 is 101
9999 mem: location 1460 is 0
9999 mem: location 1461 is 1193
9999 mem: location 1179 is 1458
9999 mem: skipping refcount at 1458
9998 run: address to copy is 1460
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1460 is 0
9999 mem: location 1180 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1180
 106 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1180 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: location 1441 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1441
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 mem: new alloc: 1462
9999 mem: storing 0 in location 1462
9999 mem: storing 0 in location 1463
9999 mem: storing 0 in location 1464
9999 mem: storing 0 in location 1465
9999 mem: storing 0 in location 1466
9999 mem: storing 0 in location 1467
9999 mem: storing 0 in location 1468
9999 mem: storing 0 in location 1469
9999 mem: storing 0 in location 1470
9999 mem: storing 0 in location 1471
9999 mem: storing 0 in location 1472
9999 mem: storing 0 in location 1473
9999 mem: location 1377 is 1225
9999 mem: skipping refcount at 1225
9999 mem: decrementing refcount of 1225: 6 -> 5
9999 mem: incrementing refcount of 1462: 0 -> 1
9999 mem: storing 1462 in location 1377
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {0: "literal", "insert-operation": ()}, {save-row: "number", "before": ()}, {save-column: "number", "before": ()}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {insert-from: ("address" "duplex-list" "character")}, {insert-to: ("address" "duplex-list" "character")}, {1: "literal", "coalesce": ()}
9999 mem: location 1371 is 2
9999 mem: location 1372 is 1
9999 mem: location 1421 is 1161
9999 mem: location 1369 is 2
9999 mem: location 1370 is 2
9999 mem: location 1423 is 1161
9999 mem: location 1412 is 1458
9999 mem: location 1441 is 0
9999 mem: location 1377 is 1462
9999 mem: skipping refcount at 1462
9999 mem: location 1377 is 1462
9999 mem: skipping refcount at 1462
9999 mem: incrementing refcount of 1161: 21 -> 22
9999 mem: incrementing refcount of 1161: 22 -> 23
9999 mem: incrementing refcount of 1458: 9 -> 10
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1463
9999 mem: storing 2 in location 1464
9999 mem: storing 1 in location 1465
9999 mem: storing 1161 in location 1466
9999 mem: storing 2 in location 1467
9999 mem: storing 2 in location 1468
9999 mem: storing 1161 in location 1469
9999 mem: storing 1458 in location 1470
9999 mem: storing 0 in location 1471
9999 mem: storing 1 in location 1472
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1358 is 1142
9999 mem: location 1377 is 1462
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1165
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1142: 12 -> 13
9999 mem: storing 1142 in location 1168
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1169 is 0
9999 mem: incrementing refcount of 1462: 1 -> 2
9999 mem: storing 1462 in location 1169
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1153
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1153 is 1351
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1351: 5 -> 6
9999 mem: storing 1351 in location 1170
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1169 is 1462
9999 mem: location 1170 is 1351
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1155
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1158 is 0
9999 mem: incrementing refcount of 1462: 2 -> 3
9999 mem: storing 1462 in location 1158
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1159 is 0
9999 mem: incrementing refcount of 1351: 6 -> 7
9999 mem: storing 1351 in location 1159
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1474
9999 mem: storing 0 in location 1474
9999 mem: storing 0 in location 1475
9999 mem: storing 0 in location 1476
9999 mem: location 1160 is 0
9999 mem: incrementing refcount of 1474: 0 -> 1
9999 mem: storing 1474 in location 1160
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1158 is 1462
9999 mem: location 1159 is 1351
9999 mem: location 1160 is 1474
9999 mem: skipping refcount at 1474
9999 mem: location 1160 is 1474
9999 mem: skipping refcount at 1474
9999 mem: incrementing refcount of 1462: 3 -> 4
9999 mem: incrementing refcount of 1351: 7 -> 8
9999 mem: storing 1462 in location 1475
9999 mem: storing 1351 in location 1476
 107 run: return {result: ("address" "list" "address" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1160 is 1474
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1474
9999 mem: location 1170 is 1351
9999 mem: skipping refcount at 1351
9999 mem: decrementing refcount of 1351: 8 -> 7
9999 mem: incrementing refcount of 1474: 1 -> 2
9999 mem: storing 1474 in location 1170
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1351
9999 mem: location 1154 is 0
9999 mem: location 1170 is 1474
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1153
9999 mem: location 1153 is 1351
9999 mem: skipping refcount at 1351
9999 mem: decrementing refcount of 1351: 7 -> 6
9999 mem: incrementing refcount of 1474: 2 -> 3
9999 mem: storing 1474 in location 1153
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1474
9999 mem: location 1154 is 0
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1154
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1154 is 0
9999 mem: location 1171 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1171
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1171 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1171
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1474
9999 mem: location 1154 is 0
9999 mem: location 1171 is 0
9999 mem: location 1168 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy to is 1154
9999 mem: location 1154 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1154
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1168 is 1142
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1142
9999 mem: location 1358 is 1142
9999 mem: skipping refcount at 1142
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1142 in location 1358
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1357 is 1008
9999 mem: location 1358 is 1142
9999 mem: location 1363 is 0
9999 abandon: saving in free-list of size 104
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1142
9998 run: result 2 is 0
9999 mem: location 1302 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1302
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1142 in location 1304
9999 mem: storing 0 in location 1317
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1317 is 0
9998 run: jumping to instruction 25
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1474
9999 mem: location 1154 is 0
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1150
9998 run: its type is "number"
9999 mem: location 1150 is 2
9999 mem: storing 2 in location 1305
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9999 mem: location 1143 is 1161
9999 mem: location 1144 is 1161
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1458
9999 mem: location 1147 is 0
9999 mem: location 1148 is 9
9999 mem: location 1149 is 2
9999 mem: location 1150 is 2
9999 mem: location 1151 is 2
9999 mem: location 1152 is 1
9999 mem: location 1153 is 1474
9999 mem: location 1154 is 0
9999 mem: location 1304 is 1142
9999 mem: skipping refcount at 1142
9998 run: address to copy is 1151
9998 run: its type is "number"
9999 mem: location 1151 is 2
9999 mem: storing 2 in location 1306
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1302 is 1008
9999 mem: location 1305 is 2
9999 mem: location 1306 is 2
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1155
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1158 is 0
9999 mem: incrementing refcount of 1008: 89 -> 90
9999 mem: storing 1008 in location 1158
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1159
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1160
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1158 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1159 is 2
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1160 is 2
9999 mem: location 1158 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1158 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: location 1302 is 1008
9999 mem: skipping refcount at 1008
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1008 in location 1302
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1303 is 1296
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1263
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1266 is 0
9999 mem: incrementing refcount of 1296: 3 -> 4
9999 mem: storing 1296 in location 1266
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1266 is 1296
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 2
9999 mem: location 1298 is 1286
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy is 1297
9998 run: its type is "number"
9999 mem: location 1297 is 2
9999 mem: storing 2 in location 1267
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9999 mem: location 1297 is 2
9999 mem: location 1298 is 1286
9999 mem: location 1266 is 1296
9999 mem: skipping refcount at 1296
9998 run: address to copy is 1298
9998 run: its type is ("address" "array" "event")
9999 mem: location 1298 is 1286
9999 mem: location 1268 is 0
9999 mem: incrementing refcount of 1286: 3 -> 4
9999 mem: storing 1286 in location 1268
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1268 is 1286
9999 mem: skipping refcount at 1286
9999 mem: storing 2 in location 1269
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1267 is 2
9999 mem: location 1269 is 2
9999 mem: storing 1 in location 1270
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1176
9999 mem: location 1271 is 0
9999 mem: incrementing refcount of 1176: 0 -> 1
9999 mem: storing 1176 in location 1271
 105 run: return {dummy: ("address" "event"), "lookup": ()}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1271 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 0
9999 mem: location 1178 is 0
9999 mem: location 1179 is 0
9999 mem: location 1180 is 0
9999 mem: location 1266 is 1296
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1296
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1307
9999 mem: storing 0 in location 1308
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: location 1303 is 1296
9999 mem: skipping refcount at 1296
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1296 in location 1303
9999 mem: storing 1 in location 1311
9999 mem: storing 1 in location 1312
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1311 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {console: ("address" "console"), "same-as-ingredient": "1"}, {editor: ("address" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1302 is 1008
9999 mem: location 1303 is 1296
9999 mem: location 1304 is 1142
9999 abandon: saving in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .          .\n    .abc       .\n    .de        .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
 102 run: check-trace-count-for-label {1: "literal"}, {"print-character": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
