 102 run: assume-console {"\n    left-click 2, 0\n    press backspace\n  ": "literal-string"}
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: "literal"}
9993 parse:   ingredient: {0: "literal"}
9992 load: after rewriting: left-click {2: "literal"}, {0: "literal"}
9993 parse: instruction: press
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {backspace: ()}
9992 load: after rewriting: press {backspace: ()}
9999 mem: storing 'left-click' event starting at 1338
9999 mem: storing 'press' event starting at 1342
9999 mem: storing console in 1346
9999 mem: storing console data in 1348
 102 run: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {console: ("address" "console")}
9993 parse:   ingredient: {2: ("address" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9992 transform: console => ("address" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")} -> {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for editor-event-loop {screen: ("address" "screen"), "raw": ()}, {console: ("address" "console"), "raw": ()}, {2: ("address" "editor-data")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "screen"), "raw": ()}, {console: ("address" "console"), "raw": ()}, {2: ("address" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1346
9999 mem: location 2 is 1152
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1349
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: storing 0 in location 1355
9999 mem: storing 0 in location 1356
9999 mem: storing 0 in location 1357
9999 mem: storing 0 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: storing 0 in location 1367
9999 mem: storing 17 in location 1350
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1352 is 0
9999 mem: incrementing refcount of 1008: 29 -> 30
9999 mem: storing 1008 in location 1352
 104 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1353 is 0
9999 mem: incrementing refcount of 1346: 1 -> 2
9999 mem: storing 1346 in location 1353
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1354 is 0
9999 mem: incrementing refcount of 1152: 3 -> 4
9999 mem: storing 1152 in location 1354
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 1
9999 mem: storing 1 in location 1355
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1356
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1352 is 1008
9999 mem: location 1355 is 1
9999 mem: location 1356 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 30 -> 31
9999 mem: storing 1008 in location 1168
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1169
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1170
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 0
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1352
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1353 is 1346
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1313
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1316 is 0
9999 mem: incrementing refcount of 1346: 2 -> 3
9999 mem: storing 1346 in location 1316
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1316 is 1346
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 0
9999 mem: location 1348 is 1336
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy is 1347
9998 run: its type is "number"
9999 mem: location 1347 is 0
9999 mem: storing 0 in location 1317
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 0
9999 mem: location 1348 is 1336
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy is 1348
9998 run: its type is ("address" "array" "event")
9999 mem: location 1348 is 1336
9999 mem: location 1318 is 0
9999 mem: incrementing refcount of 1336: 1 -> 2
9999 mem: storing 1336 in location 1318
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9999 mem: storing 2 in location 1319
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1317 is 0
9999 mem: location 1319 is 2
9999 mem: storing 0 in location 1320
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1320 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9998 run: base address is 1337
9999 mem: location 1317 is 0
9998 run: address to copy is 1338
9998 run: its type is event
9999 mem: location 1338 is 2
9999 mem: location 1339 is 65513
9999 mem: location 1340 is 2
9999 mem: location 1341 is 0
9999 mem: storing 2 in location 1322
9999 mem: storing 65513 in location 1323
9999 mem: storing 2 in location 1324
9999 mem: storing 0 in location 1325
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1317 is 0
9999 mem: storing 1 in location 1317
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 0
9999 mem: location 1348 is 1336
9999 mem: location 1317 is 1
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy to is 1347
9999 mem: storing 1 in location 1347
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1322 is 2
9999 mem: location 1323 is 65513
9999 mem: location 1324 is 2
9999 mem: location 1325 is 0
9999 mem: location 1316 is 1346
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1317
9999 mem: clearing buf:address:array:event
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9999 mem: decrementing refcount of 1336: 2 -> 1
9999 mem: storing 0 in location 1318
9999 mem: clearing max:number
9999 mem: storing 0 in location 1319
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1320
9999 mem: clearing dummy:address:event
9999 mem: location 1321 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1321
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1317
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1326
9999 mem: automatically abandoning 1313
9999 abandon: updating refcounts inside 1313: (array number)
9999 abandon: saving 1313 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 2, 0]
9998 run: result 1 is 1346
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1357
9999 mem: storing 65513 in location 1358
9999 mem: storing 2 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 1346 in location 1353
9999 mem: storing 1 in location 1361
9999 mem: storing 0 in location 1362
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1361 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1362 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1357 is 2
9999 mem: location 1358 is 65513
9999 mem: location 1359 is 2
9999 mem: location 1360 is 0
9999 mem: storing 1 in location 1366
9999 mem: storing 65513 in location 1363
9999 mem: storing 2 in location 1364
9999 mem: storing 0 in location 1365
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1366 is 1
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {t: "touch-event"}
9999 mem: location 1352 is 1008
9999 mem: location 1354 is 1152
9999 mem: location 1363 is 65513
9999 mem: location 1364 is 2
9999 mem: location 1365 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1368
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: storing 0 in location 1377
9999 mem: storing 0 in location 1378
9999 mem: storing 0 in location 1379
9999 mem: storing 0 in location 1380
9999 mem: storing 0 in location 1381
9999 mem: storing 0 in location 1382
9999 mem: storing 0 in location 1383
9999 mem: storing 0 in location 1384
9999 mem: storing 0 in location 1385
9999 mem: storing 0 in location 1386
9999 mem: storing 0 in location 1387
9999 mem: storing 0 in location 1388
9999 mem: storing 0 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: storing 0 in location 1398
9999 mem: storing 0 in location 1399
9999 mem: storing 0 in location 1400
9999 mem: storing 31 in location 1369
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1371 is 0
9999 mem: incrementing refcount of 1008: 31 -> 32
9999 mem: storing 1008 in location 1371
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1372 is 0
9999 mem: incrementing refcount of 1152: 4 -> 5
9999 mem: storing 1152 in location 1372
 105 run: {t: "touch-event"} <- next-ingredient-without-typechecking 
9999 mem: storing 65513 in location 1373
9999 mem: storing 2 in location 1374
9999 mem: storing 0 in location 1375
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1372 is 1152
9998 run: jumping to instruction 7
 105 run: {click-row: "number"} <- get {t: "touch-event"}, {row: "offset"}
9999 mem: location 1373 is 65513
9999 mem: location 1374 is 2
9999 mem: location 1375 is 0
9998 run: address to copy is 1374
9998 run: its type is "number"
9999 mem: location 1374 is 2
9999 mem: storing 2 in location 1376
 105 run: jump-if {click-row: "number"}, {: "offset"}
9999 mem: location 1376 is 2
9998 run: jumping to instruction 12
 105 run: {click-column: "number"} <- get {t: "touch-event"}, {column: "offset"}
9999 mem: location 1373 is 65513
9999 mem: location 1374 is 2
9999 mem: location 1375 is 0
9998 run: address to copy is 1375
9998 run: its type is "number"
9999 mem: location 1375 is 0
9999 mem: storing 0 in location 1377
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1157
9998 run: its type is "number"
9999 mem: location 1157 is 0
9999 mem: storing 0 in location 1378
 105 run: {too-far-left?: "boolean"} <- lesser-than {click-column: "number"}, {left: "number"}
9999 mem: location 1377 is 0
9999 mem: location 1378 is 0
9999 mem: storing 0 in location 1379
 105 run: jump-unless {too-far-left?: "boolean"}, {: "offset"}
9999 mem: location 1379 is 0
9998 run: jumping to instruction 19
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 9
9999 mem: storing 9 in location 1380
 105 run: {too-far-right?: "boolean"} <- greater-than {click-column: "number"}, {right: "number"}
9999 mem: location 1377 is 0
9999 mem: location 1380 is 9
9999 mem: storing 0 in location 1381
 105 run: jump-unless {too-far-right?: "boolean"}, {: "offset"}
9999 mem: location 1381 is 0
9998 run: jumping to instruction 25
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 1
9999 mem: storing 1 in location 1382
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1383
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1154 is 1171
9999 mem: location 1384 is 0
9999 mem: incrementing refcount of 1171: 9 -> 10
9999 mem: storing 1171 in location 1384
 105 run: {editor: ("address" "editor-data")} <- snap-cursor {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {click-row: "number"}, {click-column: "number"}
9999 mem: location 1371 is 1008
9999 mem: location 1372 is 1152
9999 mem: location 1376 is 2
9999 mem: location 1377 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 32 -> 33
9999 mem: storing 1008 in location 1250
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1251 is 0
9999 mem: incrementing refcount of 1152: 5 -> 6
9999 mem: storing 1152 in location 1251
 106 run: {target-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1252
 106 run: {target-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1253
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1251 is 1152
9998 run: jumping to instruction 8
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1157
9998 run: its type is "number"
9999 mem: location 1157 is 0
9999 mem: storing 0 in location 1254
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 9
9999 mem: storing 9 in location 1255
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1250 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1008: 33 -> 34
9999 mem: storing 1008 in location 1189
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1189 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1190
 107 run: return {height: "number"}
9999 mem: location 1190 is 5
9999 mem: clearing screen:address:screen
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 34 -> 33
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1256
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1154 is 1171
9999 mem: location 1257 is 0
9999 mem: incrementing refcount of 1171: 10 -> 11
9999 mem: storing 1171 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1171
9999 mem: location 1258 is 0
9999 mem: incrementing refcount of 1171: 11 -> 12
9999 mem: storing 1171 in location 1258
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1171
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1171: 12 -> 13
9999 mem: storing 1171 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1171
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: location 1172 is 167
9999 mem: location 1173 is 1182
9999 mem: location 1174 is 0
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9998 run: address to copy is 1173
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1173 is 1182
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1182: 7 -> 8
9999 mem: storing 1182 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1182
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1182
9999 mem: storing 1182 in location 1257
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1259
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1254 is 0
9999 mem: storing 0 in location 1260
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {target-row: "number"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1252 is 2
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1160
9999 mem: storing 2 in location 1160
 106 run: {cursor-row: "number"} <- copy {target-row: "number"}
9999 mem: location 1252 is 2
9999 mem: storing 2 in location 1261
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {target-column: "number"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1253 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1161
9999 mem: storing 0 in location 1161
 106 run: {cursor-column: "number"} <- copy {target-column: "number"}
9999 mem: location 1253 is 0
9999 mem: storing 0 in location 1262
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1156
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1156 is 1171
9999 mem: location 1263 is 0
9999 mem: incrementing refcount of 1171: 12 -> 13
9999 mem: storing 1171 in location 1263
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1182
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1257 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1183
9998 run: its type is "character"
9999 mem: location 1183 is 97
9999 mem: storing 97 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 97
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1182
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1182: 8 -> 9
9999 mem: storing 1182 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1182
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1184
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1184 is 1191
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1191: 7 -> 8
9999 mem: storing 1191 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1191
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: decrementing refcount of 1182: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: storing 1191 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1171
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1171: 13 -> 14
9999 mem: storing 1171 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1171
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: location 1172 is 167
9999 mem: location 1173 is 1182
9999 mem: location 1174 is 0
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9998 run: address to copy is 1173
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1173 is 1182
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1182: 8 -> 9
9999 mem: storing 1182 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1182
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 14 -> 13
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1182
9999 mem: storing 1182 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1191
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1257 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1192
9998 run: its type is "character"
9999 mem: location 1192 is 98
9999 mem: storing 98 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 98
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1191: 8 -> 9
9999 mem: storing 1191 in location 1189
9990 schedule: next_2/snap-cursor/move-cursor-in-editor/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1195: 7 -> 8
9999 mem: storing 1195 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1195
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: storing 1195 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1182
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1182: 9 -> 10
9999 mem: storing 1182 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1182
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1184
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1184 is 1191
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1191: 8 -> 9
9999 mem: storing 1191 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1191
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: decrementing refcount of 1182: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: storing 1191 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1195
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1257 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1196
9998 run: its type is "character"
9999 mem: location 1196 is 99
9999 mem: storing 99 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 99
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1195
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1195: 8 -> 9
9999 mem: storing 1195 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1199: 7 -> 8
9999 mem: storing 1199 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1199
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: storing 1199 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1191: 9 -> 10
9999 mem: storing 1191 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1195: 8 -> 9
9999 mem: storing 1195 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1195
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: storing 1195 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1199
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1257 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 32
9999 mem: storing 32 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 32
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1199: 8 -> 9
9999 mem: storing 1199 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1203: 7 -> 8
9999 mem: storing 1203 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1203
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1195
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1195: 9 -> 10
9999 mem: storing 1195 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1199: 8 -> 9
9999 mem: storing 1199 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1199
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: storing 1199 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 4 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1203
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1257 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 100
9999 mem: storing 100 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 100
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1203: 8 -> 9
9999 mem: storing 1203 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1205 is 1207
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1207: 7 -> 8
9999 mem: storing 1207 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1207
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1207
9999 mem: storing 1207 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1199: 9 -> 10
9999 mem: storing 1199 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1203: 8 -> 9
9999 mem: storing 1203 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1203
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 5 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1207
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1257 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1208
9998 run: its type is "character"
9999 mem: location 1208 is 101
9999 mem: storing 101 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 101
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1207
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1207: 8 -> 9
9999 mem: storing 1207 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1207
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1209
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1209 is 1211
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1211: 7 -> 8
9999 mem: storing 1211 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1211
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: decrementing refcount of 1207: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1211
9999 mem: storing 1211 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1203: 9 -> 10
9999 mem: storing 1203 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1205 is 1207
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1207: 8 -> 9
9999 mem: storing 1207 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1207
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1207
9999 mem: storing 1207 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 6 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1211
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1215
9999 mem: location 1214 is 1207
9999 mem: location 1257 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1212
9998 run: its type is "character"
9999 mem: location 1212 is 102
9999 mem: storing 102 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 102
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1211
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1211: 8 -> 9
9999 mem: storing 1211 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1211
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1215
9999 mem: location 1214 is 1207
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1213
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1213 is 1215
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1215: 7 -> 8
9999 mem: storing 1215 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1215
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1215
9999 mem: storing 1215 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1207
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1207: 9 -> 10
9999 mem: storing 1207 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1207
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1209
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1209 is 1211
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1211: 8 -> 9
9999 mem: storing 1211 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1211
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: decrementing refcount of 1207: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1211
9999 mem: storing 1211 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 7 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1215
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1257 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1216
9998 run: its type is "character"
9999 mem: location 1216 is 10
9999 mem: storing 10 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 10
9999 mem: storing 1 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 48
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1259 is 1
9999 mem: storing 2 in location 1259
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1254 is 0
9999 mem: storing 0 in location 1260
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1215
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1215: 8 -> 9
9999 mem: storing 1215 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1215
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1217
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1217 is 1219
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1219: 7 -> 8
9999 mem: storing 1219 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1219
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1219
9999 mem: storing 1219 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1211
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1211: 9 -> 10
9999 mem: storing 1211 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1211
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1215
9999 mem: location 1214 is 1207
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1213
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1213 is 1215
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1215: 8 -> 9
9999 mem: storing 1215 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1215
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1215
9999 mem: storing 1215 in location 1258
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 24
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1219
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1262 is 0
9999 mem: storing 1 in location 1266
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1215
9999 mem: location 1263 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 13 -> 12
9999 mem: incrementing refcount of 1215: 9 -> 10
9999 mem: storing 1215 in location 1263
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1171
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1263 is 1215
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1156
9999 mem: location 1156 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 12 -> 11
9999 mem: incrementing refcount of 1215: 10 -> 11
9999 mem: storing 1215 in location 1156
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1219
9999 mem: skipping refcount at 1219
9999 mem: location 1220 is 103
9999 mem: location 1221 is 1223
9999 mem: location 1222 is 1215
9999 mem: location 1257 is 1219
9999 mem: skipping refcount at 1219
9998 run: address to copy is 1220
9998 run: its type is "character"
9999 mem: location 1220 is 103
9999 mem: storing 103 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 103
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 0
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1219
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1219: 8 -> 9
9999 mem: storing 1219 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1219
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: location 1220 is 103
9999 mem: location 1221 is 1223
9999 mem: location 1222 is 1215
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9998 run: address to copy is 1221
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1221 is 1223
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1223: 7 -> 8
9999 mem: storing 1223 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1223
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: decrementing refcount of 1219: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1223
9999 mem: storing 1223 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1215
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1215: 11 -> 12
9999 mem: storing 1215 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1215
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1217
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1217 is 1219
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1219: 8 -> 9
9999 mem: storing 1219 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1219
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1219
9999 mem: storing 1219 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 0
9999 mem: storing 1 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1223
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1262 is 0
9999 mem: storing 0 in location 1266
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1223
9999 mem: skipping refcount at 1223
9999 mem: location 1224 is 104
9999 mem: location 1225 is 1227
9999 mem: location 1226 is 1219
9999 mem: location 1257 is 1223
9999 mem: skipping refcount at 1223
9998 run: address to copy is 1224
9998 run: its type is "character"
9999 mem: location 1224 is 104
9999 mem: storing 104 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 104
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 1
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1223
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1223: 8 -> 9
9999 mem: storing 1223 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1223
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: location 1224 is 104
9999 mem: location 1225 is 1227
9999 mem: location 1226 is 1219
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9998 run: address to copy is 1225
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1225 is 1227
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1227: 7 -> 8
9999 mem: storing 1227 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1227
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: decrementing refcount of 1223: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1227
9999 mem: storing 1227 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1219
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1219: 9 -> 10
9999 mem: storing 1219 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1219
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: location 1220 is 103
9999 mem: location 1221 is 1223
9999 mem: location 1222 is 1215
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9998 run: address to copy is 1221
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1221 is 1223
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1223: 8 -> 9
9999 mem: storing 1223 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1223
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: decrementing refcount of 1219: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1223
9999 mem: storing 1223 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 1
9999 mem: storing 2 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1227
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1262 is 0
9999 mem: storing 0 in location 1266
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1227
9999 mem: skipping refcount at 1227
9999 mem: location 1228 is 105
9999 mem: location 1229 is 1231
9999 mem: location 1230 is 1223
9999 mem: location 1257 is 1227
9999 mem: skipping refcount at 1227
9998 run: address to copy is 1228
9998 run: its type is "character"
9999 mem: location 1228 is 105
9999 mem: storing 105 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 105
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 2
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1227
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1227: 8 -> 9
9999 mem: storing 1227 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1227
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: location 1228 is 105
9999 mem: location 1229 is 1231
9999 mem: location 1230 is 1223
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9998 run: address to copy is 1229
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1229 is 1231
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1231: 7 -> 8
9999 mem: storing 1231 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1231
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: decrementing refcount of 1227: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1231
9999 mem: storing 1231 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1223
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1223: 9 -> 10
9999 mem: storing 1223 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1223
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: location 1224 is 104
9999 mem: location 1225 is 1227
9999 mem: location 1226 is 1219
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9998 run: address to copy is 1225
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1225 is 1227
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1227: 8 -> 9
9999 mem: storing 1227 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1227
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: decrementing refcount of 1223: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1227
9999 mem: storing 1227 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 2
9999 mem: storing 3 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1231
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1262 is 0
9999 mem: storing 0 in location 1266
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 32
9999 mem: location 1233 is 1235
9999 mem: location 1234 is 1227
9999 mem: location 1257 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1232
9998 run: its type is "character"
9999 mem: location 1232 is 32
9999 mem: storing 32 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 32
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 3
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1231
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1231: 8 -> 9
9999 mem: storing 1231 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1231
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 32
9999 mem: location 1233 is 1235
9999 mem: location 1234 is 1227
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1233
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1233 is 1235
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1235: 7 -> 8
9999 mem: storing 1235 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1235
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: decrementing refcount of 1231: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1235
9999 mem: storing 1235 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1227
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1227: 9 -> 10
9999 mem: storing 1227 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1227
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: location 1228 is 105
9999 mem: location 1229 is 1231
9999 mem: location 1230 is 1223
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9998 run: address to copy is 1229
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1229 is 1231
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1231: 8 -> 9
9999 mem: storing 1231 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1231
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: decrementing refcount of 1227: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1231
9999 mem: storing 1231 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 3
9999 mem: storing 4 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1235
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1262 is 0
9999 mem: storing 0 in location 1266
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1236 is 106
9999 mem: location 1237 is 1239
9999 mem: location 1238 is 1231
9999 mem: location 1257 is 1235
9999 mem: skipping refcount at 1235
9998 run: address to copy is 1236
9998 run: its type is "character"
9999 mem: location 1236 is 106
9999 mem: storing 106 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 106
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 4
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1235
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1235: 8 -> 9
9999 mem: storing 1235 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1235
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1236 is 106
9999 mem: location 1237 is 1239
9999 mem: location 1238 is 1231
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9998 run: address to copy is 1237
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1237 is 1239
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1239: 7 -> 8
9999 mem: storing 1239 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1239
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: decrementing refcount of 1235: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1239
9999 mem: storing 1239 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1231
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1231: 9 -> 10
9999 mem: storing 1231 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1231
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 32
9999 mem: location 1233 is 1235
9999 mem: location 1234 is 1227
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1233
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1233 is 1235
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1235: 8 -> 9
9999 mem: storing 1235 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1235
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: decrementing refcount of 1231: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1235
9999 mem: storing 1235 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 4
9999 mem: storing 5 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1239
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1262 is 0
9999 mem: storing 0 in location 1266
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1239
9999 mem: skipping refcount at 1239
9999 mem: location 1240 is 107
9999 mem: location 1241 is 1243
9999 mem: location 1242 is 1235
9999 mem: location 1257 is 1239
9999 mem: skipping refcount at 1239
9998 run: address to copy is 1240
9998 run: its type is "character"
9999 mem: location 1240 is 107
9999 mem: storing 107 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 107
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 5
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1239
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1239: 8 -> 9
9999 mem: storing 1239 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1239
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: location 1240 is 107
9999 mem: location 1241 is 1243
9999 mem: location 1242 is 1235
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9998 run: address to copy is 1241
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1241 is 1243
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1243: 3 -> 4
9999 mem: storing 1243 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1243
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: decrementing refcount of 1239: 9 -> 8
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1243
9999 mem: storing 1243 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1235
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1235: 9 -> 10
9999 mem: storing 1235 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1235
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1236 is 106
9999 mem: location 1237 is 1239
9999 mem: location 1238 is 1231
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9998 run: address to copy is 1237
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1237 is 1239
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1239: 8 -> 9
9999 mem: storing 1239 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1239
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: decrementing refcount of 1235: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1239
9999 mem: storing 1239 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 5
9999 mem: storing 6 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 1243
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1256 is 5
9999 mem: storing 0 in location 1264
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1262 is 0
9999 mem: storing 0 in location 1266
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 34
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1257 is 1243
9999 mem: skipping refcount at 1243
9999 mem: location 1244 is 108
9999 mem: location 1245 is 0
9999 mem: location 1246 is 1239
9999 mem: location 1257 is 1243
9999 mem: skipping refcount at 1243
9998 run: address to copy is 1244
9998 run: its type is "character"
9999 mem: location 1244 is 108
9999 mem: storing 108 in location 1267
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1267 is 108
9999 mem: storing 0 in location 1268
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1268 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1260 is 6
9999 mem: location 1255 is 9
9999 mem: storing 0 in location 1270
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 61
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1257 is 1243
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1243: 4 -> 5
9999 mem: storing 1243 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1243
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1243
9999 mem: skipping refcount at 1243
9999 mem: location 1244 is 108
9999 mem: location 1245 is 0
9999 mem: location 1246 is 1239
9999 mem: location 1189 is 1243
9999 mem: skipping refcount at 1243
9998 run: address to copy is 1245
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1245 is 0
9999 mem: location 1190 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 0
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1243
9999 mem: skipping refcount at 1243
9999 mem: decrementing refcount of 1243: 5 -> 4
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1257
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1258 is 1239
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1239: 9 -> 10
9999 mem: storing 1239 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1239
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: location 1240 is 107
9999 mem: location 1241 is 1243
9999 mem: location 1242 is 1235
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9998 run: address to copy is 1241
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1241 is 1243
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1243: 4 -> 5
9999 mem: storing 1243 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1243
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: decrementing refcount of 1239: 10 -> 9
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1243
9999 mem: storing 1243 in location 1258
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1260 is 6
9999 mem: storing 7 in location 1260
 106 run: jump {: "offset"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1257 is 0
9998 run: jumping to instruction 66
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 1 in location 1265
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1260 is 7
9999 mem: location 1262 is 0
9999 mem: storing 0 in location 1271
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1265 is 1
9999 mem: location 1271 is 0
9999 mem: storing 0 in location 1272
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 2
9999 mem: storing 0 in location 1273
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 mem: storing 0 in location 1274
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1274 is 0
9998 run: jumping to instruction 80
 106 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1251 is 1152
9999 mem: clearing screen:address:screen
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 33 -> 32
9999 mem: storing 0 in location 1250
9999 mem: clearing target-row:number
9999 mem: storing 0 in location 1252
9999 mem: clearing target-column:number
9999 mem: storing 0 in location 1253
9999 mem: clearing left:number
9999 mem: storing 0 in location 1254
9999 mem: clearing right:number
9999 mem: storing 0 in location 1255
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1256
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1257 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1257
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1258 is 1243
9999 mem: skipping refcount at 1243
9999 mem: decrementing refcount of 1243: 5 -> 4
9999 mem: storing 0 in location 1258
9999 mem: clearing curr
9999 mem: location 1257 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1257
9999 mem: clearing row:number
9999 mem: storing 0 in location 1259
9999 mem: clearing column:number
9999 mem: storing 0 in location 1260
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1261
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1262
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1263 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 11 -> 10
9999 mem: storing 0 in location 1263
9999 mem: clearing off-screen?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1265
9999 mem: clearing at-cursor?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing before-cursor
9999 mem: location 1263 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1263
9999 mem: clearing c:character
9999 mem: storing 0 in location 1267
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1265
9999 mem: clearing left-of-cursor?:boolean
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1262
9999 mem: clearing before-cursor
9999 mem: location 1263 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1263
9999 mem: clearing row
9999 mem: storing 0 in location 1259
9999 mem: clearing column
9999 mem: storing 0 in location 1260
9999 mem: clearing curr
9999 mem: location 1257 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1257
9999 mem: clearing prev
9999 mem: location 1258 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1258
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1270
9999 mem: clearing column
9999 mem: storing 0 in location 1260
9999 mem: clearing row
9999 mem: storing 0 in location 1259
9999 mem: clearing curr
9999 mem: location 1257 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1257
9999 mem: clearing prev
9999 mem: location 1258 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1258
9999 mem: clearing column
9999 mem: storing 0 in location 1260
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1265
9999 mem: clearing cursor-outside-line?:boolean
9999 mem: storing 0 in location 1271
9999 mem: clearing before-cursor-on-same-line?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing above-cursor-row?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing before-cursor?:boolean
9999 mem: storing 0 in location 1274
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1261
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1262
9999 mem: clearing before-cursor
9999 mem: location 1263 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1263
9999 mem: automatically abandoning 1247
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1152
9999 mem: storing 1152 in location 1372
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1385
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1154 is 1171
9999 mem: location 1386 is 0
9999 mem: incrementing refcount of 1171: 11 -> 12
9999 mem: storing 1171 in location 1386
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 2
9999 mem: storing 2 in location 1387
9990 schedule: move-cursor-in-editor/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1388
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1385 is 0
9998 run: jumping to instruction 50
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1275
9999 mem: location 1390 is 0
9999 mem: incrementing refcount of 1275: 0 -> 1
9999 mem: storing 1275 in location 1390
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1382 is 1
9999 mem: location 1383 is 0
9999 mem: location 1384 is 1171
9999 mem: location 1387 is 2
9999 mem: location 1388 is 0
9999 mem: location 1386 is 1171
9999 mem: location 1385 is 0
9999 mem: location 1390 is 1275
9999 mem: skipping refcount at 1275
9999 mem: location 1390 is 1275
9999 mem: skipping refcount at 1275
9999 mem: incrementing refcount of 1171: 12 -> 13
9999 mem: incrementing refcount of 1171: 13 -> 14
9999 mem: storing 1 in location 1276
9999 mem: storing 1 in location 1277
9999 mem: storing 0 in location 1278
9999 mem: storing 1171 in location 1279
9999 mem: storing 2 in location 1280
9999 mem: storing 0 in location 1281
9999 mem: storing 1171 in location 1282
9999 mem: storing 0 in location 1283
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1372 is 1152
9999 mem: location 1390 is 1275
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1175
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1152: 6 -> 7
9999 mem: storing 1152 in location 1178
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1275: 1 -> 2
9999 mem: storing 1275 in location 1179
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1163
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1163 is 0
9999 mem: location 1180 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1180
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1179 is 1275
9999 mem: location 1180 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1275: 2 -> 3
9999 mem: storing 1275 in location 1168
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1169 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1169
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1401
9999 mem: storing 0 in location 1401
9999 mem: storing 0 in location 1402
9999 mem: storing 0 in location 1403
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1401: 0 -> 1
9999 mem: storing 1401 in location 1170
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1168 is 1275
9999 mem: location 1169 is 0
9999 mem: location 1170 is 1401
9999 mem: skipping refcount at 1401
9999 mem: location 1170 is 1401
9999 mem: skipping refcount at 1401
9999 mem: incrementing refcount of 1275: 3 -> 4
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1275 in location 1402
9999 mem: storing 0 in location 1403
 107 run: reply {result: ("address" "list" "address" "operation")}
9999 mem: location 1170 is 1401
9999 mem: clearing x:_elem
9999 mem: location 1168 is 1275
9999 mem: skipping refcount at 1275
9999 mem: decrementing refcount of 1275: 4 -> 3
9999 mem: storing 0 in location 1168
9999 mem: clearing in:address:list:_elem
9999 mem: location 1169 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1169
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1401
9999 mem: storing 1401 in location 1180
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: location 1164 is 0
9999 mem: location 1180 is 1401
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1163
9999 mem: location 1163 is 0
9999 mem: incrementing refcount of 1401: 1 -> 2
9999 mem: storing 1401 in location 1163
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1164
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1164 is 0
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1181 is 0
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1164
9999 mem: location 1164 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1164
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1178 is 1152
9999 mem: clearing op:address:operation
9999 mem: location 1179 is 1275
9999 mem: skipping refcount at 1275
9999 mem: decrementing refcount of 1275: 3 -> 2
9999 mem: storing 0 in location 1179
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1180 is 1401
9999 mem: skipping refcount at 1401
9999 mem: decrementing refcount of 1401: 2 -> 1
9999 mem: storing 0 in location 1180
9999 mem: clearing undo
9999 mem: location 1180 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1180
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
9999 mem: clearing redo
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
9999 mem: automatically abandoning 1175
9999 abandon: updating refcounts inside 1175: (array number)
9999 abandon: saving 1175 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1152
9999 mem: storing 1152 in location 1372
 105 run: return {1: "literal", "true": ()}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1372 is 1152
9999 mem: clearing screen:address:screen
9999 mem: location 1371 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 32 -> 31
9999 mem: storing 0 in location 1371
9999 mem: clearing editor:address:editor-data
9999 mem: location 1372 is 1152
9999 mem: skipping refcount at 1152
9999 mem: decrementing refcount of 1152: 7 -> 6
9999 mem: storing 0 in location 1372
9999 mem: clearing t:touch-event
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: clearing click-row:number
9999 mem: storing 0 in location 1376
9999 mem: clearing click-column:number
9999 mem: storing 0 in location 1377
9999 mem: clearing left:number
9999 mem: storing 0 in location 1378
9999 mem: clearing too-far-left?:boolean
9999 mem: storing 0 in location 1379
9999 mem: clearing right:number
9999 mem: storing 0 in location 1380
9999 mem: clearing too-far-right?:boolean
9999 mem: storing 0 in location 1381
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1382
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1383
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1384 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 14 -> 13
9999 mem: storing 0 in location 1384
9999 mem: clearing editor
9999 mem: location 1372 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1372
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1385
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1386 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 13 -> 12
9999 mem: storing 0 in location 1386
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1387
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1388
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing op:address:operation
9999 mem: location 1390 is 1275
9999 mem: skipping refcount at 1275
9999 mem: decrementing refcount of 1275: 2 -> 1
9999 mem: storing 0 in location 1390
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1398
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1399
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1400
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: clearing op:address:operation
9999 mem: location 1390 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1390
9999 mem: clearing editor
9999 mem: location 1372 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1372
9999 mem: automatically abandoning 1368
9999 abandon: updating refcounts inside 1368: (array number)
9999 abandon: saving 1368 in free-list of size 33
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump {+next-event: "label"}
9998 run: jumping to instruction 6
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 2
9999 mem: storing 2 in location 1355
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1356
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1352 is 1008
9999 mem: location 1355 is 2
9999 mem: location 1356 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 31 -> 32
9999 mem: storing 1008 in location 1168
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1169
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1170
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 2
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 0
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1352
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1353 is 1346
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1313
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1316 is 0
9999 mem: incrementing refcount of 1346: 3 -> 4
9999 mem: storing 1346 in location 1316
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1316 is 1346
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 1
9999 mem: location 1348 is 1336
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy is 1347
9998 run: its type is "number"
9999 mem: location 1347 is 1
9999 mem: storing 1 in location 1317
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 1
9999 mem: location 1348 is 1336
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy is 1348
9998 run: its type is ("address" "array" "event")
9999 mem: location 1348 is 1336
9999 mem: location 1318 is 0
9999 mem: incrementing refcount of 1336: 1 -> 2
9999 mem: storing 1336 in location 1318
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9999 mem: storing 2 in location 1319
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1317 is 1
9999 mem: location 1319 is 2
9999 mem: storing 0 in location 1320
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1320 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9998 run: base address is 1337
9999 mem: location 1317 is 1
9998 run: address to copy is 1342
9998 run: its type is event
9999 mem: location 1342 is 0
9999 mem: location 1343 is 8
9999 mem: location 1344 is 0
9999 mem: location 1345 is 0
9999 mem: storing 0 in location 1322
9999 mem: storing 8 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1317 is 1
9999 mem: storing 2 in location 1317
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 1
9999 mem: location 1348 is 1336
9999 mem: location 1317 is 2
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy to is 1347
9999 mem: storing 2 in location 1347
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1322 is 0
9999 mem: location 1323 is 8
9999 mem: location 1324 is 0
9999 mem: location 1325 is 0
9999 mem: location 1316 is 1346
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1317
9999 mem: clearing buf:address:array:event
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9999 mem: decrementing refcount of 1336: 2 -> 1
9999 mem: storing 0 in location 1318
9999 mem: clearing max:number
9999 mem: storing 0 in location 1319
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1320
9999 mem: clearing dummy:address:event
9999 mem: location 1321 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1321
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1317
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1326
9999 mem: automatically abandoning 1313
9999 abandon: updating refcounts inside 1313: (array number)
9999 abandon: saving 1313 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 8, 0, 0]
9998 run: result 1 is 1346
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1357
9999 mem: storing 8 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 1346 in location 1353
9999 mem: storing 1 in location 1361
9999 mem: storing 0 in location 1362
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1361 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1362 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1357 is 0
9999 mem: location 1358 is 8
9999 mem: location 1359 is 0
9999 mem: location 1360 is 0
9999 mem: storing 0 in location 1366
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1366 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1366 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {e: "event"}
9999 mem: location 1352 is 1008
9999 mem: location 1354 is 1152
9999 mem: location 1357 is 0
9999 mem: location 1358 is 8
9999 mem: location 1359 is 0
9999 mem: location 1360 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 102
9999 mem: allocating size 104
9999 mem: new alloc: 1404
9999 mem: storing 0 in location 1404
9999 mem: storing 0 in location 1405
9999 mem: storing 0 in location 1406
9999 mem: storing 0 in location 1407
9999 mem: storing 0 in location 1408
9999 mem: storing 0 in location 1409
9999 mem: storing 0 in location 1410
9999 mem: storing 0 in location 1411
9999 mem: storing 0 in location 1412
9999 mem: storing 0 in location 1413
9999 mem: storing 0 in location 1414
9999 mem: storing 0 in location 1415
9999 mem: storing 0 in location 1416
9999 mem: storing 0 in location 1417
9999 mem: storing 0 in location 1418
9999 mem: storing 0 in location 1419
9999 mem: storing 0 in location 1420
9999 mem: storing 0 in location 1421
9999 mem: storing 0 in location 1422
9999 mem: storing 0 in location 1423
9999 mem: storing 0 in location 1424
9999 mem: storing 0 in location 1425
9999 mem: storing 0 in location 1426
9999 mem: storing 0 in location 1427
9999 mem: storing 0 in location 1428
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: storing 0 in location 1439
9999 mem: storing 0 in location 1440
9999 mem: storing 0 in location 1441
9999 mem: storing 0 in location 1442
9999 mem: storing 0 in location 1443
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: storing 0 in location 1451
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: storing 0 in location 1461
9999 mem: storing 0 in location 1462
9999 mem: storing 0 in location 1463
9999 mem: storing 0 in location 1464
9999 mem: storing 0 in location 1465
9999 mem: storing 0 in location 1466
9999 mem: storing 0 in location 1467
9999 mem: storing 0 in location 1468
9999 mem: storing 0 in location 1469
9999 mem: storing 0 in location 1470
9999 mem: storing 0 in location 1471
9999 mem: storing 0 in location 1472
9999 mem: storing 0 in location 1473
9999 mem: storing 0 in location 1474
9999 mem: storing 0 in location 1475
9999 mem: storing 0 in location 1476
9999 mem: storing 0 in location 1477
9999 mem: storing 0 in location 1478
9999 mem: storing 0 in location 1479
9999 mem: storing 0 in location 1480
9999 mem: storing 0 in location 1481
9999 mem: storing 0 in location 1482
9999 mem: storing 0 in location 1483
9999 mem: storing 0 in location 1484
9999 mem: storing 0 in location 1485
9999 mem: storing 0 in location 1486
9999 mem: storing 0 in location 1487
9999 mem: storing 0 in location 1488
9999 mem: storing 0 in location 1489
9999 mem: storing 0 in location 1490
9999 mem: storing 0 in location 1491
9999 mem: storing 0 in location 1492
9999 mem: storing 0 in location 1493
9999 mem: storing 0 in location 1494
9999 mem: storing 0 in location 1495
9999 mem: storing 0 in location 1496
9999 mem: storing 0 in location 1497
9999 mem: storing 0 in location 1498
9999 mem: storing 0 in location 1499
9999 mem: storing 0 in location 1500
9999 mem: storing 0 in location 1501
9999 mem: storing 0 in location 1502
9999 mem: storing 0 in location 1503
9999 mem: storing 0 in location 1504
9999 mem: storing 0 in location 1505
9999 mem: storing 0 in location 1506
9999 mem: storing 0 in location 1507
9999 mem: storing 102 in location 1405
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1407 is 0
9999 mem: incrementing refcount of 1008: 32 -> 33
9999 mem: storing 1008 in location 1407
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1408 is 0
9999 mem: incrementing refcount of 1152: 6 -> 7
9999 mem: storing 1152 in location 1408
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1409
9999 mem: storing 8 in location 1410
9999 mem: storing 0 in location 1411
9999 mem: storing 0 in location 1412
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1413
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1408 is 1152
9998 run: jumping to instruction 8
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1407 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1008: 33 -> 34
9999 mem: storing 1008 in location 1189
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1189 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1190
 106 run: return {width: "number"}
9999 mem: location 1190 is 10
9999 mem: clearing screen:address:screen
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 34 -> 33
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1414
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1407 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1008: 33 -> 34
9999 mem: storing 1008 in location 1189
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1189 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1190
 106 run: return {height: "number"}
9999 mem: location 1190 is 5
9999 mem: clearing screen:address:screen
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 34 -> 33
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1415
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1157
9998 run: its type is "number"
9999 mem: location 1157 is 0
9999 mem: storing 0 in location 1416
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 9
9999 mem: storing 9 in location 1417
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1156
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1156 is 1215
9999 mem: location 1418 is 0
9999 mem: incrementing refcount of 1215: 10 -> 11
9999 mem: storing 1215 in location 1418
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 2
9999 mem: storing 2 in location 1419
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1420
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1419 is 2
9999 mem: storing 2 in location 1421
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1420 is 0
9999 mem: storing 0 in location 1422
 105 run: {c: "character"}, {is-unicode?: "boolean"} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1409 is 0
9999 mem: location 1410 is 8
9999 mem: location 1411 is 0
9999 mem: location 1412 is 0
9999 mem: storing 1 in location 1424
9999 mem: storing 8 in location 1423
 105 run: jump-unless {is-unicode?: "boolean"}, {: "offset"}
9999 mem: location 1424 is 1
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character
 105 run: {redo?: "boolean"} <- equal {c: "character"}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1425
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1425 is 0
9998 run: jumping to instruction 73
 105 run: {undo?: "boolean"} <- equal {c: "character"}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1463
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1463 is 0
9998 run: jumping to instruction 128
 105 run: {page-up?: "boolean"} <- equal {c: "character"}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1467
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1467 is 0
9998 run: jumping to instruction 167
 105 run: {page-down?: "boolean"} <- equal {c: "character"}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1478
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1478 is 0
9998 run: jumping to instruction 206
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: "character"}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1479
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1479 is 0
9998 run: jumping to instruction 227
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: "character"}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1482
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1482 is 0
9998 run: jumping to instruction 249
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: "character"}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1483
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1483 is 0
9998 run: jumping to instruction 285
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: "character"}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1423 is 8
9999 mem: storing 0 in location 1484
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1484 is 0
9998 run: jumping to instruction 321
 105 run: {delete-previous-character?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1423 is 8
9999 mem: storing 1 in location 1485
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1485 is 1
9998 run: jump-unless fell through
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1154 is 1171
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1171: 12 -> 13
9999 mem: storing 1171 in location 1471
 105 run: {editor: ("address" "editor-data")}, {screen: ("address" "screen")}, {go-render?: "boolean"}, {backspaced-cell: ("address" "duplex-list" "character")} <- delete-before-cursor {editor: ("address" "editor-data")}, {screen: ("address" "screen")}
9999 mem: location 1408 is 1152
9999 mem: location 1407 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 22
9999 mem: allocating size 24
9999 mem: new alloc: 1508
9999 mem: storing 0 in location 1508
9999 mem: storing 0 in location 1509
9999 mem: storing 0 in location 1510
9999 mem: storing 0 in location 1511
9999 mem: storing 0 in location 1512
9999 mem: storing 0 in location 1513
9999 mem: storing 0 in location 1514
9999 mem: storing 0 in location 1515
9999 mem: storing 0 in location 1516
9999 mem: storing 0 in location 1517
9999 mem: storing 0 in location 1518
9999 mem: storing 0 in location 1519
9999 mem: storing 0 in location 1520
9999 mem: storing 0 in location 1521
9999 mem: storing 0 in location 1522
9999 mem: storing 0 in location 1523
9999 mem: storing 0 in location 1524
9999 mem: storing 0 in location 1525
9999 mem: storing 0 in location 1526
9999 mem: storing 0 in location 1527
9999 mem: storing 0 in location 1528
9999 mem: storing 0 in location 1529
9999 mem: storing 0 in location 1530
9999 mem: storing 0 in location 1531
9999 mem: storing 22 in location 1509
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1511 is 0
9999 mem: incrementing refcount of 1152: 7 -> 8
9999 mem: storing 1152 in location 1511
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1512 is 0
9999 mem: incrementing refcount of 1008: 33 -> 34
9999 mem: storing 1008 in location 1512
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1156
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1156 is 1215
9999 mem: location 1513 is 0
9999 mem: incrementing refcount of 1215: 11 -> 12
9999 mem: storing 1215 in location 1513
 106 run: {data: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1153
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1153 is 1171
9999 mem: location 1514 is 0
9999 mem: incrementing refcount of 1171: 13 -> 14
9999 mem: storing 1171 in location 1514
 106 run: {prev: ("address" "duplex-list" "character")} <- prev_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1513 is 1215
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1215: 12 -> 13
9999 mem: storing 1215 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1215
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1218
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1218 is 1211
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1211: 9 -> 10
9999 mem: storing 1211 in location 1190
 107 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1211
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1211
9999 mem: storing 1211 in location 1515
 106 run: {go-render?: "boolean"}, {backspaced-cell: ("address" "duplex-list" "character")} <- copy {0: "literal", "no-more-render": ()}, {0: "literal", "nothing-deleted": ()}
9999 mem: storing 0 in location 1516
9999 mem: location 1517 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1517
 106 run: jump-if {prev: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1515 is 1211
9998 run: jumping to instruction 10
 106 run: trace {10: "literal"}, {"app": "literal-string"}, {"delete-before-cursor": "literal-string"}
  10 app: delete-before-cursor
 106 run: {original-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 2
9999 mem: storing 2 in location 1518
 106 run: {editor: ("address" "editor-data")}, {scroll?: "boolean"} <- move-cursor-coordinates-left {editor: ("address" "editor-data")}
9999 mem: location 1511 is 1152
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 20
9999 mem: allocating size 22
9999 mem: new alloc: 1532
9999 mem: storing 0 in location 1532
9999 mem: storing 0 in location 1533
9999 mem: storing 0 in location 1534
9999 mem: storing 0 in location 1535
9999 mem: storing 0 in location 1536
9999 mem: storing 0 in location 1537
9999 mem: storing 0 in location 1538
9999 mem: storing 0 in location 1539
9999 mem: storing 0 in location 1540
9999 mem: storing 0 in location 1541
9999 mem: storing 0 in location 1542
9999 mem: storing 0 in location 1543
9999 mem: storing 0 in location 1544
9999 mem: storing 0 in location 1545
9999 mem: storing 0 in location 1546
9999 mem: storing 0 in location 1547
9999 mem: storing 0 in location 1548
9999 mem: storing 0 in location 1549
9999 mem: storing 0 in location 1550
9999 mem: storing 0 in location 1551
9999 mem: storing 0 in location 1552
9999 mem: storing 0 in location 1553
9999 mem: storing 20 in location 1533
 107 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1535 is 0
9999 mem: incrementing refcount of 1152: 8 -> 9
9999 mem: storing 1152 in location 1535
 107 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1156
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1156 is 1215
9999 mem: location 1536 is 0
9999 mem: incrementing refcount of 1215: 12 -> 13
9999 mem: storing 1215 in location 1536
 107 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 2
9999 mem: storing 2 in location 1537
 107 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1538
 107 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1157
9998 run: its type is "number"
9999 mem: location 1157 is 0
9999 mem: storing 0 in location 1539
 107 run: {at-left-margin?: "boolean"} <- equal {cursor-column: "number"}, {left: "number"}
9999 mem: location 1538 is 0
9999 mem: location 1539 is 0
9999 mem: storing 1 in location 1540
 107 run: jump-if {at-left-margin?: "boolean"}, {: "offset"}
9999 mem: location 1540 is 1
9998 run: jumping to instruction 14
 107 run: {top-of-screen?: "boolean"} <- equal {cursor-row: "number"}, {1: "literal"}
9999 mem: location 1537 is 2
9999 mem: storing 0 in location 1542
 107 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1541
 107 run: jump-if {top-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1542 is 0
9998 run: jump-if fell through
 107 run: {cursor-row: "number"} <- subtract {cursor-row: "number"}, {1: "literal"}
9999 mem: location 1537 is 2
9999 mem: storing 1 in location 1537
 107 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 2
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1537 is 1
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1160
9999 mem: storing 1 in location 1160
 107 run: jump-unless {top-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1542 is 0
9998 run: jumping to instruction 37
 107 run: {previous-character: "character"} <- get {before-cursor: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1536 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1536 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1216
9998 run: its type is "character"
9999 mem: location 1216 is 10
9999 mem: storing 10 in location 1546
 107 run: {previous-character-is-newline?: "boolean"} <- equal {previous-character: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1546 is 10
9999 mem: storing 1 in location 1547
 107 run: jump-unless {previous-character-is-newline?: "boolean"}, {: "offset"}
9999 mem: location 1547 is 1
9998 run: jump-unless fell through
 107 run: trace {10: "literal"}, {"app": "literal-string"}, {"switching to previous line": "literal-string"}
  10 app: switching to previous line
 107 run: {d: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1153
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1153 is 1171
9999 mem: location 1548 is 0
9999 mem: incrementing refcount of 1171: 14 -> 15
9999 mem: storing 1171 in location 1548
 107 run: {end-of-line: "number"} <- previous-line-length {before-cursor: ("address" "duplex-list" "character")}, {d: ("address" "duplex-list" "character")}
9999 mem: location 1536 is 1215
9999 mem: location 1548 is 1171
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1143
 108 run: {curr: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1146 is 0
9999 mem: incrementing refcount of 1215: 13 -> 14
9999 mem: storing 1215 in location 1146
 108 run: {start: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1147 is 0
9999 mem: incrementing refcount of 1171: 15 -> 16
9999 mem: storing 1171 in location 1147
 108 run: {result: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1148
 108 run: jump-if {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1215
9998 run: jumping to instruction 7
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1215
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-unless {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jumping to instruction 12
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1215
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1215: 14 -> 15
9999 mem: storing 1215 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1215
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1218
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1218 is 1211
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1211: 10 -> 11
9999 mem: storing 1211 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1211
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 15 -> 14
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1211
9999 mem: storing 1211 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1211
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1211
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1146 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1215
9999 mem: location 1214 is 1207
9999 mem: location 1146 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1212
9998 run: its type is "character"
9999 mem: location 1212 is 102
9999 mem: storing 102 in location 1150
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1150 is 102
9999 mem: storing 0 in location 1151
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1151 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1148 is 0
9999 mem: storing 1 in location 1148
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1211
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1211: 11 -> 12
9999 mem: storing 1211 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1211
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1215
9999 mem: location 1214 is 1207
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1214
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1214 is 1207
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1207: 9 -> 10
9999 mem: storing 1207 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1207
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1207
9999 mem: storing 1207 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1207
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1207
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1146 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1146 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1208
9998 run: its type is "character"
9999 mem: location 1208 is 101
9999 mem: storing 101 in location 1150
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1150 is 101
9999 mem: storing 0 in location 1151
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1151 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1148 is 1
9999 mem: storing 2 in location 1148
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1207
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1207: 10 -> 11
9999 mem: storing 1207 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1207
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1210
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1210 is 1203
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1203: 9 -> 10
9999 mem: storing 1203 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1203
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: decrementing refcount of 1207: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1203
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1203
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1146 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1146 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 100
9999 mem: storing 100 in location 1150
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1150 is 100
9999 mem: storing 0 in location 1151
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1151 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1148 is 2
9999 mem: storing 3 in location 1148
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1203
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1203: 10 -> 11
9999 mem: storing 1203 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1206
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1206 is 1199
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1199: 9 -> 10
9999 mem: storing 1199 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1199
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1199
9999 mem: storing 1199 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1199
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1199
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1146 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1146 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 32
9999 mem: storing 32 in location 1150
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1150 is 32
9999 mem: storing 0 in location 1151
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1151 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1148 is 3
9999 mem: storing 4 in location 1148
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1199
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1199: 10 -> 11
9999 mem: storing 1199 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1199
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1202
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1202 is 1195
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1195: 9 -> 10
9999 mem: storing 1195 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1195
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1195
9999 mem: storing 1195 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1195
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1195
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1146 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1146 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1196
9998 run: its type is "character"
9999 mem: location 1196 is 99
9999 mem: storing 99 in location 1150
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1150 is 99
9999 mem: storing 0 in location 1151
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1151 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1148 is 4
9999 mem: storing 5 in location 1148
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1195
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1195: 10 -> 11
9999 mem: storing 1195 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1195
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 1191
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1191: 9 -> 10
9999 mem: storing 1191 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1191
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1191
9999 mem: storing 1191 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1191
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1191
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1146 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1146 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1192
9998 run: its type is "character"
9999 mem: location 1192 is 98
9999 mem: storing 98 in location 1150
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1150 is 98
9999 mem: storing 0 in location 1151
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1151 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1148 is 5
9999 mem: storing 6 in location 1148
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1191
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1191: 10 -> 11
9999 mem: storing 1191 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1191
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1182
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1182: 9 -> 10
9999 mem: storing 1182 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1182
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1182
9999 mem: storing 1182 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1182
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1182
9999 mem: location 1147 is 1171
9999 mem: storing 0 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1146 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1146 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1183
9998 run: its type is "character"
9999 mem: location 1183 is 97
9999 mem: storing 97 in location 1150
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1150 is 97
9999 mem: storing 0 in location 1151
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1151 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1148 is 6
9999 mem: storing 7 in location 1148
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1182
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1182: 10 -> 11
9999 mem: storing 1182 in location 1189
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1182
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1185
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1185 is 1171
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1171: 16 -> 17
9999 mem: storing 1171 in location 1190
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1190 is 1171
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: decrementing refcount of 1182: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1171
9999 mem: storing 1171 in location 1146
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 1171
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1146 is 1171
9999 mem: location 1147 is 1171
9999 mem: storing 1 in location 1149
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1149 is 1
9998 run: jumping to instruction 23
 108 run: reply {result: "number"}
9999 mem: location 1148 is 7
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1146 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 17 -> 16
9999 mem: storing 0 in location 1146
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1147 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 16 -> 15
9999 mem: storing 0 in location 1147
9999 mem: clearing at-start?:boolean
9999 mem: storing 0 in location 1149
9999 mem: clearing curr
9999 mem: location 1146 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1146
9999 mem: clearing at-start?:boolean
9999 mem: storing 0 in location 1149
9999 mem: clearing c:character
9999 mem: storing 0 in location 1150
9999 mem: clearing at-newline?:boolean
9999 mem: storing 0 in location 1151
9999 mem: automatically abandoning 1143
9999 abandon: updating refcounts inside 1143: (array number)
9999 abandon: saving 1143 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 7
9999 mem: storing 7 in location 1549
 107 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 9
9999 mem: storing 9 in location 1550
 107 run: {width: "number"} <- subtract {right: "number"}, {left: "number"}
9999 mem: location 1550 is 9
9999 mem: location 1539 is 0
9999 mem: storing 9 in location 1551
 107 run: {wrap?: "boolean"} <- greater-than {end-of-line: "number"}, {width: "number"}
9999 mem: location 1549 is 7
9999 mem: location 1551 is 9
9999 mem: storing 0 in location 1552
 107 run: jump-unless {wrap?: "boolean"}, {: "offset"}
9999 mem: location 1552 is 0
9998 run: jumping to instruction 53
 107 run: jump-if {wrap?: "boolean"}, {: "offset"}
9999 mem: location 1552 is 0
9998 run: jump-if fell through
 107 run: {cursor-column: "number"} <- add {left: "number"}, {end-of-line: "number"}
9999 mem: location 1539 is 0
9999 mem: location 1549 is 7
9999 mem: storing 7 in location 1538
 107 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1538 is 7
9999 mem: location 1535 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1161
9999 mem: storing 7 in location 1161
 107 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0"}, {go-render?: "boolean"}
9999 mem: location 1535 is 1152
9999 mem: location 1541 is 0
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1536 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 14 -> 13
9999 mem: storing 0 in location 1536
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1537
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1538
9999 mem: clearing left:number
9999 mem: storing 0 in location 1539
9999 mem: clearing at-left-margin?:boolean
9999 mem: storing 0 in location 1540
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1538
9999 mem: clearing top-of-screen?:boolean
9999 mem: storing 0 in location 1542
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1537
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1543 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1543
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1544 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1544
9999 mem: clearing top-of-screen
9999 mem: location 1543 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1543
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1545
9999 mem: clearing previous-character:character
9999 mem: storing 0 in location 1546
9999 mem: clearing previous-character-is-newline?:boolean
9999 mem: storing 0 in location 1547
9999 mem: clearing d:address:duplex-list:character
9999 mem: location 1548 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 15 -> 14
9999 mem: storing 0 in location 1548
9999 mem: clearing end-of-line:number
9999 mem: storing 0 in location 1549
9999 mem: clearing right:number
9999 mem: storing 0 in location 1550
9999 mem: clearing width:number
9999 mem: storing 0 in location 1551
9999 mem: clearing wrap?:boolean
9999 mem: storing 0 in location 1552
9999 mem: clearing _
9999 mem: clearing column-offset:number
9999 mem: storing 0 in location 1553
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1538
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1538
9999 mem: clearing right:number
9999 mem: storing 0 in location 1550
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1538
9999 mem: automatically abandoning 1532
9999 abandon: updating refcounts inside 1532: (array number)
9999 abandon: saving 1532 in free-list of size 22
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1152
9998 run: result 1 is 0
9999 mem: storing 1152 in location 1511
9999 mem: storing 0 in location 1519
 106 run: {backspaced-cell: ("address" "duplex-list" "character")} <- copy {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1513 is 1215
9999 mem: location 1517 is 0
9999 mem: incrementing refcount of 1215: 13 -> 14
9999 mem: storing 1215 in location 1517
 106 run: {data: ("address" "duplex-list" "character")} <- remove_3 {before-cursor: ("address" "duplex-list" "character")}, {data: ("address" "duplex-list" "character")}
9999 mem: location 1513 is 1215
9999 mem: location 1514 is 1171
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1175
 107 run: {x: ("address" "duplex-list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1215: 14 -> 15
9999 mem: storing 1215 in location 1178
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1171: 14 -> 15
9999 mem: storing 1171 in location 1179
 107 run: jump-if {x: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1178 is 1215
9998 run: jumping to instruction 6
 107 run: {next-node: ("address" "duplex-list" "character")} <- get {x: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1217
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1217 is 1219
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1219: 9 -> 10
9999 mem: storing 1219 in location 1180
 107 run: {prev-node: ("address" "duplex-list" "character")} <- get {x: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy is 1218
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1218 is 1211
9999 mem: location 1181 is 0
9999 mem: incrementing refcount of 1211: 11 -> 12
9999 mem: storing 1211 in location 1181
 107 run: {x: ("address" "duplex-list" "character"), "lookup": ()} <- put {x: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 1219
9999 mem: location 1218 is 1211
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy to is 1217
9999 mem: location 1217 is 1219
9999 mem: skipping refcount at 1219
9999 mem: decrementing refcount of 1219: 10 -> 9
9999 mem: storing 0 in location 1217
 107 run: {x: ("address" "duplex-list" "character"), "lookup": ()} <- put {x: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {0: "literal"}
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9999 mem: location 1216 is 10
9999 mem: location 1217 is 0
9999 mem: location 1218 is 1211
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9998 run: address to copy to is 1218
9999 mem: location 1218 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 12 -> 11
9999 mem: storing 0 in location 1218
 107 run: jump-unless {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1180 is 1219
9998 run: jump-unless fell through
 107 run: {next-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {prev-node: ("address" "duplex-list" "character")}
9999 mem: location 1180 is 1219
9999 mem: skipping refcount at 1219
9999 mem: location 1220 is 103
9999 mem: location 1221 is 1223
9999 mem: location 1222 is 1215
9999 mem: location 1181 is 1211
9999 mem: location 1180 is 1219
9999 mem: skipping refcount at 1219
9998 run: address to copy to is 1222
9999 mem: location 1222 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 15 -> 14
9999 mem: incrementing refcount of 1211: 11 -> 12
9999 mem: storing 1211 in location 1222
 107 run: jump-unless {prev-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1181 is 1211
9998 run: jump-unless fell through
 107 run: {prev-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {prev-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1181 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1215
9999 mem: location 1214 is 1207
9999 mem: location 1180 is 1219
9999 mem: location 1181 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy to is 1213
9999 mem: location 1213 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 14 -> 13
9999 mem: incrementing refcount of 1219: 9 -> 10
9999 mem: storing 1219 in location 1213
 107 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1179 is 1171
9999 mem: clearing x:address:duplex-list:_elem/contained-in:in
9999 mem: location 1178 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 13 -> 12
9999 mem: storing 0 in location 1178
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1180 is 1219
9999 mem: skipping refcount at 1219
9999 mem: decrementing refcount of 1219: 10 -> 9
9999 mem: storing 0 in location 1180
9999 mem: clearing prev-node:address:duplex-list:_elem
9999 mem: location 1181 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 12 -> 11
9999 mem: storing 0 in location 1181
9999 mem: automatically abandoning 1175
9999 abandon: updating refcounts inside 1175: (array number)
9999 abandon: saving 1175 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1171
9999 mem: storing 1171 in location 1514
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1515 is 1211
9999 mem: location 1513 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 12 -> 11
9999 mem: incrementing refcount of 1211: 11 -> 12
9999 mem: storing 1211 in location 1513
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1215
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1513 is 1211
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1156
9999 mem: location 1156 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 11 -> 10
9999 mem: incrementing refcount of 1211: 12 -> 13
9999 mem: storing 1211 in location 1156
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1516
 106 run: jump-unless {scroll?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 0
9998 run: jumping to instruction 22
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1512 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1008: 34 -> 35
9999 mem: storing 1008 in location 1189
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1189 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1190
 107 run: return {width: "number"}
9999 mem: location 1190 is 10
9999 mem: clearing screen:address:screen
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 35 -> 34
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1520
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 1
9999 mem: storing 1 in location 1521
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1511 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 7
9999 mem: storing 7 in location 1522
 106 run: {same-row?: "boolean"} <- equal {cursor-row: "number"}, {original-row: "number"}
9999 mem: location 1521 is 1
9999 mem: location 1518 is 2
9999 mem: storing 0 in location 1523
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1516
 106 run: jump-if {same-row?: "boolean"}, {: "offset"}
9999 mem: location 1523 is 0
9998 run: jump-if fell through
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "screen"), "same-as-ingredient": "1"}, {go-render?: "boolean"}, {backspaced-cell: ("address" "duplex-list" "character")}
9999 mem: location 1511 is 1152
9999 mem: location 1512 is 1008
9999 mem: location 1516 is 1
9999 mem: location 1517 is 1215
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1513 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 13 -> 12
9999 mem: storing 0 in location 1513
9999 mem: clearing data:address:duplex-list:character
9999 mem: location 1514 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 15 -> 14
9999 mem: storing 0 in location 1514
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1515 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 12 -> 11
9999 mem: storing 0 in location 1515
9999 mem: clearing original-row:number
9999 mem: storing 0 in location 1518
9999 mem: clearing scroll?:boolean
9999 mem: storing 0 in location 1519
9999 mem: clearing data
9999 mem: location 1514 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1514
9999 mem: clearing before-cursor
9999 mem: location 1513 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1513
9999 mem: clearing screen-width:number
9999 mem: storing 0 in location 1520
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1521
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1522
9999 mem: clearing same-row?:boolean
9999 mem: storing 0 in location 1523
9999 mem: clearing left:number
9999 mem: storing 0 in location 1524
9999 mem: clearing right:number
9999 mem: storing 0 in location 1525
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1526 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1526
9999 mem: clearing curr-column:number
9999 mem: storing 0 in location 1527
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1528
9999 mem: clearing currc:character
9999 mem: storing 0 in location 1529
9999 mem: clearing at-newline?:boolean
9999 mem: storing 0 in location 1530
9999 mem: clearing curr-column
9999 mem: storing 0 in location 1527
9999 mem: clearing curr
9999 mem: location 1526 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1526
9999 mem: clearing space:character
9999 mem: storing 0 in location 1531
9999 mem: automatically abandoning 1508
9999 abandon: updating refcounts inside 1508: (array number)
9999 abandon: saving 1508 in free-list of size 24
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1152
9998 run: result 1 is 1008
9998 run: result 2 is 1
9998 run: result 3 is 1215
9999 mem: storing 1152 in location 1408
9999 mem: storing 1008 in location 1407
9999 mem: storing 1 in location 1413
9999 mem: storing 1215 in location 1486
 105 run: jump-unless {backspaced-cell: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1486 is 1215
9998 run: jump-unless fell through
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1154 is 1171
9999 mem: location 1473 is 0
9999 mem: incrementing refcount of 1171: 14 -> 15
9999 mem: storing 1171 in location 1473
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 1
9999 mem: storing 1 in location 1419
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 1
9999 mem: storing 1 in location 1420
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1156
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1156 is 1211
9999 mem: location 1418 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 10 -> 9
9999 mem: incrementing refcount of 1211: 11 -> 12
9999 mem: storing 1211 in location 1418
 105 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1408 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1163
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1163 is 1401
9999 mem: location 1428 is 0
9999 mem: incrementing refcount of 1401: 1 -> 2
9999 mem: storing 1401 in location 1428
 105 run: jump-unless {undo: ("address" "list" "address" "operation")}, {: "offset"}
9999 mem: location 1428 is 1401
9998 run: jump-unless fell through
 105 run: {op: ("address" "operation")} <- first_3 {undo: ("address" "list" "address" "operation")}
9999 mem: location 1428 is 1401
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 106 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1401: 2 -> 3
9999 mem: storing 1401 in location 1189
 106 run: {result: ("address" "operation")} <- get {in: ("address" "list" "address" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1189 is 1401
9999 mem: skipping refcount at 1401
9999 mem: location 1402 is 1275
9999 mem: location 1403 is 0
9999 mem: location 1189 is 1401
9999 mem: skipping refcount at 1401
9998 run: address to copy is 1402
9998 run: its type is ("address" "operation")
9999 mem: location 1402 is 1275
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1275: 1 -> 2
9999 mem: storing 1275 in location 1190
 106 run: reply {result: ("address" "operation")}
9999 mem: location 1190 is 1275
9999 mem: clearing in:address:list:_elem
9999 mem: location 1189 is 1401
9999 mem: skipping refcount at 1401
9999 mem: decrementing refcount of 1401: 3 -> 2
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1275
9999 mem: storing 1275 in location 1427
 105 run: {deletion: "delete-operation"}, {is-delete?: "boolean"} <- maybe-convert {op: ("address" "operation"), "lookup": ()}, {delete: "variant"}
9999 mem: location 1427 is 1275
9999 mem: skipping refcount at 1275
9999 mem: location 1276 is 1
9999 mem: location 1277 is 1
9999 mem: location 1278 is 0
9999 mem: location 1279 is 1171
9999 mem: location 1280 is 2
9999 mem: location 1281 is 0
9999 mem: location 1282 is 1171
9999 mem: location 1283 is 0
9999 mem: location 1284 is 0
9999 mem: location 1285 is 0
9999 mem: location 1286 is 0
9999 mem: location 1427 is 1275
9999 mem: skipping refcount at 1275
9999 mem: storing 0 in location 1439
 105 run: jump-unless {is-delete?: "boolean"}, {: "offset"}
9999 mem: location 1439 is 0
9998 run: jumping to instruction 352
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 mem: new alloc: 1554
9999 mem: storing 0 in location 1554
9999 mem: storing 0 in location 1555
9999 mem: storing 0 in location 1556
9999 mem: storing 0 in location 1557
9999 mem: storing 0 in location 1558
9999 mem: storing 0 in location 1559
9999 mem: storing 0 in location 1560
9999 mem: storing 0 in location 1561
9999 mem: storing 0 in location 1562
9999 mem: storing 0 in location 1563
9999 mem: storing 0 in location 1564
9999 mem: storing 0 in location 1565
9999 mem: location 1427 is 1275
9999 mem: skipping refcount at 1275
9999 mem: decrementing refcount of 1275: 2 -> 1
9999 mem: incrementing refcount of 1554: 0 -> 1
9999 mem: storing 1554 in location 1427
 105 run: {deleted-until: ("address" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1418 is 1211
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 106 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1211: 12 -> 13
9999 mem: storing 1211 in location 1189
 106 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1211
9998 run: jumping to instruction 5
 106 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1219
9999 mem: location 1214 is 1207
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1213
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1213 is 1219
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1219: 9 -> 10
9999 mem: storing 1219 in location 1190
 106 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1219
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1219
9999 mem: storing 1219 in location 1481
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {2: "literal", "delete-operation": ()}, {save-row: "number", "before": ()}, {save-column: "number", "before": ()}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {backspaced-cell: ("address" "duplex-list" "character"), "deleted": ()}, {before-cursor: ("address" "duplex-list" "character"), "delete-from": ()}, {deleted-until: ("address" "duplex-list" "character")}, {1: "literal", "coalesce-backspace": ()}
9999 mem: location 1421 is 2
9999 mem: location 1422 is 0
9999 mem: location 1471 is 1171
9999 mem: location 1419 is 1
9999 mem: location 1420 is 1
9999 mem: location 1473 is 1171
9999 mem: location 1486 is 1215
9999 mem: location 1418 is 1211
9999 mem: location 1481 is 1219
9999 mem: location 1427 is 1554
9999 mem: skipping refcount at 1554
9999 mem: location 1427 is 1554
9999 mem: skipping refcount at 1554
9999 mem: incrementing refcount of 1171: 15 -> 16
9999 mem: incrementing refcount of 1171: 16 -> 17
9999 mem: incrementing refcount of 1215: 9 -> 10
9999 mem: incrementing refcount of 1211: 12 -> 13
9999 mem: incrementing refcount of 1219: 10 -> 11
9999 mem: storing 2 in location 1555
9999 mem: storing 2 in location 1556
9999 mem: storing 0 in location 1557
9999 mem: storing 1171 in location 1558
9999 mem: storing 1 in location 1559
9999 mem: storing 1 in location 1560
9999 mem: storing 1171 in location 1561
9999 mem: storing 1215 in location 1562
9999 mem: storing 1211 in location 1563
9999 mem: storing 1219 in location 1564
9999 mem: storing 1 in location 1565
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1408 is 1152
9999 mem: location 1427 is 1554
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1175
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1152: 9 -> 10
9999 mem: storing 1152 in location 1178
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1554: 1 -> 2
9999 mem: storing 1554 in location 1179
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1163
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1163 is 1401
9999 mem: location 1180 is 0
9999 mem: incrementing refcount of 1401: 2 -> 3
9999 mem: storing 1401 in location 1180
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1179 is 1554
9999 mem: location 1180 is 1401
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1554: 2 -> 3
9999 mem: storing 1554 in location 1168
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1169 is 0
9999 mem: incrementing refcount of 1401: 3 -> 4
9999 mem: storing 1401 in location 1169
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1566
9999 mem: storing 0 in location 1566
9999 mem: storing 0 in location 1567
9999 mem: storing 0 in location 1568
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1566: 0 -> 1
9999 mem: storing 1566 in location 1170
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1168 is 1554
9999 mem: location 1169 is 1401
9999 mem: location 1170 is 1566
9999 mem: skipping refcount at 1566
9999 mem: location 1170 is 1566
9999 mem: skipping refcount at 1566
9999 mem: incrementing refcount of 1554: 3 -> 4
9999 mem: incrementing refcount of 1401: 4 -> 5
9999 mem: storing 1554 in location 1567
9999 mem: storing 1401 in location 1568
 107 run: reply {result: ("address" "list" "address" "operation")}
9999 mem: location 1170 is 1566
9999 mem: clearing x:_elem
9999 mem: location 1168 is 1554
9999 mem: skipping refcount at 1554
9999 mem: decrementing refcount of 1554: 4 -> 3
9999 mem: storing 0 in location 1168
9999 mem: clearing in:address:list:_elem
9999 mem: location 1169 is 1401
9999 mem: skipping refcount at 1401
9999 mem: decrementing refcount of 1401: 5 -> 4
9999 mem: storing 0 in location 1169
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1566
9999 mem: storing 1566 in location 1180
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1401
9999 mem: location 1164 is 0
9999 mem: location 1180 is 1566
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1163
9999 mem: location 1163 is 1401
9999 mem: skipping refcount at 1401
9999 mem: decrementing refcount of 1401: 4 -> 3
9999 mem: incrementing refcount of 1566: 1 -> 2
9999 mem: storing 1566 in location 1163
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1164
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1164 is 0
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1181 is 0
9999 mem: location 1178 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1164
9999 mem: location 1164 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1164
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1178 is 1152
9999 mem: clearing op:address:operation
9999 mem: location 1179 is 1554
9999 mem: skipping refcount at 1554
9999 mem: decrementing refcount of 1554: 3 -> 2
9999 mem: storing 0 in location 1179
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1180 is 1566
9999 mem: skipping refcount at 1566
9999 mem: decrementing refcount of 1566: 2 -> 1
9999 mem: storing 0 in location 1180
9999 mem: clearing undo
9999 mem: location 1180 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1180
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
9999 mem: clearing redo
9999 mem: location 1181 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1181
9999 mem: automatically abandoning 1175
9999 abandon: updating refcounts inside 1175: (array number)
9999 abandon: saving 1175 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1152
9999 mem: storing 1152 in location 1408
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1407 is 1008
9999 mem: location 1408 is 1152
9999 mem: location 1413 is 1
9999 mem: clearing e:event
9999 mem: storing 0 in location 1409
9999 mem: storing 0 in location 1410
9999 mem: storing 0 in location 1411
9999 mem: storing 0 in location 1412
9999 mem: clearing screen-width:number
9999 mem: storing 0 in location 1414
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1415
9999 mem: clearing left:number
9999 mem: storing 0 in location 1416
9999 mem: clearing right:number
9999 mem: storing 0 in location 1417
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 13 -> 12
9999 mem: storing 0 in location 1418
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing save-row:number
9999 mem: storing 0 in location 1421
9999 mem: clearing save-column:number
9999 mem: storing 0 in location 1422
9999 mem: clearing c:character
9999 mem: storing 0 in location 1423
9999 mem: clearing is-unicode?:boolean
9999 mem: storing 0 in location 1424
9999 mem: clearing redo?:boolean
9999 mem: storing 0 in location 1425
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1426 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1426
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 1554
9999 mem: skipping refcount at 1554
9999 mem: decrementing refcount of 1554: 2 -> 1
9999 mem: storing 0 in location 1427
9999 mem: clearing redo
9999 mem: location 1426 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1426
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 1401
9999 mem: skipping refcount at 1401
9999 mem: decrementing refcount of 1401: 3 -> 2
9999 mem: storing 0 in location 1428
9999 mem: clearing undo
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1439
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1440 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1440
9999 mem: clearing end:address:duplex-list:character
9999 mem: location 1441 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1441
9999 mem: clearing data:address:duplex-list:character
9999 mem: location 1442 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1442
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1420
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1443 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1443
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1420
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1443 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1443
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1461
9999 mem: clearing before-cursor
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1462 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1462
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1420
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1443 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1443
9999 mem: clearing undo?:boolean
9999 mem: storing 0 in location 1463
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing undo
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1426 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1426
9999 mem: clearing redo
9999 mem: location 1426 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1426
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1439
9999 mem: clearing anchor:address:duplex-list:character
9999 mem: location 1464 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1464
9999 mem: clearing deleted:address:duplex-list:character
9999 mem: location 1465 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1465
9999 mem: clearing old-cursor:address:duplex-list:character
9999 mem: location 1466 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1466
9999 mem: clearing before-cursor
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1420
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1443 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1443
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1420
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1443 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1443
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1461
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1440 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1440
9999 mem: clearing end:address:duplex-list:character
9999 mem: location 1441 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1441
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1420
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1443 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1443
9999 mem: clearing page-up?:boolean
9999 mem: storing 0 in location 1467
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1468 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1468
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 17 -> 16
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 16 -> 15
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1476 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1476
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1477
9999 mem: clearing page-down?:boolean
9999 mem: storing 0 in location 1478
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1468 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1468
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1476 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1476
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1477
9999 mem: clearing delete-to-end-of-line?:boolean
9999 mem: storing 0 in location 1479
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing deleted-cells:address:duplex-list:character
9999 mem: location 1480 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1480
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1481 is 1219
9999 mem: skipping refcount at 1219
9999 mem: decrementing refcount of 1219: 11 -> 10
9999 mem: storing 0 in location 1481
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing delete-to-start-of-line?:boolean
9999 mem: storing 0 in location 1482
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing deleted-cells:address:duplex-list:character
9999 mem: location 1480 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1480
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1481 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1481
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing move-to-end-of-line?:boolean
9999 mem: storing 0 in location 1483
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move-to-start-of-line?:boolean
9999 mem: storing 0 in location 1484
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing delete-previous-character?:boolean
9999 mem: storing 0 in location 1485
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing backspaced-cell:address:duplex-list:character
9999 mem: location 1486 is 1215
9999 mem: skipping refcount at 1215
9999 mem: decrementing refcount of 1215: 10 -> 9
9999 mem: storing 0 in location 1486
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1439
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing backspaced-so-far:address:duplex-list:character
9999 mem: location 1487 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1487
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1481 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1481
9999 mem: clearing tab?:boolean
9999 mem: storing 0 in location 1488
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1489 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1489
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1461
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing insert-until:address:duplex-list:character
9999 mem: location 1490 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1490
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1462 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1462
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1491 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1491
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1492
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1489 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1489
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1462 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1462
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1491 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1491
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing regular-character?:boolean
9999 mem: storing 0 in location 1493
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1489 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1489
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1461
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing insert-until:address:duplex-list:character
9999 mem: location 1490 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1490
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 0 in location 1459
9999 mem: storing 0 in location 1460
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1462 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1462
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1491 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1491
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing k:number
9999 mem: storing 0 in location 1494
9999 mem: clearing is-keycode?:boolean
9999 mem: storing 0 in location 1495
9999 mem: clearing page-up?:boolean
9999 mem: storing 0 in location 1467
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1468 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1468
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1476 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1476
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1477
9999 mem: clearing page-down?:boolean
9999 mem: storing 0 in location 1478
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1468 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1468
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1476 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1476
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1477
9999 mem: clearing move-to-end-of-line?:boolean
9999 mem: storing 0 in location 1483
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move-to-start-of-line?:boolean
9999 mem: storing 0 in location 1484
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move-to-next-line?:boolean
9999 mem: storing 0 in location 1496
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move-to-previous-line?:boolean
9999 mem: storing 0 in location 1497
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move-to-previous-character?:boolean
9999 mem: storing 0 in location 1498
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1499 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1499
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing before-cursor
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move-to-next-character?:boolean
9999 mem: storing 0 in location 1500
9999 mem: clearing next-cursor:address:duplex-list:character
9999 mem: location 1501 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1501
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1469
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1470
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing before-cursor
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1472
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1451
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 0 in location 1450
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing delete-next-character?:boolean
9999 mem: storing 0 in location 1502
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1471 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1471
9999 mem: clearing deleted-cell:address:duplex-list:character
9999 mem: location 1503 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1503
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1473 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1473
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1419
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1420
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1418 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1418
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1428 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1428
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1439
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1474
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1475
9999 mem: clearing delete-until:address:duplex-list:character
9999 mem: location 1504 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1504
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing deleted-so-far:address:duplex-list:character
9999 mem: location 1505 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1505
9999 mem: clearing deleted-so-far
9999 mem: location 1505 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1505
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: storing 0 in location 1438
9999 mem: clearing op:address:operation
9999 mem: location 1427 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1427
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1481 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1481
9999 mem: clearing paste-end?:boolean
9999 mem: storing 0 in location 1506
9999 mem: clearing paste-start?:boolean
9999 mem: storing 0 in location 1507
9999 mem: automatically abandoning 1404
9999 abandon: updating refcounts inside 1404: (array number)
9999 abandon: saving 1404 in free-list of size 104
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1152
9998 run: result 2 is 1
9999 mem: storing 1008 in location 1352
9999 mem: storing 1152 in location 1354
9999 mem: storing 1 in location 1367
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1367 is 1
9998 run: jump-unless fell through
 104 run: {screen: ("address" "screen")} <- editor-render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1352 is 1008
9999 mem: location 1354 is 1152
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1143
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1146 is 0
9999 mem: incrementing refcount of 1008: 34 -> 35
9999 mem: storing 1008 in location 1146
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1147 is 0
9999 mem: incrementing refcount of 1152: 10 -> 11
9999 mem: storing 1152 in location 1147
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1147 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1147 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1157
9998 run: its type is "number"
9999 mem: location 1157 is 0
9999 mem: storing 0 in location 1148
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1147 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1147 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 9
9999 mem: storing 9 in location 1149
 105 run: {row: "number"}, {column: "number"} <- render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1146 is 1008
9999 mem: location 1147 is 1152
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1247
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1250 is 0
9999 mem: incrementing refcount of 1008: 35 -> 36
9999 mem: storing 1008 in location 1250
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1251 is 0
9999 mem: incrementing refcount of 1152: 11 -> 12
9999 mem: storing 1152 in location 1251
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1251 is 1152
9998 run: jumping to instruction 6
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1157
9998 run: its type is "number"
9999 mem: location 1157 is 0
9999 mem: storing 0 in location 1252
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1250 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1008: 36 -> 37
9999 mem: storing 1008 in location 1189
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1189 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1190
 107 run: return {height: "number"}
9999 mem: location 1190 is 5
9999 mem: clearing screen:address:screen
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 37 -> 36
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1253
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 9
9999 mem: storing 9 in location 1254
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1154
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1154 is 1171
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1171: 15 -> 16
9999 mem: storing 1171 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1171
9999 mem: location 1256 is 0
9999 mem: incrementing refcount of 1171: 16 -> 17
9999 mem: storing 1171 in location 1256
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1171
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1171: 17 -> 18
9999 mem: storing 1171 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1171
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: location 1172 is 167
9999 mem: location 1173 is 1182
9999 mem: location 1174 is 0
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9998 run: address to copy is 1173
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1173 is 1182
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1182: 10 -> 11
9999 mem: storing 1182 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1182
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 18 -> 17
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1182
9999 mem: storing 1182 in location 1255
 106 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1257
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1258
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1252 is 0
9999 mem: storing 0 in location 1259
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 1
9999 mem: storing 1 in location 1260
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 7
9999 mem: storing 7 in location 1261
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1156
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1156 is 1211
9999 mem: location 1262 is 0
9999 mem: incrementing refcount of 1211: 12 -> 13
9999 mem: storing 1211 in location 1262
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1258 is 1
9999 mem: location 1259 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 36 -> 37
9999 mem: storing 1008 in location 1168
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1169
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1170
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 0
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1250
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1182
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 0
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1255 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1183
9998 run: its type is "character"
9999 mem: location 1183 is 97
9999 mem: storing 97 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 97
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1569
9999 mem: storing 0 in location 1569
9999 mem: storing 0 in location 1570
9999 mem: storing 0 in location 1571
9999 mem: storing 0 in location 1572
9999 mem: storing 0 in location 1573
9999 mem: storing 0 in location 1574
9999 mem: storing 0 in location 1575
9999 mem: storing 0 in location 1576
9999 mem: storing 0 in location 1577
9999 mem: storing 0 in location 1578
9999 mem: storing 0 in location 1579
9999 mem: storing 0 in location 1580
9999 mem: storing 10 in location 1570
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 97
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
9990 schedule: get-color/render/editor-render/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 97
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 97
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 0
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 97
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 97
  90 print-character: 97
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 97
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 0
9999 mem: storing 10 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 97
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 97
9999 mem: location 1292 is 7
9999 mem: storing 97 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 10
9998 run: address to copy to is 1036
9999 mem: location 1309 is 97
9999 mem: location 1310 is 7
9999 mem: storing 97 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 1
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1182
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1182: 11 -> 12
9999 mem: storing 1182 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1182
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1184
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1184 is 1191
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1191: 10 -> 11
9999 mem: storing 1191 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1191
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: decrementing refcount of 1182: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: storing 1191 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1171
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1171: 17 -> 18
9999 mem: storing 1171 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1171
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: location 1172 is 167
9999 mem: location 1173 is 1182
9999 mem: location 1174 is 0
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9998 run: address to copy is 1173
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1173 is 1182
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1182: 11 -> 12
9999 mem: storing 1182 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1182
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1171
9999 mem: skipping refcount at 1171
9999 mem: decrementing refcount of 1171: 18 -> 17
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1182
9999 mem: storing 1182 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 0
9999 mem: storing 1 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1191
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1255 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1192
9998 run: its type is "character"
9999 mem: location 1192 is 98
9999 mem: storing 98 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 98
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 98
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 98
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 98
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 98
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 98
  90 print-character: 98
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 98
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 1
9999 mem: storing 11 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 98
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 98
9999 mem: location 1292 is 7
9999 mem: storing 98 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 11
9998 run: address to copy to is 1038
9999 mem: location 1309 is 98
9999 mem: location 1310 is 7
9999 mem: storing 98 in location 1038
9999 mem: storing 7 in location 1039
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 2 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 2
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1191: 11 -> 12
9999 mem: storing 1191 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1195: 10 -> 11
9999 mem: storing 1195 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1195
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: storing 1195 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1182
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1182: 12 -> 13
9999 mem: storing 1182 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1182
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: location 1183 is 97
9999 mem: location 1184 is 1191
9999 mem: location 1185 is 1171
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9998 run: address to copy is 1184
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1184 is 1191
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1191: 11 -> 12
9999 mem: storing 1191 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1191
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1182
9999 mem: skipping refcount at 1182
9999 mem: decrementing refcount of 1182: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1191
9999 mem: storing 1191 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 1
9999 mem: storing 2 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1195
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1255 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1196
9998 run: its type is "character"
9999 mem: location 1196 is 99
9999 mem: storing 99 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 99
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 99
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 99
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 99
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 99
  90 print-character: 99
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 99
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 2
9999 mem: storing 12 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 99
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 99
9999 mem: location 1292 is 7
9999 mem: storing 99 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 12
9998 run: address to copy to is 1040
9999 mem: location 1309 is 99
9999 mem: location 1310 is 7
9999 mem: storing 99 in location 1040
9999 mem: storing 7 in location 1041
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 3 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 3
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1195
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1195: 11 -> 12
9999 mem: storing 1195 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1199: 10 -> 11
9999 mem: storing 1199 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1199
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: storing 1199 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1191
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1191: 12 -> 13
9999 mem: storing 1191 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1191
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: location 1192 is 98
9999 mem: location 1193 is 1195
9999 mem: location 1194 is 1182
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9998 run: address to copy is 1193
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1193 is 1195
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1195: 11 -> 12
9999 mem: storing 1195 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1195
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1191
9999 mem: skipping refcount at 1191
9999 mem: decrementing refcount of 1191: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1195
9999 mem: storing 1195 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 2
9999 mem: storing 3 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1199
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 3
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1255 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 32
9999 mem: storing 32 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 32
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 32
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 32
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 3
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 32
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 3
9999 mem: storing 13 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 13
9998 run: address to copy to is 1042
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 4 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 4
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1199: 11 -> 12
9999 mem: storing 1199 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1203: 10 -> 11
9999 mem: storing 1203 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1203
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1195
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1195: 12 -> 13
9999 mem: storing 1195 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1195
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: location 1196 is 99
9999 mem: location 1197 is 1199
9999 mem: location 1198 is 1191
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9998 run: address to copy is 1197
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1197 is 1199
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1199: 11 -> 12
9999 mem: storing 1199 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1199
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1195
9999 mem: skipping refcount at 1195
9999 mem: decrementing refcount of 1195: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: storing 1199 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 3
9999 mem: storing 4 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1203
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 4
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1255 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 100
9999 mem: storing 100 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 100
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 100
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 100
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 100
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 4
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
9990 schedule: render/editor-render/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 100
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 100
  90 print-character: 100
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 100
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 4
9999 mem: storing 14 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 100
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 100
9999 mem: location 1292 is 7
9999 mem: storing 100 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 14
9998 run: address to copy to is 1044
9999 mem: location 1309 is 100
9999 mem: location 1310 is 7
9999 mem: storing 100 in location 1044
9999 mem: storing 7 in location 1045
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 5 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 5
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1203: 11 -> 12
9999 mem: storing 1203 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1205 is 1207
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1207: 10 -> 11
9999 mem: storing 1207 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1207
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1207
9999 mem: storing 1207 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1199: 12 -> 13
9999 mem: storing 1199 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1199
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1195
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1203: 11 -> 12
9999 mem: storing 1203 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1203
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1199
9999 mem: skipping refcount at 1199
9999 mem: decrementing refcount of 1199: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 4
9999 mem: storing 5 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1207
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 5
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1255 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1208
9998 run: its type is "character"
9999 mem: location 1208 is 101
9999 mem: storing 101 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 101
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 101
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 101
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 5
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 101
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 101
  90 print-character: 101
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 101
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 5
9999 mem: storing 15 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 101
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 101
9999 mem: location 1292 is 7
9999 mem: storing 101 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 15
9998 run: address to copy to is 1046
9999 mem: location 1309 is 101
9999 mem: location 1310 is 7
9999 mem: storing 101 in location 1046
9999 mem: storing 7 in location 1047
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 6 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 6
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1207
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1207: 11 -> 12
9999 mem: storing 1207 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1207
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1209
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1209 is 1211
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1211: 13 -> 14
9999 mem: storing 1211 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1211
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: decrementing refcount of 1207: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1211
9999 mem: storing 1211 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1203: 12 -> 13
9999 mem: storing 1203 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 100
9999 mem: location 1205 is 1207
9999 mem: location 1206 is 1199
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1205 is 1207
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1207: 11 -> 12
9999 mem: storing 1207 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1207
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: decrementing refcount of 1203: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1207
9999 mem: storing 1207 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 5
9999 mem: storing 6 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1211
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 6
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1219
9999 mem: location 1214 is 1207
9999 mem: location 1255 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1212
9998 run: its type is "character"
9999 mem: location 1212 is 102
9999 mem: storing 102 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 102
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 102
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 102
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 102
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 6
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 102
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 102
  90 print-character: 102
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 102
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 6
9999 mem: storing 16 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 102
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 102
9999 mem: location 1292 is 7
9999 mem: storing 102 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 16
9998 run: address to copy to is 1048
9999 mem: location 1309 is 102
9999 mem: location 1310 is 7
9999 mem: storing 102 in location 1048
9999 mem: storing 7 in location 1049
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 7 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 7
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1211
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1211: 14 -> 15
9999 mem: storing 1211 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1211
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1219
9999 mem: location 1214 is 1207
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1213
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1213 is 1219
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1219: 10 -> 11
9999 mem: storing 1219 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1219
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 15 -> 14
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1219
9999 mem: storing 1219 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1207
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1207: 12 -> 13
9999 mem: storing 1207 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1207
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: location 1208 is 101
9999 mem: location 1209 is 1211
9999 mem: location 1210 is 1203
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9998 run: address to copy is 1209
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1209 is 1211
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1211: 14 -> 15
9999 mem: storing 1211 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1211
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1207
9999 mem: skipping refcount at 1207
9999 mem: decrementing refcount of 1207: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1211
9999 mem: storing 1211 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 6
9999 mem: storing 7 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1219
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 7
9999 mem: location 1261 is 7
9999 mem: storing 1 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1211
9999 mem: location 1262 is 1211
9999 mem: skipping refcount at 1211
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1211 in location 1262
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1219
9999 mem: skipping refcount at 1219
9999 mem: location 1220 is 103
9999 mem: location 1221 is 1223
9999 mem: location 1222 is 1211
9999 mem: location 1255 is 1219
9999 mem: skipping refcount at 1219
9998 run: address to copy is 1220
9998 run: its type is "character"
9999 mem: location 1220 is 103
9999 mem: storing 103 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 103
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 103
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 103
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 103
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 7
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 103
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 103
  90 print-character: 103
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 103
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 7
9999 mem: storing 17 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 103
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 103
9999 mem: location 1292 is 7
9999 mem: storing 103 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 17
9998 run: address to copy to is 1050
9999 mem: location 1309 is 103
9999 mem: location 1310 is 7
9999 mem: storing 103 in location 1050
9999 mem: storing 7 in location 1051
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 8 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 8
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1219
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1219: 11 -> 12
9999 mem: storing 1219 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1219
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: location 1220 is 103
9999 mem: location 1221 is 1223
9999 mem: location 1222 is 1211
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9998 run: address to copy is 1221
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1221 is 1223
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1223: 9 -> 10
9999 mem: storing 1223 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1223
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: decrementing refcount of 1219: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1223
9999 mem: storing 1223 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1211
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1211: 15 -> 16
9999 mem: storing 1211 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1211
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: location 1212 is 102
9999 mem: location 1213 is 1219
9999 mem: location 1214 is 1207
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9998 run: address to copy is 1213
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1213 is 1219
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1219: 11 -> 12
9999 mem: storing 1219 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1219
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 16 -> 15
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1219
9999 mem: storing 1219 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 7
9999 mem: storing 8 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1223
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 8
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1223
9999 mem: skipping refcount at 1223
9999 mem: location 1224 is 104
9999 mem: location 1225 is 1227
9999 mem: location 1226 is 1219
9999 mem: location 1255 is 1223
9999 mem: skipping refcount at 1223
9998 run: address to copy is 1224
9998 run: its type is "character"
9999 mem: location 1224 is 104
9999 mem: storing 104 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 104
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 104 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 104
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 104
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 104
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 8
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 104
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 104 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
9990 schedule: print/render/editor-render/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 104
  90 print-character: 104
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 104
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 8
9999 mem: storing 18 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 104
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 104
9999 mem: location 1292 is 7
9999 mem: storing 104 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 18
9998 run: address to copy to is 1052
9999 mem: location 1309 is 104
9999 mem: location 1310 is 7
9999 mem: storing 104 in location 1052
9999 mem: storing 7 in location 1053
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 9 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 9
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1223
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1223: 10 -> 11
9999 mem: storing 1223 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1223
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: location 1224 is 104
9999 mem: location 1225 is 1227
9999 mem: location 1226 is 1219
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9998 run: address to copy is 1225
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1225 is 1227
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1227: 9 -> 10
9999 mem: storing 1227 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1227
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: decrementing refcount of 1223: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1227
9999 mem: storing 1227 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1219
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1219: 12 -> 13
9999 mem: storing 1219 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1219
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: location 1220 is 103
9999 mem: location 1221 is 1223
9999 mem: location 1222 is 1211
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9998 run: address to copy is 1221
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1221 is 1223
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1223: 10 -> 11
9999 mem: storing 1223 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1223
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1219
9999 mem: skipping refcount at 1219
9999 mem: decrementing refcount of 1219: 13 -> 12
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1223
9999 mem: storing 1223 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 8
9999 mem: storing 9 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1227
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 1
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 9
9999 mem: location 1261 is 7
9999 mem: storing 0 in location 1265
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1227
9999 mem: skipping refcount at 1227
9999 mem: location 1228 is 105
9999 mem: location 1229 is 1231
9999 mem: location 1230 is 1223
9999 mem: location 1255 is 1227
9999 mem: skipping refcount at 1227
9998 run: address to copy is 1228
9998 run: its type is "character"
9999 mem: location 1228 is 105
9999 mem: storing 105 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 105
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 105 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 105
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 105
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 105
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 9
9999 mem: location 1254 is 9
9999 mem: storing 1 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 1
9998 run: jump-unless fell through
 106 run: {wrap-icon: "character"} <- copy {8617: "literal", "loop-back-to-left": ()}
9999 mem: storing 8617 in location 1270
 106 run: print {screen: ("address" "screen")}, {wrap-icon: "character"}, {245: "literal", "grey": ()}
9999 mem: location 1250 is 1008
9999 mem: location 1270 is 8617
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 8617 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 8617
  90 print-character: 8617
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 9
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 8617
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 1
9999 mem: location 1296 is 10
9999 mem: storing 10 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 10
9999 mem: location 1300 is 9
9999 mem: storing 19 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 8617
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 8617
9999 mem: location 1292 is 245
9999 mem: storing 8617 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 19
9998 run: address to copy to is 1054
9999 mem: location 1309 is 8617
9999 mem: location 1310 is 245
9999 mem: storing 8617 in location 1054
9999 mem: storing 245 in location 1055
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 1
9998 run: jumping to instruction 80
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1252 is 0
9999 mem: storing 0 in location 1259
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1258 is 1
9999 mem: storing 2 in location 1258
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1258 is 2
9999 mem: location 1259 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1168
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1169
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1170
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 2
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 0
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1250
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1227
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1260 is 1
9999 mem: storing 0 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1227
9999 mem: skipping refcount at 1227
9999 mem: location 1228 is 105
9999 mem: location 1229 is 1231
9999 mem: location 1230 is 1223
9999 mem: location 1255 is 1227
9999 mem: skipping refcount at 1227
9998 run: address to copy is 1228
9998 run: its type is "character"
9999 mem: location 1228 is 105
9999 mem: storing 105 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 105
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 105 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 105
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 105
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 105
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 0
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 105
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 105 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 105
  90 print-character: 105
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 105
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 0
9999 mem: storing 20 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 105
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 105
9999 mem: location 1292 is 7
9999 mem: storing 105 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 20
9998 run: address to copy to is 1056
9999 mem: location 1309 is 105
9999 mem: location 1310 is 7
9999 mem: storing 105 in location 1056
9999 mem: storing 7 in location 1057
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 1
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 39 -> 38
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1227
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1227: 10 -> 11
9999 mem: storing 1227 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1227
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: location 1228 is 105
9999 mem: location 1229 is 1231
9999 mem: location 1230 is 1223
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9998 run: address to copy is 1229
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1229 is 1231
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1231: 9 -> 10
9999 mem: storing 1231 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1231
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: decrementing refcount of 1227: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1231
9999 mem: storing 1231 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1223
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1223: 11 -> 12
9999 mem: storing 1223 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1223
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: location 1224 is 104
9999 mem: location 1225 is 1227
9999 mem: location 1226 is 1219
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9998 run: address to copy is 1225
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1225 is 1227
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1227: 10 -> 11
9999 mem: storing 1227 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1227
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1223
9999 mem: skipping refcount at 1223
9999 mem: decrementing refcount of 1223: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1227
9999 mem: storing 1227 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 0
9999 mem: storing 1 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1231
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1260 is 1
9999 mem: storing 0 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 32
9999 mem: location 1233 is 1235
9999 mem: location 1234 is 1227
9999 mem: location 1255 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1232
9998 run: its type is "character"
9999 mem: location 1232 is 32
9999 mem: storing 32 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 32
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 32
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 32
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 32
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 1
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 32
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 1
9999 mem: storing 21 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 21
9998 run: address to copy to is 1058
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1058
9999 mem: storing 7 in location 1059
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 2 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 2
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 39 -> 38
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1231
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1231: 10 -> 11
9999 mem: storing 1231 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1231
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 32
9999 mem: location 1233 is 1235
9999 mem: location 1234 is 1227
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1233
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1233 is 1235
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1235: 9 -> 10
9999 mem: storing 1235 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1235
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: decrementing refcount of 1231: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1235
9999 mem: storing 1235 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1227
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1227: 11 -> 12
9999 mem: storing 1227 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1227
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: location 1228 is 105
9999 mem: location 1229 is 1231
9999 mem: location 1230 is 1223
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9998 run: address to copy is 1229
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1229 is 1231
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1231: 10 -> 11
9999 mem: storing 1231 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1231
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1227
9999 mem: skipping refcount at 1227
9999 mem: decrementing refcount of 1227: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1231
9999 mem: storing 1231 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 1
9999 mem: storing 2 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1235
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1260 is 1
9999 mem: storing 0 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1236 is 106
9999 mem: location 1237 is 1239
9999 mem: location 1238 is 1231
9999 mem: location 1255 is 1235
9999 mem: skipping refcount at 1235
9998 run: address to copy is 1236
9998 run: its type is "character"
9999 mem: location 1236 is 106
9999 mem: storing 106 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 106
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 106 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 106
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 106
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 106
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 2
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 106
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 106 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 106
  90 print-character: 106
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 106
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 2
9999 mem: storing 22 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
9990 schedule: print/render/editor-render/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 106
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 106
9999 mem: location 1292 is 7
9999 mem: storing 106 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 22
9998 run: address to copy to is 1060
9999 mem: location 1309 is 106
9999 mem: location 1310 is 7
9999 mem: storing 106 in location 1060
9999 mem: storing 7 in location 1061
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 3 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 3
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 39 -> 38
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1235
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1235: 10 -> 11
9999 mem: storing 1235 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1235
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1236 is 106
9999 mem: location 1237 is 1239
9999 mem: location 1238 is 1231
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9998 run: address to copy is 1237
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1237 is 1239
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1239: 9 -> 10
9999 mem: storing 1239 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1239
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: decrementing refcount of 1235: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1239
9999 mem: storing 1239 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1231
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1231: 11 -> 12
9999 mem: storing 1231 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1231
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 32
9999 mem: location 1233 is 1235
9999 mem: location 1234 is 1227
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1233
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1233 is 1235
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1235: 10 -> 11
9999 mem: storing 1235 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1235
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1231
9999 mem: skipping refcount at 1231
9999 mem: decrementing refcount of 1231: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1235
9999 mem: storing 1235 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 2
9999 mem: storing 3 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1239
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1260 is 1
9999 mem: storing 0 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1239
9999 mem: skipping refcount at 1239
9999 mem: location 1240 is 107
9999 mem: location 1241 is 1243
9999 mem: location 1242 is 1235
9999 mem: location 1255 is 1239
9999 mem: skipping refcount at 1239
9998 run: address to copy is 1240
9998 run: its type is "character"
9999 mem: location 1240 is 107
9999 mem: storing 107 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 107
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 107 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 107
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 107
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 107
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 3
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 107
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 107 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 107
  90 print-character: 107
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 107
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 3
9999 mem: storing 23 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 107
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 107
9999 mem: location 1292 is 7
9999 mem: storing 107 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 23
9998 run: address to copy to is 1062
9999 mem: location 1309 is 107
9999 mem: location 1310 is 7
9999 mem: storing 107 in location 1062
9999 mem: storing 7 in location 1063
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 4 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 4
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 39 -> 38
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1239
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1239: 10 -> 11
9999 mem: storing 1239 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1239
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: location 1240 is 107
9999 mem: location 1241 is 1243
9999 mem: location 1242 is 1235
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9998 run: address to copy is 1241
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1241 is 1243
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1243: 4 -> 5
9999 mem: storing 1243 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1243
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: decrementing refcount of 1239: 11 -> 10
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1243
9999 mem: storing 1243 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1235
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1235: 11 -> 12
9999 mem: storing 1235 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1235
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1236 is 106
9999 mem: location 1237 is 1239
9999 mem: location 1238 is 1231
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9998 run: address to copy is 1237
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1237 is 1239
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1239: 10 -> 11
9999 mem: storing 1239 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1239
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1235
9999 mem: skipping refcount at 1235
9999 mem: decrementing refcount of 1235: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1239
9999 mem: storing 1239 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 3
9999 mem: storing 4 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 1243
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1253 is 5
9999 mem: storing 0 in location 1263
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1263 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1260 is 1
9999 mem: storing 0 in location 1264
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1255 is 1243
9999 mem: skipping refcount at 1243
9999 mem: location 1244 is 108
9999 mem: location 1245 is 0
9999 mem: location 1246 is 1239
9999 mem: location 1255 is 1243
9999 mem: skipping refcount at 1243
9998 run: address to copy is 1244
9998 run: its type is "character"
9999 mem: location 1244 is 108
9999 mem: storing 108 in location 1266
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1257 is 7
9999 mem: location 1266 is 108
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1569
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1572
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 108 in location 1573
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1572 is 7
9999 mem: storing 1 in location 1574
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1573 is 108
9999 mem: storing 0 in location 1575
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1575 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1576
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1576 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1574 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1573 is 108
9999 mem: storing 0 in location 1578
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1578 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1572 is 7
9999 mem: storing 0 in location 1579
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1579 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1572 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1573
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1574
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1575
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1576
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1577
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1578
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1579
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1580
9999 mem: automatically abandoning 1569
9999 abandon: updating refcounts inside 1569: (array number)
9999 abandon: saving 1569 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1257
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1266 is 108
9999 mem: storing 0 in location 1267
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1267 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1259 is 4
9999 mem: location 1254 is 9
9999 mem: storing 0 in location 1269
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1269 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1250 is 1008
9999 mem: location 1266 is 108
9999 mem: location 1257 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 108 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1294
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 108
  90 print-character: 108
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 108
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 4
9999 mem: storing 24 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 108
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 108
9999 mem: location 1292 is 7
9999 mem: storing 108 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 24
9998 run: address to copy to is 1064
9999 mem: location 1309 is 108
9999 mem: location 1310 is 7
9999 mem: storing 108 in location 1064
9999 mem: storing 7 in location 1065
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 5 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 5
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 39 -> 38
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1255 is 1243
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1243: 5 -> 6
9999 mem: storing 1243 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1243
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1243
9999 mem: skipping refcount at 1243
9999 mem: location 1244 is 108
9999 mem: location 1245 is 0
9999 mem: location 1246 is 1239
9999 mem: location 1189 is 1243
9999 mem: skipping refcount at 1243
9998 run: address to copy is 1245
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1245 is 0
9999 mem: location 1190 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 0
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1243
9999 mem: skipping refcount at 1243
9999 mem: decrementing refcount of 1243: 6 -> 5
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1255
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1256 is 1239
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1239: 11 -> 12
9999 mem: storing 1239 in location 1189
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1189 is 1239
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: location 1240 is 107
9999 mem: location 1241 is 1243
9999 mem: location 1242 is 1235
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9998 run: address to copy is 1241
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1241 is 1243
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1243: 5 -> 6
9999 mem: storing 1243 in location 1190
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1190 is 1243
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1189 is 1239
9999 mem: skipping refcount at 1239
9999 mem: decrementing refcount of 1239: 12 -> 11
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1243
9999 mem: storing 1243 in location 1256
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1259 is 4
9999 mem: storing 5 in location 1259
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1255 is 0
9998 run: jumping to instruction 70
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1255 is 0
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1155
9999 mem: location 1155 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1155
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1260 is 1
9999 mem: storing 0 in location 1264
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1259 is 5
9999 mem: location 1261 is 7
9999 mem: storing 1 in location 1271
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1264 is 0
9999 mem: location 1271 is 1
9999 mem: storing 0 in location 1272
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1258 is 2
9999 mem: location 1260 is 1
9999 mem: storing 0 in location 1273
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 mem: storing 0 in location 1274
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1274 is 0
9998 run: jumping to instruction 82
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1258 is 2
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1159
9999 mem: storing 2 in location 1159
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1260 is 1
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1160
9999 mem: storing 1 in location 1160
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1261 is 7
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1161
9999 mem: storing 7 in location 1161
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1262 is 1211
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy to is 1156
9999 mem: location 1156 is 1211
9999 mem: skipping refcount at 1211
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1211 in location 1156
 106 run: return {row: "number"}, {column: "number"}, {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1258 is 2
9999 mem: location 1259 is 5
9999 mem: location 1250 is 1008
9999 mem: location 1251 is 1152
9999 mem: clearing screen:address:screen
9999 mem: location 1250 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 38 -> 37
9999 mem: storing 0 in location 1250
9999 mem: clearing editor:address:editor-data
9999 mem: location 1251 is 1152
9999 mem: skipping refcount at 1152
9999 mem: decrementing refcount of 1152: 12 -> 11
9999 mem: storing 0 in location 1251
9999 mem: clearing left:number
9999 mem: storing 0 in location 1252
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1253
9999 mem: clearing right:number
9999 mem: storing 0 in location 1254
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1255 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1255
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1256 is 1243
9999 mem: skipping refcount at 1243
9999 mem: decrementing refcount of 1243: 6 -> 5
9999 mem: storing 0 in location 1256
9999 mem: clearing curr
9999 mem: location 1255 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1255
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1260
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1261
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1262 is 1211
9999 mem: skipping refcount at 1211
9999 mem: decrementing refcount of 1211: 15 -> 14
9999 mem: storing 0 in location 1262
9999 mem: clearing screen
9999 mem: location 1250 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1250
9999 mem: clearing off-screen?:boolean
9999 mem: storing 0 in location 1263
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing at-cursor?:boolean
9999 mem: storing 0 in location 1265
9999 mem: clearing before-cursor
9999 mem: location 1262 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1262
9999 mem: clearing c:character
9999 mem: storing 0 in location 1266
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1267
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing left-of-cursor?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1261
9999 mem: clearing before-cursor
9999 mem: location 1262 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1262
9999 mem: clearing screen
9999 mem: location 1250 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1250
9999 mem: clearing curr
9999 mem: location 1255 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1255
9999 mem: clearing prev
9999 mem: location 1256 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1256
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1269
9999 mem: clearing wrap-icon:character
9999 mem: storing 0 in location 1270
9999 mem: clearing screen
9999 mem: location 1250 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1250
9999 mem: clearing curr
9999 mem: location 1255 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1255
9999 mem: clearing prev
9999 mem: location 1256 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1256
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing cursor-outside-line?:boolean
9999 mem: storing 0 in location 1271
9999 mem: clearing before-cursor-on-same-line?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing above-cursor-row?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing before-cursor?:boolean
9999 mem: storing 0 in location 1274
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1260
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1261
9999 mem: clearing before-cursor
9999 mem: location 1262 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1262
9999 mem: automatically abandoning 1247
9999 abandon: updating refcounts inside 1247: (array number)
9999 abandon: saving 1247 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 2
9998 run: result 1 is 5
9999 mem: storing 2 in location 1150
9999 mem: storing 5 in location 1151
 105 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1146 is 1008
9999 mem: location 1149 is 9
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1119
 106 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1120
 106 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1119 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1168
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1169
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1170
 107 run: return {row: "number"}, {column: "number"}
9999 mem: location 1169 is 2
9999 mem: location 1170 is 5
9999 mem: clearing screen:address:screen
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 39 -> 38
9999 mem: storing 0 in location 1168
9999 mem: clearing row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing row
9999 mem: storing 0 in location 1169
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 2
9998 run: result 1 is 5
9999 mem: storing 5 in location 1121
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1122
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1123
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 5
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 5
9999 mem: storing 25 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 25
9998 run: address to copy to is 1066
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1066
9999 mem: storing 7 in location 1067
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 6 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 6
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 5
9999 mem: storing 6 in location 1121
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 6
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 39 -> 40
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 6
9999 mem: storing 26 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 26
9998 run: address to copy to is 1068
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1068
9999 mem: storing 7 in location 1069
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 7 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 7
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 6
9999 mem: storing 7 in location 1121
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 7
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 40 -> 41
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 7
9999 mem: storing 27 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 27
9998 run: address to copy to is 1070
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1070
9999 mem: storing 7 in location 1071
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 8 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 8
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 7
9999 mem: storing 8 in location 1121
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 8
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
9990 schedule: print/clear-line-until/editor-render/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 8
9999 mem: storing 28 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 28
9998 run: address to copy to is 1072
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1072
9999 mem: storing 7 in location 1073
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 9 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 9
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 8
9999 mem: storing 9 in location 1121
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 9
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 42 -> 43
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 9
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 2
9999 mem: location 1296 is 10
9999 mem: storing 20 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 20
9999 mem: location 1300 is 9
9999 mem: storing 29 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 29
9998 run: address to copy to is 1074
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1074
9999 mem: storing 7 in location 1075
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 1
9998 run: jumping to instruction 80
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 9
9999 mem: storing 10 in location 1121
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 10
9999 mem: location 1120 is 9
9999 mem: storing 1 in location 1125
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 1
9998 run: jumping to instruction 16
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1119 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 43 -> 42
9999 mem: storing 0 in location 1119
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1120
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1121
9999 mem: clearing space:character
9999 mem: storing 0 in location 1122
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1123
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1124
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1123
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1125
9999 mem: clearing screen
9999 mem: location 1119 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1119
9999 mem: clearing column
9999 mem: storing 0 in location 1121
9999 mem: automatically abandoning 1116
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1150 is 2
9999 mem: storing 3 in location 1150
 105 run: draw-horizontal {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}, {9480: "literal", "horizontal-dotted": ()}
9999 mem: location 1146 is 1008
9999 mem: location 1150 is 3
9999 mem: location 1148 is 0
9999 mem: location 1149 is 9
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1313
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1316 is 0
9999 mem: incrementing refcount of 1008: 42 -> 43
9999 mem: storing 1008 in location 1316
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1317
 106 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1318
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1319
 106 run: {style: "character"}, {style-found?: "boolean"} <- next-ingredient 
9999 mem: storing 9480 in location 1320
9999 mem: storing 1 in location 1321
 106 run: jump-if {style-found?: "boolean"}, {: "offset"}
9999 mem: location 1321 is 1
9998 run: jumping to instruction 9
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1323 is 0
9998 run: jump-if fell through
 106 run: {color: "number"} <- copy {245: "literal", "grey": ()}
9999 mem: storing 245 in location 1322
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1325 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1324
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {x: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1317 is 3
9999 mem: location 1318 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 43 -> 44
9999 mem: storing 1008 in location 1168
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1169
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1170
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 3
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 0
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1316
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 0
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 0
9999 mem: storing 30 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 30
9998 run: address to copy to is 1076
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1076
9999 mem: storing 245 in location 1077
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 1
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 0
9999 mem: storing 1 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 1
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 1
9999 mem: storing 31 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 31
9998 run: address to copy to is 1078
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1078
9999 mem: storing 245 in location 1079
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 2 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 2
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 1
9999 mem: storing 2 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 2
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 2
9999 mem: storing 32 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 32
9998 run: address to copy to is 1080
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1080
9999 mem: storing 245 in location 1081
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 3 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 3
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 2
9999 mem: storing 3 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 3
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 3
9999 mem: storing 33 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 33
9998 run: address to copy to is 1082
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1082
9999 mem: storing 245 in location 1083
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 4 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 4
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 3
9999 mem: storing 4 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 4
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 4
9999 mem: storing 34 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 34
9998 run: address to copy to is 1084
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1084
9999 mem: storing 245 in location 1085
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 5 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 5
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 4
9999 mem: storing 5 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 5
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 5
9999 mem: storing 35 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
9990 schedule: print/draw-horizontal/editor-render/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 35
9998 run: address to copy to is 1086
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1086
9999 mem: storing 245 in location 1087
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 6 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 6
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 5
9999 mem: storing 6 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 6
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 6
9999 mem: storing 36 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 36
9998 run: address to copy to is 1088
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1088
9999 mem: storing 245 in location 1089
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 7 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 7
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 6
9999 mem: storing 7 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 7
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 7
9999 mem: storing 37 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 37
9998 run: address to copy to is 1090
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1090
9999 mem: storing 245 in location 1091
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 8 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 8
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 7
9999 mem: storing 8 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 8
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 8
9999 mem: storing 38 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 38
9998 run: address to copy to is 1092
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1092
9999 mem: storing 245 in location 1093
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 9 in location 1300
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 9
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 8
9999 mem: storing 9 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 9
9999 mem: location 1319 is 9
9999 mem: storing 1 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1316 is 1008
9999 mem: location 1320 is 9480
9999 mem: location 1322 is 245
9999 mem: location 1324 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1290
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1291
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1292
9999 mem: storing 1 in location 1293
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1298
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 3
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1300
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 9
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1301
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 3
9999 mem: location 1296 is 10
9999 mem: storing 30 in location 1304
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 30
9999 mem: location 1300 is 9
9999 mem: storing 39 in location 1304
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 9480
9999 mem: storing 0 in location 1307
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 9480
9999 mem: location 1292 is 245
9999 mem: storing 9480 in location 1309
9999 mem: storing 245 in location 1310
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 39
9998 run: address to copy to is 1094
9999 mem: location 1309 is 9480
9999 mem: location 1310 is 245
9999 mem: storing 9480 in location 1094
9999 mem: storing 245 in location 1095
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1312
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 1
9998 run: jumping to instruction 80
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 0 in location 1290
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1318 is 9
9999 mem: storing 10 in location 1318
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1318 is 10
9999 mem: location 1319 is 9
9999 mem: storing 0 in location 1326
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1326 is 0
9998 run: jumping to instruction 27
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1316 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1316 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 44 -> 43
9999 mem: storing 0 in location 1316
9999 mem: clearing row:number
9999 mem: storing 0 in location 1317
9999 mem: clearing x:number
9999 mem: storing 0 in location 1318
9999 mem: clearing right:number
9999 mem: storing 0 in location 1319
9999 mem: clearing style:character
9999 mem: storing 0 in location 1320
9999 mem: clearing style-found?:boolean
9999 mem: storing 0 in location 1321
9999 mem: clearing style
9999 mem: storing 0 in location 1320
9999 mem: clearing color:number
9999 mem: storing 0 in location 1322
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1323
9999 mem: clearing color
9999 mem: storing 0 in location 1322
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1324
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1325
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1324
9999 mem: clearing screen
9999 mem: location 1316 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1316
9999 mem: clearing continue?:boolean
9999 mem: storing 0 in location 1326
9999 mem: clearing x
9999 mem: storing 0 in location 1318
9999 mem: automatically abandoning 1313
9999 abandon: updating refcounts inside 1313: (array number)
9999 abandon: saving 1313 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1150 is 3
9999 mem: storing 4 in location 1150
 105 run: clear-screen-from {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1146 is 1008
9999 mem: location 1150 is 4
9999 mem: location 1148 is 0
9999 mem: location 1148 is 0
9999 mem: location 1149 is 9
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1008: 43 -> 44
9999 mem: storing 1008 in location 1003
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1004
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1006
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1007
 106 run: jump-if {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 4
9999 mem: location 1005 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1168
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1169
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1170
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 4
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 0
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1003
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1007 is 9
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1116
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1008: 45 -> 46
9999 mem: storing 1008 in location 1119
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1120
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1119 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 46 -> 47
9999 mem: storing 1008 in location 1168
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1169
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1170
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1169 is 4
9999 mem: location 1170 is 0
9999 mem: clearing screen:address:screen
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 47 -> 46
9999 mem: storing 0 in location 1168
9999 mem: clearing row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing row
9999 mem: storing 0 in location 1169
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 4
9998 run: result 1 is 0
9999 mem: storing 0 in location 1121
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1122
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1124 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1123
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 0
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 46 -> 47
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 0
9999 mem: storing 40 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 40
9998 run: address to copy to is 1096
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1096
9999 mem: storing 7 in location 1097
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 0
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 0
9999 mem: storing 1 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 1
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 1
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 47 -> 48
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 1
9999 mem: storing 41 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 41
9998 run: address to copy to is 1098
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1098
9999 mem: storing 7 in location 1099
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 1
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 1
9999 mem: storing 2 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 2
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 2
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 48 -> 49
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 2
9999 mem: storing 42 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 42
9998 run: address to copy to is 1100
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1100
9999 mem: storing 7 in location 1101
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 2
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 2
9999 mem: storing 3 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 3
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 3
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 49 -> 50
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
9990 schedule: print/clear-line-until/clear-screen-from/editor-render/editor-event-loop/run_1001/scenario_editor-joins-and-wraps-lines-on-backspace
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 3
9999 mem: storing 43 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 43
9998 run: address to copy to is 1102
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1102
9999 mem: storing 7 in location 1103
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 3
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 3
9999 mem: storing 4 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 4
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 3
9999 mem: storing 4 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 4
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 50 -> 51
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 4
9999 mem: storing 44 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 44
9998 run: address to copy to is 1104
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1104
9999 mem: storing 7 in location 1105
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 4
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 4
9999 mem: storing 5 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 5
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 4
9999 mem: storing 5 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 5
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 51 -> 52
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 5
9999 mem: storing 45 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 45
9998 run: address to copy to is 1106
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1106
9999 mem: storing 7 in location 1107
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 5
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 5
9999 mem: storing 6 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 6
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 5
9999 mem: storing 6 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 6
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 52 -> 53
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 6
9999 mem: storing 6 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 6
9999 mem: storing 46 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 46
9998 run: address to copy to is 1108
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1108
9999 mem: storing 7 in location 1109
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 6
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 6
9999 mem: storing 7 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 7
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 6
9999 mem: storing 7 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 7
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 53 -> 54
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 7
9999 mem: storing 7 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 7
9999 mem: storing 47 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 47
9998 run: address to copy to is 1110
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1110
9999 mem: storing 7 in location 1111
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 7
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 7
9999 mem: storing 8 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 7
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 8
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 8 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 7
9999 mem: storing 8 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 8
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 54 -> 55
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 8
9999 mem: storing 8 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 8
9999 mem: storing 48 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 48
9998 run: address to copy to is 1112
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1112
9999 mem: storing 7 in location 1113
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 8
9999 mem: location 1311 is 9
9999 mem: storing 0 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1300 is 8
9999 mem: storing 9 in location 1300
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 8
9999 mem: location 1013 is 1014
9999 mem: location 1300 is 9
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 9 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 8
9999 mem: storing 9 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 9
9999 mem: location 1120 is 9
9999 mem: storing 0 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1119 is 1008
9999 mem: location 1122 is 32
9999 mem: location 1123 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1287
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 55 -> 56
9999 mem: storing 1008 in location 1290
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1291
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1292
9999 mem: storing 1 in location 1293
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1294
9999 mem: storing 1 in location 1295
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1295 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1291 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1290 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1296
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1297
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1298
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1298 is 4
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1297 is 5
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 9
9999 mem: storing 9 in location 1300
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1300 is 9
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1296 is 10
9999 mem: storing 1 in location 1299
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1301
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1298 is 4
9999 mem: location 1296 is 10
9999 mem: storing 40 in location 1304
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1304 is 40
9999 mem: location 1300 is 9
9999 mem: storing 49 in location 1304
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1305 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1305
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 50 in location 1306
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1291 is 32
9999 mem: storing 0 in location 1307
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1291 is 32
9999 mem: location 1292 is 7
9999 mem: storing 32 in location 1309
9999 mem: storing 7 in location 1310
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1304 is 49
9998 run: address to copy to is 1114
9999 mem: location 1309 is 32
9999 mem: location 1310 is 7
9999 mem: storing 32 in location 1114
9999 mem: storing 7 in location 1115
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1296 is 10
9999 mem: storing 9 in location 1311
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1300 is 9
9999 mem: location 1311 is 9
9999 mem: storing 1 in location 1312
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1312 is 1
9998 run: jumping to instruction 80
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1290 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1291
9999 mem: clearing color:number
9999 mem: storing 0 in location 1292
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1293
9999 mem: clearing color
9999 mem: storing 0 in location 1292
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1294
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1295
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1294
9999 mem: clearing width:number
9999 mem: storing 0 in location 1296
9999 mem: clearing height:number
9999 mem: storing 0 in location 1297
9999 mem: clearing row:number
9999 mem: storing 0 in location 1298
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing column:number
9999 mem: storing 0 in location 1300
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing legal?
9999 mem: storing 0 in location 1299
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1301
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1302
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1303
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing row
9999 mem: storing 0 in location 1298
9999 mem: clearing index:number
9999 mem: storing 0 in location 1304
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1305 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1305
9999 mem: clearing len:number
9999 mem: storing 0 in location 1306
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1307
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1308
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: clearing index
9999 mem: storing 0 in location 1304
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: clearing right:number
9999 mem: storing 0 in location 1311
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1312
9999 mem: clearing column
9999 mem: storing 0 in location 1300
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1119
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1121 is 9
9999 mem: storing 10 in location 1121
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1121 is 10
9999 mem: location 1120 is 9
9999 mem: storing 1 in location 1125
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1125 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1119 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 56 -> 55
9999 mem: storing 0 in location 1119
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1120
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1121
9999 mem: clearing space:character
9999 mem: storing 0 in location 1122
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1123
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1124
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1123
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1125
9999 mem: clearing screen
9999 mem: location 1119 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1119
9999 mem: clearing column
9999 mem: storing 0 in location 1121
9999 mem: automatically abandoning 1116
9999 abandon: updating refcounts inside 1116: (array number)
9999 abandon: saving 1116 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: clear-rest-of-screen {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 4
9999 mem: location 1006 is 0
9999 mem: location 1007 is 9
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1327
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1330 is 0
9999 mem: incrementing refcount of 1008: 55 -> 56
9999 mem: storing 1008 in location 1330
 107 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1331
 107 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1332
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 9 in location 1333
 107 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1331 is 4
9999 mem: storing 5 in location 1331
 107 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1330 is 1008
9999 mem: location 1331 is 5
9999 mem: location 1332 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 56 -> 57
9999 mem: storing 1008 in location 1168
 108 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1169
 108 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1170
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 5
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 5 in location 1011
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 0
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1330
 107 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1330 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1189 is 0
9999 mem: incrementing refcount of 1008: 57 -> 58
9999 mem: storing 1008 in location 1189
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1189 is 1008
9998 run: jump-unless fell through
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1190
 108 run: return {height: "number"}
9999 mem: location 1190 is 5
9999 mem: clearing screen:address:screen
9999 mem: location 1189 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 58 -> 57
9999 mem: storing 0 in location 1189
9999 mem: automatically abandoning 1186
9999 abandon: updating refcounts inside 1186: (array number)
9999 abandon: saving 1186 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 5
9999 mem: storing 5 in location 1334
 107 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1331 is 5
9999 mem: location 1334 is 5
9999 mem: storing 1 in location 1335
 107 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1335 is 1
9998 run: jumping to instruction 15
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1330 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1330 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 57 -> 56
9999 mem: storing 0 in location 1330
9999 mem: clearing row:number
9999 mem: storing 0 in location 1331
9999 mem: clearing left:number
9999 mem: storing 0 in location 1332
9999 mem: clearing right:number
9999 mem: storing 0 in location 1333
9999 mem: clearing row
9999 mem: storing 0 in location 1331
9999 mem: clearing screen
9999 mem: location 1330 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1330
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1334
9999 mem: clearing at-bottom-of-screen?:boolean
9999 mem: storing 0 in location 1335
9999 mem: clearing screen
9999 mem: location 1330 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1330
9999 mem: clearing row
9999 mem: storing 0 in location 1331
9999 mem: automatically abandoning 1327
9999 abandon: updating refcounts inside 1327: (array number)
9999 abandon: saving 1327 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 56 -> 55
9999 mem: storing 0 in location 1003
9999 mem: clearing row:number
9999 mem: storing 0 in location 1004
9999 mem: clearing column:number
9999 mem: storing 0 in location 1005
9999 mem: clearing left:number
9999 mem: storing 0 in location 1006
9999 mem: clearing right:number
9999 mem: storing 0 in location 1007
9999 mem: clearing screen
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
 105 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1146 is 1008
9999 mem: location 1147 is 1152
9999 mem: clearing editor:address:editor-data
9999 mem: location 1147 is 1152
9999 mem: skipping refcount at 1152
9999 mem: decrementing refcount of 1152: 11 -> 10
9999 mem: storing 0 in location 1147
9999 mem: clearing left:number
9999 mem: storing 0 in location 1148
9999 mem: clearing right:number
9999 mem: storing 0 in location 1149
9999 mem: clearing row:number
9999 mem: storing 0 in location 1150
9999 mem: clearing column:number
9999 mem: storing 0 in location 1151
9999 mem: clearing row
9999 mem: storing 0 in location 1150
9999 mem: clearing row
9999 mem: storing 0 in location 1150
9999 mem: automatically abandoning 1143
9999 abandon: updating refcounts inside 1143: (array number)
9999 abandon: saving 1143 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1352
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1160
9998 run: its type is "number"
9999 mem: location 1160 is 1
9999 mem: storing 1 in location 1355
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9999 mem: location 1153 is 1171
9999 mem: location 1154 is 1171
9999 mem: location 1155 is 0
9999 mem: location 1156 is 1211
9999 mem: location 1157 is 0
9999 mem: location 1158 is 9
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 7
9999 mem: location 1162 is 1
9999 mem: location 1163 is 1566
9999 mem: location 1164 is 0
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9998 run: address to copy is 1161
9998 run: its type is "number"
9999 mem: location 1161 is 7
9999 mem: storing 7 in location 1356
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1352 is 1008
9999 mem: location 1355 is 1
9999 mem: location 1356 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1165
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1168 is 0
9999 mem: incrementing refcount of 1008: 55 -> 56
9999 mem: storing 1008 in location 1168
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1169
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1170
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1168 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1170 is 7
9999 mem: location 1168 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 7 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1168 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1169
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1170
9999 mem: automatically abandoning 1165
9999 abandon: updating refcounts inside 1165: (array number)
9999 abandon: saving 1165 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1352
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1353 is 1346
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1313
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1316 is 0
9999 mem: incrementing refcount of 1346: 4 -> 5
9999 mem: storing 1346 in location 1316
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1316 is 1346
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 2
9999 mem: location 1348 is 1336
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy is 1347
9998 run: its type is "number"
9999 mem: location 1347 is 2
9999 mem: storing 2 in location 1317
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9999 mem: location 1347 is 2
9999 mem: location 1348 is 1336
9999 mem: location 1316 is 1346
9999 mem: skipping refcount at 1346
9998 run: address to copy is 1348
9998 run: its type is ("address" "array" "event")
9999 mem: location 1348 is 1336
9999 mem: location 1318 is 0
9999 mem: incrementing refcount of 1336: 1 -> 2
9999 mem: storing 1336 in location 1318
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9999 mem: storing 2 in location 1319
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1317 is 2
9999 mem: location 1319 is 2
9999 mem: storing 1 in location 1320
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1320 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1186
9999 mem: location 1321 is 0
9999 mem: incrementing refcount of 1186: 0 -> 1
9999 mem: storing 1186 in location 1321
 105 run: return {dummy: ("address" "event"), "lookup": ()}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1321 is 1186
9999 mem: skipping refcount at 1186
9999 mem: location 1187 is 0
9999 mem: location 1188 is 0
9999 mem: location 1189 is 0
9999 mem: location 1190 is 0
9999 mem: location 1316 is 1346
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1317
9999 mem: clearing buf:address:array:event
9999 mem: location 1318 is 1336
9999 mem: skipping refcount at 1336
9999 mem: decrementing refcount of 1336: 2 -> 1
9999 mem: storing 0 in location 1318
9999 mem: clearing max:number
9999 mem: storing 0 in location 1319
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1320
9999 mem: clearing result
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1317
9999 mem: clearing result:event
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1326
9999 mem: automatically abandoning 1313
9999 abandon: updating refcounts inside 1313: (array number)
9999 abandon: saving 1313 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1346
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1357
9999 mem: storing 0 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 1346 in location 1353
9999 mem: storing 1 in location 1361
9999 mem: storing 1 in location 1362
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1361 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1362 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {console: ("address" "console"), "same-as-ingredient": "1"}, {editor: ("address" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1352 is 1008
9999 mem: location 1353 is 1346
9999 mem: location 1354 is 1152
9999 mem: clearing screen:address:screen
9999 mem: location 1352 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 56 -> 55
9999 mem: storing 0 in location 1352
9999 mem: clearing console:address:console
9999 mem: location 1353 is 1346
9999 mem: skipping refcount at 1346
9999 mem: decrementing refcount of 1346: 5 -> 4
9999 mem: storing 0 in location 1353
9999 mem: clearing editor:address:editor-data
9999 mem: location 1354 is 1152
9999 mem: skipping refcount at 1152
9999 mem: decrementing refcount of 1152: 10 -> 9
9999 mem: storing 0 in location 1354
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1355
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1356
9999 mem: clearing screen
9999 mem: location 1352 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1352
9999 mem: clearing e:event
9999 mem: storing 0 in location 1357
9999 mem: storing 0 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: clearing console:address:console
9999 mem: location 1353 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1353
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1361
9999 mem: clearing quit?:boolean
9999 mem: storing 0 in location 1362
9999 mem: clearing t:touch-event
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: clearing is-touch?:boolean
9999 mem: storing 0 in location 1366
9999 mem: clearing screen
9999 mem: location 1352 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1352
9999 mem: clearing editor
9999 mem: location 1354 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1354
9999 mem: clearing go-render?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing screen
9999 mem: location 1352 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1352
9999 mem: automatically abandoning 1349
9999 abandon: updating refcounts inside 1349: (array number)
9999 abandon: saving 1349 in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .          .\n    .abc defgh↩.\n    .i jkl     .\n    .┈┈┈┈┈┈┈┈┈┈.\n    .          .\n  ": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
