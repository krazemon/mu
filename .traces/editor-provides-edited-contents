9991 parse: --- defining scenario_editor-provides-edited-contents
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {10: "literal", "width": ()}
9993 parse:   ingredient: {5: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "shared" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {5: "literal", "height": ()}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {1: ("address" "shared" "array" "character")}
9992 load: after rewriting: {1: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {1: ("address" "shared" "array" "character")}
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {0: "literal", "left": ()}
9993 parse:   ingredient: {10: "literal", "right": ()}
9993 parse:   product: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {10: "literal", "right": ()}
9993 parse: instruction: assume-console
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    left-click 1, 2\n    type [def]\n  ": "literal-string"}
9992 load: after rewriting: assume-console {"\n    left-click 1, 2\n    type [def]\n  ": "literal-string"}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n    3:address:shared:array:character <- editor-contents 2:address:shared:editor-data\n    4:array:character <- copy *3:address:shared:array:character\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n    3:address:shared:array:character <- editor-contents 2:address:shared:editor-data\n    4:array:character <- copy *3:address:shared:array:character\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    4:array:character <- [abdefc]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    4:array:character <- [abdefc]\n  ": "literal-string"}
9999 parse: recipe scenario_editor-provides-edited-contents has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-provides-edited-contents
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-provides-edited-contents
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-provides-edited-contents
9991 transform: --- deduce types for recipe scenario_editor-provides-edited-contents
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-provides-edited-contents
9991 transform: --- collect surrounding spaces for recipe scenario_editor-provides-edited-contents
9991 transform: --- transform names for recipe scenario_editor-provides-edited-contents
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-provides-edited-contents
9992 transform: instruction {screen: ("address" "shared" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {5: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "shared" "screen")}
9992 transform: instruction {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {10: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe scenario_editor-provides-edited-contents
9991 transform: --- transform braces for recipe scenario_editor-provides-edited-contents
9992 transform: assume-screen ...
9992 transform: new ...
9992 transform: new-editor ...
9992 transform: assume-console ...
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_editor-provides-edited-contents
9991 transform: --- perform checks for recipe scenario_editor-provides-edited-contents
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-provides-edited-contents
9991 transform: --- type-check calls inside recipe scenario_editor-provides-edited-contents
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-provides-edited-contents
9991 transform: --- type-check merge instructions in recipe scenario_editor-provides-edited-contents
9991 transform: --- check types of reply instructions in recipe scenario_editor-provides-edited-contents
9991 transform: --- checking reply instructions against header for scenario_editor-provides-edited-contents
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-provides-edited-contents
 102 run: {screen: ("address" "shared" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {5: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1000
9999 mem: storing 10 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1004
 103 run: {result: ("address" "shared" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1012
9999 mem: storing 1012 in location 1005
9999 mem: incrementing refcount of 1012: 0 -> 1
 103 run: {width: ("address" "number")} <- get-address {result: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1006
 103 run: {width: ("address" "number"), "lookup": ()} <- copy {w: "number"}
9999 mem: location 1003 is 10
9999 mem: location 1006 is 1014
9999 mem: storing 10 in location 1014
 103 run: {height: ("address" "number")} <- get-address {result: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 103 run: {height: ("address" "number"), "lookup": ()} <- copy {h: "number"}
9999 mem: location 1004 is 5
9999 mem: location 1007 is 1013
9999 mem: storing 5 in location 1013
 103 run: {row: ("address" "number")} <- get-address {result: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1008
 103 run: {row: ("address" "number"), "lookup": ()} <- copy {0: "literal"}
9999 mem: location 1008 is 1015
9999 mem: storing 0 in location 1015
 103 run: {column: ("address" "number")} <- get-address {result: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1009
 103 run: {column: ("address" "number"), "lookup": ()} <- copy {0: "literal"}
9999 mem: location 1009 is 1016
9999 mem: storing 0 in location 1016
 103 run: {bufsize: "number"} <- multiply {width: ("address" "number"), "lookup": ()}, {height: ("address" "number"), "lookup": ()}
9999 mem: location 1006 is 1014
9999 mem: location 1014 is 10
9999 mem: location 1007 is 1013
9999 mem: location 1013 is 5
9999 mem: storing 50 in location 1010
 103 run: {buf: ("address" "address" "shared" "array" "screen-cell")} <- get-address {result: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9999 mem: storing 1017 in location 1011
 103 run: {buf: ("address" "address" "shared" "array" "screen-cell"), "lookup": ()} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1010 is 50
9999 mem: array size is 50
9999 mem: allocating size 102
9999 mem: new alloc: 1018
9999 mem: storing 50 in location 1019
9999 mem: location 1011 is 1017
9999 mem: storing 1018 in location 1017
9999 mem: incrementing refcount of 1018: 0 -> 1
 103 run: {result: ("address" "shared" "screen")} <- clear-screen {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1120
9999 mem: storing 10 in location 1121
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1123
9999 mem: incrementing refcount of 1012: 1 -> 2
 104 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1123 is 1012
9998 run: jump-unless fell through
 104 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1123 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1123 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1124
9999 mem: incrementing refcount of 1018: 1 -> 2
 104 run: {max: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1125
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1126
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 0
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 0
9999 mem: storing 1020 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1128 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1020
9999 mem: storing 0 in location 1020
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1128 is 1020
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1021
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 1
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 1
9999 mem: storing 1022 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1128 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1022
9999 mem: storing 0 in location 1022
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1128 is 1022
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1023
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 1
9999 mem: storing 2 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 2
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 2
9999 mem: storing 1024 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1128 is 1024
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1024
9999 mem: storing 0 in location 1024
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1128 is 1024
9998 run: address to copy is 1025
9999 mem: storing 1025 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1025
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 2
9999 mem: storing 3 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 3
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 3
9999 mem: storing 1026 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1026
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1128 is 1026
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1026
9999 mem: storing 0 in location 1026
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1026
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1128 is 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1027
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 3
9999 mem: storing 4 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 4
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 4
9999 mem: storing 1028 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1028
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1128 is 1028
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1028
9999 mem: storing 0 in location 1028
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1028
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1128 is 1028
9998 run: address to copy is 1029
9999 mem: storing 1029 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1029
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 4
9999 mem: storing 5 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 5
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 5
9999 mem: storing 1030 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1128 is 1030
9998 run: address to copy is 1030
9999 mem: storing 1030 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1030
9999 mem: storing 0 in location 1030
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1128 is 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1031
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 5
9999 mem: storing 6 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 6
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 6
9999 mem: storing 1032 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1128 is 1032
9998 run: address to copy is 1032
9999 mem: storing 1032 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1032
9999 mem: storing 0 in location 1032
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1128 is 1032
9998 run: address to copy is 1033
9999 mem: storing 1033 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1033
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 6
9999 mem: storing 7 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 7
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 7
9999 mem: storing 1034 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1128 is 1034
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1034
9999 mem: storing 0 in location 1034
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1128 is 1034
9998 run: address to copy is 1035
9999 mem: storing 1035 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1035
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 7
9999 mem: storing 8 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 8
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 8
9999 mem: storing 1036 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1036
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1128 is 1036
9998 run: address to copy is 1036
9999 mem: storing 1036 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1036
9999 mem: storing 0 in location 1036
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1036
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1128 is 1036
9998 run: address to copy is 1037
9999 mem: storing 1037 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1037
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 8
9999 mem: storing 9 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 9
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 9
9999 mem: storing 1038 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1038
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1128 is 1038
9998 run: address to copy is 1038
9999 mem: storing 1038 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1038
9999 mem: storing 0 in location 1038
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1038
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1128 is 1038
9998 run: address to copy is 1039
9999 mem: storing 1039 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1039
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 9
9999 mem: storing 10 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 10
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 10
9999 mem: storing 1040 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1040
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1128 is 1040
9998 run: address to copy is 1040
9999 mem: storing 1040 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1040
9999 mem: storing 0 in location 1040
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1040
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1128 is 1040
9998 run: address to copy is 1041
9999 mem: storing 1041 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1041
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 10
9999 mem: storing 11 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 11
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 11
9999 mem: storing 1042 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1042
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1128 is 1042
9998 run: address to copy is 1042
9999 mem: storing 1042 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1042
9999 mem: storing 0 in location 1042
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1042
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1128 is 1042
9998 run: address to copy is 1043
9999 mem: storing 1043 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1043
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 11
9999 mem: storing 12 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 12
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 12
9999 mem: storing 1044 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1044
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1128 is 1044
9998 run: address to copy is 1044
9999 mem: storing 1044 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1044
9999 mem: storing 0 in location 1044
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1044
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1128 is 1044
9998 run: address to copy is 1045
9999 mem: storing 1045 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1045
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 12
9999 mem: storing 13 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 13
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 13
9999 mem: storing 1046 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1046
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1128 is 1046
9998 run: address to copy is 1046
9999 mem: storing 1046 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1046
9999 mem: storing 0 in location 1046
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1046
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1128 is 1046
9998 run: address to copy is 1047
9999 mem: storing 1047 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1047
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 13
9999 mem: storing 14 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 14
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 14
9999 mem: storing 1048 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1048
9999 mem: location 1048 is 0
9999 mem: location 1049 is 0
9999 mem: location 1128 is 1048
9998 run: address to copy is 1048
9999 mem: storing 1048 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1048
9999 mem: storing 0 in location 1048
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1048
9999 mem: location 1048 is 0
9999 mem: location 1049 is 0
9999 mem: location 1128 is 1048
9998 run: address to copy is 1049
9999 mem: storing 1049 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1049
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 14
9999 mem: storing 15 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 15
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 15
9999 mem: storing 1050 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1050
9999 mem: location 1050 is 0
9999 mem: location 1051 is 0
9999 mem: location 1128 is 1050
9998 run: address to copy is 1050
9999 mem: storing 1050 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1050
9999 mem: storing 0 in location 1050
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1050
9999 mem: location 1050 is 0
9999 mem: location 1051 is 0
9999 mem: location 1128 is 1050
9998 run: address to copy is 1051
9999 mem: storing 1051 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1051
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 15
9999 mem: storing 16 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 16
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 16
9999 mem: storing 1052 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1052
9999 mem: location 1052 is 0
9999 mem: location 1053 is 0
9999 mem: location 1128 is 1052
9998 run: address to copy is 1052
9999 mem: storing 1052 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1052
9999 mem: storing 0 in location 1052
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1052
9999 mem: location 1052 is 0
9999 mem: location 1053 is 0
9999 mem: location 1128 is 1052
9998 run: address to copy is 1053
9999 mem: storing 1053 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1053
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 16
9999 mem: storing 17 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 17
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 17
9999 mem: storing 1054 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1054
9999 mem: location 1054 is 0
9999 mem: location 1055 is 0
9999 mem: location 1128 is 1054
9998 run: address to copy is 1054
9999 mem: storing 1054 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1054
9999 mem: storing 0 in location 1054
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1054
9999 mem: location 1054 is 0
9999 mem: location 1055 is 0
9999 mem: location 1128 is 1054
9998 run: address to copy is 1055
9999 mem: storing 1055 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1055
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 17
9999 mem: storing 18 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 18
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 18
9999 mem: storing 1056 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1056
9999 mem: location 1056 is 0
9999 mem: location 1057 is 0
9999 mem: location 1128 is 1056
9998 run: address to copy is 1056
9999 mem: storing 1056 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1056
9999 mem: storing 0 in location 1056
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1056
9999 mem: location 1056 is 0
9999 mem: location 1057 is 0
9999 mem: location 1128 is 1056
9998 run: address to copy is 1057
9999 mem: storing 1057 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1057
9999 mem: storing 7 in location 1057
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 18
9999 mem: storing 19 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 19
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 19
9999 mem: storing 1058 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1058
9999 mem: location 1058 is 0
9999 mem: location 1059 is 0
9999 mem: location 1128 is 1058
9998 run: address to copy is 1058
9999 mem: storing 1058 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1058
9999 mem: storing 0 in location 1058
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1058
9999 mem: location 1058 is 0
9999 mem: location 1059 is 0
9999 mem: location 1128 is 1058
9998 run: address to copy is 1059
9999 mem: storing 1059 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1059
9999 mem: storing 7 in location 1059
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 19
9999 mem: storing 20 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 20
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 20
9999 mem: storing 1060 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1060
9999 mem: location 1060 is 0
9999 mem: location 1061 is 0
9999 mem: location 1128 is 1060
9998 run: address to copy is 1060
9999 mem: storing 1060 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1060
9999 mem: storing 0 in location 1060
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1060
9999 mem: location 1060 is 0
9999 mem: location 1061 is 0
9999 mem: location 1128 is 1060
9998 run: address to copy is 1061
9999 mem: storing 1061 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1061
9999 mem: storing 7 in location 1061
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 20
9999 mem: storing 21 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 21
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 21
9999 mem: storing 1062 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1062
9999 mem: location 1062 is 0
9999 mem: location 1063 is 0
9999 mem: location 1128 is 1062
9998 run: address to copy is 1062
9999 mem: storing 1062 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1062
9999 mem: storing 0 in location 1062
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1062
9999 mem: location 1062 is 0
9999 mem: location 1063 is 0
9999 mem: location 1128 is 1062
9998 run: address to copy is 1063
9999 mem: storing 1063 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1063
9999 mem: storing 7 in location 1063
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 21
9999 mem: storing 22 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 22
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 22
9999 mem: storing 1064 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1064
9999 mem: location 1064 is 0
9999 mem: location 1065 is 0
9999 mem: location 1128 is 1064
9998 run: address to copy is 1064
9999 mem: storing 1064 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1064
9999 mem: storing 0 in location 1064
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1064
9999 mem: location 1064 is 0
9999 mem: location 1065 is 0
9999 mem: location 1128 is 1064
9998 run: address to copy is 1065
9999 mem: storing 1065 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1065
9999 mem: storing 7 in location 1065
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 22
9999 mem: storing 23 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 23
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 23
9999 mem: storing 1066 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1066
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1128 is 1066
9998 run: address to copy is 1066
9999 mem: storing 1066 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1066
9999 mem: storing 0 in location 1066
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1066
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1128 is 1066
9998 run: address to copy is 1067
9999 mem: storing 1067 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1067
9999 mem: storing 7 in location 1067
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 23
9999 mem: storing 24 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 24
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 24
9999 mem: storing 1068 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1068
9999 mem: location 1068 is 0
9999 mem: location 1069 is 0
9999 mem: location 1128 is 1068
9998 run: address to copy is 1068
9999 mem: storing 1068 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1068
9999 mem: storing 0 in location 1068
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1068
9999 mem: location 1068 is 0
9999 mem: location 1069 is 0
9999 mem: location 1128 is 1068
9998 run: address to copy is 1069
9999 mem: storing 1069 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1069
9999 mem: storing 7 in location 1069
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 24
9999 mem: storing 25 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 25
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 25
9999 mem: storing 1070 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1070
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1128 is 1070
9998 run: address to copy is 1070
9999 mem: storing 1070 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1070
9999 mem: storing 0 in location 1070
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1070
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1128 is 1070
9998 run: address to copy is 1071
9999 mem: storing 1071 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1071
9999 mem: storing 7 in location 1071
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 25
9999 mem: storing 26 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 26
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 26
9999 mem: storing 1072 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1072
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1128 is 1072
9998 run: address to copy is 1072
9999 mem: storing 1072 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1072
9999 mem: storing 0 in location 1072
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1072
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1128 is 1072
9998 run: address to copy is 1073
9999 mem: storing 1073 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1073
9999 mem: storing 7 in location 1073
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 26
9999 mem: storing 27 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 27
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 27
9999 mem: storing 1074 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1074
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1128 is 1074
9998 run: address to copy is 1074
9999 mem: storing 1074 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1074
9999 mem: storing 0 in location 1074
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1074
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1128 is 1074
9998 run: address to copy is 1075
9999 mem: storing 1075 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1075
9999 mem: storing 7 in location 1075
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 27
9999 mem: storing 28 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 28
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 28
9999 mem: storing 1076 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1076
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1128 is 1076
9998 run: address to copy is 1076
9999 mem: storing 1076 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1076
9999 mem: storing 0 in location 1076
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1076
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1128 is 1076
9998 run: address to copy is 1077
9999 mem: storing 1077 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1077
9999 mem: storing 7 in location 1077
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 28
9999 mem: storing 29 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 29
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 29
9999 mem: storing 1078 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1078
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1128 is 1078
9998 run: address to copy is 1078
9999 mem: storing 1078 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1078
9999 mem: storing 0 in location 1078
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1078
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1128 is 1078
9998 run: address to copy is 1079
9999 mem: storing 1079 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1079
9999 mem: storing 7 in location 1079
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 29
9999 mem: storing 30 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 30
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 30
9999 mem: storing 1080 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1080
9999 mem: location 1080 is 0
9999 mem: location 1081 is 0
9999 mem: location 1128 is 1080
9998 run: address to copy is 1080
9999 mem: storing 1080 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1080
9999 mem: storing 0 in location 1080
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1080
9999 mem: location 1080 is 0
9999 mem: location 1081 is 0
9999 mem: location 1128 is 1080
9998 run: address to copy is 1081
9999 mem: storing 1081 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1081
9999 mem: storing 7 in location 1081
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 30
9999 mem: storing 31 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 31
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 31
9999 mem: storing 1082 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1082
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1128 is 1082
9998 run: address to copy is 1082
9999 mem: storing 1082 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1082
9999 mem: storing 0 in location 1082
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1082
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1128 is 1082
9998 run: address to copy is 1083
9999 mem: storing 1083 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1083
9999 mem: storing 7 in location 1083
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 31
9999 mem: storing 32 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 32
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 32
9999 mem: storing 1084 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1084
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1128 is 1084
9998 run: address to copy is 1084
9999 mem: storing 1084 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1084
9999 mem: storing 0 in location 1084
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1084
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1128 is 1084
9998 run: address to copy is 1085
9999 mem: storing 1085 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1085
9999 mem: storing 7 in location 1085
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 32
9999 mem: storing 33 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 33
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 33
9999 mem: storing 1086 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1086
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1128 is 1086
9998 run: address to copy is 1086
9999 mem: storing 1086 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1086
9999 mem: storing 0 in location 1086
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1086
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1128 is 1086
9998 run: address to copy is 1087
9999 mem: storing 1087 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1087
9999 mem: storing 7 in location 1087
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 33
9999 mem: storing 34 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 34
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 34
9999 mem: storing 1088 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1088
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1128 is 1088
9998 run: address to copy is 1088
9999 mem: storing 1088 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1088
9999 mem: storing 0 in location 1088
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1088
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1128 is 1088
9998 run: address to copy is 1089
9999 mem: storing 1089 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1089
9999 mem: storing 7 in location 1089
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 34
9999 mem: storing 35 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 35
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 35
9999 mem: storing 1090 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1090
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1128 is 1090
9998 run: address to copy is 1090
9999 mem: storing 1090 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1090
9999 mem: storing 0 in location 1090
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1090
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1128 is 1090
9998 run: address to copy is 1091
9999 mem: storing 1091 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1091
9999 mem: storing 7 in location 1091
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 35
9999 mem: storing 36 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 36
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 36
9999 mem: storing 1092 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1092
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1128 is 1092
9998 run: address to copy is 1092
9999 mem: storing 1092 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1092
9999 mem: storing 0 in location 1092
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1092
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1128 is 1092
9998 run: address to copy is 1093
9999 mem: storing 1093 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1093
9999 mem: storing 7 in location 1093
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 36
9999 mem: storing 37 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 37
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 37
9999 mem: storing 1094 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1094
9999 mem: location 1094 is 0
9999 mem: location 1095 is 0
9999 mem: location 1128 is 1094
9998 run: address to copy is 1094
9999 mem: storing 1094 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1094
9999 mem: storing 0 in location 1094
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1094
9999 mem: location 1094 is 0
9999 mem: location 1095 is 0
9999 mem: location 1128 is 1094
9998 run: address to copy is 1095
9999 mem: storing 1095 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1095
9999 mem: storing 7 in location 1095
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 37
9999 mem: storing 38 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 38
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 38
9999 mem: storing 1096 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1096
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1128 is 1096
9998 run: address to copy is 1096
9999 mem: storing 1096 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1096
9999 mem: storing 0 in location 1096
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1096
9999 mem: location 1096 is 0
9999 mem: location 1097 is 0
9999 mem: location 1128 is 1096
9998 run: address to copy is 1097
9999 mem: storing 1097 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1097
9999 mem: storing 7 in location 1097
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 38
9999 mem: storing 39 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 39
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 39
9999 mem: storing 1098 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1098
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1128 is 1098
9998 run: address to copy is 1098
9999 mem: storing 1098 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1098
9999 mem: storing 0 in location 1098
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1098
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1128 is 1098
9998 run: address to copy is 1099
9999 mem: storing 1099 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1099
9999 mem: storing 7 in location 1099
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 39
9999 mem: storing 40 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 40
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 40
9999 mem: storing 1100 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1100
9999 mem: location 1100 is 0
9999 mem: location 1101 is 0
9999 mem: location 1128 is 1100
9998 run: address to copy is 1100
9999 mem: storing 1100 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1100
9999 mem: storing 0 in location 1100
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1100
9999 mem: location 1100 is 0
9999 mem: location 1101 is 0
9999 mem: location 1128 is 1100
9998 run: address to copy is 1101
9999 mem: storing 1101 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1101
9999 mem: storing 7 in location 1101
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 40
9999 mem: storing 41 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 41
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 41
9999 mem: storing 1102 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1102
9999 mem: location 1102 is 0
9999 mem: location 1103 is 0
9999 mem: location 1128 is 1102
9998 run: address to copy is 1102
9999 mem: storing 1102 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1102
9999 mem: storing 0 in location 1102
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1102
9999 mem: location 1102 is 0
9999 mem: location 1103 is 0
9999 mem: location 1128 is 1102
9998 run: address to copy is 1103
9999 mem: storing 1103 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1103
9999 mem: storing 7 in location 1103
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 41
9999 mem: storing 42 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 42
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 42
9999 mem: storing 1104 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1104
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1128 is 1104
9998 run: address to copy is 1104
9999 mem: storing 1104 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1104
9999 mem: storing 0 in location 1104
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1104
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1128 is 1104
9998 run: address to copy is 1105
9999 mem: storing 1105 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1105
9999 mem: storing 7 in location 1105
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 42
9999 mem: storing 43 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 43
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 43
9999 mem: storing 1106 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1106
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1128 is 1106
9998 run: address to copy is 1106
9999 mem: storing 1106 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1106
9999 mem: storing 0 in location 1106
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1106
9999 mem: location 1106 is 0
9999 mem: location 1107 is 0
9999 mem: location 1128 is 1106
9998 run: address to copy is 1107
9999 mem: storing 1107 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1107
9999 mem: storing 7 in location 1107
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 43
9999 mem: storing 44 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 44
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 44
9999 mem: storing 1108 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1108
9999 mem: location 1108 is 0
9999 mem: location 1109 is 0
9999 mem: location 1128 is 1108
9998 run: address to copy is 1108
9999 mem: storing 1108 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1108
9999 mem: storing 0 in location 1108
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1108
9999 mem: location 1108 is 0
9999 mem: location 1109 is 0
9999 mem: location 1128 is 1108
9998 run: address to copy is 1109
9999 mem: storing 1109 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1109
9999 mem: storing 7 in location 1109
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 44
9999 mem: storing 45 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 45
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 45
9999 mem: storing 1110 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1110
9999 mem: location 1110 is 0
9999 mem: location 1111 is 0
9999 mem: location 1128 is 1110
9998 run: address to copy is 1110
9999 mem: storing 1110 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1110
9999 mem: storing 0 in location 1110
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1110
9999 mem: location 1110 is 0
9999 mem: location 1111 is 0
9999 mem: location 1128 is 1110
9998 run: address to copy is 1111
9999 mem: storing 1111 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1111
9999 mem: storing 7 in location 1111
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 45
9999 mem: storing 46 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 46
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 46
9999 mem: storing 1112 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1112
9999 mem: location 1112 is 0
9999 mem: location 1113 is 0
9999 mem: location 1128 is 1112
9998 run: address to copy is 1112
9999 mem: storing 1112 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1112
9999 mem: storing 0 in location 1112
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1112
9999 mem: location 1112 is 0
9999 mem: location 1113 is 0
9999 mem: location 1128 is 1112
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1113
9999 mem: storing 7 in location 1113
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 46
9999 mem: storing 47 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 47
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 47
9999 mem: storing 1114 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1114
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1128 is 1114
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1114
9999 mem: storing 0 in location 1114
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1114
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1128 is 1114
9998 run: address to copy is 1115
9999 mem: storing 1115 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1115
9999 mem: storing 7 in location 1115
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 47
9999 mem: storing 48 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 48
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 48
9999 mem: storing 1116 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1116
9999 mem: location 1116 is 0
9999 mem: location 1117 is 0
9999 mem: location 1128 is 1116
9998 run: address to copy is 1116
9999 mem: storing 1116 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1116
9999 mem: storing 0 in location 1116
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1116
9999 mem: location 1116 is 0
9999 mem: location 1117 is 0
9999 mem: location 1128 is 1116
9998 run: address to copy is 1117
9999 mem: storing 1117 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1117
9999 mem: storing 7 in location 1117
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 48
9999 mem: storing 49 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 49
9999 mem: location 1125 is 50
9999 mem: storing 0 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1124 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1126 is 49
9999 mem: storing 1118 in location 1128
 104 run: {curr-content: ("address" "character")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1128 is 1118
9999 mem: location 1118 is 0
9999 mem: location 1119 is 0
9999 mem: location 1128 is 1118
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1129
 104 run: {curr-content: ("address" "character"), "lookup": ()} <- copy {0: "literal", "empty": ()}
9999 mem: location 1129 is 1118
9999 mem: storing 0 in location 1118
 104 run: {curr-color: ("address" "number")} <- get-address {curr: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1128 is 1118
9999 mem: location 1118 is 0
9999 mem: location 1119 is 0
9999 mem: location 1128 is 1118
9998 run: address to copy is 1119
9999 mem: storing 1119 in location 1130
 104 run: {curr-color: ("address" "number"), "lookup": ()} <- copy {7: "literal", "white": ()}
9999 mem: location 1130 is 1119
9999 mem: storing 7 in location 1119
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1126 is 49
9999 mem: storing 50 in location 1126
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1126 is 50
9999 mem: location 1125 is 50
9999 mem: storing 1 in location 1127
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1127 is 1
9998 run: jumping to instruction 17
 104 run: {x: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1123 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1123 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1131
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {0: "literal"}
9999 mem: location 1131 is 1015
9999 mem: storing 0 in location 1015
 104 run: {x: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1123 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1123 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1131
 104 run: {x: ("address" "number"), "lookup": ()} <- copy {0: "literal"}
9999 mem: location 1131 is 1016
9999 mem: storing 0 in location 1016
 104 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1123 is 1012
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 2 -> 1
9999 mem: storing 1012 in location 1005
9999 mem: incrementing refcount of 1012: 1 -> 2
 103 run: reply {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1012
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 900
9999 mem: incrementing refcount of 1012: 2 -> 3
 102 run: {1: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9999 mem: new string alloc: 1132
9999 mem: storing 1132 in location 1
9999 mem: incrementing refcount of 1132: 0 -> 1
 102 run: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {10: "literal", "right": ()}
9999 mem: location 1 is 1132
9999 mem: location 900 is 1012
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1137
9999 mem: storing 11 in location 1138
 103 run: {s: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1132 in location 1140
9999 mem: incrementing refcount of 1132: 1 -> 2
 103 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1141
9999 mem: incrementing refcount of 1012: 3 -> 4
 103 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1142
 103 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1143
 103 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1143 is 10
9999 mem: storing 9 in location 1143
 103 run: {result: ("address" "shared" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1150
9999 mem: storing 1150 in location 1144
9999 mem: incrementing refcount of 1150: 0 -> 1
 103 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1157 is 0
9999 mem: location 1158 is 0
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9999 mem: storing 1155 in location 1145
 103 run: {x: ("address" "number"), "lookup": ()} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: location 1145 is 1155
9999 mem: storing 0 in location 1155
 103 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 0
9999 mem: location 1157 is 0
9999 mem: location 1158 is 0
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9999 mem: storing 1156 in location 1145
 103 run: {x: ("address" "number"), "lookup": ()} <- copy {right: "number"}
9999 mem: location 1143 is 9
9999 mem: location 1145 is 1156
9999 mem: storing 9 in location 1156
 103 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 0
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1145
 103 run: {x: ("address" "number"), "lookup": ()} <- copy {1: "literal", "top": ()}
9999 mem: location 1145 is 1158
9999 mem: storing 1 in location 1158
 103 run: {x: ("address" "number")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1145
9990 schedule: new-editor/scenario_editor-provides-edited-contents
 103 run: {x: ("address" "number"), "lookup": ()} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: location 1145 is 1159
9999 mem: storing 0 in location 1159
 103 run: {init: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 0
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1151
9999 mem: storing 1151 in location 1146
 103 run: {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1163
9999 mem: storing 4 in location 1164
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1166
 104 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1167
 104 run: {result: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1169
9999 mem: storing 1169 in location 1168
9999 mem: incrementing refcount of 1169: 0 -> 1
 104 run: {result: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "shared" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1166 is 167
9999 mem: location 1167 is 0
9999 mem: location 1168 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1168 is 1169
9999 mem: skipping refcount at 1169
9999 mem: storing 167 in location 1170
9999 mem: storing 0 in location 1171
9999 mem: storing 0 in location 1172
 104 run: jump-unless {in: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1167 is 0
9998 run: jumping to instruction 8
 104 run: return {result: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1168 is 1169
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1169
9999 mem: location 1146 is 1151
9999 mem: storing 1169 in location 1151
9999 mem: incrementing refcount of 1169: 1 -> 2
 103 run: {top-of-screen: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 0
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9999 mem: storing 1152 in location 1147
 103 run: {top-of-screen: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1146 is 1151
9999 mem: location 1151 is 1169
9999 mem: location 1147 is 1152
9999 mem: storing 1169 in location 1152
9999 mem: incrementing refcount of 1169: 2 -> 3
 103 run: {y: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 0
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1148
 103 run: {y: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1146 is 1151
9999 mem: location 1151 is 1169
9999 mem: location 1148 is 1154
9999 mem: storing 1169 in location 1154
9999 mem: incrementing refcount of 1169: 3 -> 4
 103 run: {result: ("address" "shared" "editor-data")} <- insert-text {result: ("address" "shared" "editor-data")}, {s: ("address" "shared" "array" "character")}
9999 mem: location 1144 is 1150
9999 mem: location 1140 is 1132
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1173
9999 mem: storing 8 in location 1174
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1176
9999 mem: incrementing refcount of 1150: 1 -> 2
 104 run: {text: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1132 in location 1177
9999 mem: incrementing refcount of 1132: 2 -> 3
 104 run: jump-if {text: ("address" "shared" "array" "character")}, {1: "offset"}
9999 mem: location 1177 is 1132
9998 run: jumping to instruction 5
 104 run: {len: "number"} <- length {text: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1177 is 1132
9999 mem: skipping refcount at 1132
9999 mem: storing 3 in location 1178
 104 run: jump-if {len: "number"}, {1: "offset"}
9999 mem: location 1178 is 3
9998 run: jumping to instruction 8
 104 run: {idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1179
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1176 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1176 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1151
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1151 is 1169
9999 mem: storing 1169 in location 1180
9999 mem: incrementing refcount of 1169: 4 -> 5
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1179 is 0
9999 mem: location 1178 is 3
9999 mem: storing 0 in location 1181
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1177 is 1132
9999 mem: skipping refcount at 1132
9998 run: base address is 1133
9999 mem: location 1179 is 0
9998 run: address to copy is 1134
9998 run: its type is character
9999 mem: location 1134 is 97
9999 mem: storing 97 in location 1182
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1182 is 97
9999 mem: location 1180 is 1169
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1183
9999 mem: storing 5 in location 1184
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1186
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1169 in location 1187
9999 mem: incrementing refcount of 1169: 5 -> 6
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1190
9999 mem: storing 1190 in location 1188
9999 mem: incrementing refcount of 1190: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1188 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 0
9999 mem: location 1192 is 0
9999 mem: location 1193 is 0
9999 mem: location 1186 is 97
9999 mem: location 1188 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy to is 1191
9999 mem: storing 97 in location 1191
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1187 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 0
9999 mem: location 1172 is 0
9999 mem: location 1187 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy is 1171
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1171 is 0
9999 mem: storing 0 in location 1189
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1187 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 0
9999 mem: location 1172 is 0
9999 mem: location 1188 is 1190
9999 mem: location 1187 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy to is 1171
9999 mem: storing 1190 in location 1171
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 0
9999 mem: location 1193 is 0
9999 mem: location 1187 is 1169
9999 mem: location 1188 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy to is 1193
9999 mem: storing 1169 in location 1193
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 0
9999 mem: location 1193 is 1169
9999 mem: location 1189 is 0
9999 mem: location 1188 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy to is 1192
9999 mem: storing 0 in location 1192
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1187 is 1169
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1180 is 1169
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1194
9999 mem: storing 3 in location 1195
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1169 in location 1197
9999 mem: incrementing refcount of 1169: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1169
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 1190
9999 mem: location 1172 is 0
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy is 1171
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1171 is 1190
9999 mem: storing 1190 in location 1198
9999 mem: incrementing refcount of 1190: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1190
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1190
9999 mem: decrementing refcount of 1169: 7 -> 6
9999 mem: storing 1190 in location 1180
9999 mem: incrementing refcount of 1190: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1179 is 0
9999 mem: storing 1 in location 1179
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1179 is 1
9999 mem: location 1178 is 3
9999 mem: storing 0 in location 1181
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1177 is 1132
9999 mem: skipping refcount at 1132
9998 run: base address is 1133
9999 mem: location 1179 is 1
9998 run: address to copy is 1135
9998 run: its type is character
9999 mem: location 1135 is 98
9999 mem: storing 98 in location 1182
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1182 is 98
9999 mem: location 1180 is 1190
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1183
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1186
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1190 in location 1187
9999 mem: incrementing refcount of 1190: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1199
9999 mem: storing 1199 in location 1188
9999 mem: incrementing refcount of 1199: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1188 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 0
9999 mem: location 1201 is 0
9999 mem: location 1202 is 0
9999 mem: location 1186 is 98
9999 mem: location 1188 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1200
9999 mem: storing 98 in location 1200
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1187 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 0
9999 mem: location 1193 is 1169
9999 mem: location 1187 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1192
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1192 is 0
9999 mem: storing 0 in location 1189
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1187 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 0
9999 mem: location 1193 is 1169
9999 mem: location 1188 is 1199
9999 mem: location 1187 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy to is 1192
9999 mem: storing 1199 in location 1192
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 0
9999 mem: location 1202 is 0
9999 mem: location 1187 is 1190
9999 mem: location 1188 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1202
9999 mem: storing 1190 in location 1202
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 0
9999 mem: location 1202 is 1190
9999 mem: location 1189 is 0
9999 mem: location 1188 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1201
9999 mem: storing 0 in location 1201
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1187 is 1190
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1180 is 1190
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1190 in location 1197
9999 mem: incrementing refcount of 1190: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1190
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1192
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1192 is 1199
9999 mem: storing 1199 in location 1198
9999 mem: incrementing refcount of 1199: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1199
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1199
9999 mem: decrementing refcount of 1190: 5 -> 4
9999 mem: storing 1199 in location 1180
9999 mem: incrementing refcount of 1199: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1179 is 1
9999 mem: storing 2 in location 1179
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1179 is 2
9999 mem: location 1178 is 3
9999 mem: storing 0 in location 1181
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1177 is 1132
9999 mem: skipping refcount at 1132
9998 run: base address is 1133
9999 mem: location 1179 is 2
9998 run: address to copy is 1136
9998 run: its type is character
9999 mem: location 1136 is 99
9999 mem: storing 99 in location 1182
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1182 is 99
9999 mem: location 1180 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1183
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1186
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1187
9999 mem: incrementing refcount of 1199: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1203
9999 mem: storing 1203 in location 1188
9999 mem: incrementing refcount of 1203: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1188 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 0
9999 mem: location 1205 is 0
9999 mem: location 1206 is 0
9999 mem: location 1186 is 99
9999 mem: location 1188 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1204
9999 mem: storing 99 in location 1204
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 0
9999 mem: location 1202 is 1190
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 0
9999 mem: storing 0 in location 1189
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 0
9999 mem: location 1202 is 1190
9999 mem: location 1188 is 1203
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1201
9999 mem: storing 1203 in location 1201
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 0
9999 mem: location 1187 is 1199
9999 mem: location 1188 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1206
9999 mem: storing 1199 in location 1206
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1189 is 0
9999 mem: location 1188 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1205
9999 mem: storing 0 in location 1205
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1187 is 1199
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1180 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1197
9999 mem: incrementing refcount of 1199: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1199
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1199: 5 -> 4
9999 mem: storing 1203 in location 1180
9999 mem: incrementing refcount of 1203: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1179 is 2
9999 mem: storing 3 in location 1179
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1179 is 3
9999 mem: location 1178 is 3
9999 mem: storing 1 in location 1181
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1181 is 1
9998 run: jumping to instruction 18
 104 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1176 is 1150
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1150
9999 mem: decrementing refcount of 1150: 2 -> 1
9999 mem: storing 1150 in location 1144
9999 mem: incrementing refcount of 1150: 1 -> 2
 103 run: {y: ("address" "address" "shared" "duplex-list" "character")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1148
 103 run: {y: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {init: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1146 is 1151
9999 mem: location 1151 is 1169
9999 mem: location 1148 is 1154
9999 mem: decrementing refcount of 1169: 6 -> 5
9999 mem: storing 1169 in location 1154
9999 mem: incrementing refcount of 1169: 5 -> 6
 103 run: _, _, {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")} <- render {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")}
9999 mem: location 1141 is 1012
9999 mem: location 1144 is 1150
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 28
9999 mem: allocating size 30
9999 mem: new alloc: 1207
9999 mem: storing 28 in location 1208
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1210
9999 mem: incrementing refcount of 1012: 4 -> 5
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1211
9999 mem: incrementing refcount of 1150: 2 -> 3
 104 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1211 is 1150
9998 run: jumping to instruction 5
 104 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1212
 104 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1210 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 5 -> 6
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 105 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 5
9999 mem: storing 5 in location 1213
 104 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1214
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1215
9999 mem: incrementing refcount of 1169: 6 -> 7
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1215 is 1169
9999 mem: storing 1169 in location 1216
9999 mem: incrementing refcount of 1169: 7 -> 8
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1215 is 1169
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1169 in location 1197
9999 mem: incrementing refcount of 1169: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1169
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 1190
9999 mem: location 1172 is 0
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy is 1171
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1171 is 1190
9999 mem: storing 1190 in location 1198
9999 mem: incrementing refcount of 1190: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1190
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1190
9999 mem: decrementing refcount of 1169: 9 -> 8
9999 mem: storing 1190 in location 1215
9999 mem: incrementing refcount of 1190: 5 -> 6
 104 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1217
 104 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1218
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1212 is 0
9999 mem: storing 0 in location 1219
 104 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1220
 104 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1221
 104 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1222
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1210 is 1012
9999 mem: location 1218 is 1
9999 mem: location 1219 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1237
9999 mem: storing 6 in location 1238
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 6 -> 7
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1242
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 105 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 105 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 0
9999 mem: location 1244 is 1016
9999 mem: storing 0 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 7 -> 6
9999 mem: storing 1012 in location 1210
9999 mem: incrementing refcount of 1012: 6 -> 7
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1190
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 0
9999 mem: location 1221 is 1159
9999 mem: location 1159 is 0
9999 mem: storing 1 in location 1225
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 1
9998 run: jump-unless fell through
 104 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1216 is 1169
9999 mem: location 1222 is 1154
9999 mem: decrementing refcount of 1169: 8 -> 7
9999 mem: storing 1169 in location 1154
9999 mem: incrementing refcount of 1169: 7 -> 8
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1215 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1191
9998 run: its type is "character"
9999 mem: location 1191 is 97
9999 mem: storing 97 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1000
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1003
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1004
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1003 is 7
9999 mem: storing 1 in location 1005
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1004 is 97
9999 mem: storing 0 in location 1006
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1006 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1003 is 7
9999 mem: storing 0 in location 1007
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1007 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1004 is 97
9999 mem: storing 0 in location 1009
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1003 is 7
9999 mem: storing 0 in location 1010
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1010 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1003 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 97
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 0
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1012
9999 mem: location 1226 is 97
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 mem: new alloc: 1245
9999 mem: storing 25 in location 1246
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 7 -> 8
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1249
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1250
9999 mem: storing 1 in location 1251
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 97
  90 print-character: 97 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 105 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 0
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 0
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 97
9999 mem: storing 0 in location 1259
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 105 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 105 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 0
9999 mem: storing 10 in location 1262
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 2 -> 3
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 97
9999 mem: storing 0 in location 1265
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 10
9999 mem: storing 1040 in location 1267
 105 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1040
9999 mem: location 1040 is 0
9999 mem: location 1041 is 7
9999 mem: location 1267 is 1040
9998 run: address to copy is 1040
9999 mem: storing 1040 in location 1268
 105 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 97
9999 mem: location 1268 is 1040
9999 mem: storing 97 in location 1040
 105 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1040
9999 mem: location 1040 is 97
9999 mem: location 1041 is 7
9999 mem: location 1267 is 1040
9998 run: address to copy is 1041
9999 mem: storing 1041 in location 1269
 105 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1041
9999 mem: storing 7 in location 1041
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 0
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 105 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 0
9999 mem: location 1258 is 1016
9999 mem: storing 1 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1215 is 1190
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1190 in location 1197
9999 mem: incrementing refcount of 1190: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1190
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1192
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1192 is 1199
9999 mem: storing 1199 in location 1198
9999 mem: incrementing refcount of 1199: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1199
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1199
9999 mem: decrementing refcount of 1190: 7 -> 6
9999 mem: storing 1199 in location 1215
9999 mem: incrementing refcount of 1199: 5 -> 6
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1216 is 1169
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1169 in location 1197
9999 mem: incrementing refcount of 1169: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1169
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 1190
9999 mem: location 1172 is 0
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy is 1171
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1171 is 1190
9999 mem: storing 1190 in location 1198
9999 mem: incrementing refcount of 1190: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1190
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1190
9999 mem: decrementing refcount of 1169: 9 -> 8
9999 mem: storing 1190 in location 1216
9999 mem: incrementing refcount of 1190: 7 -> 8
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 0
9999 mem: storing 1 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1199
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 1
9999 mem: location 1221 is 1159
9999 mem: location 1159 is 0
9999 mem: storing 0 in location 1225
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1215 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 98
9999 mem: storing 98 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1000
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1003
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1004
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1003 is 7
9999 mem: storing 1 in location 1005
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1004 is 98
9999 mem: storing 0 in location 1006
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1006 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1003 is 7
9999 mem: storing 0 in location 1007
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1007 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1004 is 98
9999 mem: storing 0 in location 1009
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1003 is 7
9999 mem: storing 0 in location 1010
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1010 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1003 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 98
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 1
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1012
9999 mem: location 1226 is 98
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 8 -> 9
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1249
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1250
9999 mem: storing 1 in location 1251
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 98
  90 print-character: 98 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 105 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 1
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 1
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 98
9999 mem: storing 0 in location 1259
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 105 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 105 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 1
9999 mem: storing 11 in location 1262
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 3 -> 4
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 98
9999 mem: storing 0 in location 1265
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 11
9999 mem: storing 1042 in location 1267
 105 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1042
9999 mem: location 1042 is 0
9999 mem: location 1043 is 7
9999 mem: location 1267 is 1042
9998 run: address to copy is 1042
9999 mem: storing 1042 in location 1268
 105 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 98
9999 mem: location 1268 is 1042
9999 mem: storing 98 in location 1042
 105 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1042
9999 mem: location 1042 is 98
9999 mem: location 1043 is 7
9999 mem: location 1267 is 1042
9998 run: address to copy is 1043
9999 mem: storing 1043 in location 1269
 105 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1043
9999 mem: storing 7 in location 1043
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 1
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 105 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 1
9999 mem: location 1258 is 1016
9999 mem: storing 2 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1215 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1197
9999 mem: incrementing refcount of 1199: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1199
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 3 -> 4
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1199: 7 -> 6
9999 mem: storing 1203 in location 1215
9999 mem: incrementing refcount of 1203: 4 -> 5
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1216 is 1190
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1190 in location 1197
9999 mem: incrementing refcount of 1190: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1190
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1192
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1192 is 1199
9999 mem: storing 1199 in location 1198
9999 mem: incrementing refcount of 1199: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1199
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1199
9999 mem: decrementing refcount of 1190: 9 -> 8
9999 mem: storing 1199 in location 1216
9999 mem: incrementing refcount of 1199: 7 -> 8
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 1
9999 mem: storing 2 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 1203
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1213 is 5
9999 mem: storing 0 in location 1223
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1223 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1224
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 2
9999 mem: location 1221 is 1159
9999 mem: location 1159 is 0
9999 mem: storing 0 in location 1225
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1225 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1215 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 99
9999 mem: storing 99 in location 1226
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1217 is 7
9999 mem: location 1226 is 99
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1000
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1003
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1004
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1003 is 7
9999 mem: storing 1 in location 1005
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1004 is 99
9999 mem: storing 0 in location 1006
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1006 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1003 is 7
9999 mem: storing 0 in location 1007
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1007 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1004 is 99
9999 mem: storing 0 in location 1009
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1003 is 7
9999 mem: storing 0 in location 1010
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1010 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1003 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1217
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1226 is 99
9999 mem: storing 0 in location 1227
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1227 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1219 is 2
9999 mem: location 1214 is 9
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1210 is 1012
9999 mem: location 1226 is 99
9999 mem: location 1217 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 9 -> 10
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1249
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1250
9999 mem: storing 1 in location 1251
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 99
  90 print-character: 99 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 105 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 105 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1259
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 105 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 105 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: storing 12 in location 1262
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 4 -> 5
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1265
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 12
9999 mem: storing 1044 in location 1267
 105 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1044
9999 mem: location 1044 is 0
9999 mem: location 1045 is 7
9999 mem: location 1267 is 1044
9998 run: address to copy is 1044
9999 mem: storing 1044 in location 1268
 105 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 99
9999 mem: location 1268 is 1044
9999 mem: storing 99 in location 1044
 105 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1044
9999 mem: location 1044 is 99
9999 mem: location 1045 is 7
9999 mem: location 1267 is 1044
9998 run: address to copy is 1045
9999 mem: storing 1045 in location 1269
 105 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1045
9999 mem: storing 7 in location 1045
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 105 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: location 1258 is 1016
9999 mem: storing 3 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1215 is 1203
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1203 in location 1197
9999 mem: incrementing refcount of 1203: 5 -> 6
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1203
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: storing 0 in location 1198
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1203: 6 -> 5
9999 mem: storing 0 in location 1215
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1216 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1197
9999 mem: incrementing refcount of 1199: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1199
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 5 -> 6
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1199: 9 -> 8
9999 mem: storing 1203 in location 1216
9999 mem: incrementing refcount of 1203: 6 -> 7
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1219 is 2
9999 mem: storing 3 in location 1219
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 68
 104 run: {bottom-of-screen: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1153
9999 mem: storing 1153 in location 1231
 104 run: {bottom-of-screen: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1215 is 0
9999 mem: location 1231 is 1153
9999 mem: storing 0 in location 1153
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1224
 104 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1219 is 3
9999 mem: location 1221 is 1159
9999 mem: location 1159 is 0
9999 mem: storing 0 in location 1232
 104 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1224 is 1
9999 mem: location 1232 is 0
9999 mem: storing 0 in location 1233
 104 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1218 is 1
9999 mem: location 1220 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 0 in location 1234
 104 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1233 is 0
9999 mem: location 1234 is 0
9999 mem: storing 0 in location 1235
 104 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1235 is 0
9998 run: jumping to instruction 81
 104 run: {bottom: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1211 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1157
9999 mem: storing 1157 in location 1236
 104 run: {bottom: ("address" "number"), "lookup": ()} <- copy {row: "number"}
9999 mem: location 1218 is 1
9999 mem: location 1236 is 1157
9999 mem: storing 1 in location 1157
 104 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1218 is 1
9999 mem: location 1219 is 3
9999 mem: location 1210 is 1012
9999 mem: location 1211 is 1150
9999 abandon: saving in free-list of size 30
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9998 run: result 1 is 3
9998 run: result 2 is 1012
9998 run: result 3 is 1150
9999 mem: decrementing refcount of 1012: 10 -> 9
9999 mem: storing 1012 in location 1141
9999 mem: incrementing refcount of 1012: 9 -> 10
9999 mem: decrementing refcount of 1150: 3 -> 2
9999 mem: storing 1150 in location 1144
9999 mem: incrementing refcount of 1150: 2 -> 3
 103 run: {indent?: ("address" "boolean")} <- get-address {result: ("address" "shared" "editor-data"), "lookup": ()}, {indent?: "offset"}
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1144 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1160
9999 mem: storing 1160 in location 1149
 103 run: {indent?: ("address" "boolean"), "lookup": ()} <- copy {1: "literal", "true": ()}
9999 mem: location 1149 is 1160
9999 mem: storing 1 in location 1160
 103 run: reply {result: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1144 is 1150
9999 mem: location 1141 is 1012
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1150
9999 mem: storing 1150 in location 2
9999 mem: incrementing refcount of 1150: 3 -> 4
 102 run: assume-console {"\n    left-click 1, 2\n    type [def]\n  ": "literal-string"}
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "literal"}
9993 parse:   ingredient: {2: "literal"}
9992 load: after rewriting: left-click {1: "literal"}, {2: "literal"}
9993 parse: instruction: type
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"def": "literal-string"}
9992 load: after rewriting: type {"def": "literal-string"}
9999 mem: storing 'left-click' event starting at 1274
9999 mem: storing 'type' event starting at 1278
9999 mem: storing 'text' tag at 1278
9999 mem: storing character 100 at 1279
9999 mem: storing 'text' tag at 1282
9999 mem: storing character 101 at 1283
9999 mem: storing 'text' tag at 1286
9999 mem: storing character 102 at 1287
9999 mem: storing console in 1290
9999 mem: storing console data in 1292
 102 run: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n    3:address:shared:array:character <- editor-contents 2:address:shared:editor-data\n    4:array:character <- copy *3:address:shared:array:character\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {console: ("address" "shared" "console")}
9993 parse:   ingredient: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9993 parse: instruction: editor-contents
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {2: ("address" "shared" "editor-data")}
9993 parse:   product: {3: ("address" "shared" "array" "character")}
9992 load: after rewriting: {3: ("address" "shared" "array" "character")} <- editor-contents {2: ("address" "shared" "editor-data")}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: ("address" "shared" "array" "character"), "lookup": ()}
9993 parse:   product: {4: ("array" "character")}
9992 load: after rewriting: {4: ("array" "character")} <- copy {3: ("address" "shared" "array" "character"), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "shared" "screen")
9992 transform: console => ("address" "shared" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")} -> {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")}
9992 transform: instruction {3: ("address" "shared" "array" "character")} <- editor-contents {2: ("address" "shared" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-contents {editor: ("address" "shared" "editor-data")} -> {result: ("address" "shared" "array" "character")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform: editor-contents ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 mem: location 900 is 1012
9999 mem: location 901 is 1290
9999 mem: location 2 is 1150
9999 trace: incrementing callstack depth to 3
9990 schedule: editor-event-loop/run_1001/scenario_editor-provides-edited-contents
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 1293
9999 mem: storing 14 in location 1294
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 10 -> 11
 104 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1290 in location 1297
9999 mem: incrementing refcount of 1290: 0 -> 1
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1298
9999 mem: incrementing refcount of 1150: 4 -> 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1299
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9998 run: its type is "number"
9999 mem: location 1159 is 0
9999 mem: storing 0 in location 1300
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1296 is 1012
9999 mem: location 1299 is 1
9999 mem: location 1300 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 11 -> 12
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1242
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 105 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 105 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 0
9999 mem: location 1244 is 1016
9999 mem: storing 0 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 12 -> 11
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 11 -> 12
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1297 is 1290
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1309
9999 mem: storing 12 in location 1310
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1290 in location 1312
9999 mem: incrementing refcount of 1290: 1 -> 2
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1312 is 1290
9998 run: jump-unless fell through
 105 run: {current-event-index: ("address" "number")} <- get-address {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 0
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1291
9999 mem: storing 1291 in location 1313
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 0
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1292
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1292 is 1272
9999 mem: storing 1272 in location 1314
9999 mem: incrementing refcount of 1272: 1 -> 2
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9999 mem: storing 4 in location 1315
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: ("address" "number"), "lookup": ()}, {max: "number"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 0
9999 mem: location 1315 is 4
9999 mem: storing 0 in location 1316
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: ("address" "number"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9998 run: base address is 1273
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 0
9998 run: address to copy is 1274
9998 run: its type is event
9999 mem: location 1274 is 2
9999 mem: location 1275 is 65513
9999 mem: location 1276 is 1
9999 mem: location 1277 is 2
9999 mem: storing 2 in location 1318
9999 mem: storing 65513 in location 1319
9999 mem: storing 1 in location 1320
9999 mem: storing 2 in location 1321
 105 run: {current-event-index: ("address" "number"), "lookup": ()} <- add {current-event-index: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 0
9999 mem: location 1313 is 1291
9999 mem: storing 1 in location 1291
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1318 is 2
9999 mem: location 1319 is 65513
9999 mem: location 1320 is 1
9999 mem: location 1321 is 2
9999 mem: location 1312 is 1290
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 1, 2]
9998 run: result 1 is 1290
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1301
9999 mem: storing 65513 in location 1302
9999 mem: storing 1 in location 1303
9999 mem: storing 2 in location 1304
9999 mem: decrementing refcount of 1290: 2 -> 1
9999 mem: storing 1290 in location 1297
9999 mem: incrementing refcount of 1290: 1 -> 2
9999 mem: storing 1 in location 1305
9999 mem: storing 0 in location 1306
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: ("address" "touch-event")} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1301 is 2
9999 mem: location 1302 is 65513
9999 mem: location 1303 is 1
9999 mem: location 1304 is 2
9999 mem: storing 1302 in location 1307
 104 run: jump-unless {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1307 is 1302
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {t: ("address" "touch-event"), "lookup": ()}
9999 mem: location 1296 is 1012
9999 mem: location 1298 is 1150
9999 mem: location 1307 is 1302
9999 mem: location 1302 is 65513
9999 mem: location 1303 is 1
9999 mem: location 1304 is 2
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 27
9999 mem: allocating size 29
9999 mem: new alloc: 1323
9999 mem: storing 27 in location 1324
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1326
9999 mem: incrementing refcount of 1012: 12 -> 13
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1327
9999 mem: incrementing refcount of 1150: 5 -> 6
 105 run: {t: "touch-event"} <- next-ingredient-without-typechecking 
9999 mem: storing 65513 in location 1328
9999 mem: storing 1 in location 1329
9999 mem: storing 2 in location 1330
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1327 is 1150
9998 run: jumping to instruction 6
 105 run: {click-row: "number"} <- get {t: "touch-event"}, {row: "offset"}
9999 mem: location 1328 is 65513
9999 mem: location 1329 is 1
9999 mem: location 1330 is 2
9998 run: address to copy is 1329
9998 run: its type is "number"
9999 mem: location 1329 is 1
9999 mem: storing 1 in location 1331
 105 run: jump-if {click-row: "number"}, {1: "offset"}
9999 mem: location 1331 is 1
9998 run: jumping to instruction 9
 105 run: {click-column: "number"} <- get {t: "touch-event"}, {column: "offset"}
9999 mem: location 1328 is 65513
9999 mem: location 1329 is 1
9999 mem: location 1330 is 2
9998 run: address to copy is 1330
9998 run: its type is "number"
9999 mem: location 1330 is 2
9999 mem: storing 2 in location 1332
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1333
 105 run: {too-far-left?: "boolean"} <- lesser-than {click-column: "number"}, {left: "number"}
9999 mem: location 1332 is 2
9999 mem: location 1333 is 0
9999 mem: storing 0 in location 1334
 105 run: jump-unless {too-far-left?: "boolean"}, {1: "offset"}
9999 mem: location 1334 is 0
9998 run: jumping to instruction 14
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1335
 105 run: {too-far-right?: "boolean"} <- greater-than {click-column: "number"}, {right: "number"}
9999 mem: location 1332 is 2
9999 mem: location 1335 is 9
9999 mem: storing 0 in location 1336
 105 run: jump-unless {too-far-right?: "boolean"}, {1: "offset"}
9999 mem: location 1336 is 0
9998 run: jumping to instruction 18
 105 run: {before-cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1337
 105 run: {before-cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9998 run: its type is "number"
9999 mem: location 1159 is 0
9999 mem: storing 0 in location 1338
 105 run: {before-top-of-screen: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1339
9999 mem: incrementing refcount of 1169: 8 -> 9
 105 run: {editor: ("address" "shared" "editor-data")} <- snap-cursor {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {click-row: "number"}, {click-column: "number"}
9999 mem: location 1326 is 1012
9999 mem: location 1327 is 1150
9999 mem: location 1331 is 1
9999 mem: location 1332 is 2
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 mem: new alloc: 1352
9999 mem: storing 26 in location 1353
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1355
9999 mem: incrementing refcount of 1012: 13 -> 14
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1356
9999 mem: incrementing refcount of 1150: 6 -> 7
 106 run: {target-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1357
 106 run: {target-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1358
 106 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1356 is 1150
9998 run: jumping to instruction 7
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1359
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1360
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1355 is 1012
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 14 -> 15
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 107 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1361
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1362
9999 mem: incrementing refcount of 1169: 9 -> 10
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1362 is 1169
9999 mem: storing 1169 in location 1363
9999 mem: incrementing refcount of 1169: 10 -> 11
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1362 is 1169
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1169 in location 1197
9999 mem: incrementing refcount of 1169: 11 -> 12
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1169
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 1190
9999 mem: location 1172 is 0
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy is 1171
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1171 is 1190
9999 mem: storing 1190 in location 1198
9999 mem: incrementing refcount of 1190: 8 -> 9
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1190
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1190
9999 mem: decrementing refcount of 1169: 12 -> 11
9999 mem: storing 1190 in location 1362
9999 mem: incrementing refcount of 1190: 9 -> 10
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1364
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1359 is 0
9999 mem: storing 0 in location 1365
 106 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1366
 106 run: {cursor-row: ("address" "number"), "lookup": ()} <- copy {target-row: "number"}
9999 mem: location 1357 is 1
9999 mem: location 1366 is 1158
9999 mem: storing 1 in location 1158
 106 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 0
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1367
 106 run: {cursor-column: ("address" "number"), "lookup": ()} <- copy {target-column: "number"}
9999 mem: location 1358 is 2
9999 mem: location 1367 is 1159
9999 mem: storing 2 in location 1159
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1169
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1356 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1368
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1362 is 1190
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1364 is 1
9999 mem: location 1361 is 5
9999 mem: storing 0 in location 1369
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1369 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1364 is 1
9999 mem: location 1366 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1370
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1370 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1365 is 0
9999 mem: location 1367 is 1159
9999 mem: location 1159 is 2
9999 mem: storing 0 in location 1371
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1371 is 0
9998 run: jumping to instruction 31
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1362 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1362 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1191
9998 run: its type is "character"
9999 mem: location 1191 is 97
9999 mem: storing 97 in location 1372
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1372 is 97
9999 mem: storing 0 in location 1373
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1373 is 0
9998 run: jumping to instruction 49
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1365 is 0
9999 mem: location 1360 is 9
9999 mem: storing 0 in location 1375
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1375 is 0
9998 run: jumping to instruction 56
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1362 is 1190
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1190 in location 1197
9999 mem: incrementing refcount of 1190: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1190
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1192
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1192 is 1199
9999 mem: storing 1199 in location 1198
9999 mem: incrementing refcount of 1199: 8 -> 9
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1199
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: decrementing refcount of 1190: 11 -> 10
9999 mem: storing 1199 in location 1362
9999 mem: incrementing refcount of 1199: 9 -> 10
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1363 is 1169
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1169 in location 1197
9999 mem: incrementing refcount of 1169: 11 -> 12
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1169
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 1190
9999 mem: location 1172 is 0
9999 mem: location 1197 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy is 1171
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1171 is 1190
9999 mem: storing 1190 in location 1198
9999 mem: incrementing refcount of 1190: 10 -> 11
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1190
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1190
9999 mem: decrementing refcount of 1169: 12 -> 11
9999 mem: storing 1190 in location 1363
9999 mem: incrementing refcount of 1190: 11 -> 12
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1365 is 0
9999 mem: storing 1 in location 1365
 106 run: jump {: "offset"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1362 is 1199
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1364 is 1
9999 mem: location 1361 is 5
9999 mem: storing 0 in location 1369
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1369 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1364 is 1
9999 mem: location 1366 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1370
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1370 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1365 is 1
9999 mem: location 1367 is 1159
9999 mem: location 1159 is 2
9999 mem: storing 0 in location 1371
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1371 is 0
9998 run: jumping to instruction 31
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1362 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1362 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 98
9999 mem: storing 98 in location 1372
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1372 is 98
9999 mem: storing 0 in location 1373
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1373 is 0
9998 run: jumping to instruction 49
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1365 is 1
9999 mem: location 1360 is 9
9999 mem: storing 0 in location 1375
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1375 is 0
9998 run: jumping to instruction 56
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1362 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1197
9999 mem: incrementing refcount of 1199: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1199
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 7 -> 8
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1199: 11 -> 10
9999 mem: storing 1203 in location 1362
9999 mem: incrementing refcount of 1203: 8 -> 9
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1363 is 1190
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1190 in location 1197
9999 mem: incrementing refcount of 1190: 12 -> 13
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1190
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1197 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1192
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1192 is 1199
9999 mem: storing 1199 in location 1198
9999 mem: incrementing refcount of 1199: 10 -> 11
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1199
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1199
9999 mem: decrementing refcount of 1190: 13 -> 12
9999 mem: storing 1199 in location 1363
9999 mem: incrementing refcount of 1199: 11 -> 12
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1365 is 1
9999 mem: storing 2 in location 1365
 106 run: jump {: "offset"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1362 is 1203
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1364 is 1
9999 mem: location 1361 is 5
9999 mem: storing 0 in location 1369
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1369 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1364 is 1
9999 mem: location 1366 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1370
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1370 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1365 is 2
9999 mem: location 1367 is 1159
9999 mem: location 1159 is 2
9999 mem: storing 1 in location 1371
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1371 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1363 is 1199
9999 mem: location 1368 is 1154
9999 mem: decrementing refcount of 1169: 11 -> 10
9999 mem: storing 1199 in location 1154
9999 mem: incrementing refcount of 1199: 12 -> 13
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1362 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1362 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 99
9999 mem: storing 99 in location 1372
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1372 is 99
9999 mem: storing 0 in location 1373
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1373 is 0
9998 run: jumping to instruction 49
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1365 is 2
9999 mem: location 1360 is 9
9999 mem: storing 0 in location 1375
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1375 is 0
9998 run: jumping to instruction 56
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1362 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1203 in location 1197
9999 mem: incrementing refcount of 1203: 9 -> 10
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1203
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: storing 0 in location 1198
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1203: 10 -> 9
9999 mem: storing 0 in location 1362
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1363 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1197
9999 mem: incrementing refcount of 1199: 13 -> 14
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1199
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 9 -> 10
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1199: 14 -> 13
9999 mem: storing 1203 in location 1363
9999 mem: incrementing refcount of 1203: 10 -> 11
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1365 is 2
9999 mem: storing 3 in location 1365
 106 run: jump {: "offset"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1362 is 0
9998 run: jumping to instruction 61
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1364 is 1
9999 mem: location 1366 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1370
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1365 is 3
9999 mem: location 1367 is 1159
9999 mem: location 1159 is 2
9999 mem: storing 0 in location 1376
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1370 is 1
9999 mem: location 1376 is 0
9999 mem: storing 0 in location 1377
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1364 is 1
9999 mem: location 1366 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 0 in location 1378
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1377 is 0
9999 mem: location 1378 is 0
9999 mem: storing 0 in location 1379
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1379 is 0
9998 run: jumping to instruction 72
 106 run: reply {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1356 is 1150
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1150
9999 mem: decrementing refcount of 1150: 7 -> 6
9999 mem: storing 1150 in location 1327
9999 mem: incrementing refcount of 1150: 6 -> 7
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1340
 105 run: {after-cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1341
 105 run: {after-cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9998 run: its type is "number"
9999 mem: location 1159 is 2
9999 mem: storing 2 in location 1342
 105 run: {after-top-of-screen: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1327 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1343
9999 mem: incrementing refcount of 1169: 10 -> 11
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1340 is 0
9998 run: jumping to instruction 44
 105 run: {op: ("address" "shared" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1000
9999 mem: storing 1000 in location 1345
9999 mem: incrementing refcount of 1000: 0 -> 1
 105 run: {op: ("address" "shared" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {before-cursor-row: "number"}, {before-cursor-column: "number"}, {before-top-of-screen: ("address" "shared" "duplex-list" "character")}, {after-cursor-row: "number"}, {after-cursor-column: "number"}, {after-top-of-screen: ("address" "shared" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1337 is 1
9999 mem: location 1338 is 0
9999 mem: location 1339 is 1169
9999 mem: location 1341 is 1
9999 mem: location 1342 is 2
9999 mem: location 1343 is 1169
9999 mem: location 1340 is 0
9999 mem: location 1345 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1345 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 1 in location 1001
9999 mem: storing 1 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 1169 in location 1004
9999 mem: storing 1 in location 1005
9999 mem: storing 2 in location 1006
9999 mem: storing 1169 in location 1007
9999 mem: storing 0 in location 1008
 105 run: {editor: ("address" "shared" "editor-data")} <- add-operation {editor: ("address" "shared" "editor-data")}, {op: ("address" "shared" "operation")}
9999 mem: location 1327 is 1150
9999 mem: location 1345 is 1000
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1183
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1186
9999 mem: incrementing refcount of 1150: 7 -> 8
 106 run: {op: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1187
9999 mem: incrementing refcount of 1000: 1 -> 2
 106 run: {undo: ("address" "address" "shared" "list" "address" "shared" "operation")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1161
9999 mem: storing 1161 in location 1188
 106 run: {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- push_4 {op: ("address" "shared" "operation")}, {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}
9999 mem: location 1187 is 1000
9999 mem: location 1188 is 1161
9999 mem: location 1161 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1163
 107 run: {x: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1166
9999 mem: incrementing refcount of 1000: 2 -> 3
 107 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1167
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation")} <- new {(list address shared operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1380
9999 mem: storing 1380 in location 1168
9999 mem: incrementing refcount of 1380: 0 -> 1
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- merge {x: ("address" "shared" "operation")}, {in: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1166 is 1000
9999 mem: location 1167 is 0
9999 mem: location 1168 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1168 is 1380
9999 mem: skipping refcount at 1380
9999 mem: storing 1000 in location 1381
9999 mem: storing 0 in location 1382
 107 run: return {result: ("address" "shared" "list" "address" "shared" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1168 is 1380
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1380
9999 mem: location 1188 is 1161
9999 mem: storing 1380 in location 1161
9999 mem: incrementing refcount of 1380: 1 -> 2
 106 run: {redo: ("address" "address" "shared" "list" "address" "shared" "operation")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1162
9999 mem: storing 1162 in location 1189
 106 run: {redo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- copy {0: "literal"}
9999 mem: location 1189 is 1162
9999 mem: storing 0 in location 1162
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1186 is 1150
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1150
9999 mem: decrementing refcount of 1150: 8 -> 7
9999 mem: storing 1150 in location 1327
9999 mem: incrementing refcount of 1150: 7 -> 8
 105 run: return {1: "literal", "true": ()}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1327 is 1150
9999 abandon: saving in free-list of size 29
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump {+next-event: "label"}
9998 run: jumping to instruction 6
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1299
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9998 run: its type is "number"
9999 mem: location 1159 is 2
9999 mem: storing 2 in location 1300
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1296 is 1012
9999 mem: location 1299 is 1
9999 mem: location 1300 is 2
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 15 -> 16
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1242
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 105 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 105 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 2
9999 mem: location 1244 is 1016
9999 mem: storing 2 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 16 -> 15
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 15 -> 16
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1297 is 1290
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1309
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1290 in location 1312
9999 mem: incrementing refcount of 1290: 2 -> 3
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1312 is 1290
9998 run: jump-unless fell through
 105 run: {current-event-index: ("address" "number")} <- get-address {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 1
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1291
9999 mem: storing 1291 in location 1313
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 1
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1292
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1292 is 1272
9999 mem: storing 1272 in location 1314
9999 mem: incrementing refcount of 1272: 2 -> 3
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9999 mem: storing 4 in location 1315
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: ("address" "number"), "lookup": ()}, {max: "number"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 1
9999 mem: location 1315 is 4
9999 mem: storing 0 in location 1316
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: ("address" "number"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9998 run: base address is 1273
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 1
9998 run: address to copy is 1278
9998 run: its type is event
9999 mem: location 1278 is 0
9999 mem: location 1279 is 100
9999 mem: location 1280 is 0
9999 mem: location 1281 is 0
9999 mem: storing 0 in location 1318
9999 mem: storing 100 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
 105 run: {current-event-index: ("address" "number"), "lookup": ()} <- add {current-event-index: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 1
9999 mem: location 1313 is 1291
9999 mem: storing 2 in location 1291
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1318 is 0
9999 mem: location 1319 is 100
9999 mem: location 1320 is 0
9999 mem: location 1321 is 0
9999 mem: location 1312 is 1290
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 100, 0, 0]
9998 run: result 1 is 1290
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1301
9999 mem: storing 100 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: decrementing refcount of 1290: 3 -> 2
9999 mem: storing 1290 in location 1297
9999 mem: incrementing refcount of 1290: 2 -> 3
9999 mem: storing 1 in location 1305
9999 mem: storing 0 in location 1306
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: ("address" "touch-event")} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1301 is 0
9999 mem: location 1302 is 100
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 mem: storing 0 in location 1307
 104 run: jump-unless {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {e: "event"}
9999 mem: location 1296 is 1012
9999 mem: location 1298 is 1150
9999 mem: location 1301 is 0
9999 mem: location 1302 is 100
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 85
9999 mem: allocating size 87
9999 mem: new alloc: 1383
9999 mem: storing 85 in location 1384
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1386
9999 mem: incrementing refcount of 1012: 16 -> 17
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1387
9999 mem: incrementing refcount of 1150: 8 -> 9
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1388
9999 mem: storing 100 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1392
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1387 is 1150
9998 run: jumping to instruction 7
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 17 -> 18
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1198
 106 run: return {width: "number"}
9999 mem: location 1198 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1393
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 18 -> 19
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 106 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1394
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1395
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1396
 105 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1397
 105 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1398
 105 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1399
 105 run: {save-row: "number"} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1398 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1400
 105 run: {save-column: "number"} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1399 is 1159
9999 mem: location 1159 is 2
9999 mem: storing 2 in location 1401
 105 run: {c: ("address" "character")} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1388 is 0
9999 mem: location 1389 is 100
9999 mem: location 1390 is 0
9999 mem: location 1391 is 0
9999 mem: storing 1389 in location 1402
 105 run: jump-unless {c: ("address" "character")}, {: "offset"}
9999 mem: location 1402 is 1389
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1403
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1403 is 0
9998 run: jumping to instruction 61
 105 run: {undo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1414
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1414 is 0
9998 run: jumping to instruction 108
 105 run: {page-up?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1419
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1419 is 0
9998 run: jumping to instruction 149
 105 run: {page-down?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1435
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1435 is 0
9998 run: jumping to instruction 190
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1436
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 0
9998 run: jumping to instruction 210
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1441
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1441 is 0
9998 run: jumping to instruction 230
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1442
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1442 is 0
9998 run: jumping to instruction 268
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1443
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 0
9998 run: jumping to instruction 306
 105 run: {delete-previous-character?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {8: "literal", "backspace": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1444
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 346
 105 run: {tab?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {9: "literal", "tab": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1448
 105 run: jump-unless {tab?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 383
 105 run: {newline?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {10: "literal", "newline": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 0 in location 1452
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1452 is 0
9998 run: jumping to instruction 402
 105 run: {regular-character?: "boolean"} <- greater-or-equal {c: ("address" "character"), "lookup": ()}, {32: "literal", "space": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: storing 1 in location 1455
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1392
 105 run: jump-if {regular-character?: "boolean"}, {1: "offset"}
9999 mem: location 1455 is 1
9998 run: jumping to instruction 407
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1437
9999 mem: incrementing refcount of 1169: 11 -> 12
 105 run: {cursor-before: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1397 is 1154
9999 mem: location 1154 is 1199
9999 mem: storing 1199 in location 1449
9999 mem: incrementing refcount of 1199: 13 -> 14
 105 run: {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}, {go-render?: "boolean"} <- insert-at-cursor {editor: ("address" "shared" "editor-data")}, {c: ("address" "character"), "lookup": ()}, {screen: ("address" "shared" "screen")}
9999 mem: location 1387 is 1150
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 100
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1470
9999 mem: storing 31 in location 1471
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1473
9999 mem: incrementing refcount of 1150: 9 -> 10
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1474
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1475
9999 mem: incrementing refcount of 1012: 19 -> 20
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1199
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1476
 106 run: insert_2 {c: "character"}, {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1474 is 100
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1183
 107 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1186
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1187
9999 mem: incrementing refcount of 1199: 14 -> 15
 107 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1503
9999 mem: storing 1503 in location 1188
9999 mem: incrementing refcount of 1503: 0 -> 1
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1188 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 0
9999 mem: location 1505 is 0
9999 mem: location 1506 is 0
9999 mem: location 1186 is 100
9999 mem: location 1188 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy to is 1504
9999 mem: storing 100 in location 1504
 107 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1203
9999 mem: storing 1203 in location 1189
9999 mem: incrementing refcount of 1203: 11 -> 12
 107 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1203
9999 mem: location 1202 is 1190
9999 mem: location 1188 is 1503
9999 mem: location 1187 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy to is 1201
9999 mem: storing 1503 in location 1201
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 0
9999 mem: location 1506 is 0
9999 mem: location 1187 is 1199
9999 mem: location 1188 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy to is 1506
9999 mem: storing 1199 in location 1506
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 0
9999 mem: location 1506 is 1199
9999 mem: location 1189 is 1203
9999 mem: location 1188 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy to is 1505
9999 mem: storing 1203 in location 1505
 107 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 11
 107 run: {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1199
9999 mem: location 1188 is 1503
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1206
9999 mem: storing 1503 in location 1206
 107 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1187 is 1199
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1199
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1197
9999 mem: incrementing refcount of 1199: 15 -> 16
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1199
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1503
9999 mem: location 1202 is 1190
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1503
9999 mem: storing 1503 in location 1198
9999 mem: incrementing refcount of 1503: 1 -> 2
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1503
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1503
9999 mem: location 1476 is 1154
9999 mem: decrementing refcount of 1199: 16 -> 15
9999 mem: storing 1503 in location 1154
9999 mem: incrementing refcount of 1503: 2 -> 3
 106 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1477
 106 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1478
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1479
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 2
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1480
 106 run: {save-row: "number"} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1477 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1481
 106 run: {save-column: "number"} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 2
9999 mem: storing 2 in location 1482
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1475 is 1012
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 20 -> 21
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1198
 107 run: return {width: "number"}
9999 mem: location 1198 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1483
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1475 is 1012
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 21 -> 22
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 107 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1484
 106 run: {wrap-column: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1480 is 9
9999 mem: storing 8 in location 1485
 106 run: {at-wrap?: "boolean"} <- greater-or-equal {cursor-column: ("address" "number"), "lookup": ()}, {wrap-column: "number"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 2
9999 mem: location 1485 is 8
9999 mem: storing 0 in location 1486
 106 run: jump-unless {at-wrap?: "boolean"}, {: "offset"}
9999 mem: location 1486 is 0
9998 run: jumping to instruction 41
 106 run: {cursor-column: ("address" "number"), "lookup": ()} <- add {cursor-column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 2
9999 mem: location 1478 is 1159
9999 mem: storing 3 in location 1159
 106 run: {next: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1503
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1503 in location 1197
9999 mem: incrementing refcount of 1503: 3 -> 4
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1503
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1203
9999 mem: location 1506 is 1199
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1505
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1505 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 12 -> 13
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1493
9999 mem: incrementing refcount of 1203: 13 -> 14
 106 run: {at-end?: "boolean"} <- equal {next: ("address" "shared" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1493 is 1203
9999 mem: storing 0 in location 1494
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1494 is 0
9998 run: jumping to instruction 56
 106 run: jump-unless {next: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1493 is 1203
9998 run: jump-unless fell through
 106 run: {at-right?: "boolean"} <- greater-or-equal {cursor-column: ("address" "number"), "lookup": ()}, {screen-width: "number"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 3
9999 mem: location 1483 is 10
9999 mem: storing 0 in location 1497
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1497 is 0
9998 run: jump-if fell through
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1503
9999 mem: storing 1503 in location 1499
9999 mem: incrementing refcount of 1503: 4 -> 5
 106 run: move-cursor {screen: ("address" "shared" "screen")}, {save-row: "number"}, {save-column: "number"}
9999 mem: location 1475 is 1012
9999 mem: location 1481 is 1
9999 mem: location 1482 is 2
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 22 -> 23
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1242
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 107 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 107 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 2
9999 mem: location 1244 is 1016
9999 mem: storing 2 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- copy {save-column: "number"}
9999 mem: location 1482 is 2
9999 mem: storing 2 in location 1500
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 2
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 1503
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1499 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1203
9999 mem: location 1506 is 1199
9999 mem: location 1499 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1504
9998 run: its type is "character"
9999 mem: location 1504 is 100
9999 mem: storing 100 in location 1501
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1501 is 100
9999 mem: storing 0 in location 1502
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1502 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1475 is 1012
9999 mem: location 1501 is 100
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 23 -> 24
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1249
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1250
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 100
  90 print-character: 100 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 107 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 100
9999 mem: storing 0 in location 1259
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 107 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 107 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: storing 12 in location 1262
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 2
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 5 -> 6
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 100
9999 mem: storing 0 in location 1265
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 12
9999 mem: storing 1044 in location 1267
 107 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1044
9999 mem: location 1044 is 99
9999 mem: location 1045 is 7
9999 mem: location 1267 is 1044
9998 run: address to copy is 1044
9999 mem: storing 1044 in location 1268
 107 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 100
9999 mem: location 1268 is 1044
9999 mem: storing 100 in location 1044
 107 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1044
9999 mem: location 1044 is 100
9999 mem: location 1045 is 7
9999 mem: location 1267 is 1044
9998 run: address to copy is 1045
9999 mem: storing 1045 in location 1269
 107 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1045
9999 mem: storing 7 in location 1045
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 107 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 2
9999 mem: location 1258 is 1016
9999 mem: storing 3 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1500 is 2
9999 mem: storing 3 in location 1500
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1499 is 1503
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1503 in location 1197
9999 mem: incrementing refcount of 1503: 5 -> 6
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1503
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1203
9999 mem: location 1506 is 1199
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1505
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1505 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 14 -> 15
9990 schedule: next_2/insert-at-cursor/handle-keyboard-event/editor-event-loop/run_1001/scenario_editor-provides-edited-contents
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1503: 6 -> 5
9999 mem: storing 1203 in location 1499
9999 mem: incrementing refcount of 1203: 15 -> 16
 106 run: jump {: "offset"}
9998 run: jumping to instruction 65
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 3
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 1203
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1499 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1503
9999 mem: location 1499 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 99
9999 mem: storing 99 in location 1501
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1501 is 99
9999 mem: storing 0 in location 1502
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1502 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1475 is 1012
9999 mem: location 1501 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 24 -> 25
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1249
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1250
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 107 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1259
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 107 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 107 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: storing 13 in location 1262
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 6 -> 7
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1265
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 13
9999 mem: storing 1046 in location 1267
 107 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1046
9999 mem: location 1046 is 0
9999 mem: location 1047 is 7
9999 mem: location 1267 is 1046
9998 run: address to copy is 1046
9999 mem: storing 1046 in location 1268
 107 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 99
9999 mem: location 1268 is 1046
9999 mem: storing 99 in location 1046
 107 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1046
9999 mem: location 1046 is 99
9999 mem: location 1047 is 7
9999 mem: location 1267 is 1046
9998 run: address to copy is 1047
9999 mem: storing 1047 in location 1269
 107 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1047
9999 mem: storing 7 in location 1047
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 107 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: location 1258 is 1016
9999 mem: storing 4 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1500 is 3
9999 mem: storing 4 in location 1500
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1499 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1203 in location 1197
9999 mem: incrementing refcount of 1203: 16 -> 17
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1203
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1503
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: storing 0 in location 1198
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1203: 17 -> 16
9999 mem: storing 0 in location 1499
 106 run: jump {: "offset"}
9998 run: jumping to instruction 65
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 4
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 0
9998 run: jumping to instruction 77
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1492
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "2"}, {go-render?: "boolean"}
9999 mem: location 1473 is 1150
9999 mem: location 1475 is 1012
9999 mem: location 1492 is 0
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1150
9998 run: result 1 is 1012
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1150: 10 -> 9
9999 mem: storing 1150 in location 1387
9999 mem: incrementing refcount of 1150: 9 -> 10
9999 mem: decrementing refcount of 1012: 25 -> 24
9999 mem: storing 1012 in location 1386
9999 mem: incrementing refcount of 1012: 24 -> 25
9999 mem: storing 0 in location 1392
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1439
9999 mem: incrementing refcount of 1169: 12 -> 13
 105 run: {undo: ("address" "address" "shared" "list" "address" "shared" "operation")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1161
9999 mem: storing 1161 in location 1406
 105 run: jump-unless {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {: "offset"}
9999 mem: location 1406 is 1161
9999 mem: location 1161 is 1380
9998 run: jump-unless fell through
 105 run: {op: ("address" "shared" "operation")} <- first_3 {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}
9999 mem: location 1406 is 1161
9999 mem: location 1161 is 1380
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1380 in location 1197
9999 mem: incrementing refcount of 1380: 2 -> 3
 106 run: {result: ("address" "shared" "operation")} <- get {in: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 1000
9999 mem: location 1382 is 0
9999 mem: location 1197 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1381
9998 run: its type is ("address" "shared" "operation")
9999 mem: location 1381 is 1000
9999 mem: storing 1000 in location 1198
9999 mem: incrementing refcount of 1000: 3 -> 4
 106 run: reply {result: ("address" "shared" "operation")}
9999 mem: location 1198 is 1000
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1000
9999 mem: storing 1000 in location 1405
9999 mem: incrementing refcount of 1000: 4 -> 5
 105 run: {typing: ("address" "insert-operation")} <- maybe-convert {op: ("address" "shared" "operation"), "lookup": ()}, {typing: "variant"}
9999 mem: location 1405 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1001 is 1
9999 mem: location 1002 is 1
9999 mem: location 1003 is 0
9999 mem: location 1004 is 1169
9999 mem: location 1005 is 1
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1169
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1405 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 0 in location 1412
 105 run: jump-unless {typing: ("address" "insert-operation")}, {: "offset"}
9999 mem: location 1412 is 0
9998 run: jumping to instruction 429
 105 run: {insert-from: ("address" "shared" "duplex-list" "character")} <- next_2 {cursor-before: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1449 is 1199
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1197
9999 mem: incrementing refcount of 1199: 15 -> 16
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1199
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1503
9999 mem: location 1202 is 1190
9999 mem: location 1197 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1503
9999 mem: storing 1503 in location 1198
9999 mem: incrementing refcount of 1503: 5 -> 6
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1503
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1503
9999 mem: storing 1503 in location 1413
9999 mem: incrementing refcount of 1503: 6 -> 7
 105 run: {insert-to: ("address" "shared" "duplex-list" "character")} <- next_2 {insert-from: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1413 is 1503
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1503 in location 1197
9999 mem: incrementing refcount of 1503: 7 -> 8
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1503
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1203
9999 mem: location 1506 is 1199
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1505
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1505 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 16 -> 17
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1451
9999 mem: incrementing refcount of 1203: 17 -> 18
 105 run: {op: ("address" "shared" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1120
9999 mem: decrementing refcount of 1000: 5 -> 4
9999 mem: storing 1120 in location 1405
9999 mem: incrementing refcount of 1120: 0 -> 1
 105 run: {op: ("address" "shared" "operation"), "lookup": ()} <- merge {0: "literal", "insert-operation": ()}, {save-row: "number", "before": ()}, {save-column: "number", "before": ()}, {top-before: ("address" "shared" "duplex-list" "character")}, {cursor-row: ("address" "number"), "after": (), "lookup": ()}, {cursor-column: ("address" "number"), "after": (), "lookup": ()}, {top-after: ("address" "shared" "duplex-list" "character")}, {insert-from: ("address" "shared" "duplex-list" "character")}, {insert-to: ("address" "shared" "duplex-list" "character")}, {1: "literal", "coalesce": ()}
9999 mem: location 1400 is 1
9999 mem: location 1401 is 2
9999 mem: location 1437 is 1169
9999 mem: location 1398 is 1158
9999 mem: location 1158 is 1
9999 mem: location 1399 is 1159
9999 mem: location 1159 is 3
9999 mem: location 1439 is 1169
9999 mem: location 1413 is 1503
9999 mem: location 1451 is 1203
9999 mem: location 1405 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1405 is 1120
9999 mem: skipping refcount at 1120
9999 mem: storing 0 in location 1121
9999 mem: storing 1 in location 1122
9999 mem: storing 2 in location 1123
9999 mem: storing 1169 in location 1124
9999 mem: storing 1 in location 1125
9999 mem: storing 3 in location 1126
9999 mem: storing 1169 in location 1127
9999 mem: storing 1503 in location 1128
9999 mem: storing 1203 in location 1129
9999 mem: storing 1 in location 1130
 105 run: {editor: ("address" "shared" "editor-data")} <- add-operation {editor: ("address" "shared" "editor-data")}, {op: ("address" "shared" "operation")}
9999 mem: location 1387 is 1150
9999 mem: location 1405 is 1120
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1183
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1186
9999 mem: incrementing refcount of 1150: 10 -> 11
 106 run: {op: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1187
9999 mem: incrementing refcount of 1120: 1 -> 2
 106 run: {undo: ("address" "address" "shared" "list" "address" "shared" "operation")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1380
9999 mem: location 1162 is 0
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1161
9999 mem: storing 1161 in location 1188
 106 run: {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- push_4 {op: ("address" "shared" "operation")}, {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}
9999 mem: location 1187 is 1120
9999 mem: location 1188 is 1161
9999 mem: location 1161 is 1380
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1163
 107 run: {x: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1166
9999 mem: incrementing refcount of 1120: 2 -> 3
 107 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1380 in location 1167
9999 mem: incrementing refcount of 1380: 3 -> 4
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation")} <- new {(list address shared operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1507
9999 mem: storing 1507 in location 1168
9999 mem: incrementing refcount of 1507: 0 -> 1
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- merge {x: ("address" "shared" "operation")}, {in: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1166 is 1120
9999 mem: location 1167 is 1380
9999 mem: location 1168 is 1507
9999 mem: skipping refcount at 1507
9999 mem: location 1168 is 1507
9999 mem: skipping refcount at 1507
9999 mem: storing 1120 in location 1508
9999 mem: storing 1380 in location 1509
 107 run: return {result: ("address" "shared" "list" "address" "shared" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1168 is 1507
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1507
9999 mem: location 1188 is 1161
9999 mem: decrementing refcount of 1380: 4 -> 3
9999 mem: storing 1507 in location 1161
9999 mem: incrementing refcount of 1507: 1 -> 2
 106 run: {redo: ("address" "address" "shared" "list" "address" "shared" "operation")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1186 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1162
9999 mem: storing 1162 in location 1189
 106 run: {redo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- copy {0: "literal"}
9999 mem: location 1189 is 1162
9999 mem: storing 0 in location 1162
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1186 is 1150
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1150
9999 mem: decrementing refcount of 1150: 11 -> 10
9999 mem: storing 1150 in location 1387
9999 mem: incrementing refcount of 1150: 10 -> 11
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1386 is 1012
9999 mem: location 1387 is 1150
9999 mem: location 1392 is 0
9999 abandon: saving in free-list of size 87
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9998 run: result 1 is 1150
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1012: 25 -> 24
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 24 -> 25
9999 mem: decrementing refcount of 1150: 11 -> 10
9999 mem: storing 1150 in location 1298
9999 mem: incrementing refcount of 1150: 10 -> 11
9999 mem: storing 0 in location 1308
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1308 is 0
9998 run: jumping to instruction 25
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1299
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9998 run: its type is "number"
9999 mem: location 1159 is 3
9999 mem: storing 3 in location 1300
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1296 is 1012
9999 mem: location 1299 is 1
9999 mem: location 1300 is 3
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 25 -> 26
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1242
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 105 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 105 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 3
9999 mem: location 1244 is 1016
9999 mem: storing 3 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 26 -> 25
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 25 -> 26
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1297 is 1290
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1309
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1290 in location 1312
9999 mem: incrementing refcount of 1290: 3 -> 4
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1312 is 1290
9998 run: jump-unless fell through
 105 run: {current-event-index: ("address" "number")} <- get-address {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 2
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1291
9999 mem: storing 1291 in location 1313
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 2
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1292
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1292 is 1272
9999 mem: storing 1272 in location 1314
9999 mem: incrementing refcount of 1272: 3 -> 4
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9999 mem: storing 4 in location 1315
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: ("address" "number"), "lookup": ()}, {max: "number"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 2
9999 mem: location 1315 is 4
9999 mem: storing 0 in location 1316
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: ("address" "number"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9998 run: base address is 1273
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 2
9998 run: address to copy is 1282
9998 run: its type is event
9999 mem: location 1282 is 0
9999 mem: location 1283 is 101
9999 mem: location 1284 is 0
9999 mem: location 1285 is 0
9999 mem: storing 0 in location 1318
9999 mem: storing 101 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
 105 run: {current-event-index: ("address" "number"), "lookup": ()} <- add {current-event-index: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 2
9999 mem: location 1313 is 1291
9999 mem: storing 3 in location 1291
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1318 is 0
9999 mem: location 1319 is 101
9999 mem: location 1320 is 0
9999 mem: location 1321 is 0
9999 mem: location 1312 is 1290
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 101, 0, 0]
9998 run: result 1 is 1290
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1301
9999 mem: storing 101 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: decrementing refcount of 1290: 4 -> 3
9999 mem: storing 1290 in location 1297
9999 mem: incrementing refcount of 1290: 3 -> 4
9999 mem: storing 1 in location 1305
9999 mem: storing 0 in location 1306
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: ("address" "touch-event")} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1301 is 0
9999 mem: location 1302 is 101
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 mem: storing 0 in location 1307
 104 run: jump-unless {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {e: "event"}
9999 mem: location 1296 is 1012
9999 mem: location 1298 is 1150
9999 mem: location 1301 is 0
9999 mem: location 1302 is 101
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 85
9999 mem: allocating size 87
9999 abandon: picking up space from free-list of size 87
9999 mem: new alloc from free list: 1383
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1386
9999 mem: incrementing refcount of 1012: 26 -> 27
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1387
9999 mem: incrementing refcount of 1150: 11 -> 12
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1388
9999 mem: storing 101 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1392
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1387 is 1150
9998 run: jumping to instruction 7
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 27 -> 28
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1198
 106 run: return {width: "number"}
9999 mem: location 1198 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1393
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 28 -> 29
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 106 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1394
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1395
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1396
 105 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1397
 105 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1398
 105 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1399
 105 run: {save-row: "number"} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1398 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1400
 105 run: {save-column: "number"} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1399 is 1159
9999 mem: location 1159 is 3
9999 mem: storing 3 in location 1401
 105 run: {c: ("address" "character")} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1388 is 0
9999 mem: location 1389 is 101
9999 mem: location 1390 is 0
9999 mem: location 1391 is 0
9999 mem: storing 1389 in location 1402
 105 run: jump-unless {c: ("address" "character")}, {: "offset"}
9999 mem: location 1402 is 1389
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1403
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1403 is 0
9998 run: jumping to instruction 61
 105 run: {undo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1414
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1414 is 0
9998 run: jumping to instruction 108
 105 run: {page-up?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1419
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1419 is 0
9998 run: jumping to instruction 149
 105 run: {page-down?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1435
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1435 is 0
9998 run: jumping to instruction 190
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1436
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 0
9998 run: jumping to instruction 210
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1441
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1441 is 0
9998 run: jumping to instruction 230
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1442
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1442 is 0
9998 run: jumping to instruction 268
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1443
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 0
9998 run: jumping to instruction 306
 105 run: {delete-previous-character?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {8: "literal", "backspace": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1444
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 346
 105 run: {tab?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {9: "literal", "tab": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1448
 105 run: jump-unless {tab?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 383
 105 run: {newline?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {10: "literal", "newline": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 0 in location 1452
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1452 is 0
9998 run: jumping to instruction 402
 105 run: {regular-character?: "boolean"} <- greater-or-equal {c: ("address" "character"), "lookup": ()}, {32: "literal", "space": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: storing 1 in location 1455
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1392
 105 run: jump-if {regular-character?: "boolean"}, {1: "offset"}
9999 mem: location 1455 is 1
9998 run: jumping to instruction 407
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1437
9999 mem: incrementing refcount of 1169: 13 -> 14
 105 run: {cursor-before: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1397 is 1154
9999 mem: location 1154 is 1503
9999 mem: storing 1503 in location 1449
9999 mem: incrementing refcount of 1503: 8 -> 9
 105 run: {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}, {go-render?: "boolean"} <- insert-at-cursor {editor: ("address" "shared" "editor-data")}, {c: ("address" "character"), "lookup": ()}, {screen: ("address" "shared" "screen")}
9999 mem: location 1387 is 1150
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 101
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 abandon: picking up space from free-list of size 33
9999 mem: new alloc from free list: 1470
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1473
9999 mem: incrementing refcount of 1150: 12 -> 13
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1474
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1475
9999 mem: incrementing refcount of 1012: 29 -> 30
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1503
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1476
 106 run: insert_2 {c: "character"}, {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1474 is 101
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1503
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1183
 107 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1186
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1503 in location 1187
9999 mem: incrementing refcount of 1503: 9 -> 10
 107 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1510
9999 mem: storing 1510 in location 1188
9999 mem: incrementing refcount of 1510: 0 -> 1
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1188 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 0
9999 mem: location 1512 is 0
9999 mem: location 1513 is 0
9999 mem: location 1186 is 101
9999 mem: location 1188 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy to is 1511
9999 mem: storing 101 in location 1511
 107 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1187 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1203
9999 mem: location 1506 is 1199
9999 mem: location 1187 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1505
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1505 is 1203
9999 mem: storing 1203 in location 1189
9999 mem: incrementing refcount of 1203: 18 -> 19
 107 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1187 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1203
9999 mem: location 1506 is 1199
9999 mem: location 1188 is 1510
9999 mem: location 1187 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy to is 1505
9999 mem: storing 1510 in location 1505
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 0
9999 mem: location 1513 is 0
9999 mem: location 1187 is 1503
9999 mem: location 1188 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy to is 1513
9999 mem: storing 1503 in location 1513
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 0
9999 mem: location 1513 is 1503
9999 mem: location 1189 is 1203
9999 mem: location 1188 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy to is 1512
9999 mem: storing 1203 in location 1512
 107 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 11
 107 run: {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1503
9999 mem: location 1188 is 1510
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1206
9999 mem: storing 1510 in location 1206
 107 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1187 is 1503
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1503
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1503 in location 1197
9999 mem: incrementing refcount of 1503: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1503
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1510
9999 mem: location 1506 is 1199
9999 mem: location 1197 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1505
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1505 is 1510
9999 mem: storing 1510 in location 1198
9999 mem: incrementing refcount of 1510: 1 -> 2
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1510
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1510
9999 mem: location 1476 is 1154
9999 mem: decrementing refcount of 1503: 11 -> 10
9999 mem: storing 1510 in location 1154
9999 mem: incrementing refcount of 1510: 2 -> 3
 106 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1477
 106 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1478
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1479
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 3
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1480
 106 run: {save-row: "number"} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1477 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1481
 106 run: {save-column: "number"} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 3
9999 mem: storing 3 in location 1482
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1475 is 1012
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 30 -> 31
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1198
 107 run: return {width: "number"}
9999 mem: location 1198 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1483
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1475 is 1012
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 31 -> 32
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 107 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1484
 106 run: {wrap-column: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1480 is 9
9999 mem: storing 8 in location 1485
 106 run: {at-wrap?: "boolean"} <- greater-or-equal {cursor-column: ("address" "number"), "lookup": ()}, {wrap-column: "number"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 3
9999 mem: location 1485 is 8
9999 mem: storing 0 in location 1486
 106 run: jump-unless {at-wrap?: "boolean"}, {: "offset"}
9999 mem: location 1486 is 0
9998 run: jumping to instruction 41
 106 run: {cursor-column: ("address" "number"), "lookup": ()} <- add {cursor-column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 3
9999 mem: location 1478 is 1159
9999 mem: storing 4 in location 1159
 106 run: {next: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1510
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1510 in location 1197
9999 mem: incrementing refcount of 1510: 3 -> 4
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1510
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1203
9999 mem: location 1513 is 1503
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1512
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1512 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 19 -> 20
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1493
9999 mem: incrementing refcount of 1203: 20 -> 21
 106 run: {at-end?: "boolean"} <- equal {next: ("address" "shared" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1493 is 1203
9999 mem: storing 0 in location 1494
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1494 is 0
9998 run: jumping to instruction 56
 106 run: jump-unless {next: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1493 is 1203
9998 run: jump-unless fell through
 106 run: {at-right?: "boolean"} <- greater-or-equal {cursor-column: ("address" "number"), "lookup": ()}, {screen-width: "number"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 4
9999 mem: location 1483 is 10
9999 mem: storing 0 in location 1497
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1497 is 0
9998 run: jump-if fell through
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1510
9999 mem: storing 1510 in location 1499
9999 mem: incrementing refcount of 1510: 4 -> 5
 106 run: move-cursor {screen: ("address" "shared" "screen")}, {save-row: "number"}, {save-column: "number"}
9999 mem: location 1475 is 1012
9999 mem: location 1481 is 1
9999 mem: location 1482 is 3
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 32 -> 33
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1242
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 107 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 107 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 3
9999 mem: location 1244 is 1016
9999 mem: storing 3 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- copy {save-column: "number"}
9999 mem: location 1482 is 3
9999 mem: storing 3 in location 1500
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 3
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 1510
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1499 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1203
9999 mem: location 1513 is 1503
9999 mem: location 1499 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1511
9998 run: its type is "character"
9999 mem: location 1511 is 101
9999 mem: storing 101 in location 1501
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1501 is 101
9999 mem: storing 0 in location 1502
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1502 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1475 is 1012
9999 mem: location 1501 is 101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 33 -> 34
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1249
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1250
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 101
  90 print-character: 101 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 107 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 101
9999 mem: storing 0 in location 1259
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 107 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 107 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: storing 13 in location 1262
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 3
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 7 -> 8
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 101
9999 mem: storing 0 in location 1265
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 13
9999 mem: storing 1046 in location 1267
 107 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1046
9999 mem: location 1046 is 99
9999 mem: location 1047 is 7
9999 mem: location 1267 is 1046
9998 run: address to copy is 1046
9999 mem: storing 1046 in location 1268
 107 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 101
9999 mem: location 1268 is 1046
9999 mem: storing 101 in location 1046
 107 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1046
9999 mem: location 1046 is 101
9999 mem: location 1047 is 7
9999 mem: location 1267 is 1046
9998 run: address to copy is 1047
9999 mem: storing 1047 in location 1269
 107 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1047
9999 mem: storing 7 in location 1047
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 107 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 3
9999 mem: location 1258 is 1016
9999 mem: storing 4 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1500 is 3
9999 mem: storing 4 in location 1500
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1499 is 1510
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1510 in location 1197
9999 mem: incrementing refcount of 1510: 5 -> 6
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1510
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1203
9999 mem: location 1513 is 1503
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1512
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1512 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 21 -> 22
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1510: 6 -> 5
9999 mem: storing 1203 in location 1499
9999 mem: incrementing refcount of 1203: 22 -> 23
 106 run: jump {: "offset"}
9998 run: jumping to instruction 65
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 4
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 1203
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1499 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1510
9999 mem: location 1499 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 99
9999 mem: storing 99 in location 1501
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1501 is 99
9999 mem: storing 0 in location 1502
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1502 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1475 is 1012
9999 mem: location 1501 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 34 -> 35
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1249
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1250
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 107 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1259
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 107 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 107 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: storing 14 in location 1262
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 8 -> 9
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1265
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 14
9999 mem: storing 1048 in location 1267
 107 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1048
9999 mem: location 1048 is 0
9999 mem: location 1049 is 7
9999 mem: location 1267 is 1048
9998 run: address to copy is 1048
9999 mem: storing 1048 in location 1268
 107 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 99
9999 mem: location 1268 is 1048
9999 mem: storing 99 in location 1048
 107 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1048
9999 mem: location 1048 is 99
9999 mem: location 1049 is 7
9999 mem: location 1267 is 1048
9998 run: address to copy is 1049
9999 mem: storing 1049 in location 1269
 107 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1049
9999 mem: storing 7 in location 1049
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 107 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1258 is 1016
9999 mem: storing 5 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1500 is 4
9999 mem: storing 5 in location 1500
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1499 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1203 in location 1197
9999 mem: incrementing refcount of 1203: 23 -> 24
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1203
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1510
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: storing 0 in location 1198
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1203: 24 -> 23
9999 mem: storing 0 in location 1499
 106 run: jump {: "offset"}
9998 run: jumping to instruction 65
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 5
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 0
9998 run: jumping to instruction 77
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1492
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "2"}, {go-render?: "boolean"}
9999 mem: location 1473 is 1150
9999 mem: location 1475 is 1012
9999 mem: location 1492 is 0
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1150
9998 run: result 1 is 1012
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1150: 13 -> 12
9999 mem: storing 1150 in location 1387
9999 mem: incrementing refcount of 1150: 12 -> 13
9999 mem: decrementing refcount of 1012: 35 -> 34
9999 mem: storing 1012 in location 1386
9999 mem: incrementing refcount of 1012: 34 -> 35
9999 mem: storing 0 in location 1392
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1439
9999 mem: incrementing refcount of 1169: 14 -> 15
 105 run: {undo: ("address" "address" "shared" "list" "address" "shared" "operation")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1161
9999 mem: storing 1161 in location 1406
 105 run: jump-unless {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {: "offset"}
9999 mem: location 1406 is 1161
9999 mem: location 1161 is 1507
9998 run: jump-unless fell through
 105 run: {op: ("address" "shared" "operation")} <- first_3 {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}
9999 mem: location 1406 is 1161
9999 mem: location 1161 is 1507
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1507 in location 1197
9999 mem: incrementing refcount of 1507: 2 -> 3
 106 run: {result: ("address" "shared" "operation")} <- get {in: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1507
9999 mem: skipping refcount at 1507
9999 mem: location 1508 is 1120
9999 mem: location 1509 is 1380
9999 mem: location 1197 is 1507
9999 mem: skipping refcount at 1507
9998 run: address to copy is 1508
9998 run: its type is ("address" "shared" "operation")
9999 mem: location 1508 is 1120
9999 mem: storing 1120 in location 1198
9999 mem: incrementing refcount of 1120: 3 -> 4
 106 run: reply {result: ("address" "shared" "operation")}
9999 mem: location 1198 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1120
9999 mem: storing 1120 in location 1405
9999 mem: incrementing refcount of 1120: 4 -> 5
 105 run: {typing: ("address" "insert-operation")} <- maybe-convert {op: ("address" "shared" "operation"), "lookup": ()}, {typing: "variant"}
9999 mem: location 1405 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 0
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 3
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1131 is 0
9999 mem: location 1405 is 1120
9999 mem: skipping refcount at 1120
9999 mem: storing 1122 in location 1412
 105 run: jump-unless {typing: ("address" "insert-operation")}, {: "offset"}
9999 mem: location 1412 is 1122
9998 run: jump-unless fell through
 105 run: {previous-coalesce-tag: "number"} <- get {typing: ("address" "insert-operation"), "lookup": ()}, {tag: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 3
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1130
9998 run: its type is "number"
9999 mem: location 1130 is 1
9999 mem: storing 1 in location 1429
 105 run: jump-unless {previous-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1429 is 1
9998 run: jump-unless fell through
 105 run: {insert-until: ("address" "address" "shared" "duplex-list" "character")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {insert-until: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 3
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1129
9999 mem: storing 1129 in location 1450
 105 run: {insert-until: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1397 is 1154
9999 mem: location 1154 is 1510
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1510 in location 1197
9999 mem: incrementing refcount of 1510: 5 -> 6
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1510
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1203
9999 mem: location 1513 is 1503
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1512
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1512 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 23 -> 24
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1203
9999 mem: location 1450 is 1129
9999 mem: decrementing refcount of 1203: 24 -> 23
9999 mem: storing 1203 in location 1129
9999 mem: incrementing refcount of 1203: 23 -> 24
 105 run: {after-row: ("address" "number")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {after-row: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 3
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1125
9999 mem: storing 1125 in location 1431
 105 run: {after-row: ("address" "number"), "lookup": ()} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1398 is 1158
9999 mem: location 1158 is 1
9999 mem: location 1431 is 1125
9999 mem: storing 1 in location 1125
 105 run: {after-column: ("address" "number")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {after-column: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 3
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1126
9999 mem: storing 1126 in location 1432
 105 run: {after-column: ("address" "number"), "lookup": ()} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1399 is 1159
9999 mem: location 1159 is 4
9999 mem: location 1432 is 1126
9999 mem: storing 4 in location 1126
 105 run: {after-top: ("address" "address" "shared" "duplex-list" "character")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {after-top-of-screen: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 4
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1127
9999 mem: storing 1127 in location 1433
 105 run: {after-top: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: location 1433 is 1127
9999 mem: decrementing refcount of 1169: 15 -> 14
9999 mem: storing 1169 in location 1127
9999 mem: incrementing refcount of 1169: 14 -> 15
 105 run: jump {+handle-keyboard-event_0_27+done-adding-insert-operation: "label"}
9998 run: jumping to instruction 436
9990 schedule: handle-keyboard-event/editor-event-loop/run_1001/scenario_editor-provides-edited-contents
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1386 is 1012
9999 mem: location 1387 is 1150
9999 mem: location 1392 is 0
9999 abandon: saving in free-list of size 87
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9998 run: result 1 is 1150
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1012: 35 -> 34
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 34 -> 35
9999 mem: decrementing refcount of 1150: 13 -> 12
9999 mem: storing 1150 in location 1298
9999 mem: incrementing refcount of 1150: 12 -> 13
9999 mem: storing 0 in location 1308
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1308 is 0
9998 run: jumping to instruction 25
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1299
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9998 run: its type is "number"
9999 mem: location 1159 is 4
9999 mem: storing 4 in location 1300
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1296 is 1012
9999 mem: location 1299 is 1
9999 mem: location 1300 is 4
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 35 -> 36
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1242
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 5
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 105 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 5
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 105 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 4
9999 mem: location 1244 is 1016
9999 mem: storing 4 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 36 -> 35
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 35 -> 36
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1297 is 1290
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1309
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1290 in location 1312
9999 mem: incrementing refcount of 1290: 4 -> 5
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1312 is 1290
9998 run: jump-unless fell through
 105 run: {current-event-index: ("address" "number")} <- get-address {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 3
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1291
9999 mem: storing 1291 in location 1313
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 3
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1292
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1292 is 1272
9999 mem: storing 1272 in location 1314
9999 mem: incrementing refcount of 1272: 4 -> 5
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9999 mem: storing 4 in location 1315
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: ("address" "number"), "lookup": ()}, {max: "number"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 3
9999 mem: location 1315 is 4
9999 mem: storing 0 in location 1316
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: ("address" "number"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9998 run: base address is 1273
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 3
9998 run: address to copy is 1286
9998 run: its type is event
9999 mem: location 1286 is 0
9999 mem: location 1287 is 102
9999 mem: location 1288 is 0
9999 mem: location 1289 is 0
9999 mem: storing 0 in location 1318
9999 mem: storing 102 in location 1319
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
 105 run: {current-event-index: ("address" "number"), "lookup": ()} <- add {current-event-index: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 3
9999 mem: location 1313 is 1291
9999 mem: storing 4 in location 1291
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1318 is 0
9999 mem: location 1319 is 102
9999 mem: location 1320 is 0
9999 mem: location 1321 is 0
9999 mem: location 1312 is 1290
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 102, 0, 0]
9998 run: result 1 is 1290
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1301
9999 mem: storing 102 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: decrementing refcount of 1290: 5 -> 4
9999 mem: storing 1290 in location 1297
9999 mem: incrementing refcount of 1290: 4 -> 5
9999 mem: storing 1 in location 1305
9999 mem: storing 0 in location 1306
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: ("address" "touch-event")} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1301 is 0
9999 mem: location 1302 is 102
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 mem: storing 0 in location 1307
 104 run: jump-unless {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {e: "event"}
9999 mem: location 1296 is 1012
9999 mem: location 1298 is 1150
9999 mem: location 1301 is 0
9999 mem: location 1302 is 102
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 85
9999 mem: allocating size 87
9999 abandon: picking up space from free-list of size 87
9999 mem: new alloc from free list: 1383
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1386
9999 mem: incrementing refcount of 1012: 36 -> 37
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1387
9999 mem: incrementing refcount of 1150: 13 -> 14
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1388
9999 mem: storing 102 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1392
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1387 is 1150
9998 run: jumping to instruction 7
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 37 -> 38
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1198
 106 run: return {width: "number"}
9999 mem: location 1198 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1393
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 38 -> 39
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 106 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1394
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1395
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1396
 105 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1397
 105 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1398
 105 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1399
 105 run: {save-row: "number"} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1398 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1400
 105 run: {save-column: "number"} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1399 is 1159
9999 mem: location 1159 is 4
9999 mem: storing 4 in location 1401
 105 run: {c: ("address" "character")} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1388 is 0
9999 mem: location 1389 is 102
9999 mem: location 1390 is 0
9999 mem: location 1391 is 0
9999 mem: storing 1389 in location 1402
 105 run: jump-unless {c: ("address" "character")}, {: "offset"}
9999 mem: location 1402 is 1389
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1403
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1403 is 0
9998 run: jumping to instruction 61
 105 run: {undo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1414
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1414 is 0
9998 run: jumping to instruction 108
 105 run: {page-up?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1419
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1419 is 0
9998 run: jumping to instruction 149
 105 run: {page-down?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1435
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1435 is 0
9998 run: jumping to instruction 190
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1436
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 0
9998 run: jumping to instruction 210
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1441
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1441 is 0
9998 run: jumping to instruction 230
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1442
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1442 is 0
9998 run: jumping to instruction 268
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1443
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 0
9998 run: jumping to instruction 306
 105 run: {delete-previous-character?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {8: "literal", "backspace": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1444
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 346
 105 run: {tab?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {9: "literal", "tab": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1448
 105 run: jump-unless {tab?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 383
 105 run: {newline?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {10: "literal", "newline": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 0 in location 1452
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1452 is 0
9998 run: jumping to instruction 402
 105 run: {regular-character?: "boolean"} <- greater-or-equal {c: ("address" "character"), "lookup": ()}, {32: "literal", "space": ()}
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: storing 1 in location 1455
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1392
 105 run: jump-if {regular-character?: "boolean"}, {1: "offset"}
9999 mem: location 1455 is 1
9998 run: jumping to instruction 407
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1437
9999 mem: incrementing refcount of 1169: 15 -> 16
 105 run: {cursor-before: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1397 is 1154
9999 mem: location 1154 is 1510
9999 mem: storing 1510 in location 1449
9999 mem: incrementing refcount of 1510: 6 -> 7
 105 run: {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}, {go-render?: "boolean"} <- insert-at-cursor {editor: ("address" "shared" "editor-data")}, {c: ("address" "character"), "lookup": ()}, {screen: ("address" "shared" "screen")}
9999 mem: location 1387 is 1150
9999 mem: location 1402 is 1389
9999 mem: location 1389 is 102
9999 mem: location 1386 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 abandon: picking up space from free-list of size 33
9999 mem: new alloc from free list: 1470
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1473
9999 mem: incrementing refcount of 1150: 14 -> 15
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1474
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1475
9999 mem: incrementing refcount of 1012: 39 -> 40
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1510
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1154
9999 mem: storing 1154 in location 1476
 106 run: insert_2 {c: "character"}, {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1474 is 102
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1510
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1183
 107 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1186
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1510 in location 1187
9999 mem: incrementing refcount of 1510: 7 -> 8
 107 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1514
9999 mem: storing 1514 in location 1188
9999 mem: incrementing refcount of 1514: 0 -> 1
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1188 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 0
9999 mem: location 1516 is 0
9999 mem: location 1517 is 0
9999 mem: location 1186 is 102
9999 mem: location 1188 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy to is 1515
9999 mem: storing 102 in location 1515
 107 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1187 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1203
9999 mem: location 1513 is 1503
9999 mem: location 1187 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1512
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1512 is 1203
9999 mem: storing 1203 in location 1189
9999 mem: incrementing refcount of 1203: 24 -> 25
 107 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1187 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1203
9999 mem: location 1513 is 1503
9999 mem: location 1188 is 1514
9999 mem: location 1187 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy to is 1512
9999 mem: storing 1514 in location 1512
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 0
9999 mem: location 1517 is 0
9999 mem: location 1187 is 1510
9999 mem: location 1188 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy to is 1517
9999 mem: storing 1510 in location 1517
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1188 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 0
9999 mem: location 1517 is 1510
9999 mem: location 1189 is 1203
9999 mem: location 1188 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy to is 1516
9999 mem: storing 1203 in location 1516
 107 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1189 is 1203
9998 run: jumping to instruction 11
 107 run: {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1510
9999 mem: location 1188 is 1514
9999 mem: location 1189 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy to is 1206
9999 mem: storing 1514 in location 1206
 107 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1187 is 1510
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1510
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1510 in location 1197
9999 mem: incrementing refcount of 1510: 8 -> 9
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1510
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1514
9999 mem: location 1513 is 1503
9999 mem: location 1197 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1512
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1512 is 1514
9999 mem: storing 1514 in location 1198
9999 mem: incrementing refcount of 1514: 1 -> 2
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1514
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1514
9999 mem: location 1476 is 1154
9999 mem: decrementing refcount of 1510: 9 -> 8
9999 mem: storing 1514 in location 1154
9999 mem: incrementing refcount of 1514: 2 -> 3
 106 run: {cursor-row: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1477
 106 run: {cursor-column: ("address" "number")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9999 mem: storing 1159 in location 1478
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1155
9998 run: its type is "number"
9999 mem: location 1155 is 0
9999 mem: storing 0 in location 1479
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 4
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1473 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1156
9998 run: its type is "number"
9999 mem: location 1156 is 9
9999 mem: storing 9 in location 1480
 106 run: {save-row: "number"} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1477 is 1158
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1481
 106 run: {save-column: "number"} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 4
9999 mem: storing 4 in location 1482
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1475 is 1012
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 40 -> 41
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1198
 107 run: return {width: "number"}
9999 mem: location 1198 is 10
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1483
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1475 is 1012
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1197
9999 mem: incrementing refcount of 1012: 41 -> 42
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1197 is 1012
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1197 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1198
 107 run: return {height: "number"}
9999 mem: location 1198 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1484
 106 run: {wrap-column: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1480 is 9
9999 mem: storing 8 in location 1485
 106 run: {at-wrap?: "boolean"} <- greater-or-equal {cursor-column: ("address" "number"), "lookup": ()}, {wrap-column: "number"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 4
9999 mem: location 1485 is 8
9999 mem: storing 0 in location 1486
 106 run: jump-unless {at-wrap?: "boolean"}, {: "offset"}
9999 mem: location 1486 is 0
9998 run: jumping to instruction 41
 106 run: {cursor-column: ("address" "number"), "lookup": ()} <- add {cursor-column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 4
9999 mem: location 1478 is 1159
9999 mem: storing 5 in location 1159
 106 run: {next: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1514
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1514 in location 1197
9999 mem: incrementing refcount of 1514: 3 -> 4
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1514
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 1203
9999 mem: location 1517 is 1510
9999 mem: location 1197 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy is 1516
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1516 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 25 -> 26
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: storing 1203 in location 1493
9999 mem: incrementing refcount of 1203: 26 -> 27
 106 run: {at-end?: "boolean"} <- equal {next: ("address" "shared" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1493 is 1203
9999 mem: storing 0 in location 1494
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1494 is 0
9998 run: jumping to instruction 56
 106 run: jump-unless {next: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1493 is 1203
9998 run: jump-unless fell through
 106 run: {at-right?: "boolean"} <- greater-or-equal {cursor-column: ("address" "number"), "lookup": ()}, {screen-width: "number"}
9999 mem: location 1478 is 1159
9999 mem: location 1159 is 5
9999 mem: location 1483 is 10
9999 mem: storing 0 in location 1497
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1497 is 0
9998 run: jump-if fell through
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1476 is 1154
9999 mem: location 1154 is 1514
9999 mem: storing 1514 in location 1499
9999 mem: incrementing refcount of 1514: 4 -> 5
 106 run: move-cursor {screen: ("address" "shared" "screen")}, {save-row: "number"}, {save-column: "number"}
9999 mem: location 1475 is 1012
9999 mem: location 1481 is 1
9999 mem: location 1482 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 42 -> 43
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1242
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 107 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 107 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 4
9999 mem: location 1244 is 1016
9999 mem: storing 4 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- copy {save-column: "number"}
9999 mem: location 1482 is 4
9999 mem: storing 4 in location 1500
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 4
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 1514
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1499 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 1203
9999 mem: location 1517 is 1510
9999 mem: location 1499 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy is 1515
9998 run: its type is "character"
9999 mem: location 1515 is 102
9999 mem: storing 102 in location 1501
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1501 is 102
9999 mem: storing 0 in location 1502
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1502 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1475 is 1012
9999 mem: location 1501 is 102
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 43 -> 44
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1249
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1250
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 102
  90 print-character: 102 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 107 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 102
9999 mem: storing 0 in location 1259
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 107 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 107 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: storing 14 in location 1262
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 9 -> 10
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 102
9999 mem: storing 0 in location 1265
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 14
9999 mem: storing 1048 in location 1267
 107 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1048
9999 mem: location 1048 is 99
9999 mem: location 1049 is 7
9999 mem: location 1267 is 1048
9998 run: address to copy is 1048
9999 mem: storing 1048 in location 1268
 107 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 102
9999 mem: location 1268 is 1048
9999 mem: storing 102 in location 1048
 107 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1048
9999 mem: location 1048 is 102
9999 mem: location 1049 is 7
9999 mem: location 1267 is 1048
9998 run: address to copy is 1049
9999 mem: storing 1049 in location 1269
 107 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1049
9999 mem: storing 7 in location 1049
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 107 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1258 is 1016
9999 mem: storing 5 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1500 is 4
9999 mem: storing 5 in location 1500
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1499 is 1514
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1514 in location 1197
9999 mem: incrementing refcount of 1514: 5 -> 6
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1514
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 1203
9999 mem: location 1517 is 1510
9999 mem: location 1197 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy is 1516
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1516 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 27 -> 28
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1514: 6 -> 5
9999 mem: storing 1203 in location 1499
9999 mem: incrementing refcount of 1203: 28 -> 29
 106 run: jump {: "offset"}
9998 run: jumping to instruction 65
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 5
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 1203
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1499 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1514
9999 mem: location 1499 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 99
9999 mem: storing 99 in location 1501
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1501 is 99
9999 mem: storing 0 in location 1502
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1502 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1475 is 1012
9999 mem: location 1501 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
9999 mem: new alloc from free list: 1245
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1248
9999 mem: incrementing refcount of 1012: 44 -> 45
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1249
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1251 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1250
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1253 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1252
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1249 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1248 is 1012
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 5
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is "number"
9999 mem: location 1014 is 10
9999 mem: storing 10 in location 1254
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 5
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1255
 107 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 5
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1256
 107 run: {legal?: "boolean"} <- greater-or-equal {row: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: ("address" "number"), "lookup": ()}, {height: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1255 is 5
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 25
 107 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 5
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1258
 107 run: {legal?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {0: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 5
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 5
9999 mem: location 1254 is 10
9999 mem: storing 1 in location 1257
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1257 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1259
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1259 is 0
9998 run: jumping to instruction 43
 107 run: {index: "number"} <- multiply {row: ("address" "number"), "lookup": ()}, {width: "number"}
9999 mem: location 1256 is 1015
9999 mem: location 1015 is 1
9999 mem: location 1254 is 10
9999 mem: storing 10 in location 1262
 107 run: {index: "number"} <- add {index: "number"}, {column: ("address" "number"), "lookup": ()}
9999 mem: location 1262 is 10
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 5
9999 mem: storing 15 in location 1262
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 5
9999 mem: location 1017 is 1018
9999 mem: location 1248 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1263
9999 mem: incrementing refcount of 1018: 10 -> 11
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 50 in location 1264
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1249 is 99
9999 mem: storing 0 in location 1265
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1265 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1263 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1262 is 15
9999 mem: storing 1050 in location 1267
 107 run: {cursor-contents: ("address" "character")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {contents: "offset"}
9999 mem: location 1267 is 1050
9999 mem: location 1050 is 0
9999 mem: location 1051 is 7
9999 mem: location 1267 is 1050
9998 run: address to copy is 1050
9999 mem: storing 1050 in location 1268
 107 run: {cursor-contents: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1249 is 99
9999 mem: location 1268 is 1050
9999 mem: storing 99 in location 1050
 107 run: {cursor-color: ("address" "number")} <- get-address {cursor: ("address" "screen-cell"), "lookup": ()}, {color: "offset"}
9999 mem: location 1267 is 1050
9999 mem: location 1050 is 99
9999 mem: location 1051 is 7
9999 mem: location 1267 is 1050
9998 run: address to copy is 1051
9999 mem: storing 1051 in location 1269
 107 run: {cursor-color: ("address" "number"), "lookup": ()} <- copy {color: "number"}
9999 mem: location 1250 is 7
9999 mem: location 1269 is 1051
9999 mem: storing 7 in location 1051
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1254 is 10
9999 mem: storing 9 in location 1270
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: ("address" "number"), "lookup": ()}, {right: "number"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 5
9999 mem: location 1270 is 9
9999 mem: storing 0 in location 1271
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1271 is 0
9998 run: jump-if fell through
 107 run: {column: ("address" "number"), "lookup": ()} <- add {column: ("address" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1258 is 1016
9999 mem: location 1016 is 5
9999 mem: location 1258 is 1016
9999 mem: storing 6 in location 1016
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1248 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1500 is 5
9999 mem: storing 6 in location 1500
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1499 is 1203
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1203 in location 1197
9999 mem: incrementing refcount of 1203: 29 -> 30
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1203
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1514
9999 mem: location 1197 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: storing 0 in location 1198
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1203: 30 -> 29
9999 mem: storing 0 in location 1499
 106 run: jump {: "offset"}
9998 run: jumping to instruction 65
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1492
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1500 is 6
9999 mem: location 1480 is 9
9999 mem: storing 0 in location 1497
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1497 is 0
9998 run: jumping to instruction 69
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1499 is 0
9998 run: jumping to instruction 77
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1492
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "2"}, {go-render?: "boolean"}
9999 mem: location 1473 is 1150
9999 mem: location 1475 is 1012
9999 mem: location 1492 is 0
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1150
9998 run: result 1 is 1012
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1150: 15 -> 14
9999 mem: storing 1150 in location 1387
9999 mem: incrementing refcount of 1150: 14 -> 15
9999 mem: decrementing refcount of 1012: 45 -> 44
9999 mem: storing 1012 in location 1386
9999 mem: incrementing refcount of 1012: 44 -> 45
9999 mem: storing 0 in location 1392
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 5
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: storing 1169 in location 1439
9999 mem: incrementing refcount of 1169: 16 -> 17
 105 run: {undo: ("address" "address" "shared" "list" "address" "shared" "operation")} <- get-address {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 5
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1161
9999 mem: storing 1161 in location 1406
 105 run: jump-unless {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {: "offset"}
9999 mem: location 1406 is 1161
9999 mem: location 1161 is 1507
9998 run: jump-unless fell through
 105 run: {op: ("address" "shared" "operation")} <- first_3 {undo: ("address" "address" "shared" "list" "address" "shared" "operation"), "lookup": ()}
9999 mem: location 1406 is 1161
9999 mem: location 1161 is 1507
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1507 in location 1197
9999 mem: incrementing refcount of 1507: 3 -> 4
 106 run: {result: ("address" "shared" "operation")} <- get {in: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1197 is 1507
9999 mem: skipping refcount at 1507
9999 mem: location 1508 is 1120
9999 mem: location 1509 is 1380
9999 mem: location 1197 is 1507
9999 mem: skipping refcount at 1507
9998 run: address to copy is 1508
9998 run: its type is ("address" "shared" "operation")
9999 mem: location 1508 is 1120
9999 mem: storing 1120 in location 1198
9999 mem: incrementing refcount of 1120: 5 -> 6
 106 run: reply {result: ("address" "shared" "operation")}
9999 mem: location 1198 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1120
9999 mem: storing 1120 in location 1405
9999 mem: incrementing refcount of 1120: 6 -> 7
 105 run: {typing: ("address" "insert-operation")} <- maybe-convert {op: ("address" "shared" "operation"), "lookup": ()}, {typing: "variant"}
9999 mem: location 1405 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 0
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 4
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1131 is 0
9999 mem: location 1405 is 1120
9999 mem: skipping refcount at 1120
9999 mem: storing 1122 in location 1412
 105 run: jump-unless {typing: ("address" "insert-operation")}, {: "offset"}
9999 mem: location 1412 is 1122
9998 run: jump-unless fell through
 105 run: {previous-coalesce-tag: "number"} <- get {typing: ("address" "insert-operation"), "lookup": ()}, {tag: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 4
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1130
9998 run: its type is "number"
9999 mem: location 1130 is 1
9999 mem: storing 1 in location 1429
 105 run: jump-unless {previous-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1429 is 1
9998 run: jump-unless fell through
 105 run: {insert-until: ("address" "address" "shared" "duplex-list" "character")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {insert-until: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 4
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1129
9999 mem: storing 1129 in location 1450
 105 run: {insert-until: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- next_2 {before-cursor: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()}
9999 mem: location 1397 is 1154
9999 mem: location 1154 is 1514
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1514 in location 1197
9999 mem: incrementing refcount of 1514: 5 -> 6
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1197 is 1514
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1197 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 1203
9999 mem: location 1517 is 1510
9999 mem: location 1197 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy is 1516
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1516 is 1203
9999 mem: storing 1203 in location 1198
9999 mem: incrementing refcount of 1203: 29 -> 30
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1198 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1203
9999 mem: location 1450 is 1129
9999 mem: decrementing refcount of 1203: 30 -> 29
9999 mem: storing 1203 in location 1129
9999 mem: incrementing refcount of 1203: 29 -> 30
 105 run: {after-row: ("address" "number")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {after-row: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 4
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1125
9999 mem: storing 1125 in location 1431
 105 run: {after-row: ("address" "number"), "lookup": ()} <- copy {cursor-row: ("address" "number"), "lookup": ()}
9999 mem: location 1398 is 1158
9999 mem: location 1158 is 1
9999 mem: location 1431 is 1125
9999 mem: storing 1 in location 1125
 105 run: {after-column: ("address" "number")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {after-column: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 4
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1126
9999 mem: storing 1126 in location 1432
 105 run: {after-column: ("address" "number"), "lookup": ()} <- copy {cursor-column: ("address" "number"), "lookup": ()}
9999 mem: location 1399 is 1159
9999 mem: location 1159 is 5
9999 mem: location 1432 is 1126
9999 mem: storing 5 in location 1126
 105 run: {after-top: ("address" "address" "shared" "duplex-list" "character")} <- get-address {typing: ("address" "insert-operation"), "lookup": ()}, {after-top-of-screen: "offset"}
9999 mem: location 1412 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1124 is 1169
9999 mem: location 1125 is 1
9999 mem: location 1126 is 5
9999 mem: location 1127 is 1169
9999 mem: location 1128 is 1503
9999 mem: location 1129 is 1203
9999 mem: location 1130 is 1
9999 mem: location 1412 is 1122
9998 run: address to copy is 1127
9999 mem: storing 1127 in location 1433
 105 run: {after-top: ("address" "address" "shared" "duplex-list" "character"), "lookup": ()} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 5
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1387 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1152
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1152 is 1169
9999 mem: location 1433 is 1127
9999 mem: decrementing refcount of 1169: 17 -> 16
9999 mem: storing 1169 in location 1127
9999 mem: incrementing refcount of 1169: 16 -> 17
 105 run: jump {+handle-keyboard-event_0_27+done-adding-insert-operation: "label"}
9998 run: jumping to instruction 436
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1386 is 1012
9999 mem: location 1387 is 1150
9999 mem: location 1392 is 0
9999 abandon: saving in free-list of size 87
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9998 run: result 1 is 1150
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1012: 45 -> 44
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 44 -> 45
9999 mem: decrementing refcount of 1150: 15 -> 14
9999 mem: storing 1150 in location 1298
9999 mem: incrementing refcount of 1150: 14 -> 15
9999 mem: storing 0 in location 1308
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1308 is 0
9998 run: jumping to instruction 25
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 5
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1158
9998 run: its type is "number"
9999 mem: location 1158 is 1
9999 mem: storing 1 in location 1299
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 5
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1298 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1159
9998 run: its type is "number"
9999 mem: location 1159 is 5
9999 mem: storing 5 in location 1300
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1296 is 1012
9999 mem: location 1299 is 1
9999 mem: location 1300 is 5
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1240
9999 mem: incrementing refcount of 1012: 45 -> 46
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1241
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1242
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1240 is 1012
9998 run: jump-unless fell through
 105 run: {row: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 6
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1243
 105 run: {row: ("address" "number"), "lookup": ()} <- copy {new-row: "number"}
9999 mem: location 1241 is 1
9999 mem: location 1243 is 1015
9999 mem: storing 1 in location 1015
 105 run: {column: ("address" "number")} <- get-address {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 10
9999 mem: location 1015 is 1
9999 mem: location 1016 is 6
9999 mem: location 1017 is 1018
9999 mem: location 1240 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1244
 105 run: {column: ("address" "number"), "lookup": ()} <- copy {new-column: "number"}
9999 mem: location 1242 is 5
9999 mem: location 1244 is 1016
9999 mem: storing 5 in location 1016
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1240 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 46 -> 45
9999 mem: storing 1012 in location 1296
9999 mem: incrementing refcount of 1012: 45 -> 46
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1297 is 1290
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1309
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1290 in location 1312
9999 mem: incrementing refcount of 1290: 5 -> 6
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1312 is 1290
9998 run: jump-unless fell through
 105 run: {current-event-index: ("address" "number")} <- get-address {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 4
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1291
9999 mem: storing 1291 in location 1313
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9999 mem: location 1291 is 4
9999 mem: location 1292 is 1272
9999 mem: location 1312 is 1290
9999 mem: skipping refcount at 1290
9998 run: address to copy is 1292
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1292 is 1272
9999 mem: storing 1272 in location 1314
9999 mem: incrementing refcount of 1272: 5 -> 6
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1314 is 1272
9999 mem: skipping refcount at 1272
9999 mem: storing 4 in location 1315
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: ("address" "number"), "lookup": ()}, {max: "number"}
9999 mem: location 1313 is 1291
9999 mem: location 1291 is 4
9999 mem: location 1315 is 4
9999 mem: storing 1 in location 1316
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "shared" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1194
9999 mem: storing 1194 in location 1317
9999 mem: incrementing refcount of 1194: 0 -> 1
 105 run: return {dummy: ("address" "shared" "event"), "lookup": ()}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1317 is 1194
9999 mem: skipping refcount at 1194
9999 mem: location 1195 is 0
9999 mem: location 1196 is 0
9999 mem: location 1197 is 0
9999 mem: location 1198 is 0
9999 mem: location 1312 is 1290
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1290
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: decrementing refcount of 1290: 6 -> 5
9999 mem: storing 1290 in location 1297
9999 mem: incrementing refcount of 1290: 5 -> 6
9999 mem: storing 1 in location 1305
9999 mem: storing 1 in location 1306
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {console: ("address" "shared" "console"), "same-as-ingredient": "1"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1296 is 1012
9999 mem: location 1297 is 1290
9999 mem: location 1298 is 1150
9999 abandon: saving in free-list of size 16
9999 trace: reply: decrementing callstack depth from 3
 103 run: {3: ("address" "shared" "array" "character")} <- editor-contents {2: ("address" "shared" "editor-data")}
9999 mem: location 2 is 1150
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1237
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1150 in location 1240
9999 mem: incrementing refcount of 1150: 15 -> 16
 104 run: {buf: ("address" "shared" "buffer")} <- new-buffer {80: "literal"}
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1163
 105 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 80 in location 1166
 105 run: {result: ("address" "shared" "buffer")} <- new {buffer: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1518
9999 mem: storing 1518 in location 1167
9999 mem: incrementing refcount of 1518: 0 -> 1
 105 run: {result: ("address" "shared" "buffer"), "lookup": ()} <- put {result: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}, {0: "literal"}
9999 mem: location 1167 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 0
9999 mem: location 1520 is 0
9999 mem: location 1167 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1519
9999 mem: storing 0 in location 1519
 105 run: {data: ("address" "shared" "array" "character")} <- new {character: "type"}, {capacity: "number"}
9999 mem: location 1166 is 80
9999 mem: array size is 80
9999 mem: allocating size 82
9999 mem: new alloc: 1521
9999 mem: storing 80 in location 1522
9999 mem: storing 1521 in location 1168
9999 mem: incrementing refcount of 1521: 0 -> 1
 105 run: {result: ("address" "shared" "buffer"), "lookup": ()} <- put {result: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}, {data: ("address" "shared" "array" "character")}
9999 mem: location 1167 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 0
9999 mem: location 1520 is 0
9999 mem: location 1168 is 1521
9999 mem: location 1167 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1520
9999 mem: storing 1521 in location 1520
 105 run: return {result: ("address" "shared" "buffer")}
9999 mem: location 1167 is 1518
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1518
9999 mem: storing 1518 in location 1241
9999 mem: incrementing refcount of 1518: 1 -> 2
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1240 is 1150
9999 mem: skipping refcount at 1150
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 1169
9999 mem: location 1153 is 0
9999 mem: location 1154 is 1514
9999 mem: location 1155 is 0
9999 mem: location 1156 is 9
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1
9999 mem: location 1159 is 5
9999 mem: location 1160 is 1
9999 mem: location 1161 is 1507
9999 mem: location 1162 is 0
9999 mem: location 1240 is 1150
9999 mem: skipping refcount at 1150
9998 run: address to copy is 1151
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1151 is 1169
9999 mem: storing 1169 in location 1242
9999 mem: incrementing refcount of 1169: 17 -> 18
 104 run: assert {curr: ("address" "shared" "duplex-list" "character")}, {"editor without data is illegal; must have at least a sentinel": "literal-string"}
9999 mem: location 1242 is 1169
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1242 is 1169
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1603
9999 mem: storing 3 in location 1604
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1169 in location 1606
9999 mem: incrementing refcount of 1169: 18 -> 19
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1606 is 1169
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1606 is 1169
9999 mem: skipping refcount at 1169
9999 mem: location 1170 is 167
9999 mem: location 1171 is 1190
9999 mem: location 1172 is 0
9999 mem: location 1606 is 1169
9999 mem: skipping refcount at 1169
9998 run: address to copy is 1171
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1171 is 1190
9999 mem: storing 1190 in location 1607
9999 mem: incrementing refcount of 1190: 12 -> 13
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1607 is 1190
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1190
9999 mem: decrementing refcount of 1169: 19 -> 18
9999 mem: storing 1190 in location 1242
9999 mem: incrementing refcount of 1190: 13 -> 14
 104 run: jump-if {curr: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1242 is 1190
9998 run: jumping to instruction 8
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1242 is 1190
9998 run: jump-unless fell through
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1242 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1242 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1191
9998 run: its type is "character"
9999 mem: location 1191 is 97
9999 mem: storing 97 in location 1243
 104 run: {buf: ("address" "shared" "buffer")} <- append_2 {buf: ("address" "shared" "buffer")}, {c: "character"}
9999 mem: location 1241 is 1518
9999 mem: location 1243 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1608
9999 mem: storing 9 in location 1609
 105 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1611
9999 mem: incrementing refcount of 1518: 2 -> 3
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1612
 105 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 0
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 0
9999 mem: storing 0 in location 1613
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1612 is 97
9999 mem: storing 0 in location 1614
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1614 is 0
9998 run: jumping to instruction 13
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "shared" "buffer")}
9999 mem: location 1611 is 1518
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1619
9999 mem: storing 6 in location 1620
 106 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1622
9999 mem: incrementing refcount of 1518: 3 -> 4
 106 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 0
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 0
9999 mem: storing 0 in location 1623
 106 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 0
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1624
9999 mem: incrementing refcount of 1521: 1 -> 2
 106 run: {capacity: "number"} <- length {s: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1624 is 1521
9999 mem: skipping refcount at 1521
9999 mem: storing 80 in location 1625
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1623 is 0
9999 mem: location 1625 is 80
9999 mem: storing 0 in location 1626
 106 run: reply {result: "boolean"}
9999 mem: location 1626 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1616
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jumping to instruction 18
 105 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 0
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1617
9999 mem: incrementing refcount of 1521: 2 -> 3
 105 run: {dest: ("address" "character")} <- index-address {s: ("address" "shared" "array" "character"), "lookup": ()}, {len: "number"}
9999 mem: location 1617 is 1521
9999 mem: skipping refcount at 1521
9999 mem: location 1613 is 0
9999 mem: storing 1523 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1612 is 97
9999 mem: location 1618 is 1523
9999 mem: storing 97 in location 1523
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1613 is 0
9999 mem: storing 1 in location 1613
 105 run: {in: ("address" "shared" "buffer"), "lookup": ()} <- put {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 0
9999 mem: location 1520 is 1521
9999 mem: location 1613 is 1
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1519
9999 mem: storing 1 in location 1519
 105 run: reply {in: ("address" "shared" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1611 is 1518
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1518
9999 mem: decrementing refcount of 1518: 4 -> 3
9999 mem: storing 1518 in location 1241
9999 mem: incrementing refcount of 1518: 3 -> 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1242 is 1190
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1603
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1190 in location 1606
9999 mem: incrementing refcount of 1190: 14 -> 15
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1606 is 1190
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1606 is 1190
9999 mem: skipping refcount at 1190
9999 mem: location 1191 is 97
9999 mem: location 1192 is 1199
9999 mem: location 1193 is 1169
9999 mem: location 1606 is 1190
9999 mem: skipping refcount at 1190
9998 run: address to copy is 1192
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1192 is 1199
9999 mem: storing 1199 in location 1607
9999 mem: incrementing refcount of 1199: 16 -> 17
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1607 is 1199
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1199
9999 mem: decrementing refcount of 1190: 15 -> 14
9999 mem: storing 1199 in location 1242
9999 mem: incrementing refcount of 1199: 17 -> 18
 104 run: jump {: "offset"}
9998 run: jumping to instruction 9
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1242 is 1199
9998 run: jump-unless fell through
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1242 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1503
9999 mem: location 1202 is 1190
9999 mem: location 1242 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1200
9998 run: its type is "character"
9999 mem: location 1200 is 98
9999 mem: storing 98 in location 1243
 104 run: {buf: ("address" "shared" "buffer")} <- append_2 {buf: ("address" "shared" "buffer")}, {c: "character"}
9999 mem: location 1241 is 1518
9999 mem: location 1243 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
9999 mem: new alloc from free list: 1608
 105 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1611
9999 mem: incrementing refcount of 1518: 4 -> 5
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1612
 105 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 1
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 1
9999 mem: storing 1 in location 1613
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1612 is 98
9999 mem: storing 0 in location 1614
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1614 is 0
9998 run: jumping to instruction 13
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "shared" "buffer")}
9999 mem: location 1611 is 1518
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1619
 106 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1622
9999 mem: incrementing refcount of 1518: 5 -> 6
 106 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 1
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 1
9999 mem: storing 1 in location 1623
 106 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 1
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1624
9999 mem: incrementing refcount of 1521: 3 -> 4
 106 run: {capacity: "number"} <- length {s: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1624 is 1521
9999 mem: skipping refcount at 1521
9999 mem: storing 80 in location 1625
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1623 is 1
9999 mem: location 1625 is 80
9999 mem: storing 0 in location 1626
 106 run: reply {result: "boolean"}
9999 mem: location 1626 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1616
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jumping to instruction 18
 105 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 1
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1617
9999 mem: incrementing refcount of 1521: 4 -> 5
 105 run: {dest: ("address" "character")} <- index-address {s: ("address" "shared" "array" "character"), "lookup": ()}, {len: "number"}
9999 mem: location 1617 is 1521
9999 mem: skipping refcount at 1521
9999 mem: location 1613 is 1
9999 mem: storing 1524 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1612 is 98
9999 mem: location 1618 is 1524
9999 mem: storing 98 in location 1524
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1613 is 1
9999 mem: storing 2 in location 1613
9990 schedule: append_2/editor-contents/run_1001/scenario_editor-provides-edited-contents
 105 run: {in: ("address" "shared" "buffer"), "lookup": ()} <- put {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 1
9999 mem: location 1520 is 1521
9999 mem: location 1613 is 2
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1519
9999 mem: storing 2 in location 1519
 105 run: reply {in: ("address" "shared" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1611 is 1518
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1518
9999 mem: decrementing refcount of 1518: 6 -> 5
9999 mem: storing 1518 in location 1241
9999 mem: incrementing refcount of 1518: 5 -> 6
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1242 is 1199
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1603
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1199 in location 1606
9999 mem: incrementing refcount of 1199: 18 -> 19
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1606 is 1199
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1606 is 1199
9999 mem: skipping refcount at 1199
9999 mem: location 1200 is 98
9999 mem: location 1201 is 1503
9999 mem: location 1202 is 1190
9999 mem: location 1606 is 1199
9999 mem: skipping refcount at 1199
9998 run: address to copy is 1201
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1201 is 1503
9999 mem: storing 1503 in location 1607
9999 mem: incrementing refcount of 1503: 10 -> 11
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1607 is 1503
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1503
9999 mem: decrementing refcount of 1199: 19 -> 18
9999 mem: storing 1503 in location 1242
9999 mem: incrementing refcount of 1503: 11 -> 12
 104 run: jump {: "offset"}
9998 run: jumping to instruction 9
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1242 is 1503
9998 run: jump-unless fell through
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1242 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1510
9999 mem: location 1506 is 1199
9999 mem: location 1242 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1504
9998 run: its type is "character"
9999 mem: location 1504 is 100
9999 mem: storing 100 in location 1243
 104 run: {buf: ("address" "shared" "buffer")} <- append_2 {buf: ("address" "shared" "buffer")}, {c: "character"}
9999 mem: location 1241 is 1518
9999 mem: location 1243 is 100
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
9999 mem: new alloc from free list: 1608
 105 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1611
9999 mem: incrementing refcount of 1518: 6 -> 7
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1612
 105 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 2
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 2
9999 mem: storing 2 in location 1613
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1612 is 100
9999 mem: storing 0 in location 1614
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1614 is 0
9998 run: jumping to instruction 13
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "shared" "buffer")}
9999 mem: location 1611 is 1518
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1619
 106 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1622
9999 mem: incrementing refcount of 1518: 7 -> 8
 106 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 2
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 2
9999 mem: storing 2 in location 1623
 106 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 2
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1624
9999 mem: incrementing refcount of 1521: 5 -> 6
 106 run: {capacity: "number"} <- length {s: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1624 is 1521
9999 mem: skipping refcount at 1521
9999 mem: storing 80 in location 1625
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1623 is 2
9999 mem: location 1625 is 80
9999 mem: storing 0 in location 1626
 106 run: reply {result: "boolean"}
9999 mem: location 1626 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1616
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jumping to instruction 18
 105 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 2
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1617
9999 mem: incrementing refcount of 1521: 6 -> 7
 105 run: {dest: ("address" "character")} <- index-address {s: ("address" "shared" "array" "character"), "lookup": ()}, {len: "number"}
9999 mem: location 1617 is 1521
9999 mem: skipping refcount at 1521
9999 mem: location 1613 is 2
9999 mem: storing 1525 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1612 is 100
9999 mem: location 1618 is 1525
9999 mem: storing 100 in location 1525
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1613 is 2
9999 mem: storing 3 in location 1613
 105 run: {in: ("address" "shared" "buffer"), "lookup": ()} <- put {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 2
9999 mem: location 1520 is 1521
9999 mem: location 1613 is 3
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1519
9999 mem: storing 3 in location 1519
 105 run: reply {in: ("address" "shared" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1611 is 1518
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1518
9999 mem: decrementing refcount of 1518: 8 -> 7
9999 mem: storing 1518 in location 1241
9999 mem: incrementing refcount of 1518: 7 -> 8
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1242 is 1503
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1603
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1503 in location 1606
9999 mem: incrementing refcount of 1503: 12 -> 13
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1606 is 1503
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1606 is 1503
9999 mem: skipping refcount at 1503
9999 mem: location 1504 is 100
9999 mem: location 1505 is 1510
9999 mem: location 1506 is 1199
9999 mem: location 1606 is 1503
9999 mem: skipping refcount at 1503
9998 run: address to copy is 1505
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1505 is 1510
9999 mem: storing 1510 in location 1607
9999 mem: incrementing refcount of 1510: 8 -> 9
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1607 is 1510
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1510
9999 mem: decrementing refcount of 1503: 13 -> 12
9999 mem: storing 1510 in location 1242
9999 mem: incrementing refcount of 1510: 9 -> 10
 104 run: jump {: "offset"}
9998 run: jumping to instruction 9
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1242 is 1510
9998 run: jump-unless fell through
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1242 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1514
9999 mem: location 1513 is 1503
9999 mem: location 1242 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1511
9998 run: its type is "character"
9999 mem: location 1511 is 101
9999 mem: storing 101 in location 1243
 104 run: {buf: ("address" "shared" "buffer")} <- append_2 {buf: ("address" "shared" "buffer")}, {c: "character"}
9999 mem: location 1241 is 1518
9999 mem: location 1243 is 101
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
9999 mem: new alloc from free list: 1608
 105 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1611
9999 mem: incrementing refcount of 1518: 8 -> 9
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1612
 105 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 3
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 3
9999 mem: storing 3 in location 1613
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1612 is 101
9999 mem: storing 0 in location 1614
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1614 is 0
9998 run: jumping to instruction 13
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "shared" "buffer")}
9999 mem: location 1611 is 1518
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1619
 106 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1622
9999 mem: incrementing refcount of 1518: 9 -> 10
 106 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 3
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 3
9999 mem: storing 3 in location 1623
 106 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 3
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1624
9999 mem: incrementing refcount of 1521: 7 -> 8
 106 run: {capacity: "number"} <- length {s: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1624 is 1521
9999 mem: skipping refcount at 1521
9999 mem: storing 80 in location 1625
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1623 is 3
9999 mem: location 1625 is 80
9999 mem: storing 0 in location 1626
 106 run: reply {result: "boolean"}
9999 mem: location 1626 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1616
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jumping to instruction 18
 105 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 3
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1617
9999 mem: incrementing refcount of 1521: 8 -> 9
 105 run: {dest: ("address" "character")} <- index-address {s: ("address" "shared" "array" "character"), "lookup": ()}, {len: "number"}
9999 mem: location 1617 is 1521
9999 mem: skipping refcount at 1521
9999 mem: location 1613 is 3
9999 mem: storing 1526 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1612 is 101
9999 mem: location 1618 is 1526
9999 mem: storing 101 in location 1526
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1613 is 3
9999 mem: storing 4 in location 1613
 105 run: {in: ("address" "shared" "buffer"), "lookup": ()} <- put {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 3
9999 mem: location 1520 is 1521
9999 mem: location 1613 is 4
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1519
9999 mem: storing 4 in location 1519
 105 run: reply {in: ("address" "shared" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1611 is 1518
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1518
9999 mem: decrementing refcount of 1518: 10 -> 9
9999 mem: storing 1518 in location 1241
9999 mem: incrementing refcount of 1518: 9 -> 10
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1242 is 1510
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1603
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1510 in location 1606
9999 mem: incrementing refcount of 1510: 10 -> 11
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1606 is 1510
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1606 is 1510
9999 mem: skipping refcount at 1510
9999 mem: location 1511 is 101
9999 mem: location 1512 is 1514
9999 mem: location 1513 is 1503
9999 mem: location 1606 is 1510
9999 mem: skipping refcount at 1510
9998 run: address to copy is 1512
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1512 is 1514
9999 mem: storing 1514 in location 1607
9999 mem: incrementing refcount of 1514: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1607 is 1514
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1514
9999 mem: decrementing refcount of 1510: 11 -> 10
9999 mem: storing 1514 in location 1242
9999 mem: incrementing refcount of 1514: 7 -> 8
 104 run: jump {: "offset"}
9998 run: jumping to instruction 9
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1242 is 1514
9998 run: jump-unless fell through
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1242 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 1203
9999 mem: location 1517 is 1510
9999 mem: location 1242 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy is 1515
9998 run: its type is "character"
9999 mem: location 1515 is 102
9999 mem: storing 102 in location 1243
 104 run: {buf: ("address" "shared" "buffer")} <- append_2 {buf: ("address" "shared" "buffer")}, {c: "character"}
9999 mem: location 1241 is 1518
9999 mem: location 1243 is 102
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
9999 mem: new alloc from free list: 1608
 105 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1611
9999 mem: incrementing refcount of 1518: 10 -> 11
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1612
 105 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 4
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 4
9999 mem: storing 4 in location 1613
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1612 is 102
9999 mem: storing 0 in location 1614
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1614 is 0
9998 run: jumping to instruction 13
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "shared" "buffer")}
9999 mem: location 1611 is 1518
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1619
 106 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1622
9999 mem: incrementing refcount of 1518: 11 -> 12
 106 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 4
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 4
9999 mem: storing 4 in location 1623
 106 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 4
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1624
9999 mem: incrementing refcount of 1521: 9 -> 10
 106 run: {capacity: "number"} <- length {s: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1624 is 1521
9999 mem: skipping refcount at 1521
9999 mem: storing 80 in location 1625
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1623 is 4
9999 mem: location 1625 is 80
9999 mem: storing 0 in location 1626
 106 run: reply {result: "boolean"}
9999 mem: location 1626 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1616
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jumping to instruction 18
 105 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 4
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1617
9999 mem: incrementing refcount of 1521: 10 -> 11
 105 run: {dest: ("address" "character")} <- index-address {s: ("address" "shared" "array" "character"), "lookup": ()}, {len: "number"}
9999 mem: location 1617 is 1521
9999 mem: skipping refcount at 1521
9999 mem: location 1613 is 4
9999 mem: storing 1527 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1612 is 102
9999 mem: location 1618 is 1527
9999 mem: storing 102 in location 1527
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1613 is 4
9999 mem: storing 5 in location 1613
 105 run: {in: ("address" "shared" "buffer"), "lookup": ()} <- put {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 4
9999 mem: location 1520 is 1521
9999 mem: location 1613 is 5
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1519
9999 mem: storing 5 in location 1519
 105 run: reply {in: ("address" "shared" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1611 is 1518
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1518
9999 mem: decrementing refcount of 1518: 12 -> 11
9999 mem: storing 1518 in location 1241
9999 mem: incrementing refcount of 1518: 11 -> 12
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1242 is 1514
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1603
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1514 in location 1606
9999 mem: incrementing refcount of 1514: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1606 is 1514
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1606 is 1514
9999 mem: skipping refcount at 1514
9999 mem: location 1515 is 102
9999 mem: location 1516 is 1203
9999 mem: location 1517 is 1510
9999 mem: location 1606 is 1514
9999 mem: skipping refcount at 1514
9998 run: address to copy is 1516
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1516 is 1203
9999 mem: storing 1203 in location 1607
9999 mem: incrementing refcount of 1203: 30 -> 31
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1607 is 1203
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1203
9999 mem: decrementing refcount of 1514: 9 -> 8
9999 mem: storing 1203 in location 1242
9999 mem: incrementing refcount of 1203: 31 -> 32
 104 run: jump {: "offset"}
9998 run: jumping to instruction 9
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1242 is 1203
9998 run: jump-unless fell through
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1242 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1514
9999 mem: location 1242 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1204
9998 run: its type is "character"
9999 mem: location 1204 is 99
9999 mem: storing 99 in location 1243
 104 run: {buf: ("address" "shared" "buffer")} <- append_2 {buf: ("address" "shared" "buffer")}, {c: "character"}
9999 mem: location 1241 is 1518
9999 mem: location 1243 is 99
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
9999 mem: new alloc from free list: 1608
 105 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1611
9999 mem: incrementing refcount of 1518: 12 -> 13
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1612
 105 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 5
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 5
9999 mem: storing 5 in location 1613
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1612 is 99
9999 mem: storing 0 in location 1614
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1614 is 0
9998 run: jumping to instruction 13
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "shared" "buffer")}
9999 mem: location 1611 is 1518
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1619
 106 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1622
9999 mem: incrementing refcount of 1518: 13 -> 14
 106 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 5
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 5
9999 mem: storing 5 in location 1623
 106 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 5
9999 mem: location 1520 is 1521
9999 mem: location 1622 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1624
9999 mem: incrementing refcount of 1521: 11 -> 12
 106 run: {capacity: "number"} <- length {s: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1624 is 1521
9999 mem: skipping refcount at 1521
9999 mem: storing 80 in location 1625
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1623 is 5
9999 mem: location 1625 is 80
9999 mem: storing 0 in location 1626
 106 run: reply {result: "boolean"}
9999 mem: location 1626 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1616
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jumping to instruction 18
 105 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 5
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1617
9999 mem: incrementing refcount of 1521: 12 -> 13
 105 run: {dest: ("address" "character")} <- index-address {s: ("address" "shared" "array" "character"), "lookup": ()}, {len: "number"}
9999 mem: location 1617 is 1521
9999 mem: skipping refcount at 1521
9999 mem: location 1613 is 5
9999 mem: storing 1528 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {c: "character"}
9999 mem: location 1612 is 99
9999 mem: location 1618 is 1528
9999 mem: storing 99 in location 1528
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1613 is 5
9999 mem: storing 6 in location 1613
 105 run: {in: ("address" "shared" "buffer"), "lookup": ()} <- put {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 5
9999 mem: location 1520 is 1521
9999 mem: location 1613 is 6
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy to is 1519
9999 mem: storing 6 in location 1519
 105 run: reply {in: ("address" "shared" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1611 is 1518
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1518
9999 mem: decrementing refcount of 1518: 14 -> 13
9999 mem: storing 1518 in location 1241
9999 mem: incrementing refcount of 1518: 13 -> 14
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1242 is 1203
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1603
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1203 in location 1606
9999 mem: incrementing refcount of 1203: 32 -> 33
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1606 is 1203
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1606 is 1203
9999 mem: skipping refcount at 1203
9999 mem: location 1204 is 99
9999 mem: location 1205 is 0
9999 mem: location 1206 is 1514
9999 mem: location 1606 is 1203
9999 mem: skipping refcount at 1203
9998 run: address to copy is 1205
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1205 is 0
9999 mem: storing 0 in location 1607
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1607 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1203: 33 -> 32
9999 mem: storing 0 in location 1242
 104 run: jump {: "offset"}
9998 run: jumping to instruction 9
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 14
 104 run: {result: ("address" "shared" "array" "character")} <- buffer-to-array {buf: ("address" "shared" "buffer")}
9999 mem: location 1241 is 1518
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
9999 mem: new alloc from free list: 1608
 105 run: {in: ("address" "shared" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: storing 1518 in location 1611
9999 mem: incrementing refcount of 1518: 14 -> 15
 105 run: jump-if {in: ("address" "shared" "buffer")}, {: "offset"}
9999 mem: location 1611 is 1518
9998 run: jumping to instruction 5
 105 run: {len: "number"} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 6
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1519
9998 run: its type is "number"
9999 mem: location 1519 is 6
9999 mem: storing 6 in location 1612
 105 run: {s: ("address" "shared" "array" "character")} <- get {in: ("address" "shared" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9999 mem: location 1519 is 6
9999 mem: location 1520 is 1521
9999 mem: location 1611 is 1518
9999 mem: skipping refcount at 1518
9998 run: address to copy is 1520
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 1520 is 1521
9999 mem: storing 1521 in location 1613
9999 mem: incrementing refcount of 1521: 13 -> 14
 105 run: {result: ("address" "shared" "array" "character")} <- new {character: "type"}, {len: "number"}
9999 mem: location 1612 is 6
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1619
9999 mem: storing 1619 in location 1614
9999 mem: incrementing refcount of 1619: 0 -> 1
 105 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1615
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1615 is 0
9999 mem: location 1612 is 6
9999 mem: storing 0 in location 1616
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {s: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1613 is 1521
9999 mem: skipping refcount at 1521
9998 run: base address is 1522
9999 mem: location 1615 is 0
9998 run: address to copy is 1523
9998 run: its type is character
9999 mem: location 1523 is 97
9999 mem: storing 97 in location 1617
 105 run: {dest: ("address" "character")} <- index-address {result: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1614 is 1619
9999 mem: skipping refcount at 1619
9999 mem: location 1615 is 0
9999 mem: storing 1621 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {src: "character"}
9999 mem: location 1617 is 97
9999 mem: location 1618 is 1621
9999 mem: storing 97 in location 1621
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1615 is 0
9999 mem: storing 1 in location 1615
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1615 is 1
9999 mem: location 1612 is 6
9999 mem: storing 0 in location 1616
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {s: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1613 is 1521
9999 mem: skipping refcount at 1521
9998 run: base address is 1522
9999 mem: location 1615 is 1
9998 run: address to copy is 1524
9998 run: its type is character
9999 mem: location 1524 is 98
9999 mem: storing 98 in location 1617
 105 run: {dest: ("address" "character")} <- index-address {result: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1614 is 1619
9999 mem: skipping refcount at 1619
9999 mem: location 1615 is 1
9999 mem: storing 1622 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {src: "character"}
9999 mem: location 1617 is 98
9999 mem: location 1618 is 1622
9999 mem: storing 98 in location 1622
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1615 is 1
9999 mem: storing 2 in location 1615
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1615 is 2
9999 mem: location 1612 is 6
9999 mem: storing 0 in location 1616
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {s: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1613 is 1521
9999 mem: skipping refcount at 1521
9998 run: base address is 1522
9999 mem: location 1615 is 2
9998 run: address to copy is 1525
9998 run: its type is character
9999 mem: location 1525 is 100
9999 mem: storing 100 in location 1617
 105 run: {dest: ("address" "character")} <- index-address {result: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1614 is 1619
9999 mem: skipping refcount at 1619
9999 mem: location 1615 is 2
9999 mem: storing 1623 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {src: "character"}
9999 mem: location 1617 is 100
9999 mem: location 1618 is 1623
9999 mem: storing 100 in location 1623
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1615 is 2
9999 mem: storing 3 in location 1615
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1615 is 3
9999 mem: location 1612 is 6
9999 mem: storing 0 in location 1616
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {s: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1613 is 1521
9999 mem: skipping refcount at 1521
9998 run: base address is 1522
9999 mem: location 1615 is 3
9998 run: address to copy is 1526
9998 run: its type is character
9999 mem: location 1526 is 101
9999 mem: storing 101 in location 1617
 105 run: {dest: ("address" "character")} <- index-address {result: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1614 is 1619
9999 mem: skipping refcount at 1619
9999 mem: location 1615 is 3
9999 mem: storing 1624 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {src: "character"}
9999 mem: location 1617 is 101
9999 mem: location 1618 is 1624
9999 mem: storing 101 in location 1624
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1615 is 3
9999 mem: storing 4 in location 1615
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1615 is 4
9999 mem: location 1612 is 6
9999 mem: storing 0 in location 1616
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {s: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1613 is 1521
9999 mem: skipping refcount at 1521
9998 run: base address is 1522
9999 mem: location 1615 is 4
9998 run: address to copy is 1527
9998 run: its type is character
9999 mem: location 1527 is 102
9999 mem: storing 102 in location 1617
 105 run: {dest: ("address" "character")} <- index-address {result: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1614 is 1619
9999 mem: skipping refcount at 1619
9999 mem: location 1615 is 4
9999 mem: storing 1625 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {src: "character"}
9999 mem: location 1617 is 102
9999 mem: location 1618 is 1625
9999 mem: storing 102 in location 1625
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1615 is 4
9999 mem: storing 5 in location 1615
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1615 is 5
9999 mem: location 1612 is 6
9999 mem: storing 0 in location 1616
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {s: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1613 is 1521
9999 mem: skipping refcount at 1521
9998 run: base address is 1522
9999 mem: location 1615 is 5
9998 run: address to copy is 1528
9998 run: its type is character
9999 mem: location 1528 is 99
9999 mem: storing 99 in location 1617
 105 run: {dest: ("address" "character")} <- index-address {result: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1614 is 1619
9999 mem: skipping refcount at 1619
9999 mem: location 1615 is 5
9999 mem: storing 1626 in location 1618
 105 run: {dest: ("address" "character"), "lookup": ()} <- copy {src: "character"}
9999 mem: location 1617 is 99
9999 mem: location 1618 is 1626
9999 mem: storing 99 in location 1626
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1615 is 5
9999 mem: storing 6 in location 1615
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1615 is 6
9999 mem: location 1612 is 6
9999 mem: storing 1 in location 1616
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1616 is 1
9998 run: jumping to instruction 18
 105 run: reply {result: ("address" "shared" "array" "character")}
9999 mem: location 1614 is 1619
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1619
9999 mem: storing 1619 in location 1244
9999 mem: incrementing refcount of 1619: 1 -> 2
 104 run: reply {result: ("address" "shared" "array" "character")}
9999 mem: location 1244 is 1619
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1619
9999 mem: storing 1619 in location 3
9999 mem: incrementing refcount of 1619: 2 -> 3
 103 run: {4: ("array" "character")} <- copy {3: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 3 is 1619
9999 mem: skipping refcount at 1619
9999 mem: location 1620 is 6
9999 mem: location 1621 is 97
9999 mem: location 1622 is 98
9999 mem: location 1623 is 100
9999 mem: location 1624 is 101
9999 mem: location 1625 is 102
9999 mem: location 1626 is 99
9999 mem: storing 6 in location 4
9999 mem: storing 97 in location 5
9999 mem: storing 98 in location 6
9999 mem: storing 100 in location 7
9999 mem: storing 101 in location 8
9999 mem: storing 102 in location 9
9999 mem: storing 99 in location 10
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    4:array:character <- [abdefc]\n  ": "literal-string"}
9999 run: checking string length at 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
