9991 parse: --- defining scenario_editor-scrolls-down-on-newline
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal", "width": ()}
9993 parse:   ingredient: {4: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {4: "literal", "height": ()}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"a\nb\nc": "literal-string"}
9993 parse:   product: {1: ("address" "shared" "array" "character")}
9992 load: after rewriting: {1: ("address" "shared" "array" "character")} <- new {"a\nb\nc": "literal-string"}
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {1: ("address" "shared" "array" "character")}
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {0: "literal", "left": ()}
9993 parse:   ingredient: {5: "literal", "right": ()}
9993 parse:   product: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9993 parse: instruction: assume-console
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    left-click 3, 4\n    type [\n]\n  ": "literal-string"}
9992 load: after rewriting: assume-console {"\n    left-click 3, 4\n    type [\n]\n  ": "literal-string"}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n    3:number <- get *2:address:shared:editor-data, cursor-row:offset\n    4:number <- get *2:address:shared:editor-data, cursor-column:offset\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n    3:number <- get *2:address:shared:editor-data, cursor-row:offset\n    4:number <- get *2:address:shared:editor-data, cursor-column:offset\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .     .\n    .b    .\n    .c    .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .     .\n    .b    .\n    .c    .\n    .     .\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 3\n    4 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    3 <- 3\n    4 <- 0\n  ": "literal-string"}
9999 parse: recipe scenario_editor-scrolls-down-on-newline has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- deduce types for recipe scenario_editor-scrolls-down-on-newline
9992 transform: screen => ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- collect surrounding spaces for recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- transform names for recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-scrolls-down-on-newline
9992 transform: instruction {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {4: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "shared" "screen")}
9992 transform: instruction {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9991 transform: --- compute instruction operations for recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- transform braces for recipe scenario_editor-scrolls-down-on-newline
9992 transform: assume-screen ...
9992 transform: new ...
9992 transform: new-editor ...
9992 transform: assume-console ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- type-check calls inside recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- type-check merge instructions in recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- check types of reply instructions in recipe scenario_editor-scrolls-down-on-newline
9991 transform: --- checking reply instructions against header for scenario_editor-scrolls-down-on-newline
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-scrolls-down-on-newline
 102 run: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {4: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1004
 103 run: {result: ("address" "shared" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 0 -> 1
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 5
9999 mem: location 1004 is 4
9999 mem: storing 20 in location 1006
 103 run: {data: ("address" "shared" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 20
9999 mem: array size is 20
9999 mem: allocating size 42
9999 mem: new alloc: 1014
9999 mem: storing 20 in location 1015
9999 mem: storing 1014 in location 1007
9999 mem: incrementing refcount of 1014: 0 -> 1
 103 run: {result: ("address" "shared" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "shared" "array" "screen-cell")}
9999 mem: location 1004 is 4
9999 mem: location 1003 is 5
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: storing 4 in location 1009
9999 mem: storing 5 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "shared" "screen")} <- clear-screen {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1056
9999 mem: storing 8 in location 1057
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1059 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1060
9999 mem: incrementing refcount of 1014: 1 -> 2
 104 run: {max: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1061
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1062
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 0
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 0
9998 run: address to copy to is 1016
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 0
9999 mem: storing 1 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 1
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 1
9998 run: address to copy to is 1018
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 1
9999 mem: storing 2 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 2
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 2
9998 run: address to copy to is 1020
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 2
9999 mem: storing 3 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 3
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 3
9998 run: address to copy to is 1022
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 3
9999 mem: storing 4 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 4
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 4
9998 run: address to copy to is 1024
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 4
9999 mem: storing 5 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 5
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 5
9998 run: address to copy to is 1026
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 5
9999 mem: storing 6 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 6
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 6
9998 run: address to copy to is 1028
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 6
9999 mem: storing 7 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 7
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 7
9998 run: address to copy to is 1030
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 7
9999 mem: storing 8 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 8
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 8
9998 run: address to copy to is 1032
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 8
9999 mem: storing 9 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 9
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 9
9998 run: address to copy to is 1034
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 9
9999 mem: storing 10 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 10
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 10
9998 run: address to copy to is 1036
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 10
9999 mem: storing 11 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 11
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 11
9998 run: address to copy to is 1038
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 11
9999 mem: storing 12 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 12
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 12
9998 run: address to copy to is 1040
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 12
9999 mem: storing 13 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 13
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 13
9998 run: address to copy to is 1042
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 13
9999 mem: storing 14 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 14
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 14
9998 run: address to copy to is 1044
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 14
9999 mem: storing 15 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 15
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 15
9998 run: address to copy to is 1046
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1046
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 15
9999 mem: storing 16 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 16
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 16
9998 run: address to copy to is 1048
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1048
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 16
9999 mem: storing 17 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 17
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 17
9998 run: address to copy to is 1050
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1050
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 17
9999 mem: storing 18 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 18
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 18
9998 run: address to copy to is 1052
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1052
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 18
9999 mem: storing 19 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 19
9999 mem: location 1061 is 20
9999 mem: storing 0 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1060 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1062 is 19
9998 run: address to copy to is 1054
9999 mem: location 1064 is 0
9999 mem: location 1065 is 7
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1062 is 19
9999 mem: storing 20 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1062 is 20
9999 mem: location 1061 is 20
9999 mem: storing 1 in location 1063
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1063 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 2 -> 1
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: reply {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
9999 mem: incrementing refcount of 1008: 2 -> 3
 102 run: {1: ("address" "shared" "array" "character")} <- new {"a\nb\nc": "literal-string"}
9999 mem: new string alloc: 1066
9999 mem: storing 1066 in location 1
9999 mem: incrementing refcount of 1066: 0 -> 1
 102 run: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9999 mem: location 1 is 1066
9999 mem: location 900 is 1008
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1073
9999 mem: storing 7 in location 1074
 103 run: {s: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1066 in location 1076
9999 mem: incrementing refcount of 1066: 1 -> 2
 103 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1077
9999 mem: incrementing refcount of 1008: 3 -> 4
 103 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1078
 103 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1079
 103 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1079 is 5
9999 mem: storing 4 in location 1079
 103 run: {result: ("address" "shared" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1082
9999 mem: storing 1082 in location 1080
9999 mem: incrementing refcount of 1082: 0 -> 1
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}, {left: "number"}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1078 is 0
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1087
9999 mem: storing 0 in location 1087
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}, {right: "number"}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1079 is 4
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1088
9999 mem: storing 4 in location 1088
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {1: "literal", "top": ()}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1090
9999 mem: storing 1 in location 1090
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {left: "number"}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1078 is 0
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1091
9999 mem: storing 0 in location 1091
 103 run: {init: ("address" "shared" "duplex-list" "character")} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1095
9999 mem: storing 4 in location 1096
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1098
 104 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1099
 104 run: {result: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1101
9999 mem: storing 1101 in location 1100
9999 mem: incrementing refcount of 1101: 0 -> 1
 104 run: {result: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "shared" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1098 is 167
9999 mem: location 1099 is 0
9999 mem: location 1100 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1100 is 1101
9999 mem: skipping refcount at 1101
9999 mem: storing 167 in location 1102
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 104 run: jump-unless {in: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1099 is 0
9998 run: jumping to instruction 8
 104 run: return {result: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1100 is 1101
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1101
9999 mem: storing 1101 in location 1081
9999 mem: incrementing refcount of 1101: 1 -> 2
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1081 is 1101
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1083
9999 mem: storing 1101 in location 1083
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1081 is 1101
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1084
9999 mem: storing 1101 in location 1084
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1081 is 1101
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1086
9999 mem: storing 1101 in location 1086
 103 run: {result: ("address" "shared" "editor-data")} <- insert-text {result: ("address" "shared" "editor-data")}, {s: ("address" "shared" "array" "character")}
9999 mem: location 1080 is 1082
9999 mem: location 1076 is 1066
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1059
9999 mem: incrementing refcount of 1082: 1 -> 2
 104 run: {text: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1066 in location 1060
9999 mem: incrementing refcount of 1066: 2 -> 3
 104 run: jump-if {text: ("address" "shared" "array" "character")}, {1: "offset"}
9999 mem: location 1060 is 1066
9998 run: jumping to instruction 5
 104 run: {len: "number"} <- length {text: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1060 is 1066
9999 mem: skipping refcount at 1066
9999 mem: storing 5 in location 1061
 104 run: jump-if {len: "number"}, {1: "offset"}
9999 mem: location 1061 is 5
9998 run: jumping to instruction 8
 104 run: {idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1062
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1059 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1059 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1083
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1083 is 1101
9999 mem: storing 1101 in location 1063
9999 mem: incrementing refcount of 1101: 2 -> 3
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1062 is 0
9999 mem: location 1061 is 5
9999 mem: storing 0 in location 1064
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1060 is 1066
9999 mem: skipping refcount at 1066
9998 run: base address is 1067
9999 mem: location 1062 is 0
9998 run: address to copy is 1068
9998 run: its type is character
9999 mem: location 1068 is 97
9999 mem: storing 97 in location 1065
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1065 is 97
9999 mem: location 1063 is 1101
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1105
9999 mem: storing 5 in location 1106
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1108
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1109
9999 mem: incrementing refcount of 1101: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1112
9999 mem: storing 1112 in location 1110
9999 mem: incrementing refcount of 1112: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1110 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1108 is 97
9999 mem: location 1110 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy to is 1113
9999 mem: storing 97 in location 1113
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1109 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 0
9999 mem: location 1104 is 0
9999 mem: location 1109 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1103
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1103 is 0
9999 mem: storing 0 in location 1111
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 0
9999 mem: location 1104 is 0
9999 mem: location 1110 is 1112
9999 mem: location 1109 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy to is 1103
9999 mem: storing 1112 in location 1103
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1109 is 1101
9999 mem: location 1110 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy to is 1115
9999 mem: storing 1101 in location 1115
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1101
9999 mem: location 1111 is 0
9999 mem: location 1110 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy to is 1114
9999 mem: storing 0 in location 1114
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1109 is 1101
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1063 is 1101
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1116
9999 mem: storing 3 in location 1117
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1119
9999 mem: incrementing refcount of 1101: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1101
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1103
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1103 is 1112
9999 mem: storing 1112 in location 1120
9999 mem: incrementing refcount of 1112: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1112
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1112
9999 mem: decrementing refcount of 1101: 5 -> 4
9999 mem: storing 1112 in location 1063
9999 mem: incrementing refcount of 1112: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1062 is 0
9999 mem: storing 1 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1062 is 1
9999 mem: location 1061 is 5
9999 mem: storing 0 in location 1064
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1060 is 1066
9999 mem: skipping refcount at 1066
9998 run: base address is 1067
9999 mem: location 1062 is 1
9998 run: address to copy is 1069
9998 run: its type is character
9999 mem: location 1069 is 10
9999 mem: storing 10 in location 1065
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1065 is 10
9999 mem: location 1063 is 1112
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1105
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1108
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1112 in location 1109
9999 mem: incrementing refcount of 1112: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1121
9999 mem: storing 1121 in location 1110
9999 mem: incrementing refcount of 1121: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1110 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 0
9999 mem: location 1123 is 0
9999 mem: location 1124 is 0
9999 mem: location 1108 is 10
9999 mem: location 1110 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy to is 1122
9999 mem: storing 10 in location 1122
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1109 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1101
9999 mem: location 1109 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1114
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1114 is 0
9999 mem: storing 0 in location 1111
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1101
9999 mem: location 1110 is 1121
9999 mem: location 1109 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy to is 1114
9999 mem: storing 1121 in location 1114
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 0
9999 mem: location 1124 is 0
9999 mem: location 1109 is 1112
9999 mem: location 1110 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy to is 1124
9999 mem: storing 1112 in location 1124
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 0
9999 mem: location 1124 is 1112
9999 mem: location 1111 is 0
9999 mem: location 1110 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy to is 1123
9999 mem: storing 0 in location 1123
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1109 is 1112
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1063 is 1112
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1112 in location 1119
9999 mem: incrementing refcount of 1112: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1112
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1114
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1114 is 1121
9999 mem: storing 1121 in location 1120
9999 mem: incrementing refcount of 1121: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1121
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1121
9999 mem: decrementing refcount of 1112: 5 -> 4
9999 mem: storing 1121 in location 1063
9999 mem: incrementing refcount of 1121: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1062 is 1
9999 mem: storing 2 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1062 is 2
9999 mem: location 1061 is 5
9999 mem: storing 0 in location 1064
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1060 is 1066
9999 mem: skipping refcount at 1066
9998 run: base address is 1067
9999 mem: location 1062 is 2
9998 run: address to copy is 1070
9998 run: its type is character
9999 mem: location 1070 is 98
9999 mem: storing 98 in location 1065
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1065 is 98
9999 mem: location 1063 is 1121
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1105
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1108
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1109
9999 mem: incrementing refcount of 1121: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1125
9999 mem: storing 1125 in location 1110
9999 mem: incrementing refcount of 1125: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1110 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 0
9999 mem: location 1127 is 0
9999 mem: location 1128 is 0
9999 mem: location 1108 is 98
9999 mem: location 1110 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy to is 1126
9999 mem: storing 98 in location 1126
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1109 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 0
9999 mem: location 1124 is 1112
9999 mem: location 1109 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 0
9999 mem: storing 0 in location 1111
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 0
9999 mem: location 1124 is 1112
9999 mem: location 1110 is 1125
9999 mem: location 1109 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy to is 1123
9999 mem: storing 1125 in location 1123
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 0
9999 mem: location 1128 is 0
9999 mem: location 1109 is 1121
9999 mem: location 1110 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy to is 1128
9999 mem: storing 1121 in location 1128
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 0
9999 mem: location 1128 is 1121
9999 mem: location 1111 is 0
9999 mem: location 1110 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy to is 1127
9999 mem: storing 0 in location 1127
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1109 is 1121
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1063 is 1121
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1119
9999 mem: incrementing refcount of 1121: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1121
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 1125
9999 mem: storing 1125 in location 1120
9999 mem: incrementing refcount of 1125: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1125
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1125
9999 mem: decrementing refcount of 1121: 5 -> 4
9999 mem: storing 1125 in location 1063
9999 mem: incrementing refcount of 1125: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1062 is 2
9999 mem: storing 3 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1062 is 3
9999 mem: location 1061 is 5
9999 mem: storing 0 in location 1064
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1060 is 1066
9999 mem: skipping refcount at 1066
9998 run: base address is 1067
9999 mem: location 1062 is 3
9998 run: address to copy is 1071
9998 run: its type is character
9999 mem: location 1071 is 10
9999 mem: storing 10 in location 1065
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1065 is 10
9999 mem: location 1063 is 1125
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1105
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1108
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1109
9999 mem: incrementing refcount of 1125: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1129
9999 mem: storing 1129 in location 1110
9999 mem: incrementing refcount of 1129: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1110 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 0
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1108 is 10
9999 mem: location 1110 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1130
9999 mem: storing 10 in location 1130
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1109 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 0
9999 mem: location 1128 is 1121
9999 mem: location 1109 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 0
9999 mem: storing 0 in location 1111
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 0
9999 mem: location 1128 is 1121
9999 mem: location 1110 is 1129
9999 mem: location 1109 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy to is 1127
9999 mem: storing 1129 in location 1127
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1109 is 1125
9999 mem: location 1110 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1132
9999 mem: storing 1125 in location 1132
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 0
9999 mem: location 1132 is 1125
9999 mem: location 1111 is 0
9999 mem: location 1110 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1131
9999 mem: storing 0 in location 1131
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1109 is 1125
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1063 is 1125
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1119
9999 mem: incrementing refcount of 1125: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1125
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1125: 5 -> 4
9999 mem: storing 1129 in location 1063
9999 mem: incrementing refcount of 1129: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1062 is 3
9999 mem: storing 4 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1062 is 4
9999 mem: location 1061 is 5
9999 mem: storing 0 in location 1064
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1060 is 1066
9999 mem: skipping refcount at 1066
9998 run: base address is 1067
9999 mem: location 1062 is 4
9998 run: address to copy is 1072
9998 run: its type is character
9999 mem: location 1072 is 99
9999 mem: storing 99 in location 1065
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1065 is 99
9999 mem: location 1063 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1105
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1108
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1109
9999 mem: incrementing refcount of 1129: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1133
9999 mem: storing 1133 in location 1110
9999 mem: incrementing refcount of 1133: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1110 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
9999 mem: location 1136 is 0
9999 mem: location 1108 is 99
9999 mem: location 1110 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy to is 1134
9999 mem: storing 99 in location 1134
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1109 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 0
9999 mem: location 1132 is 1125
9999 mem: location 1109 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 0
9999 mem: storing 0 in location 1111
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 0
9999 mem: location 1132 is 1125
9999 mem: location 1110 is 1133
9999 mem: location 1109 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1131
9999 mem: storing 1133 in location 1131
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 0
9999 mem: location 1109 is 1129
9999 mem: location 1110 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy to is 1136
9999 mem: storing 1129 in location 1136
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1111 is 0
9999 mem: location 1110 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy to is 1135
9999 mem: storing 0 in location 1135
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1109 is 1129
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1063 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1119
9999 mem: incrementing refcount of 1129: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 5 -> 4
9999 mem: storing 1133 in location 1063
9999 mem: incrementing refcount of 1133: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1062 is 4
9999 mem: storing 5 in location 1062
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1062 is 5
9999 mem: location 1061 is 5
9999 mem: storing 1 in location 1064
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 1
9998 run: jumping to instruction 18
 104 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1059 is 1082
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1082
9999 mem: decrementing refcount of 1082: 2 -> 1
9999 mem: storing 1082 in location 1080
9999 mem: incrementing refcount of 1082: 1 -> 2
 103 run: _, _, {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")} <- render {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")}
9999 mem: location 1077 is 1008
9999 mem: location 1080 is 1082
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 mem: new alloc: 1137
9999 mem: storing 26 in location 1138
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 4 -> 5
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1141
9999 mem: incrementing refcount of 1082: 2 -> 3
 104 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1141 is 1082
9998 run: jumping to instruction 5
 104 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1142
 104 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1140 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1119
9999 mem: incrementing refcount of 1008: 5 -> 6
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1120
 105 run: return {height: "number"}
9999 mem: location 1120 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 4
9999 mem: storing 4 in location 1143
 104 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1144
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1101
9999 mem: storing 1101 in location 1145
9999 mem: incrementing refcount of 1101: 4 -> 5
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1101
9999 mem: storing 1101 in location 1146
9999 mem: incrementing refcount of 1101: 5 -> 6
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1101
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1119
9999 mem: incrementing refcount of 1101: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1101
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1103
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1103 is 1112
9999 mem: storing 1112 in location 1120
9999 mem: incrementing refcount of 1112: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1112
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1112
9999 mem: decrementing refcount of 1101: 7 -> 6
9999 mem: storing 1112 in location 1145
9999 mem: incrementing refcount of 1112: 5 -> 6
 104 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1147
 104 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1148
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 1
9999 mem: storing 1 in location 1150
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 1151
 104 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1086
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1086 is 1101
9999 mem: storing 1101 in location 1152
9999 mem: incrementing refcount of 1101: 6 -> 7
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 6 -> 7
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1099
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 6 -> 7
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1112
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1151 is 0
9999 mem: storing 1 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 1
9998 run: jump-unless fell through
 104 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1101
9999 mem: decrementing refcount of 1101: 7 -> 6
9999 mem: storing 1101 in location 1152
9999 mem: incrementing refcount of 1101: 6 -> 7
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1145 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1113
9998 run: its type is "character"
9999 mem: location 1113 is 97
9999 mem: storing 97 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1165
9999 mem: storing 10 in location 1166
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 97
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 97
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 97
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 97
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 mem: new alloc: 1177
9999 mem: storing 24 in location 1178
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 7 -> 8
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 97
  90 print-character: 97 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 0
9999 mem: storing 5 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 2 -> 3
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 97
9999 mem: location 1182 is 7
9999 mem: storing 97 in location 1199
9999 mem: storing 7 in location 1200
 105 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 5
9998 run: address to copy to is 1026
9999 mem: location 1199 is 97
9999 mem: location 1200 is 7
9999 mem: storing 97 in location 1026
9999 mem: storing 7 in location 1027
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1112
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1112 in location 1119
9999 mem: incrementing refcount of 1112: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1112
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1114
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1114 is 1121
9999 mem: storing 1121 in location 1120
9999 mem: incrementing refcount of 1121: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1121
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1121
9999 mem: decrementing refcount of 1112: 7 -> 6
9999 mem: storing 1121 in location 1145
9999 mem: incrementing refcount of 1121: 5 -> 6
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1101
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1119
9999 mem: incrementing refcount of 1101: 7 -> 8
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1101
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1103
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1103 is 1112
9999 mem: storing 1112 in location 1120
9999 mem: incrementing refcount of 1112: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1112
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1112
9999 mem: decrementing refcount of 1101: 8 -> 7
9999 mem: storing 1112 in location 1146
9999 mem: incrementing refcount of 1112: 7 -> 8
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1121
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1145 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1122
9998 run: its type is "character"
9999 mem: location 1122 is 10
9999 mem: storing 10 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 10
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 10
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 10
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 10
9999 mem: storing 1 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {left-of-cursor?: "boolean"} <- lesser-than {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1158
 104 run: jump-unless {left-of-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jumping to instruction 44
 104 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1149 is 1
9999 mem: location 1144 is 4
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 8 -> 9
 105 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1060
 105 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1061
9990 schedule: clear-line-delimited/render/new-editor/scenario_editor-scrolls-down-on-newline
 105 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1062
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1063
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 1
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 9 -> 10
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 1
9999 mem: storing 6 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 3 -> 4
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 6
9998 run: address to copy to is 1028
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1028
9999 mem: storing 7 in location 1029
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 10 -> 9
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 9 -> 10
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 1
9999 mem: storing 2 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 10 -> 11
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 2
9999 mem: storing 7 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 4 -> 5
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 7
9998 run: address to copy to is 1030
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1030
9999 mem: storing 7 in location 1031
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 11 -> 10
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 10 -> 11
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 2
9999 mem: storing 3 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 3
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 11 -> 12
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 3
9999 mem: storing 8 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 5 -> 6
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 8
9998 run: address to copy to is 1032
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1032
9999 mem: storing 7 in location 1033
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 12 -> 11
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 11 -> 12
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 3
9999 mem: storing 4 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 4
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 12 -> 13
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 4
9999 mem: storing 9 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 6 -> 7
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 9
9998 run: address to copy to is 1034
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1034
9999 mem: storing 7 in location 1035
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1201 is 4
9999 mem: storing 1 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 1
9998 run: jumping to instruction 72
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 13 -> 12
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 12 -> 13
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 4
9999 mem: storing 5 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 5
9999 mem: location 1061 is 4
9999 mem: storing 1 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 1
9998 run: jumping to instruction 16
 105 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
 104 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1148 is 1
9999 mem: storing 2 in location 1148
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 2
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 13 -> 14
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1099
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 2
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 14 -> 13
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 13 -> 14
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1121
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1119
9999 mem: incrementing refcount of 1121: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1121
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 1125
9999 mem: storing 1125 in location 1120
9999 mem: incrementing refcount of 1125: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1125
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1125
9999 mem: decrementing refcount of 1121: 7 -> 6
9999 mem: storing 1125 in location 1145
9999 mem: incrementing refcount of 1125: 5 -> 6
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1112
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1112 in location 1119
9999 mem: incrementing refcount of 1112: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1112
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1114
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1114 is 1121
9999 mem: storing 1121 in location 1120
9999 mem: incrementing refcount of 1121: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1121
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1121
9999 mem: decrementing refcount of 1112: 9 -> 8
9999 mem: storing 1121 in location 1146
9999 mem: incrementing refcount of 1121: 7 -> 8
 104 run: jump {+next-character: "label"}
9998 run: jumping to instruction 21
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1125
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1145 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1126
9998 run: its type is "character"
9999 mem: location 1126 is 98
9999 mem: storing 98 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 98
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 98
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 98
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 98
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 14 -> 15
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 98
  90 print-character: 98 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 0
9999 mem: storing 10 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 7 -> 8
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 98
9999 mem: location 1182 is 7
9999 mem: storing 98 in location 1199
9999 mem: storing 7 in location 1200
 105 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 10
9998 run: address to copy to is 1036
9999 mem: location 1199 is 98
9999 mem: location 1200 is 7
9999 mem: storing 98 in location 1036
9999 mem: storing 7 in location 1037
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1125
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1119
9999 mem: incrementing refcount of 1125: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1125
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1125: 7 -> 6
9999 mem: storing 1129 in location 1145
9999 mem: incrementing refcount of 1129: 5 -> 6
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1121
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1119
9999 mem: incrementing refcount of 1121: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1121
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 1125
9999 mem: storing 1125 in location 1120
9999 mem: incrementing refcount of 1125: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1125
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1125
9999 mem: decrementing refcount of 1121: 9 -> 8
9999 mem: storing 1125 in location 1146
9999 mem: incrementing refcount of 1125: 7 -> 8
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1129
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 10
9999 mem: storing 10 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 10
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 10
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 10
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 10
9999 mem: storing 1 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 44
 104 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1149 is 1
9999 mem: location 1144 is 4
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 15 -> 16
 105 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1060
 105 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1061
 105 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1062
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1063
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 1
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 16 -> 17
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 1
9999 mem: storing 11 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 8 -> 9
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 11
9998 run: address to copy to is 1038
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1038
9999 mem: storing 7 in location 1039
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 17 -> 16
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 16 -> 17
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 1
9999 mem: storing 2 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 17 -> 18
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 2
9999 mem: storing 12 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 9 -> 10
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
9990 schedule: print/clear-line-delimited/render/new-editor/scenario_editor-scrolls-down-on-newline
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 12
9998 run: address to copy to is 1040
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1040
9999 mem: storing 7 in location 1041
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 18 -> 17
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 17 -> 18
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 2
9999 mem: storing 3 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 3
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 18 -> 19
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 3
9999 mem: storing 13 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 10 -> 11
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 13
9998 run: address to copy to is 1042
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 19 -> 18
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 18 -> 19
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 3
9999 mem: storing 4 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 4
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 19 -> 20
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 4
9999 mem: storing 14 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 11 -> 12
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 106 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 14
9998 run: address to copy to is 1044
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1044
9999 mem: storing 7 in location 1045
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1201 is 4
9999 mem: storing 1 in location 1202
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 1
9998 run: jumping to instruction 72
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 20 -> 19
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 19 -> 20
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 4
9999 mem: storing 5 in location 1060
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 5
9999 mem: location 1061 is 4
9999 mem: storing 1 in location 1065
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 1
9998 run: jumping to instruction 16
 105 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
 104 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1148 is 2
9999 mem: storing 3 in location 1148
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 3
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 20 -> 21
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1099
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 3
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 21 -> 20
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 20 -> 21
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1119
9999 mem: incrementing refcount of 1129: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 3 -> 4
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 7 -> 6
9999 mem: storing 1133 in location 1145
9999 mem: incrementing refcount of 1133: 4 -> 5
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1125
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1119
9999 mem: incrementing refcount of 1125: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1125
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1125: 9 -> 8
9999 mem: storing 1129 in location 1146
9999 mem: incrementing refcount of 1129: 7 -> 8
 104 run: jump {+next-character: "label"}
9998 run: jumping to instruction 21
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1133
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 3
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 3
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 99
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 99
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 99
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 99
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 99
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 21 -> 22
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 99
  90 print-character: 99 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 0
9999 mem: storing 15 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 12 -> 13
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 99
9999 mem: location 1182 is 7
9999 mem: storing 99 in location 1199
9999 mem: storing 7 in location 1200
 105 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 15
9998 run: address to copy to is 1046
9999 mem: location 1199 is 99
9999 mem: location 1200 is 7
9999 mem: storing 99 in location 1046
9999 mem: storing 7 in location 1047
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1133
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1119
9999 mem: incrementing refcount of 1133: 5 -> 6
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1133
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1120
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1133: 6 -> 5
9999 mem: storing 0 in location 1145
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1119
9999 mem: incrementing refcount of 1129: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 5 -> 6
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 9 -> 8
9999 mem: storing 1133 in location 1146
9999 mem: incrementing refcount of 1133: 6 -> 7
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 0
9998 run: jumping to instruction 68
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1145 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1085
9999 mem: storing 0 in location 1085
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 3
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1154
 104 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1161
 104 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1154 is 0
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1162
 104 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 3
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1163
 104 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1162 is 0
9999 mem: location 1163 is 0
9999 mem: storing 0 in location 1164
 104 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1164 is 0
9998 run: jumping to instruction 80
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1148 is 3
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1089
9999 mem: storing 3 in location 1089
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1150 is 1
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1090
9999 mem: storing 1 in location 1090
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1151 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1091
9999 mem: storing 0 in location 1091
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1152 is 1101
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1086
9999 mem: storing 1101 in location 1086
 104 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1148 is 3
9999 mem: location 1149 is 1
9999 mem: location 1140 is 1008
9999 mem: location 1141 is 1082
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9998 run: result 1 is 1
9998 run: result 2 is 1008
9998 run: result 3 is 1082
9999 mem: decrementing refcount of 1008: 22 -> 21
9999 mem: storing 1008 in location 1077
9999 mem: incrementing refcount of 1008: 21 -> 22
9999 mem: decrementing refcount of 1082: 3 -> 2
9999 mem: storing 1082 in location 1080
9999 mem: incrementing refcount of 1082: 2 -> 3
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {indent?: "offset"}, {1: "literal", "true": ()}
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1080 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1092
9999 mem: storing 1 in location 1092
 103 run: reply {result: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1080 is 1082
9999 mem: location 1077 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1082
9999 mem: storing 1082 in location 2
9999 mem: incrementing refcount of 1082: 3 -> 4
 102 run: assume-console {"\n    left-click 3, 4\n    type [\n]\n  ": "literal-string"}
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {3: "literal"}
9993 parse:   ingredient: {4: "literal"}
9992 load: after rewriting: left-click {3: "literal"}, {4: "literal"}
9993 parse: instruction: type
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n": "literal-string"}
9992 load: after rewriting: type {"\n": "literal-string"}
9999 mem: storing 'left-click' event starting at 1205
9999 mem: storing 'type' event starting at 1209
9999 mem: storing 'text' tag at 1209
9999 mem: storing character 10 at 1210
9999 mem: storing console in 1213
9999 mem: storing console data in 1215
 102 run: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n    3:number <- get *2:address:shared:editor-data, cursor-row:offset\n    4:number <- get *2:address:shared:editor-data, cursor-column:offset\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {console: ("address" "shared" "console")}
9993 parse:   ingredient: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "shared" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-row: "offset"}
9993 parse:   product: {3: "number"}
9992 load: after rewriting: {3: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "shared" "editor-data"), "lookup": ()}
9993 parse:   ingredient: {cursor-column: "offset"}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "shared" "screen")
9992 transform: console => ("address" "shared" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element cursor-row of type editor-data is at offset 7
9993 name: element cursor-column of type editor-data is at offset 8
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")} -> {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform: get ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1213
9999 mem: location 2 is 1082
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1216
9999 mem: storing 17 in location 1217
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 22 -> 23
 104 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1213 in location 1220
9999 mem: incrementing refcount of 1213: 0 -> 1
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1221
9999 mem: incrementing refcount of 1082: 4 -> 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 1
9999 mem: storing 1 in location 1222
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 1223
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 1008
9999 mem: location 1222 is 1
9999 mem: location 1223 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 23 -> 24
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1099
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 24 -> 23
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 23 -> 24
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1220 is 1213
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1235
9999 mem: storing 12 in location 1236
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1213 in location 1238
9999 mem: incrementing refcount of 1213: 1 -> 2
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1238 is 1213
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 0
9999 mem: location 1215 is 1203
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy is 1214
9998 run: its type is "number"
9999 mem: location 1214 is 0
9999 mem: storing 0 in location 1239
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 0
9999 mem: location 1215 is 1203
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy is 1215
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1215 is 1203
9999 mem: storing 1203 in location 1240
9999 mem: incrementing refcount of 1203: 1 -> 2
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1240 is 1203
9999 mem: skipping refcount at 1203
9999 mem: storing 2 in location 1241
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1239 is 0
9999 mem: location 1241 is 2
9999 mem: storing 0 in location 1242
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1240 is 1203
9999 mem: skipping refcount at 1203
9998 run: base address is 1204
9999 mem: location 1239 is 0
9998 run: address to copy is 1205
9998 run: its type is event
9999 mem: location 1205 is 2
9999 mem: location 1206 is 65513
9999 mem: location 1207 is 3
9999 mem: location 1208 is 4
9999 mem: storing 2 in location 1244
9999 mem: storing 65513 in location 1245
9999 mem: storing 3 in location 1246
9999 mem: storing 4 in location 1247
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1239 is 0
9999 mem: storing 1 in location 1239
 105 run: {console: ("address" "shared" "console"), "lookup": ()} <- put {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 0
9999 mem: location 1215 is 1203
9999 mem: location 1239 is 1
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy to is 1214
9999 mem: storing 1 in location 1214
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1244 is 2
9999 mem: location 1245 is 65513
9999 mem: location 1246 is 3
9999 mem: location 1247 is 4
9999 mem: location 1238 is 1213
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 3, 4]
9998 run: result 1 is 1213
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1224
9999 mem: storing 65513 in location 1225
9999 mem: storing 3 in location 1226
9999 mem: storing 4 in location 1227
9999 mem: decrementing refcount of 1213: 2 -> 1
9999 mem: storing 1213 in location 1220
9999 mem: incrementing refcount of 1213: 1 -> 2
9999 mem: storing 1 in location 1228
9999 mem: storing 0 in location 1229
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1224 is 2
9999 mem: location 1225 is 65513
9999 mem: location 1226 is 3
9999 mem: location 1227 is 4
9999 mem: storing 65513 in location 1230
9999 mem: storing 3 in location 1231
9999 mem: storing 4 in location 1232
9999 mem: storing 1 in location 1233
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 1
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {t: "touch-event"}
9999 mem: location 1219 is 1008
9999 mem: location 1221 is 1082
9999 mem: location 1230 is 65513
9999 mem: location 1231 is 3
9999 mem: location 1232 is 4
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1249
9999 mem: storing 31 in location 1250
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1252
9999 mem: incrementing refcount of 1008: 24 -> 25
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1253
9999 mem: incrementing refcount of 1082: 5 -> 6
 105 run: {t: "touch-event"} <- next-ingredient-without-typechecking 
9999 mem: storing 65513 in location 1254
9999 mem: storing 3 in location 1255
9999 mem: storing 4 in location 1256
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1253 is 1082
9998 run: jumping to instruction 6
 105 run: {click-row: "number"} <- get {t: "touch-event"}, {row: "offset"}
9999 mem: location 1254 is 65513
9999 mem: location 1255 is 3
9999 mem: location 1256 is 4
9998 run: address to copy is 1255
9998 run: its type is "number"
9999 mem: location 1255 is 3
9999 mem: storing 3 in location 1257
 105 run: jump-if {click-row: "number"}, {1: "offset"}
9999 mem: location 1257 is 3
9998 run: jumping to instruction 9
 105 run: {click-column: "number"} <- get {t: "touch-event"}, {column: "offset"}
9999 mem: location 1254 is 65513
9999 mem: location 1255 is 3
9999 mem: location 1256 is 4
9998 run: address to copy is 1256
9998 run: its type is "number"
9999 mem: location 1256 is 4
9999 mem: storing 4 in location 1258
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1259
 105 run: {too-far-left?: "boolean"} <- lesser-than {click-column: "number"}, {left: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1259 is 0
9999 mem: storing 0 in location 1260
 105 run: jump-unless {too-far-left?: "boolean"}, {1: "offset"}
9999 mem: location 1260 is 0
9998 run: jumping to instruction 14
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1261
 105 run: {too-far-right?: "boolean"} <- greater-than {click-column: "number"}, {right: "number"}
9999 mem: location 1258 is 4
9999 mem: location 1261 is 4
9999 mem: storing 0 in location 1262
 105 run: jump-unless {too-far-right?: "boolean"}, {1: "offset"}
9999 mem: location 1262 is 0
9998 run: jumping to instruction 18
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 1
9999 mem: storing 1 in location 1263
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 1264
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1101
9999 mem: storing 1101 in location 1265
9999 mem: incrementing refcount of 1101: 7 -> 8
 105 run: {editor: ("address" "shared" "editor-data")} <- snap-cursor {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {click-row: "number"}, {click-column: "number"}
9999 mem: location 1252 is 1008
9999 mem: location 1253 is 1082
9999 mem: location 1257 is 3
9999 mem: location 1258 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1137
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 25 -> 26
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1141
9999 mem: incrementing refcount of 1082: 6 -> 7
 106 run: {target-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1142
 106 run: {target-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1143
 106 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1141 is 1082
9998 run: jumping to instruction 7
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1144
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1145
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1140 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1119
9999 mem: incrementing refcount of 1008: 26 -> 27
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1120
 107 run: return {height: "number"}
9999 mem: location 1120 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 4
9999 mem: storing 4 in location 1146
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1101
9999 mem: storing 1101 in location 1147
9999 mem: incrementing refcount of 1101: 8 -> 9
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1147 is 1101
9999 mem: storing 1101 in location 1148
9999 mem: incrementing refcount of 1101: 9 -> 10
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1147 is 1101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1119
9999 mem: incrementing refcount of 1101: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1101
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1103
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1103 is 1112
9999 mem: storing 1112 in location 1120
9999 mem: incrementing refcount of 1112: 8 -> 9
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1112
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1112
9999 mem: decrementing refcount of 1101: 11 -> 10
9999 mem: storing 1112 in location 1147
9999 mem: incrementing refcount of 1112: 9 -> 10
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1149
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1144 is 0
9999 mem: storing 0 in location 1150
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {target-row: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1142 is 3
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1090
9999 mem: storing 3 in location 1090
 106 run: {cursor-row: "number"} <- copy {target-row: "number"}
9999 mem: location 1142 is 3
9999 mem: storing 3 in location 1151
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {target-column: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1143 is 4
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1091
9999 mem: storing 4 in location 1091
 106 run: {cursor-column: "number"} <- copy {target-column: "number"}
9999 mem: location 1143 is 4
9999 mem: storing 4 in location 1152
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 4
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1086
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1086 is 1101
9999 mem: storing 1101 in location 1153
9999 mem: incrementing refcount of 1101: 10 -> 11
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1147 is 1112
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1146 is 4
9999 mem: storing 0 in location 1154
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 3
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1147 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1147 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1113
9998 run: its type is "character"
9999 mem: location 1113 is 97
9999 mem: storing 97 in location 1157
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1157 is 97
9999 mem: storing 0 in location 1158
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1150 is 0
9999 mem: location 1145 is 4
9999 mem: storing 0 in location 1160
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1160 is 0
9998 run: jumping to instruction 59
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1147 is 1112
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1112 in location 1119
9999 mem: incrementing refcount of 1112: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1112
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1114
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1114 is 1121
9999 mem: storing 1121 in location 1120
9999 mem: incrementing refcount of 1121: 8 -> 9
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1121
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1121
9999 mem: decrementing refcount of 1112: 11 -> 10
9999 mem: storing 1121 in location 1147
9999 mem: incrementing refcount of 1121: 9 -> 10
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1148 is 1101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1119
9999 mem: incrementing refcount of 1101: 11 -> 12
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1101
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1103
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1103 is 1112
9999 mem: storing 1112 in location 1120
9999 mem: incrementing refcount of 1112: 10 -> 11
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1112
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1112
9999 mem: decrementing refcount of 1101: 12 -> 11
9999 mem: storing 1112 in location 1148
9999 mem: incrementing refcount of 1112: 11 -> 12
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1150 is 0
9999 mem: storing 1 in location 1150
 106 run: jump {: "offset"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1147 is 1121
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1146 is 4
9999 mem: storing 0 in location 1154
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 3
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1147 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1147 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1122
9998 run: its type is "character"
9999 mem: location 1122 is 10
9999 mem: storing 10 in location 1157
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1157 is 10
9999 mem: storing 1 in location 1158
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1158 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 3
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 46
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1149 is 1
9999 mem: storing 2 in location 1149
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1144 is 0
9999 mem: storing 0 in location 1150
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1147 is 1121
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1119
9999 mem: incrementing refcount of 1121: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1121
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 1125
9999 mem: storing 1125 in location 1120
9999 mem: incrementing refcount of 1125: 8 -> 9
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1125
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1125
9999 mem: decrementing refcount of 1121: 11 -> 10
9999 mem: storing 1125 in location 1147
9999 mem: incrementing refcount of 1125: 9 -> 10
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1148 is 1112
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1112 in location 1119
9999 mem: incrementing refcount of 1112: 12 -> 13
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1112
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1114
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1114 is 1121
9999 mem: storing 1121 in location 1120
9999 mem: incrementing refcount of 1121: 10 -> 11
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1121
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1121
9999 mem: decrementing refcount of 1112: 13 -> 12
9999 mem: storing 1121 in location 1148
9999 mem: incrementing refcount of 1121: 11 -> 12
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1147 is 1125
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1146 is 4
9999 mem: storing 0 in location 1154
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1151 is 3
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1147 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1147 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1126
9998 run: its type is "character"
9999 mem: location 1126 is 98
9999 mem: storing 98 in location 1157
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1157 is 98
9999 mem: storing 0 in location 1158
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1150 is 0
9999 mem: location 1145 is 4
9999 mem: storing 0 in location 1160
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1160 is 0
9998 run: jumping to instruction 59
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1147 is 1125
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1119
9999 mem: incrementing refcount of 1125: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1125
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 8 -> 9
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1125: 11 -> 10
9999 mem: storing 1129 in location 1147
9999 mem: incrementing refcount of 1129: 9 -> 10
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1148 is 1121
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1119
9999 mem: incrementing refcount of 1121: 12 -> 13
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1121
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 1125
9999 mem: storing 1125 in location 1120
9999 mem: incrementing refcount of 1125: 10 -> 11
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1125
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1125
9999 mem: decrementing refcount of 1121: 13 -> 12
9999 mem: storing 1125 in location 1148
9999 mem: incrementing refcount of 1125: 11 -> 12
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1150 is 0
9999 mem: storing 1 in location 1150
 106 run: jump {: "offset"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1147 is 1129
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1146 is 4
9999 mem: storing 0 in location 1154
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1151 is 3
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1147 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1147 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 10
9999 mem: storing 10 in location 1157
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1157 is 10
9999 mem: storing 1 in location 1158
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1158 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1151 is 3
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 46
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1149 is 2
9999 mem: storing 3 in location 1149
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1144 is 0
9999 mem: storing 0 in location 1150
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1147 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1119
9999 mem: incrementing refcount of 1129: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 7 -> 8
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 11 -> 10
9999 mem: storing 1133 in location 1147
9999 mem: incrementing refcount of 1133: 8 -> 9
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1148 is 1125
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1119
9999 mem: incrementing refcount of 1125: 12 -> 13
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1125
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 10 -> 11
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1125: 13 -> 12
9999 mem: storing 1129 in location 1148
9999 mem: incrementing refcount of 1129: 11 -> 12
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1147 is 1133
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1146 is 4
9999 mem: storing 0 in location 1154
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1151 is 3
9999 mem: storing 1 in location 1155
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1150 is 0
9999 mem: location 1152 is 4
9999 mem: storing 0 in location 1156
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1156 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1147 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1147 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1157
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1157 is 99
9999 mem: storing 0 in location 1158
9990 schedule: snap-cursor/move-cursor-in-editor/editor-event-loop/run_1001/scenario_editor-scrolls-down-on-newline
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1150 is 0
9999 mem: location 1145 is 4
9999 mem: storing 0 in location 1160
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1160 is 0
9998 run: jumping to instruction 59
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1147 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1119
9999 mem: incrementing refcount of 1133: 9 -> 10
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1133
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1120
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1133: 10 -> 9
9999 mem: storing 0 in location 1147
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1148 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1119
9999 mem: incrementing refcount of 1129: 12 -> 13
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 9 -> 10
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 13 -> 12
9999 mem: storing 1133 in location 1148
9999 mem: incrementing refcount of 1133: 10 -> 11
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1150 is 0
9999 mem: storing 1 in location 1150
 106 run: jump {: "offset"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1147 is 0
9998 run: jumping to instruction 64
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1151 is 3
9999 mem: storing 1 in location 1155
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1150 is 1
9999 mem: location 1152 is 4
9999 mem: storing 1 in location 1161
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1155 is 1
9999 mem: location 1161 is 1
9999 mem: storing 1 in location 1162
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1151 is 3
9999 mem: storing 0 in location 1163
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: storing 1 in location 1164
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1164 is 1
9998 run: jump-unless fell through
 106 run: {cursor-row: "number"} <- copy {row: "number"}
9999 mem: location 1149 is 3
9999 mem: storing 3 in location 1151
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 4
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1151 is 3
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1090
9999 mem: storing 3 in location 1090
 106 run: {cursor-column: "number"} <- copy {column: "number"}
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1152
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 4
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1152 is 1
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1091
9999 mem: storing 1 in location 1091
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1148 is 1133
9999 mem: decrementing refcount of 1101: 11 -> 10
9999 mem: storing 1133 in location 1153
9999 mem: incrementing refcount of 1133: 11 -> 12
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1101
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1153 is 1133
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1086
9999 mem: storing 1133 in location 1086
 106 run: reply {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1141 is 1082
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1082
9999 mem: decrementing refcount of 1082: 7 -> 6
9999 mem: storing 1082 in location 1253
9999 mem: incrementing refcount of 1082: 6 -> 7
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1266
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1101
9999 mem: storing 1101 in location 1267
9999 mem: incrementing refcount of 1101: 10 -> 11
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1268
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1253 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 1
9999 mem: storing 1 in location 1269
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 42
 105 run: {op: ("address" "shared" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
9999 mem: storing 1165 in location 1271
9999 mem: incrementing refcount of 1165: 0 -> 1
 105 run: {op: ("address" "shared" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "shared" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "shared" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1264 is 0
9999 mem: location 1265 is 1101
9999 mem: location 1268 is 3
9999 mem: location 1269 is 1
9999 mem: location 1267 is 1101
9999 mem: location 1266 is 0
9999 mem: location 1271 is 1165
9999 mem: skipping refcount at 1165
9999 mem: location 1271 is 1165
9999 mem: skipping refcount at 1165
9999 mem: storing 1 in location 1166
9999 mem: storing 1 in location 1167
9999 mem: storing 0 in location 1168
9999 mem: storing 1101 in location 1169
9999 mem: storing 3 in location 1170
9999 mem: storing 1 in location 1171
9999 mem: storing 1101 in location 1172
9999 mem: storing 0 in location 1173
 105 run: {editor: ("address" "shared" "editor-data")} <- add-operation {editor: ("address" "shared" "editor-data")}, {op: ("address" "shared" "operation")}
9999 mem: location 1253 is 1082
9999 mem: location 1271 is 1165
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1105
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1108
9999 mem: incrementing refcount of 1082: 7 -> 8
 106 run: {op: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1165 in location 1109
9999 mem: incrementing refcount of 1165: 1 -> 2
 106 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1093
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1093 is 0
9999 mem: storing 0 in location 1110
 106 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- push_4 {op: ("address" "shared" "operation")}, {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1109 is 1165
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 107 run: {x: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1165 in location 1098
9999 mem: incrementing refcount of 1165: 2 -> 3
 107 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1099
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation")} <- new {(list address shared operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1282
9999 mem: storing 1282 in location 1100
9999 mem: incrementing refcount of 1282: 0 -> 1
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- merge {x: ("address" "shared" "operation")}, {in: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1098 is 1165
9999 mem: location 1099 is 0
9999 mem: location 1100 is 1282
9999 mem: skipping refcount at 1282
9999 mem: location 1100 is 1282
9999 mem: skipping refcount at 1282
9999 mem: storing 1165 in location 1283
9999 mem: storing 0 in location 1284
 107 run: return {result: ("address" "shared" "list" "address" "shared" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1100 is 1282
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1282
9999 mem: storing 1282 in location 1110
9999 mem: incrementing refcount of 1282: 1 -> 2
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1110 is 1282
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1093
9999 mem: storing 1282 in location 1093
 106 run: {redo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1094
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1094 is 0
9999 mem: storing 0 in location 1111
 106 run: {redo: ("address" "shared" "list" "address" "shared" "operation")} <- copy {0: "literal"}
9999 mem: storing 0 in location 1111
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1111 is 0
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1094
9999 mem: storing 0 in location 1094
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1108 is 1082
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1082
9999 mem: decrementing refcount of 1082: 8 -> 7
9999 mem: storing 1082 in location 1253
9999 mem: incrementing refcount of 1082: 7 -> 8
 105 run: return {1: "literal", "true": ()}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1253 is 1082
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump {+next-event: "label"}
9998 run: jumping to instruction 6
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1222
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 1
9999 mem: storing 1 in location 1223
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 1008
9999 mem: location 1222 is 3
9999 mem: location 1223 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 27 -> 28
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1099
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1100
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 3
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 1
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 28 -> 27
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 27 -> 28
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1220 is 1213
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1235
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1213 in location 1238
9999 mem: incrementing refcount of 1213: 2 -> 3
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1238 is 1213
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 1
9999 mem: location 1215 is 1203
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy is 1214
9998 run: its type is "number"
9999 mem: location 1214 is 1
9999 mem: storing 1 in location 1239
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 1
9999 mem: location 1215 is 1203
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy is 1215
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1215 is 1203
9999 mem: storing 1203 in location 1240
9999 mem: incrementing refcount of 1203: 2 -> 3
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1240 is 1203
9999 mem: skipping refcount at 1203
9999 mem: storing 2 in location 1241
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1239 is 1
9999 mem: location 1241 is 2
9999 mem: storing 0 in location 1242
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1240 is 1203
9999 mem: skipping refcount at 1203
9998 run: base address is 1204
9999 mem: location 1239 is 1
9998 run: address to copy is 1209
9998 run: its type is event
9999 mem: location 1209 is 0
9999 mem: location 1210 is 10
9999 mem: location 1211 is 0
9999 mem: location 1212 is 0
9999 mem: storing 0 in location 1244
9999 mem: storing 10 in location 1245
9999 mem: storing 0 in location 1246
9999 mem: storing 0 in location 1247
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1239 is 1
9999 mem: storing 2 in location 1239
 105 run: {console: ("address" "shared" "console"), "lookup": ()} <- put {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 1
9999 mem: location 1215 is 1203
9999 mem: location 1239 is 2
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy to is 1214
9999 mem: storing 2 in location 1214
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1244 is 0
9999 mem: location 1245 is 10
9999 mem: location 1246 is 0
9999 mem: location 1247 is 0
9999 mem: location 1238 is 1213
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 10, 0, 0]
9998 run: result 1 is 1213
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1224
9999 mem: storing 10 in location 1225
9999 mem: storing 0 in location 1226
9999 mem: storing 0 in location 1227
9999 mem: decrementing refcount of 1213: 3 -> 2
9999 mem: storing 1213 in location 1220
9999 mem: incrementing refcount of 1213: 2 -> 3
9999 mem: storing 1 in location 1228
9999 mem: storing 0 in location 1229
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1224 is 0
9999 mem: location 1225 is 10
9999 mem: location 1226 is 0
9999 mem: location 1227 is 0
9999 mem: storing 0 in location 1233
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {e: "event"}
9999 mem: location 1219 is 1008
9999 mem: location 1221 is 1082
9999 mem: location 1224 is 0
9999 mem: location 1225 is 10
9999 mem: location 1226 is 0
9999 mem: location 1227 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 102
9999 mem: allocating size 104
9999 mem: new alloc: 1285
9999 mem: storing 102 in location 1286
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1288
9999 mem: incrementing refcount of 1008: 28 -> 29
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1289
9999 mem: incrementing refcount of 1082: 8 -> 9
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1290
9999 mem: storing 10 in location 1291
9999 mem: storing 0 in location 1292
9999 mem: storing 0 in location 1293
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1294
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1289 is 1082
9998 run: jumping to instruction 7
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1288 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1119
9999 mem: incrementing refcount of 1008: 29 -> 30
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1120
 106 run: return {width: "number"}
9999 mem: location 1120 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1295
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1288 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1119
9999 mem: incrementing refcount of 1008: 30 -> 31
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1120
 106 run: return {height: "number"}
9999 mem: location 1120 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 4
9999 mem: storing 4 in location 1296
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1297
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1298
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1086
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1086 is 1133
9999 mem: storing 1133 in location 1299
9999 mem: incrementing refcount of 1133: 12 -> 13
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1300
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 1
9999 mem: storing 1 in location 1301
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1300 is 3
9999 mem: storing 3 in location 1302
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1301 is 1
9999 mem: storing 1 in location 1303
 105 run: {c: "character"}, {is-unicode?: "boolean"} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1290 is 0
9999 mem: location 1291 is 10
9999 mem: location 1292 is 0
9999 mem: location 1293 is 0
9999 mem: storing 10 in location 1304
9999 mem: storing 1 in location 1305
 105 run: jump-unless {is-unicode?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: "character"}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1306
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1306 is 0
9998 run: jumping to instruction 71
 105 run: {undo?: "boolean"} <- equal {c: "character"}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1344
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1344 is 0
9998 run: jumping to instruction 126
 105 run: {page-up?: "boolean"} <- equal {c: "character"}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1348
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1348 is 0
9998 run: jumping to instruction 165
 105 run: {page-down?: "boolean"} <- equal {c: "character"}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1359
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1359 is 0
9998 run: jumping to instruction 204
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: "character"}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1360
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1360 is 0
9998 run: jumping to instruction 225
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: "character"}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1363
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1363 is 0
9998 run: jumping to instruction 247
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: "character"}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1364
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1364 is 0
9998 run: jumping to instruction 283
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: "character"}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1365
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1365 is 0
9998 run: jumping to instruction 319
 105 run: {delete-previous-character?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1366
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1366 is 0
9998 run: jumping to instruction 359
 105 run: {tab?: "boolean"} <- equal {c: "character"}, {9: "literal", "tab": ()}
9999 mem: location 1304 is 10
9999 mem: storing 0 in location 1369
 105 run: jump-unless {tab?: "boolean"}, {: "offset"}
9999 mem: location 1369 is 0
9998 run: jumping to instruction 397
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1304 is 10
9999 mem: storing 1 in location 1373
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1373 is 1
9998 run: jump-unless fell through
 105 run: {cursor-row-before: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1300 is 3
9999 mem: storing 3 in location 1350
 105 run: {cursor-column-before: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1301 is 1
9999 mem: storing 1 in location 1351
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1101
9999 mem: storing 1101 in location 1352
9999 mem: incrementing refcount of 1101: 11 -> 12
 105 run: {cursor-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1086
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1086 is 1133
9999 mem: storing 1133 in location 1370
9999 mem: incrementing refcount of 1133: 13 -> 14
 105 run: {editor: ("address" "shared" "editor-data")} <- insert-new-line-and-indent {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}
9999 mem: location 1289 is 1082
9999 mem: location 1288 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 21
9999 mem: allocating size 23
9999 mem: new alloc: 1389
9999 mem: storing 21 in location 1390
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1392
9999 mem: incrementing refcount of 1082: 9 -> 10
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1393
9999 mem: incrementing refcount of 1008: 31 -> 32
 106 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1394
 106 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 1
9999 mem: storing 1 in location 1395
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1086
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1086 is 1133
9999 mem: storing 1133 in location 1396
9999 mem: incrementing refcount of 1133: 14 -> 15
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1397
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1398
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1393 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1119
9999 mem: incrementing refcount of 1008: 32 -> 33
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1120
 107 run: return {height: "number"}
9999 mem: location 1120 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 4
9999 mem: storing 4 in location 1399
 106 run: insert_3 {10: "literal", "newline": ()}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1396 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1105
 107 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1108
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1109
9999 mem: incrementing refcount of 1133: 15 -> 16
 107 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1412
9999 mem: storing 1412 in location 1110
9999 mem: incrementing refcount of 1412: 0 -> 1
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1110 is 1412
9999 mem: skipping refcount at 1412
9999 mem: location 1413 is 0
9999 mem: location 1414 is 0
9999 mem: location 1415 is 0
9999 mem: location 1108 is 10
9999 mem: location 1110 is 1412
9999 mem: skipping refcount at 1412
9998 run: address to copy to is 1413
9999 mem: storing 10 in location 1413
 107 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1109 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1109 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1111
 107 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1109 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1110 is 1412
9999 mem: location 1109 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy to is 1135
9999 mem: storing 1412 in location 1135
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1412
9999 mem: skipping refcount at 1412
9999 mem: location 1413 is 10
9999 mem: location 1414 is 0
9999 mem: location 1415 is 0
9999 mem: location 1109 is 1133
9999 mem: location 1110 is 1412
9999 mem: skipping refcount at 1412
9998 run: address to copy to is 1415
9999 mem: storing 1133 in location 1415
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1412
9999 mem: skipping refcount at 1412
9999 mem: location 1413 is 10
9999 mem: location 1414 is 0
9999 mem: location 1415 is 1133
9999 mem: location 1111 is 0
9999 mem: location 1110 is 1412
9999 mem: skipping refcount at 1412
9998 run: address to copy to is 1414
9999 mem: storing 0 in location 1414
 107 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 107 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1109 is 1133
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1396 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1119
9999 mem: incrementing refcount of 1133: 16 -> 17
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1133
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 1412
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 1412
9999 mem: storing 1412 in location 1120
9999 mem: incrementing refcount of 1412: 1 -> 2
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1412
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1412
9999 mem: decrementing refcount of 1133: 17 -> 16
9999 mem: storing 1412 in location 1396
9999 mem: incrementing refcount of 1412: 2 -> 3
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1133
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1396 is 1412
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1086
9999 mem: storing 1412 in location 1086
 106 run: {cursor-row: "number"} <- add {cursor-row: "number"}, {1: "literal"}
9999 mem: location 1394 is 3
9999 mem: storing 4 in location 1394
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1394 is 4
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1090
9999 mem: storing 4 in location 1090
 106 run: {cursor-column: "number"} <- copy {left: "number"}
9999 mem: location 1397 is 0
9999 mem: storing 0 in location 1395
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 4
9999 mem: location 1091 is 1
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1395 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1091
9999 mem: storing 0 in location 1091
 106 run: {below-screen?: "boolean"} <- greater-or-equal {cursor-row: "number"}, {screen-height: "number"}
9999 mem: location 1394 is 4
9999 mem: location 1399 is 4
9999 mem: storing 1 in location 1400
 106 run: jump-unless {below-screen?: "boolean"}, {: "offset"}
9999 mem: location 1400 is 1
9998 run: jump-unless fell through
 106 run: trace {10: "literal"}, {"app": "literal-string"}, {"scroll down": "literal-string"}
  10 app: scroll down 
 106 run: {top-of-screen: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 4
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1101
9999 mem: storing 1101 in location 1401
9999 mem: incrementing refcount of 1101: 12 -> 13
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 4
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1397
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 4
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1398
 106 run: {max: "number"} <- subtract {right: "number"}, {left: "number"}
9999 mem: location 1398 is 4
9999 mem: location 1397 is 0
9999 mem: storing 4 in location 1402
 106 run: {old-top: ("address" "shared" "duplex-list" "character")} <- copy {top-of-screen: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1401 is 1101
9999 mem: storing 1101 in location 1403
9999 mem: incrementing refcount of 1101: 13 -> 14
 106 run: {top-of-screen: ("address" "shared" "duplex-list" "character")} <- before-start-of-next-line {top-of-screen: ("address" "shared" "duplex-list" "character")}, {max: "number"}
9999 mem: location 1401 is 1101
9999 mem: location 1402 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 107 run: {original: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1059
9999 mem: incrementing refcount of 1101: 14 -> 15
 107 run: {max: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1060
 107 run: {count: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1061
 107 run: {curr: ("address" "shared" "duplex-list" "character")} <- copy {original: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1059 is 1101
9999 mem: storing 1101 in location 1062
9999 mem: incrementing refcount of 1101: 15 -> 16
 107 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1062 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1062 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1102
9998 run: its type is "character"
9999 mem: location 1102 is 167
9999 mem: storing 167 in location 1063
 107 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1063 is 167
9999 mem: storing 0 in location 1064
 107 run: jump-unless {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jumping to instruction 11
 107 run: jump-if {curr: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1062 is 1101
9998 run: jumping to instruction 15
 107 run: {done?: "boolean"} <- greater-or-equal {count: "number"}, {max: "number"}
9999 mem: location 1061 is 0
9999 mem: location 1060 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1062 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1062 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1102
9998 run: its type is "character"
9999 mem: location 1102 is 167
9999 mem: storing 167 in location 1063
 107 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1063 is 167
9999 mem: storing 0 in location 1064
 107 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 107 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1062 is 1101
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 108 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1119
9999 mem: incrementing refcount of 1101: 16 -> 17
 108 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1101
9998 run: jumping to instruction 4
 108 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9999 mem: location 1102 is 167
9999 mem: location 1103 is 1112
9999 mem: location 1104 is 0
9999 mem: location 1119 is 1101
9999 mem: skipping refcount at 1101
9998 run: address to copy is 1103
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1103 is 1112
9999 mem: storing 1112 in location 1120
9999 mem: incrementing refcount of 1112: 12 -> 13
 108 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1112
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1112
9999 mem: decrementing refcount of 1101: 17 -> 16
9999 mem: storing 1112 in location 1062
9999 mem: incrementing refcount of 1112: 13 -> 14
 107 run: {count: "number"} <- add {count: "number"}, {1: "literal"}
9999 mem: location 1061 is 0
9999 mem: storing 1 in location 1061
 107 run: jump {: "offset"}
9998 run: jumping to instruction 13
 107 run: jump-if {curr: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1062 is 1112
9998 run: jumping to instruction 15
 107 run: {done?: "boolean"} <- greater-or-equal {count: "number"}, {max: "number"}
9999 mem: location 1061 is 1
9999 mem: location 1060 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1062 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1062 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1113
9998 run: its type is "character"
9999 mem: location 1113 is 97
9999 mem: storing 97 in location 1063
 107 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1063 is 97
9999 mem: storing 0 in location 1064
 107 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 107 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1062 is 1112
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 108 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1112 in location 1119
9999 mem: incrementing refcount of 1112: 14 -> 15
 108 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1112
9998 run: jumping to instruction 4
 108 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9999 mem: location 1113 is 97
9999 mem: location 1114 is 1121
9999 mem: location 1115 is 1101
9999 mem: location 1119 is 1112
9999 mem: skipping refcount at 1112
9998 run: address to copy is 1114
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1114 is 1121
9999 mem: storing 1121 in location 1120
9999 mem: incrementing refcount of 1121: 12 -> 13
 108 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1121
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1121
9999 mem: decrementing refcount of 1112: 15 -> 14
9999 mem: storing 1121 in location 1062
9999 mem: incrementing refcount of 1121: 13 -> 14
 107 run: {count: "number"} <- add {count: "number"}, {1: "literal"}
9999 mem: location 1061 is 1
9999 mem: storing 2 in location 1061
 107 run: jump {: "offset"}
9998 run: jumping to instruction 13
 107 run: jump-if {curr: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1062 is 1121
9998 run: jumping to instruction 15
 107 run: {done?: "boolean"} <- greater-or-equal {count: "number"}, {max: "number"}
9999 mem: location 1061 is 2
9999 mem: location 1060 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1062 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1062 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1122
9998 run: its type is "character"
9999 mem: location 1122 is 10
9999 mem: storing 10 in location 1063
 107 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1063 is 10
9999 mem: storing 1 in location 1064
 107 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 1
9998 run: jumping to instruction 23
 107 run: jump-if {curr: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1062 is 1121
9998 run: jumping to instruction 26
 107 run: return {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1062 is 1121
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1121
9999 mem: decrementing refcount of 1101: 16 -> 15
9999 mem: storing 1121 in location 1401
9999 mem: incrementing refcount of 1121: 14 -> 15
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {top-of-screen: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1101
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 4
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1401 is 1121
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1084
9999 mem: storing 1121 in location 1084
 106 run: {no-movement?: "boolean"} <- equal {old-top: ("address" "shared" "duplex-list" "character")}, {top-of-screen: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1403 is 1101
9999 mem: location 1401 is 1121
9999 mem: storing 0 in location 1404
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1405
 106 run: jump-unless {no-movement?: "boolean"}, {1: "offset"}
9999 mem: location 1404 is 0
9998 run: jumping to instruction 32
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1405
 106 run: {cursor-row: "number"} <- subtract {cursor-row: "number"}, {1: "literal"}
9999 mem: location 1394 is 4
9999 mem: storing 3 in location 1394
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 4
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1394 is 3
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1090
9999 mem: storing 3 in location 1090
 106 run: {indent?: "boolean"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {indent?: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1092
9998 run: its type is "boolean"
9999 mem: location 1092 is 1
9999 mem: storing 1 in location 1406
 106 run: jump-if {indent?: "boolean"}, {1: "offset"}
9999 mem: location 1406 is 1
9998 run: jumping to instruction 39
 106 run: {d: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1392 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1083
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1083 is 1101
9999 mem: storing 1101 in location 1407
9999 mem: incrementing refcount of 1101: 15 -> 16
 106 run: {end-of-previous-line: ("address" "shared" "duplex-list" "character")} <- prev_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1396 is 1412
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1412 in location 1119
9999 mem: incrementing refcount of 1412: 3 -> 4
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1412
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1119 is 1412
9999 mem: skipping refcount at 1412
9999 mem: location 1413 is 10
9999 mem: location 1414 is 0
9999 mem: location 1415 is 1133
9999 mem: location 1119 is 1412
9999 mem: skipping refcount at 1412
9998 run: address to copy is 1415
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1415 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 16 -> 17
 107 run: return {result: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: storing 1133 in location 1408
9999 mem: incrementing refcount of 1133: 17 -> 18
 106 run: {indent: "number"} <- line-indent {end-of-previous-line: ("address" "shared" "duplex-list" "character")}, {d: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1408 is 1133
9999 mem: location 1407 is 1101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 107 run: {curr: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1059
9999 mem: incrementing refcount of 1133: 18 -> 19
 107 run: {start: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1101 in location 1060
9999 mem: incrementing refcount of 1101: 16 -> 17
 107 run: {result: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1061
 107 run: jump-if {curr: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1059 is 1133
9998 run: jumping to instruction 6
 107 run: {at-start?: "boolean"} <- equal {curr: ("address" "shared" "duplex-list" "character")}, {start: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1059 is 1133
9999 mem: location 1060 is 1101
9999 mem: storing 0 in location 1062
 107 run: jump-unless {at-start?: "boolean"}, {1: "offset"}
9999 mem: location 1062 is 0
9998 run: jumping to instruction 9
 107 run: {curr: ("address" "shared" "duplex-list" "character")} <- prev_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1059 is 1133
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 108 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1119
9999 mem: incrementing refcount of 1133: 19 -> 20
 108 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1133
9998 run: jumping to instruction 4
 108 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 1412
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1136
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1136 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 12 -> 13
 108 run: return {result: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1133: 20 -> 19
9999 mem: storing 1129 in location 1059
9999 mem: incrementing refcount of 1129: 13 -> 14
 107 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1059 is 1129
9998 run: jump-unless fell through
 107 run: {at-start?: "boolean"} <- equal {curr: ("address" "shared" "duplex-list" "character")}, {start: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1059 is 1129
9999 mem: location 1060 is 1101
9999 mem: storing 0 in location 1062
 107 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1062 is 0
9998 run: jump-if fell through
 107 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1059 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1059 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 10
9999 mem: storing 10 in location 1063
 107 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1063 is 10
9999 mem: storing 1 in location 1064
 107 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 1
9998 run: jumping to instruction 27
 107 run: reply {result: "number"}
9999 mem: location 1061 is 0
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1409
 106 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1410
 106 run: {indent-done?: "boolean"} <- greater-or-equal {i: "number"}, {indent: "number"}
9999 mem: location 1410 is 0
9999 mem: location 1409 is 0
9999 mem: storing 1 in location 1411
 106 run: jump-if {indent-done?: "boolean"}, {: "offset"}
9999 mem: location 1411 is 1
9998 run: jumping to instruction 49
 106 run: reply {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1392 is 1082
9999 mem: location 1393 is 1008
9999 mem: location 1405 is 1
9999 abandon: saving in free-list of size 23
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1082
9999 mem: decrementing refcount of 1082: 10 -> 9
9999 mem: storing 1082 in location 1289
9999 mem: incrementing refcount of 1082: 9 -> 10
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1121
9999 mem: storing 1121 in location 1354
9999 mem: incrementing refcount of 1121: 15 -> 16
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1300
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1301
 105 run: {insert-from: ("address" "shared" "duplex-list" "character")} <- next_2 {cursor-before: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1370 is 1133
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1119
9999 mem: incrementing refcount of 1133: 19 -> 20
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1133
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 1412
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 1412
9999 mem: storing 1412 in location 1120
9999 mem: incrementing refcount of 1412: 4 -> 5
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1412
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1412
9999 mem: storing 1412 in location 1343
9999 mem: incrementing refcount of 1412: 5 -> 6
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1289 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1086
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1086 is 1412
9999 mem: decrementing refcount of 1133: 20 -> 19
9999 mem: storing 1412 in location 1299
9999 mem: incrementing refcount of 1412: 6 -> 7
 105 run: {insert-to: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1299 is 1412
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1412 in location 1119
9999 mem: incrementing refcount of 1412: 7 -> 8
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1412
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1412
9999 mem: skipping refcount at 1412
9999 mem: location 1413 is 10
9999 mem: location 1414 is 0
9999 mem: location 1415 is 1133
9999 mem: location 1119 is 1412
9999 mem: skipping refcount at 1412
9998 run: address to copy is 1414
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1414 is 0
9999 mem: storing 0 in location 1120
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1372
 105 run: {op: ("address" "shared" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 mem: new alloc: 1416
9999 mem: storing 1416 in location 1308
9999 mem: incrementing refcount of 1416: 0 -> 1
 105 run: {op: ("address" "shared" "operation"), "lookup": ()} <- merge {0: "literal", "insert-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "shared" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "shared" "duplex-list" "character")}, {insert-from: ("address" "shared" "duplex-list" "character")}, {insert-to: ("address" "shared" "duplex-list" "character")}, {0: "literal", "never-coalesce": ()}
9999 mem: location 1350 is 3
9999 mem: location 1351 is 1
9999 mem: location 1352 is 1101
9999 mem: location 1300 is 3
9999 mem: location 1301 is 3
9999 mem: location 1354 is 1121
9999 mem: location 1343 is 1412
9999 mem: location 1372 is 0
9999 mem: location 1308 is 1416
9999 mem: skipping refcount at 1416
9999 mem: location 1308 is 1416
9999 mem: skipping refcount at 1416
9999 mem: storing 0 in location 1417
9999 mem: storing 3 in location 1418
9999 mem: storing 1 in location 1419
9999 mem: storing 1101 in location 1420
9999 mem: storing 3 in location 1421
9999 mem: storing 3 in location 1422
9999 mem: storing 1121 in location 1423
9999 mem: storing 1412 in location 1424
9999 mem: storing 0 in location 1425
9999 mem: storing 0 in location 1426
 105 run: {editor: ("address" "shared" "editor-data")} <- add-operation {editor: ("address" "shared" "editor-data")}, {op: ("address" "shared" "operation")}
9999 mem: location 1289 is 1082
9999 mem: location 1308 is 1416
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1105
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1108
9999 mem: incrementing refcount of 1082: 10 -> 11
 106 run: {op: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1416 in location 1109
9999 mem: incrementing refcount of 1416: 1 -> 2
 106 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1093
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1093 is 1282
9999 mem: storing 1282 in location 1110
9999 mem: incrementing refcount of 1282: 2 -> 3
 106 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- push_4 {op: ("address" "shared" "operation")}, {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1109 is 1416
9999 mem: location 1110 is 1282
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 107 run: {x: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1416 in location 1098
9999 mem: incrementing refcount of 1416: 2 -> 3
 107 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1282 in location 1099
9999 mem: incrementing refcount of 1282: 3 -> 4
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation")} <- new {(list address shared operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1428
9999 mem: storing 1428 in location 1100
9999 mem: incrementing refcount of 1428: 0 -> 1
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- merge {x: ("address" "shared" "operation")}, {in: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1098 is 1416
9999 mem: location 1099 is 1282
9999 mem: location 1100 is 1428
9999 mem: skipping refcount at 1428
9999 mem: location 1100 is 1428
9999 mem: skipping refcount at 1428
9999 mem: storing 1416 in location 1429
9999 mem: storing 1282 in location 1430
 107 run: return {result: ("address" "shared" "list" "address" "shared" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1100 is 1428
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1428
9999 mem: decrementing refcount of 1282: 4 -> 3
9999 mem: storing 1428 in location 1110
9999 mem: incrementing refcount of 1428: 1 -> 2
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1282
9999 mem: location 1094 is 0
9999 mem: location 1110 is 1428
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1093
9999 mem: storing 1428 in location 1093
 106 run: {redo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1094
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1094 is 0
9999 mem: storing 0 in location 1111
 106 run: {redo: ("address" "shared" "list" "address" "shared" "operation")} <- copy {0: "literal"}
9999 mem: storing 0 in location 1111
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1111 is 0
9999 mem: location 1108 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1094
9999 mem: storing 0 in location 1094
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1108 is 1082
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1082
9999 mem: decrementing refcount of 1082: 11 -> 10
9999 mem: storing 1082 in location 1289
9999 mem: incrementing refcount of 1082: 10 -> 11
 105 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1294
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1288 is 1008
9999 mem: location 1289 is 1082
9999 mem: location 1294 is 1
9999 abandon: saving in free-list of size 104
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1082
9998 run: result 2 is 1
9999 mem: decrementing refcount of 1008: 33 -> 32
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 32 -> 33
9999 mem: decrementing refcount of 1082: 11 -> 10
9999 mem: storing 1082 in location 1221
9999 mem: incrementing refcount of 1082: 10 -> 11
9999 mem: storing 1 in location 1234
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 1
9998 run: jump-unless fell through
 104 run: {screen: ("address" "shared" "screen")} <- editor-render {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}
9999 mem: location 1219 is 1008
9999 mem: location 1221 is 1082
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1073
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1076
9999 mem: incrementing refcount of 1008: 33 -> 34
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1077
9999 mem: incrementing refcount of 1082: 11 -> 12
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1077 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1077 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1078
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1077 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1077 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1079
 105 run: {row: "number"}, {column: "number"} <- render {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}
9999 mem: location 1076 is 1008
9999 mem: location 1077 is 1082
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1137
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 34 -> 35
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1082 in location 1141
9999 mem: incrementing refcount of 1082: 12 -> 13
 106 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1141 is 1082
9998 run: jumping to instruction 5
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1087
9998 run: its type is "number"
9999 mem: location 1087 is 0
9999 mem: storing 0 in location 1142
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1140 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1119
9999 mem: incrementing refcount of 1008: 35 -> 36
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1120
 107 run: return {height: "number"}
9999 mem: location 1120 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 4
9999 mem: storing 4 in location 1143
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 4
9999 mem: storing 4 in location 1144
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1121
9999 mem: storing 1121 in location 1145
9999 mem: incrementing refcount of 1121: 16 -> 17
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1121
9999 mem: storing 1121 in location 1146
9999 mem: incrementing refcount of 1121: 17 -> 18
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1121
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1119
9999 mem: incrementing refcount of 1121: 18 -> 19
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1121
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 1125
9999 mem: storing 1125 in location 1120
9999 mem: incrementing refcount of 1125: 12 -> 13
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1125
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1125
9999 mem: decrementing refcount of 1121: 19 -> 18
9999 mem: storing 1125 in location 1145
9999 mem: incrementing refcount of 1125: 13 -> 14
 106 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1147
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1148
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 106 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1150
 106 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 1151
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1086
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1086 is 1412
9999 mem: storing 1412 in location 1152
9999 mem: incrementing refcount of 1412: 8 -> 9
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 36 -> 37
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1099
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 37 -> 36
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 36 -> 37
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1125
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 3
9999 mem: storing 0 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1145 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1126
9998 run: its type is "character"
9999 mem: location 1126 is 98
9999 mem: storing 98 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 98
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1431
9999 mem: storing 10 in location 1432
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1434
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1435
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1434 is 7
9999 mem: storing 1 in location 1436
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1435 is 98
9999 mem: storing 0 in location 1437
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1437 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1438
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1438 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1435 is 98
9999 mem: storing 0 in location 1440
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1440 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1441
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1441 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1434 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 98
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 106 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 98
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 37 -> 38
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 98
  90 print-character: 98 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 0
9999 mem: storing 5 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 13 -> 14
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 98
9999 mem: location 1182 is 7
9999 mem: storing 98 in location 1199
9999 mem: storing 7 in location 1200
9990 schedule: print/render/editor-render/editor-event-loop/run_1001/scenario_editor-scrolls-down-on-newline
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 5
9998 run: address to copy to is 1026
9999 mem: location 1199 is 98
9999 mem: location 1200 is 7
9999 mem: storing 98 in location 1026
9999 mem: storing 7 in location 1027
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1125
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1119
9999 mem: incrementing refcount of 1125: 14 -> 15
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1125
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 14 -> 15
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1125: 15 -> 14
9999 mem: storing 1129 in location 1145
9999 mem: incrementing refcount of 1129: 15 -> 16
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1121
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1121 in location 1119
9999 mem: incrementing refcount of 1121: 18 -> 19
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1121
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9999 mem: location 1122 is 10
9999 mem: location 1123 is 1125
9999 mem: location 1124 is 1112
9999 mem: location 1119 is 1121
9999 mem: skipping refcount at 1121
9998 run: address to copy is 1123
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1123 is 1125
9999 mem: storing 1125 in location 1120
9999 mem: incrementing refcount of 1125: 14 -> 15
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1125
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1125
9999 mem: decrementing refcount of 1121: 19 -> 18
9999 mem: storing 1125 in location 1146
9999 mem: incrementing refcount of 1125: 15 -> 16
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 106 run: jump {: "offset"}
9998 run: jumping to instruction 20
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1129
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 3
9999 mem: storing 0 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 10
9999 mem: storing 10 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1431
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1434
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1435
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1434 is 7
9999 mem: storing 1 in location 1436
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1435 is 10
9999 mem: storing 0 in location 1437
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1437 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1438
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1438 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1435 is 10
9999 mem: storing 0 in location 1440
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1440 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1441
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1441 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1434 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 10
9999 mem: storing 1 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 3
9999 mem: storing 0 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 44
 106 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1149 is 1
9999 mem: location 1144 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 38 -> 39
 107 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1060
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1061
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1062
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1063
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 1
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 39 -> 40
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 1
9999 mem: storing 6 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 14 -> 15
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 6
9998 run: address to copy to is 1028
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1028
9999 mem: storing 7 in location 1029
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 40 -> 39
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 39 -> 40
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 1
9999 mem: storing 2 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 40 -> 41
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 2
9999 mem: storing 7 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 15 -> 16
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 7
9998 run: address to copy to is 1030
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1030
9999 mem: storing 7 in location 1031
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 41 -> 40
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 40 -> 41
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 2
9999 mem: storing 3 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 3
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 41 -> 42
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 3
9999 mem: storing 8 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 16 -> 17
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 8
9998 run: address to copy to is 1032
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1032
9999 mem: storing 7 in location 1033
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 41 -> 42
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 3
9999 mem: storing 4 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 4
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 42 -> 43
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 4
9999 mem: storing 9 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 17 -> 18
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 9
9998 run: address to copy to is 1034
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1034
9999 mem: storing 7 in location 1035
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1201 is 4
9999 mem: storing 1 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 1
9998 run: jumping to instruction 72
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 43 -> 42
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 42 -> 43
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 4
9999 mem: storing 5 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 5
9999 mem: location 1061 is 4
9999 mem: storing 1 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1148 is 1
9999 mem: storing 2 in location 1148
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 2
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 43 -> 44
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1099
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 2
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 44 -> 43
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 43 -> 44
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1119
9999 mem: incrementing refcount of 1129: 16 -> 17
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 19 -> 20
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 17 -> 16
9999 mem: storing 1133 in location 1145
9999 mem: incrementing refcount of 1133: 20 -> 21
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1125
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1125 in location 1119
9999 mem: incrementing refcount of 1125: 16 -> 17
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1125
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9999 mem: location 1126 is 98
9999 mem: location 1127 is 1129
9999 mem: location 1128 is 1121
9999 mem: location 1119 is 1125
9999 mem: skipping refcount at 1125
9998 run: address to copy is 1127
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1127 is 1129
9999 mem: storing 1129 in location 1120
9999 mem: incrementing refcount of 1129: 16 -> 17
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1125: 17 -> 16
9999 mem: storing 1129 in location 1146
9999 mem: incrementing refcount of 1129: 17 -> 18
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1133
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 3
9999 mem: storing 0 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 1412
9999 mem: location 1136 is 1129
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1431
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1434
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1435
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1434 is 7
9999 mem: storing 1 in location 1436
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1435 is 99
9999 mem: storing 0 in location 1437
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1437 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1438
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1438 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1435 is 99
9999 mem: storing 0 in location 1440
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1440 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1441
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1441 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1434 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 99
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 106 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 99
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 44 -> 45
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 0
9999 mem: storing 10 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 18 -> 19
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 99
9999 mem: location 1182 is 7
9999 mem: storing 99 in location 1199
9999 mem: storing 7 in location 1200
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 10
9998 run: address to copy to is 1036
9999 mem: location 1199 is 99
9999 mem: location 1200 is 7
9999 mem: storing 99 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1119
9999 mem: incrementing refcount of 1133: 21 -> 22
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1133
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 1412
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 1412
9999 mem: storing 1412 in location 1120
9999 mem: incrementing refcount of 1412: 9 -> 10
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1412
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1412
9999 mem: decrementing refcount of 1133: 22 -> 21
9999 mem: storing 1412 in location 1145
9999 mem: incrementing refcount of 1412: 10 -> 11
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1119
9999 mem: incrementing refcount of 1129: 18 -> 19
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 10
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1125
9999 mem: location 1119 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1120
9999 mem: incrementing refcount of 1133: 21 -> 22
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 19 -> 18
9999 mem: storing 1133 in location 1146
9999 mem: incrementing refcount of 1133: 22 -> 23
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 106 run: jump {: "offset"}
9998 run: jumping to instruction 20
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1412
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1143 is 4
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 3
9999 mem: storing 0 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1412
9999 mem: skipping refcount at 1412
9999 mem: location 1413 is 10
9999 mem: location 1414 is 0
9999 mem: location 1415 is 1133
9999 mem: location 1145 is 1412
9999 mem: skipping refcount at 1412
9998 run: address to copy is 1413
9998 run: its type is "character"
9999 mem: location 1413 is 10
9999 mem: storing 10 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1431
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1434
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1435
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1434 is 7
9999 mem: storing 1 in location 1436
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1435 is 10
9999 mem: storing 0 in location 1437
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1437 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1438
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1438 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1436 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1435 is 10
9999 mem: storing 0 in location 1440
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1440 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1434 is 7
9999 mem: storing 0 in location 1441
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1441 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1434 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 10
9999 mem: storing 1 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 3
9999 mem: storing 0 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 44
 106 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1149 is 1
9999 mem: location 1144 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 45 -> 46
 107 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1060
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1061
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1062
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1063
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 1
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 46 -> 47
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
9990 schedule: print/clear-line-delimited/render/editor-render/editor-event-loop/run_1001/scenario_editor-scrolls-down-on-newline
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 1
9999 mem: storing 11 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 19 -> 20
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 11
9998 run: address to copy to is 1038
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1038
9999 mem: storing 7 in location 1039
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 47 -> 46
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 46 -> 47
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 1
9999 mem: storing 2 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 47 -> 48
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 2
9999 mem: storing 12 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 20 -> 21
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 12
9998 run: address to copy to is 1040
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1040
9999 mem: storing 7 in location 1041
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 48 -> 47
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 47 -> 48
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 2
9999 mem: storing 3 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 3
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 48 -> 49
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 3
9999 mem: storing 13 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 21 -> 22
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 13
9998 run: address to copy to is 1042
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 49 -> 48
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 48 -> 49
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 3
9999 mem: storing 4 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 4
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 49 -> 50
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 4
9999 mem: storing 14 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 22 -> 23
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 108 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 14
9998 run: address to copy to is 1044
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1044
9999 mem: storing 7 in location 1045
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1201 is 4
9999 mem: storing 1 in location 1202
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 1
9998 run: jumping to instruction 72
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 50 -> 49
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 49 -> 50
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 4
9999 mem: storing 5 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 5
9999 mem: location 1061 is 4
9999 mem: storing 1 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1148 is 2
9999 mem: storing 3 in location 1148
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 3
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 50 -> 51
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1099
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 3
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 51 -> 50
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 50 -> 51
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1412
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1412 in location 1119
9999 mem: incrementing refcount of 1412: 11 -> 12
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1412
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1412
9999 mem: skipping refcount at 1412
9999 mem: location 1413 is 10
9999 mem: location 1414 is 0
9999 mem: location 1415 is 1133
9999 mem: location 1119 is 1412
9999 mem: skipping refcount at 1412
9998 run: address to copy is 1414
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1414 is 0
9999 mem: storing 0 in location 1120
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1412: 12 -> 11
9999 mem: storing 0 in location 1145
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1119
9999 mem: incrementing refcount of 1133: 23 -> 24
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1133
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 1412
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 1412
9999 mem: storing 1412 in location 1120
9999 mem: incrementing refcount of 1412: 11 -> 12
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1120 is 1412
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1412
9999 mem: decrementing refcount of 1133: 24 -> 23
9999 mem: storing 1412 in location 1146
9999 mem: incrementing refcount of 1412: 12 -> 13
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 0
9998 run: jumping to instruction 68
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1145 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1085
9999 mem: storing 0 in location 1085
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 3
9999 mem: location 1150 is 3
9999 mem: storing 1 in location 1154
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1151 is 0
9999 mem: storing 1 in location 1161
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1154 is 1
9999 mem: location 1161 is 1
9999 mem: storing 1 in location 1162
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 3
9999 mem: location 1150 is 3
9999 mem: storing 0 in location 1163
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1162 is 1
9999 mem: location 1163 is 0
9999 mem: storing 1 in location 1164
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1164 is 1
9998 run: jump-unless fell through
 106 run: {cursor-row: "number"} <- copy {row: "number"}
9999 mem: location 1148 is 3
9999 mem: storing 3 in location 1150
 106 run: {cursor-column: "number"} <- copy {column: "number"}
9999 mem: location 1149 is 0
9999 mem: storing 0 in location 1151
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1412
9999 mem: decrementing refcount of 1412: 13 -> 12
9999 mem: storing 1412 in location 1152
9999 mem: incrementing refcount of 1412: 12 -> 13
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1148 is 3
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1089
9999 mem: storing 3 in location 1089
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1150 is 3
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1090
9999 mem: storing 3 in location 1090
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1151 is 0
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1091
9999 mem: storing 0 in location 1091
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1152 is 1412
9999 mem: location 1141 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy to is 1086
9999 mem: storing 1412 in location 1086
 106 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1148 is 3
9999 mem: location 1149 is 0
9999 mem: location 1140 is 1008
9999 mem: location 1141 is 1082
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9998 run: result 1 is 0
9999 mem: storing 3 in location 1080
9999 mem: storing 0 in location 1081
 105 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1076 is 1008
9999 mem: location 1081 is 0
9999 mem: location 1079 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 51 -> 52
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1060
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1061
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1062
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1063
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 0
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 52 -> 53
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 0
9999 mem: storing 15 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 23 -> 24
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 15
9998 run: address to copy to is 1046
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1046
9999 mem: storing 7 in location 1047
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 53 -> 52
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 52 -> 53
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 0
9999 mem: storing 1 in location 1060
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 1
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 53 -> 54
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 1
9999 mem: storing 16 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 24 -> 25
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 16
9998 run: address to copy to is 1048
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1048
9999 mem: storing 7 in location 1049
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 54 -> 53
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 53 -> 54
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 1
9999 mem: storing 2 in location 1060
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 54 -> 55
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 2
9999 mem: storing 17 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 25 -> 26
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 17
9998 run: address to copy to is 1050
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1050
9999 mem: storing 7 in location 1051
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 55 -> 54
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 54 -> 55
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 2
9999 mem: storing 3 in location 1060
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 3
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 55 -> 56
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 3
9999 mem: storing 18 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 26 -> 27
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 18
9998 run: address to copy to is 1052
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1052
9999 mem: storing 7 in location 1053
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1201 is 4
9999 mem: storing 0 in location 1202
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 56 -> 55
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 55 -> 56
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 3
9999 mem: storing 4 in location 1060
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 4
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 56 -> 57
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 4
9999 mem: storing 19 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 27 -> 28
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 20 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: storing 32 in location 1199
9999 mem: storing 7 in location 1200
9990 schedule: print/clear-line-delimited/editor-render/editor-event-loop/run_1001/scenario_editor-scrolls-down-on-newline
 107 run: {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 19
9998 run: address to copy to is 1054
9999 mem: location 1199 is 32
9999 mem: location 1200 is 7
9999 mem: storing 32 in location 1054
9999 mem: storing 7 in location 1055
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1201
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1201 is 4
9999 mem: storing 1 in location 1202
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1202 is 1
9998 run: jumping to instruction 72
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 57 -> 56
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 56 -> 57
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 4
9999 mem: storing 5 in location 1060
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 5
9999 mem: location 1061 is 4
9999 mem: storing 1 in location 1065
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 1
9998 run: jumping to instruction 16
 106 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1080 is 3
9999 mem: storing 4 in location 1080
 105 run: draw-horizontal {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}, {9480: "literal", "horizontal-dotted": ()}
9999 mem: location 1076 is 1008
9999 mem: location 1080 is 4
9999 mem: location 1078 is 0
9999 mem: location 1079 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1235
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1238
9999 mem: incrementing refcount of 1008: 57 -> 58
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1239
 106 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1240
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1241
 106 run: {style: "character"}, {style-found?: "boolean"} <- next-ingredient 
9999 mem: storing 9480 in location 1242
9999 mem: storing 1 in location 1243
 106 run: jump-if {style-found?: "boolean"}, {: "offset"}
9999 mem: location 1243 is 1
9998 run: jumping to instruction 9
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 0
9998 run: jump-if fell through
 106 run: {color: "number"} <- copy {245: "literal", "grey": ()}
9999 mem: storing 245 in location 1244
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1246
9999 mem: storing 0 in location 1247
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1246
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {x: "number"}
9999 mem: location 1238 is 1008
9999 mem: location 1239 is 4
9999 mem: location 1240 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 58 -> 59
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1099
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 4
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 59 -> 58
9999 mem: storing 1008 in location 1238
9999 mem: incrementing refcount of 1008: 58 -> 59
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1240 is 0
9999 mem: location 1241 is 4
9999 mem: storing 1 in location 1248
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1248 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1238 is 1008
9999 mem: location 1242 is 9480
9999 mem: location 1244 is 245
9999 mem: location 1246 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 59 -> 60
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1240 is 0
9999 mem: storing 1 in location 1240
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1240 is 1
9999 mem: location 1241 is 4
9999 mem: storing 1 in location 1248
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1248 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1238 is 1008
9999 mem: location 1242 is 9480
9999 mem: location 1244 is 245
9999 mem: location 1246 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 60 -> 61
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1240 is 1
9999 mem: storing 2 in location 1240
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1240 is 2
9999 mem: location 1241 is 4
9999 mem: storing 1 in location 1248
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1248 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1238 is 1008
9999 mem: location 1242 is 9480
9999 mem: location 1244 is 245
9999 mem: location 1246 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 61 -> 62
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1240 is 2
9999 mem: storing 3 in location 1240
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1240 is 3
9999 mem: location 1241 is 4
9999 mem: storing 1 in location 1248
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1248 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1238 is 1008
9999 mem: location 1242 is 9480
9999 mem: location 1244 is 245
9999 mem: location 1246 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 62 -> 63
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1240 is 3
9999 mem: storing 4 in location 1240
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1240 is 4
9999 mem: location 1241 is 4
9999 mem: storing 1 in location 1248
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1248 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1238 is 1008
9999 mem: location 1242 is 9480
9999 mem: location 1244 is 245
9999 mem: location 1246 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 63 -> 64
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1240 is 4
9999 mem: storing 5 in location 1240
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1240 is 5
9999 mem: location 1241 is 4
9999 mem: storing 0 in location 1248
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1248 is 0
9998 run: jumping to instruction 27
 106 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1238 is 1008
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1080 is 4
9999 mem: storing 5 in location 1080
 105 run: clear-screen-from {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1076 is 1008
9999 mem: location 1080 is 5
9999 mem: location 1078 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 64 -> 65
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1004
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1006
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1007
 106 run: jump-if {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 5
9999 mem: location 1005 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 65 -> 66
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1099
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 5
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 5 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 66 -> 65
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 65 -> 66
 106 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1005 is 0
9999 mem: location 1007 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1056
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 66 -> 67
 107 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1060
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1061
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1062
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1063
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 0
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 67 -> 68
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 5
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 108 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 68 -> 67
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 67 -> 68
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 0
9999 mem: storing 1 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 1
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 68 -> 69
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 5
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 108 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 69 -> 68
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 68 -> 69
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 1
9999 mem: storing 2 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 69 -> 70
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 5
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 108 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 70 -> 69
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 69 -> 70
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 2
9999 mem: storing 3 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 3
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 70 -> 71
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 5
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 108 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 71 -> 70
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 70 -> 71
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 3
9999 mem: storing 4 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 4
9999 mem: location 1061 is 4
9999 mem: storing 0 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1059 is 1008
9999 mem: location 1062 is 32
9999 mem: location 1063 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 71 -> 72
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 5
9999 mem: location 1187 is 4
9999 mem: storing 0 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 0
9998 run: jump-if fell through
 108 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 72 -> 71
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 71 -> 72
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1060 is 4
9999 mem: storing 5 in location 1060
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1060 is 5
9999 mem: location 1061 is 4
9999 mem: storing 1 in location 1065
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: clear-rest-of-screen {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 5
9999 mem: location 1006 is 0
9999 mem: location 1007 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1443
9999 mem: storing 7 in location 1444
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1446
9999 mem: incrementing refcount of 1008: 72 -> 73
 107 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1447
 107 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1448
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1449
 107 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1447 is 5
9999 mem: storing 6 in location 1447
 107 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1446 is 1008
9999 mem: location 1447 is 6
9999 mem: location 1448 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 73 -> 74
 108 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1099
 108 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 6
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 6 in location 1011
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 74 -> 73
9999 mem: storing 1008 in location 1446
9999 mem: incrementing refcount of 1008: 73 -> 74
 107 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1446 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1119
9999 mem: incrementing refcount of 1008: 74 -> 75
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1119 is 1008
9998 run: jump-unless fell through
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1120
 108 run: return {height: "number"}
9999 mem: location 1120 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 4
9999 mem: storing 4 in location 1450
 107 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1447 is 6
9999 mem: location 1450 is 4
9999 mem: storing 1 in location 1451
 107 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1451 is 1
9998 run: jumping to instruction 15
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1446 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
 105 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1076 is 1008
9999 mem: location 1077 is 1082
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 75 -> 74
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 74 -> 75
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 1222
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 1221 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 1223
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1219 is 1008
9999 mem: location 1222 is 3
9999 mem: location 1223 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1095
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1098
9999 mem: incrementing refcount of 1008: 75 -> 76
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1099
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1100
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1098 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 3
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: location 1098 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1098 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 76 -> 75
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 75 -> 76
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1220 is 1213
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1235
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1213 in location 1238
9999 mem: incrementing refcount of 1213: 3 -> 4
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1238 is 1213
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 2
9999 mem: location 1215 is 1203
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy is 1214
9998 run: its type is "number"
9999 mem: location 1214 is 2
9999 mem: storing 2 in location 1239
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9999 mem: location 1214 is 2
9999 mem: location 1215 is 1203
9999 mem: location 1238 is 1213
9999 mem: skipping refcount at 1213
9998 run: address to copy is 1215
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1215 is 1203
9999 mem: storing 1203 in location 1240
9999 mem: incrementing refcount of 1203: 3 -> 4
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1240 is 1203
9999 mem: skipping refcount at 1203
9999 mem: storing 2 in location 1241
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1239 is 2
9999 mem: location 1241 is 2
9999 mem: storing 1 in location 1242
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1242 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "shared" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1116
9999 mem: storing 1116 in location 1243
9999 mem: incrementing refcount of 1116: 0 -> 1
 105 run: return {dummy: ("address" "shared" "event"), "lookup": ()}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1243 is 1116
9999 mem: skipping refcount at 1116
9999 mem: location 1117 is 0
9999 mem: location 1118 is 0
9999 mem: location 1119 is 0
9999 mem: location 1120 is 0
9999 mem: location 1238 is 1213
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1213
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1224
9999 mem: storing 0 in location 1225
9999 mem: storing 0 in location 1226
9999 mem: storing 0 in location 1227
9999 mem: decrementing refcount of 1213: 4 -> 3
9999 mem: storing 1213 in location 1220
9999 mem: incrementing refcount of 1213: 3 -> 4
9999 mem: storing 1 in location 1228
9999 mem: storing 1 in location 1229
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {console: ("address" "shared" "console"), "same-as-ingredient": "1"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1219 is 1008
9999 mem: location 1220 is 1213
9999 mem: location 1221 is 1082
9999 abandon: saving in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: {3: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 2 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 2 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1090
9998 run: its type is "number"
9999 mem: location 1090 is 3
9999 mem: storing 3 in location 3
 103 run: {4: "number"} <- get {2: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 2 is 1082
9999 mem: skipping refcount at 1082
9999 mem: location 1083 is 1101
9999 mem: location 1084 is 1121
9999 mem: location 1085 is 0
9999 mem: location 1086 is 1412
9999 mem: location 1087 is 0
9999 mem: location 1088 is 4
9999 mem: location 1089 is 3
9999 mem: location 1090 is 3
9999 mem: location 1091 is 0
9999 mem: location 1092 is 1
9999 mem: location 1093 is 1428
9999 mem: location 1094 is 0
9999 mem: location 2 is 1082
9999 mem: skipping refcount at 1082
9998 run: address to copy is 1091
9998 run: its type is "number"
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .     .\n    .b    .\n    .c    .\n    .     .\n  ": "literal-string"}
 102 run: memory-should-contain {"\n    3 <- 3\n    4 <- 0\n  ": "literal-string"}
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
