9991 parse: --- defining scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {10: "literal", "width": ()}
9993 parse:   ingredient: {4: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {4: "literal", "height": ()}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abcdef\ng\nh\ni": "literal-string"}
9993 parse:   product: {1: ("address" "array" "character")}
9992 load: after rewriting: {1: ("address" "array" "character")} <- new {"abcdef\ng\nh\ni": "literal-string"}
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {1: ("address" "array" "character")}
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {0: "literal", "left": ()}
9993 parse:   ingredient: {6: "literal", "right": ()}
9993 parse:   product: {2: ("address" "editor-data")}
9992 load: after rewriting: {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {6: "literal", "right": ()}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .          .\n    .abcde↩    .\n    .f         .\n    .g         .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .          .\n    .abcde↩    .\n    .f         .\n    .g         .\n  ": "literal-string"}
9993 parse: instruction: assume-console
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    press page-down\n  ": "literal-string"}
9992 load: after rewriting: assume-console {"\n    press page-down\n  ": "literal-string"}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .          .\n    .g         .\n    .h         .\n    .i         .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .          .\n    .g         .\n    .h         .\n    .i         .\n  ": "literal-string"}
9993 parse: instruction: assume-console
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    press up-arrow\n  ": "literal-string"}
9992 load: after rewriting: assume-console {"\n    press up-arrow\n  ": "literal-string"}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .          .\n    .f         .\n    .g         .\n    .h         .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .          .\n    .f         .\n    .g         .\n    .h         .\n  ": "literal-string"}
9999 parse: recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- deduce types for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9992 transform: screen => ("address" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- collect surrounding spaces for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- transform names for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9992 transform: instruction {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {4: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "screen")}
9992 transform: instruction {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {6: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "array" "character")} {screen: ("address" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "editor-data")} {screen: ("address" "screen")}
9992 transform: --- compute address offsets for scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9993 transform: - compute address offsets for {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {4: "literal", "height": ()}
9993 transform: - compute address offsets for {1: ("address" "array" "character")} <- new {"abcdef\ng\nh\ni": "literal-string"}
9993 transform: - compute address offsets for {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {6: "literal", "right": ()}
9993 transform: - compute address offsets for screen-should-contain {"\n    .          .\n    .abcde↩    .\n    .f         .\n    .g         .\n  ": "literal-string"}
9993 transform: - compute address offsets for assume-console {"\n    press page-down\n  ": "literal-string"}
9993 transform: - compute address offsets for run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9993 transform: - compute address offsets for screen-should-contain {"\n    .          .\n    .g         .\n    .h         .\n    .i         .\n  ": "literal-string"}
9993 transform: - compute address offsets for assume-console {"\n    press up-arrow\n  ": "literal-string"}
9993 transform: - compute address offsets for run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9993 transform: - compute address offsets for screen-should-contain {"\n    .          .\n    .f         .\n    .g         .\n    .h         .\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- transform braces for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9992 transform: assume-screen ...
9992 transform: new ...
9992 transform: new-editor ...
9992 transform: screen-should-contain ...
9992 transform: assume-console ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform: assume-console ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- perform checks for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- type-check calls inside recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- check types of reply instructions in recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- type-check merge instructions in recipe scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- checking reply instructions against header for scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 102 run: {screen: ("address" "screen")} <- new-fake-screen {10: "literal", "width": ()}, {4: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1004
 103 run: {result: ("address" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1008: 0 -> 1
9999 mem: storing 1008 in location 1005
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 10
9999 mem: location 1004 is 4
9999 mem: storing 40 in location 1006
 103 run: {data: ("address" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 40
9999 mem: array size is 40
9999 mem: allocating size 82
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
9999 mem: storing 0 in location 1059
9999 mem: storing 0 in location 1060
9999 mem: storing 0 in location 1061
9999 mem: storing 0 in location 1062
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
9999 mem: storing 0 in location 1065
9999 mem: storing 0 in location 1066
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
9999 mem: storing 0 in location 1071
9999 mem: storing 0 in location 1072
9999 mem: storing 0 in location 1073
9999 mem: storing 0 in location 1074
9999 mem: storing 0 in location 1075
9999 mem: storing 0 in location 1076
9999 mem: storing 0 in location 1077
9999 mem: storing 0 in location 1078
9999 mem: storing 0 in location 1079
9999 mem: storing 0 in location 1080
9999 mem: storing 0 in location 1081
9999 mem: storing 0 in location 1082
9999 mem: storing 0 in location 1083
9999 mem: storing 0 in location 1084
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: storing 0 in location 1087
9999 mem: storing 0 in location 1088
9999 mem: storing 0 in location 1089
9999 mem: storing 0 in location 1090
9999 mem: storing 0 in location 1091
9999 mem: storing 0 in location 1092
9999 mem: storing 0 in location 1093
9999 mem: storing 0 in location 1094
9999 mem: storing 0 in location 1095
9999 mem: storing 40 in location 1015
9999 mem: location 1007 is 0
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1007
 103 run: {result: ("address" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "array" "screen-cell")}
9999 mem: location 1004 is 4
9999 mem: location 1003 is 10
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 4 in location 1009
9999 mem: storing 10 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "screen")} <- clear-screen {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1096
9999 mem: storing 0 in location 1096
9999 mem: storing 0 in location 1097
9999 mem: storing 0 in location 1098
9999 mem: storing 0 in location 1099
9999 mem: storing 0 in location 1100
9999 mem: storing 0 in location 1101
9999 mem: storing 0 in location 1102
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
9999 mem: storing 0 in location 1105
9999 mem: storing 8 in location 1097
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 1 -> 2
9999 mem: storing 1008 in location 1099
 104 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1099 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: incrementing refcount of 1014: 2 -> 3
9999 mem: storing 1014 in location 1100
 104 run: {max: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1101
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1102
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 0
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 0
9998 run: address to copy to is 1016
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 0
9999 mem: storing 1 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 1
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 1
9998 run: address to copy to is 1018
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 1
9999 mem: storing 2 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 2
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 2
9998 run: address to copy to is 1020
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 2
9999 mem: storing 3 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 3
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 3
9998 run: address to copy to is 1022
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 3
9999 mem: storing 4 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 4
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 4
9998 run: address to copy to is 1024
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 4
9999 mem: storing 5 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 5
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 5
9998 run: address to copy to is 1026
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 5
9999 mem: storing 6 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 6
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 6
9998 run: address to copy to is 1028
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 6
9999 mem: storing 7 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 7
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 7
9998 run: address to copy to is 1030
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 7
9999 mem: storing 8 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 8
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 8
9998 run: address to copy to is 1032
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 8
9999 mem: storing 9 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 9
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 9
9998 run: address to copy to is 1034
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 9
9999 mem: storing 10 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 10
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 10
9998 run: address to copy to is 1036
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 10
9999 mem: storing 11 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 11
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 11
9998 run: address to copy to is 1038
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 11
9999 mem: storing 12 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 12
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 12
9998 run: address to copy to is 1040
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 12
9999 mem: storing 13 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 13
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 13
9998 run: address to copy to is 1042
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 13
9999 mem: storing 14 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 14
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 14
9998 run: address to copy to is 1044
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 14
9999 mem: storing 15 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 15
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 15
9998 run: address to copy to is 1046
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1046
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 15
9999 mem: storing 16 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 16
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 16
9998 run: address to copy to is 1048
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1048
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 16
9999 mem: storing 17 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 17
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 17
9998 run: address to copy to is 1050
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1050
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 17
9999 mem: storing 18 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 18
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 18
9998 run: address to copy to is 1052
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1052
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 18
9999 mem: storing 19 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 19
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 19
9998 run: address to copy to is 1054
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 19
9999 mem: storing 20 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 20
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 20
9998 run: address to copy to is 1056
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1056
9999 mem: storing 7 in location 1057
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 20
9999 mem: storing 21 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 21
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 21
9998 run: address to copy to is 1058
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1058
9999 mem: storing 7 in location 1059
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 21
9999 mem: storing 22 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 22
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 22
9998 run: address to copy to is 1060
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1060
9999 mem: storing 7 in location 1061
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 22
9999 mem: storing 23 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 23
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 23
9998 run: address to copy to is 1062
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1062
9999 mem: storing 7 in location 1063
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 23
9999 mem: storing 24 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 24
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 24
9998 run: address to copy to is 1064
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 24
9999 mem: storing 25 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 25
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 25
9998 run: address to copy to is 1066
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1066
9999 mem: storing 7 in location 1067
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 25
9999 mem: storing 26 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 26
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 26
9998 run: address to copy to is 1068
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1068
9999 mem: storing 7 in location 1069
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 26
9999 mem: storing 27 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 27
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 27
9998 run: address to copy to is 1070
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1070
9999 mem: storing 7 in location 1071
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 27
9999 mem: storing 28 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 28
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 28
9998 run: address to copy to is 1072
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1072
9999 mem: storing 7 in location 1073
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 28
9999 mem: storing 29 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 29
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 29
9998 run: address to copy to is 1074
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 29
9999 mem: storing 30 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 30
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 30
9998 run: address to copy to is 1076
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1076
9999 mem: storing 7 in location 1077
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 30
9999 mem: storing 31 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 31
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 31
9998 run: address to copy to is 1078
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1078
9999 mem: storing 7 in location 1079
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 31
9999 mem: storing 32 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 32
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 32
9998 run: address to copy to is 1080
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1080
9999 mem: storing 7 in location 1081
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 32
9999 mem: storing 33 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 33
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 33
9998 run: address to copy to is 1082
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1082
9999 mem: storing 7 in location 1083
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 33
9999 mem: storing 34 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 34
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 34
9998 run: address to copy to is 1084
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1084
9999 mem: storing 7 in location 1085
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 34
9999 mem: storing 35 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 35
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 35
9998 run: address to copy to is 1086
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1086
9999 mem: storing 7 in location 1087
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 35
9999 mem: storing 36 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 36
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 36
9998 run: address to copy to is 1088
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1088
9999 mem: storing 7 in location 1089
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 36
9999 mem: storing 37 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 37
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 37
9998 run: address to copy to is 1090
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1090
9999 mem: storing 7 in location 1091
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 37
9999 mem: storing 38 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 38
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 38
9998 run: address to copy to is 1092
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1092
9999 mem: storing 7 in location 1093
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 38
9999 mem: storing 39 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 39
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 39
9998 run: address to copy to is 1094
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1094
9999 mem: storing 7 in location 1095
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 39
9999 mem: storing 40 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 40
9999 mem: location 1101 is 40
9999 mem: storing 1 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 3 -> 2
9999 mem: storing 0 in location 1100
9999 mem: clearing max:number
9999 mem: storing 0 in location 1101
9999 mem: clearing i:number
9999 mem: storing 0 in location 1102
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1103
9999 mem: clearing curr:screen-cell
9999 mem: storing 0 in location 1104
9999 mem: storing 0 in location 1105
9999 mem: clearing i
9999 mem: storing 0 in location 1102
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1005
 103 run: reply {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 mem: clearing w:number
9999 mem: storing 0 in location 1003
9999 mem: clearing h:number
9999 mem: storing 0 in location 1004
9999 mem: clearing bufsize:number
9999 mem: storing 0 in location 1006
9999 mem: clearing data:address:array:screen-cell
9999 mem: location 1007 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1007
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
 102 run: {1: ("address" "array" "character")} <- new {"abcdef\ng\nh\ni": "literal-string"}
9999 mem: new string alloc: 1106
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 1106: 0 -> 1
9999 mem: storing 1106 in location 1
 102 run: {2: ("address" "editor-data")} <- new-editor {1: ("address" "array" "character")}, {screen: ("address" "screen")}, {0: "literal", "left": ()}, {6: "literal", "right": ()}
9999 mem: location 1 is 1106
9999 mem: location 900 is 1008
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1120
9999 mem: storing 0 in location 1120
9999 mem: storing 0 in location 1121
9999 mem: storing 0 in location 1122
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
9999 mem: storing 0 in location 1125
9999 mem: storing 0 in location 1126
9999 mem: storing 0 in location 1127
9999 mem: storing 0 in location 1128
9999 mem: storing 7 in location 1121
 103 run: {s: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1123 is 0
9999 mem: incrementing refcount of 1106: 1 -> 2
9999 mem: storing 1106 in location 1123
 103 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1124 is 0
9999 mem: incrementing refcount of 1008: 2 -> 3
9999 mem: storing 1008 in location 1124
 103 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1125
 103 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1126
 103 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1126 is 6
9999 mem: storing 5 in location 1126
 103 run: {result: ("address" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1129
9999 mem: storing 0 in location 1129
9999 mem: storing 0 in location 1130
9999 mem: storing 0 in location 1131
9999 mem: storing 0 in location 1132
9999 mem: storing 0 in location 1133
9999 mem: storing 0 in location 1134
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
9999 mem: storing 0 in location 1139
9999 mem: storing 0 in location 1140
9999 mem: storing 0 in location 1141
9999 mem: location 1127 is 0
9999 mem: incrementing refcount of 1129: 0 -> 1
9999 mem: storing 1129 in location 1127
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {left: "offset"}, {left: "number"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 0
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1133 is 0
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
9999 mem: location 1136 is 0
9999 mem: location 1137 is 0
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1125 is 0
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1134
9999 mem: storing 0 in location 1134
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {right: "offset"}, {right: "number"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 0
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1133 is 0
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
9999 mem: location 1136 is 0
9999 mem: location 1137 is 0
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1126 is 5
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1135
9999 mem: storing 5 in location 1135
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {1: "literal", "top": ()}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 0
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1133 is 0
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 0
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1137
9999 mem: storing 1 in location 1137
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {left: "number"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 0
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1133 is 0
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1125 is 0
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1138
9999 mem: storing 0 in location 1138
 103 run: {init: ("address" "duplex-list" "character")} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1142
9999 mem: storing 0 in location 1142
9999 mem: storing 0 in location 1143
9999 mem: storing 0 in location 1144
9999 mem: storing 0 in location 1145
9999 mem: storing 0 in location 1146
9999 mem: storing 0 in location 1147
9999 mem: storing 4 in location 1143
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1145
 104 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1146 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1146
 104 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1148
9999 mem: storing 0 in location 1148
9999 mem: storing 0 in location 1149
9999 mem: storing 0 in location 1150
9999 mem: storing 0 in location 1151
9999 mem: location 1147 is 0
9999 mem: incrementing refcount of 1148: 0 -> 1
9999 mem: storing 1148 in location 1147
 104 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1145 is 167
9999 mem: location 1146 is 0
9999 mem: location 1147 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1147 is 1148
9999 mem: skipping refcount at 1148
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 167 in location 1149
9999 mem: storing 0 in location 1150
9999 mem: storing 0 in location 1151
 104 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1146 is 0
9998 run: jumping to instruction 8
 104 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1147 is 1148
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1145
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1146 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1148
9999 mem: storing 1148 in location 1128
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {data: "offset"}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 0
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1133 is 0
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1128 is 1148
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1130
9999 mem: location 1130 is 0
9999 mem: incrementing refcount of 1148: 1 -> 2
9999 mem: storing 1148 in location 1130
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1133 is 0
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1128 is 1148
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1131
9999 mem: location 1131 is 0
9999 mem: incrementing refcount of 1148: 2 -> 3
9999 mem: storing 1148 in location 1131
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 0
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1128 is 1148
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1133
9999 mem: location 1133 is 0
9999 mem: incrementing refcount of 1148: 3 -> 4
9999 mem: storing 1148 in location 1133
 103 run: {result: ("address" "editor-data")} <- insert-text {result: ("address" "editor-data")}, {s: ("address" "array" "character")}
9999 mem: location 1127 is 1129
9999 mem: location 1123 is 1106
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1129: 1 -> 2
9999 mem: storing 1129 in location 1099
 104 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1100 is 0
9999 mem: incrementing refcount of 1106: 2 -> 3
9999 mem: storing 1106 in location 1100
 104 run: jump-if {text: ("address" "array" "character")}, {: "offset"}
9999 mem: location 1100 is 1106
9998 run: jumping to instruction 6
 104 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9999 mem: storing 12 in location 1101
 104 run: jump-if {len: "number"}, {: "offset"}
9999 mem: location 1101 is 12
9998 run: jumping to instruction 11
 104 run: {idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1102
 104 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1099 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1099 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1130 is 1148
9999 mem: location 1103 is 0
9999 mem: incrementing refcount of 1148: 4 -> 5
9999 mem: storing 1148 in location 1103
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 0
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 0
9998 run: address to copy is 1108
9998 run: its type is character
9999 mem: location 1108 is 97
9999 mem: storing 97 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 97
9999 mem: location 1103 is 1148
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1152
9999 mem: storing 0 in location 1152
9999 mem: storing 0 in location 1153
9999 mem: storing 0 in location 1154
9999 mem: storing 0 in location 1155
9999 mem: storing 0 in location 1156
9999 mem: storing 0 in location 1157
9999 mem: storing 0 in location 1158
9999 mem: storing 5 in location 1153
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1148: 5 -> 6
9999 mem: storing 1148 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1159
9999 mem: storing 0 in location 1159
9999 mem: storing 0 in location 1160
9999 mem: storing 0 in location 1161
9999 mem: storing 0 in location 1162
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1159: 0 -> 1
9999 mem: storing 1159 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 0
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1155 is 97
9999 mem: location 1157 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy to is 1160
9999 mem: storing 97 in location 1160
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 167
9999 mem: location 1150 is 0
9999 mem: location 1151 is 0
9999 mem: location 1156 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1150 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 167
9999 mem: location 1150 is 0
9999 mem: location 1151 is 0
9999 mem: location 1157 is 1159
9999 mem: location 1156 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy to is 1150
9999 mem: location 1150 is 0
9999 mem: incrementing refcount of 1159: 1 -> 2
9999 mem: storing 1159 in location 1150
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1156 is 1148
9999 mem: location 1157 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy to is 1162
9999 mem: location 1162 is 0
9999 mem: incrementing refcount of 1148: 6 -> 7
9999 mem: storing 1148 in location 1162
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1148
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy to is 1161
9999 mem: location 1161 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1161
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1148
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 7 -> 6
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1148
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1163
9999 mem: storing 0 in location 1163
9999 mem: storing 0 in location 1164
9999 mem: storing 0 in location 1165
9999 mem: storing 0 in location 1166
9999 mem: storing 0 in location 1167
9999 mem: storing 3 in location 1164
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1148: 6 -> 7
9999 mem: storing 1148 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1148
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 167
9999 mem: location 1150 is 1159
9999 mem: location 1151 is 0
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1150 is 1159
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1159: 1 -> 2
9999 mem: storing 1159 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1159
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 7 -> 6
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1159
9999 mem: storing 1159 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 0
9999 mem: storing 1 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 1
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 1
9998 run: address to copy is 1109
9998 run: its type is character
9999 mem: location 1109 is 98
9999 mem: storing 98 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 98
9999 mem: location 1103 is 1159
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1159: 2 -> 3
9999 mem: storing 1159 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1168
9999 mem: storing 0 in location 1168
9999 mem: storing 0 in location 1169
9999 mem: storing 0 in location 1170
9999 mem: storing 0 in location 1171
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1168: 0 -> 1
9999 mem: storing 1168 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 0
9999 mem: location 1170 is 0
9999 mem: location 1171 is 0
9999 mem: location 1155 is 98
9999 mem: location 1157 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy to is 1169
9999 mem: storing 98 in location 1169
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1148
9999 mem: location 1156 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 0
9999 mem: location 1162 is 1148
9999 mem: location 1157 is 1168
9999 mem: location 1156 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy to is 1161
9999 mem: location 1161 is 0
9999 mem: incrementing refcount of 1168: 1 -> 2
9999 mem: storing 1168 in location 1161
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 0
9999 mem: location 1171 is 0
9999 mem: location 1156 is 1159
9999 mem: location 1157 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy to is 1171
9999 mem: location 1171 is 0
9999 mem: incrementing refcount of 1159: 3 -> 4
9999 mem: storing 1159 in location 1171
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 0
9999 mem: location 1171 is 1159
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy to is 1170
9999 mem: location 1170 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1170
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1159
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1168
9999 mem: skipping refcount at 1168
9999 mem: decrementing refcount of 1168: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1159
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1159: 3 -> 4
9999 mem: storing 1159 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1159
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 1168
9999 mem: location 1162 is 1148
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1168
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1168: 1 -> 2
9999 mem: storing 1168 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1168
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1168
9999 mem: storing 1168 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 1
9999 mem: storing 2 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 2
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 2
9998 run: address to copy is 1110
9998 run: its type is character
9999 mem: location 1110 is 99
9999 mem: storing 99 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 99
9999 mem: location 1103 is 1168
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1168: 2 -> 3
9999 mem: storing 1168 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1172
9999 mem: storing 0 in location 1172
9999 mem: storing 0 in location 1173
9999 mem: storing 0 in location 1174
9999 mem: storing 0 in location 1175
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1172: 0 -> 1
9999 mem: storing 1172 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 0
9999 mem: location 1174 is 0
9999 mem: location 1175 is 0
9999 mem: location 1155 is 99
9999 mem: location 1157 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy to is 1173
9999 mem: storing 99 in location 1173
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 0
9999 mem: location 1171 is 1159
9999 mem: location 1156 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy is 1170
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1170 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 0
9999 mem: location 1171 is 1159
9999 mem: location 1157 is 1172
9999 mem: location 1156 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy to is 1170
9999 mem: location 1170 is 0
9999 mem: incrementing refcount of 1172: 1 -> 2
9999 mem: storing 1172 in location 1170
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 0
9999 mem: location 1175 is 0
9999 mem: location 1156 is 1168
9999 mem: location 1157 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy to is 1175
9999 mem: location 1175 is 0
9999 mem: incrementing refcount of 1168: 3 -> 4
9999 mem: storing 1168 in location 1175
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 0
9999 mem: location 1175 is 1168
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy to is 1174
9999 mem: location 1174 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1174
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1168
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1168
9999 mem: skipping refcount at 1168
9999 mem: decrementing refcount of 1168: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1168
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1168: 3 -> 4
9999 mem: storing 1168 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1168
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1159
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy is 1170
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1170 is 1172
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1172: 1 -> 2
9999 mem: storing 1172 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1172
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9999 mem: decrementing refcount of 1168: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1172
9999 mem: storing 1172 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 2
9999 mem: storing 3 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 3
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 3
9998 run: address to copy is 1111
9998 run: its type is character
9999 mem: location 1111 is 100
9999 mem: storing 100 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 100
9999 mem: location 1103 is 1172
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1172: 2 -> 3
9999 mem: storing 1172 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1176
9999 mem: storing 0 in location 1176
9999 mem: storing 0 in location 1177
9999 mem: storing 0 in location 1178
9999 mem: storing 0 in location 1179
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1176: 0 -> 1
9999 mem: storing 1176 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 0
9999 mem: location 1178 is 0
9999 mem: location 1179 is 0
9999 mem: location 1155 is 100
9999 mem: location 1157 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy to is 1177
9999 mem: storing 100 in location 1177
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 0
9999 mem: location 1175 is 1168
9999 mem: location 1156 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1174
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1174 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 0
9999 mem: location 1175 is 1168
9999 mem: location 1157 is 1176
9999 mem: location 1156 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy to is 1174
9999 mem: location 1174 is 0
9999 mem: incrementing refcount of 1176: 1 -> 2
9999 mem: storing 1176 in location 1174
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 0
9999 mem: location 1179 is 0
9999 mem: location 1156 is 1172
9999 mem: location 1157 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy to is 1179
9999 mem: location 1179 is 0
9999 mem: incrementing refcount of 1172: 3 -> 4
9999 mem: storing 1172 in location 1179
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 0
9999 mem: location 1179 is 1172
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy to is 1178
9999 mem: location 1178 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1178
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1172
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1176
9999 mem: skipping refcount at 1176
9999 mem: decrementing refcount of 1176: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1172
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1172: 3 -> 4
9999 mem: storing 1172 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1172
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1168
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1174
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1174 is 1176
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1176: 1 -> 2
9999 mem: storing 1176 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1176
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1176
9999 mem: storing 1176 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 3
9999 mem: storing 4 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 4
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 4
9998 run: address to copy is 1112
9998 run: its type is character
9999 mem: location 1112 is 101
9999 mem: storing 101 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 101
9999 mem: location 1103 is 1176
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1176: 2 -> 3
9999 mem: storing 1176 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1180
9999 mem: storing 0 in location 1180
9999 mem: storing 0 in location 1181
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1180: 0 -> 1
9999 mem: storing 1180 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 0
9999 mem: location 1182 is 0
9999 mem: location 1183 is 0
9999 mem: location 1155 is 101
9999 mem: location 1157 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy to is 1181
9999 mem: storing 101 in location 1181
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 0
9999 mem: location 1179 is 1172
9999 mem: location 1156 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy is 1178
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1178 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 0
9999 mem: location 1179 is 1172
9999 mem: location 1157 is 1180
9999 mem: location 1156 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy to is 1178
9999 mem: location 1178 is 0
9999 mem: incrementing refcount of 1180: 1 -> 2
9999 mem: storing 1180 in location 1178
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 0
9999 mem: location 1183 is 0
9999 mem: location 1156 is 1176
9999 mem: location 1157 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy to is 1183
9999 mem: location 1183 is 0
9999 mem: incrementing refcount of 1176: 3 -> 4
9999 mem: storing 1176 in location 1183
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 0
9999 mem: location 1183 is 1176
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy to is 1182
9999 mem: location 1182 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1182
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1176
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1176
9999 mem: skipping refcount at 1176
9999 mem: decrementing refcount of 1176: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1176
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1176: 3 -> 4
9999 mem: storing 1176 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1176
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1172
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy is 1178
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1178 is 1180
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1180: 1 -> 2
9999 mem: storing 1180 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1180
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9999 mem: decrementing refcount of 1176: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1180
9999 mem: storing 1180 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 4
9999 mem: storing 5 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 5
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 5
9998 run: address to copy is 1113
9998 run: its type is character
9999 mem: location 1113 is 102
9999 mem: storing 102 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 102
9999 mem: location 1103 is 1180
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1180: 2 -> 3
9999 mem: storing 1180 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1184
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
9999 mem: storing 0 in location 1186
9999 mem: storing 0 in location 1187
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1184: 0 -> 1
9999 mem: storing 1184 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 0
9999 mem: location 1186 is 0
9999 mem: location 1187 is 0
9999 mem: location 1155 is 102
9999 mem: location 1157 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy to is 1185
9999 mem: storing 102 in location 1185
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 0
9999 mem: location 1183 is 1176
9999 mem: location 1156 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1182
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1182 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 0
9999 mem: location 1183 is 1176
9999 mem: location 1157 is 1184
9999 mem: location 1156 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy to is 1182
9999 mem: location 1182 is 0
9999 mem: incrementing refcount of 1184: 1 -> 2
9999 mem: storing 1184 in location 1182
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 0
9999 mem: location 1187 is 0
9999 mem: location 1156 is 1180
9999 mem: location 1157 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy to is 1187
9999 mem: location 1187 is 0
9999 mem: incrementing refcount of 1180: 3 -> 4
9999 mem: storing 1180 in location 1187
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 0
9999 mem: location 1187 is 1180
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy to is 1186
9999 mem: location 1186 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1186
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1180
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1180
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1180: 3 -> 4
9999 mem: storing 1180 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1180
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1182
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1182 is 1184
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1184: 1 -> 2
9999 mem: storing 1184 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1184
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 5
9999 mem: storing 6 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 6
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 6
9998 run: address to copy is 1114
9998 run: its type is character
9999 mem: location 1114 is 10
9999 mem: storing 10 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 10
9999 mem: location 1103 is 1184
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1184: 2 -> 3
9999 mem: storing 1184 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1188
9999 mem: storing 0 in location 1188
9999 mem: storing 0 in location 1189
9999 mem: storing 0 in location 1190
9999 mem: storing 0 in location 1191
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1188: 0 -> 1
9999 mem: storing 1188 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 0
9999 mem: location 1190 is 0
9999 mem: location 1191 is 0
9999 mem: location 1155 is 10
9999 mem: location 1157 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy to is 1189
9999 mem: storing 10 in location 1189
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 0
9999 mem: location 1187 is 1180
9999 mem: location 1156 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1186
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1186 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 0
9999 mem: location 1187 is 1180
9999 mem: location 1157 is 1188
9999 mem: location 1156 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy to is 1186
9999 mem: location 1186 is 0
9999 mem: incrementing refcount of 1188: 1 -> 2
9999 mem: storing 1188 in location 1186
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 0
9999 mem: location 1191 is 0
9999 mem: location 1156 is 1184
9999 mem: location 1157 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy to is 1191
9999 mem: location 1191 is 0
9999 mem: incrementing refcount of 1184: 3 -> 4
9999 mem: storing 1184 in location 1191
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 0
9999 mem: location 1191 is 1184
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy to is 1190
9999 mem: location 1190 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1190
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1184
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1184
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1184: 3 -> 4
9999 mem: storing 1184 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1184
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1186
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1186 is 1188
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1188: 1 -> 2
9999 mem: storing 1188 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1188
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1188
9999 mem: storing 1188 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 6
9999 mem: storing 7 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 7
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 7
9998 run: address to copy is 1115
9998 run: its type is character
9999 mem: location 1115 is 103
9999 mem: storing 103 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 103
9999 mem: location 1103 is 1188
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1188: 2 -> 3
9999 mem: storing 1188 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1192
9999 mem: storing 0 in location 1192
9999 mem: storing 0 in location 1193
9999 mem: storing 0 in location 1194
9999 mem: storing 0 in location 1195
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1192: 0 -> 1
9999 mem: storing 1192 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 0
9999 mem: location 1194 is 0
9999 mem: location 1195 is 0
9999 mem: location 1155 is 103
9999 mem: location 1157 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy to is 1193
9999 mem: storing 103 in location 1193
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 0
9999 mem: location 1191 is 1184
9999 mem: location 1156 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 0
9999 mem: location 1191 is 1184
9999 mem: location 1157 is 1192
9999 mem: location 1156 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy to is 1190
9999 mem: location 1190 is 0
9999 mem: incrementing refcount of 1192: 1 -> 2
9999 mem: storing 1192 in location 1190
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 0
9999 mem: location 1195 is 0
9999 mem: location 1156 is 1188
9999 mem: location 1157 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy to is 1195
9999 mem: location 1195 is 0
9999 mem: incrementing refcount of 1188: 3 -> 4
9999 mem: storing 1188 in location 1195
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 0
9999 mem: location 1195 is 1188
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy to is 1194
9999 mem: location 1194 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1194
9990 schedule: insert_2/insert-text/new-editor/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1188
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1188
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1188: 3 -> 4
9999 mem: storing 1188 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1188
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 1192
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1192: 1 -> 2
9999 mem: storing 1192 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 7
9999 mem: storing 8 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 8
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 8
9998 run: address to copy is 1116
9998 run: its type is character
9999 mem: location 1116 is 10
9999 mem: storing 10 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 10
9999 mem: location 1103 is 1192
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1192: 2 -> 3
9999 mem: storing 1192 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1196
9999 mem: storing 0 in location 1196
9999 mem: storing 0 in location 1197
9999 mem: storing 0 in location 1198
9999 mem: storing 0 in location 1199
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1196: 0 -> 1
9999 mem: storing 1196 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 0
9999 mem: location 1198 is 0
9999 mem: location 1199 is 0
9999 mem: location 1155 is 10
9999 mem: location 1157 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy to is 1197
9999 mem: storing 10 in location 1197
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 0
9999 mem: location 1195 is 1188
9999 mem: location 1156 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 0
9999 mem: location 1195 is 1188
9999 mem: location 1157 is 1196
9999 mem: location 1156 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy to is 1194
9999 mem: location 1194 is 0
9999 mem: incrementing refcount of 1196: 1 -> 2
9999 mem: storing 1196 in location 1194
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 0
9999 mem: location 1199 is 0
9999 mem: location 1156 is 1192
9999 mem: location 1157 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy to is 1199
9999 mem: location 1199 is 0
9999 mem: incrementing refcount of 1192: 3 -> 4
9999 mem: storing 1192 in location 1199
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 0
9999 mem: location 1199 is 1192
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy to is 1198
9999 mem: location 1198 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1198
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1192
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1192
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1192: 3 -> 4
9999 mem: storing 1192 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1192
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1196
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1196: 1 -> 2
9999 mem: storing 1196 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 8
9999 mem: storing 9 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 9
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 9
9998 run: address to copy is 1117
9998 run: its type is character
9999 mem: location 1117 is 104
9999 mem: storing 104 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 104
9999 mem: location 1103 is 1196
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 104 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1196: 2 -> 3
9999 mem: storing 1196 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1200
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
9999 mem: storing 0 in location 1202
9999 mem: storing 0 in location 1203
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1200: 0 -> 1
9999 mem: storing 1200 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 0
9999 mem: location 1202 is 0
9999 mem: location 1203 is 0
9999 mem: location 1155 is 104
9999 mem: location 1157 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy to is 1201
9999 mem: storing 104 in location 1201
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 0
9999 mem: location 1199 is 1192
9999 mem: location 1156 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 0
9999 mem: location 1199 is 1192
9999 mem: location 1157 is 1200
9999 mem: location 1156 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy to is 1198
9999 mem: location 1198 is 0
9999 mem: incrementing refcount of 1200: 1 -> 2
9999 mem: storing 1200 in location 1198
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 0
9999 mem: location 1203 is 0
9999 mem: location 1156 is 1196
9999 mem: location 1157 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy to is 1203
9999 mem: location 1203 is 0
9999 mem: incrementing refcount of 1196: 3 -> 4
9999 mem: storing 1196 in location 1203
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 0
9999 mem: location 1203 is 1196
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy to is 1202
9999 mem: location 1202 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1202
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1196
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1196
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1196: 3 -> 4
9999 mem: storing 1196 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1196
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 1200
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1200: 1 -> 2
9999 mem: storing 1200 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1200
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1200
9999 mem: storing 1200 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 9
9999 mem: storing 10 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 10
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 10
9998 run: address to copy is 1118
9998 run: its type is character
9999 mem: location 1118 is 10
9999 mem: storing 10 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 10
9999 mem: location 1103 is 1200
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1200: 2 -> 3
9999 mem: storing 1200 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1204
9999 mem: storing 0 in location 1204
9999 mem: storing 0 in location 1205
9999 mem: storing 0 in location 1206
9999 mem: storing 0 in location 1207
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1204: 0 -> 1
9999 mem: storing 1204 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 0
9999 mem: location 1206 is 0
9999 mem: location 1207 is 0
9999 mem: location 1155 is 10
9999 mem: location 1157 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy to is 1205
9999 mem: storing 10 in location 1205
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 0
9999 mem: location 1203 is 1196
9999 mem: location 1156 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1202
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1202 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 0
9999 mem: location 1203 is 1196
9999 mem: location 1157 is 1204
9999 mem: location 1156 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy to is 1202
9999 mem: location 1202 is 0
9999 mem: incrementing refcount of 1204: 1 -> 2
9999 mem: storing 1204 in location 1202
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 0
9999 mem: location 1207 is 0
9999 mem: location 1156 is 1200
9999 mem: location 1157 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy to is 1207
9999 mem: location 1207 is 0
9999 mem: incrementing refcount of 1200: 3 -> 4
9999 mem: storing 1200 in location 1207
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 0
9999 mem: location 1207 is 1200
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy to is 1206
9999 mem: location 1206 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1206
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1200
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1204
9999 mem: skipping refcount at 1204
9999 mem: decrementing refcount of 1204: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1200
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1200: 3 -> 4
9999 mem: storing 1200 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1200
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1202
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1202 is 1204
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1204: 1 -> 2
9999 mem: storing 1204 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1204
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1204
9999 mem: storing 1204 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 10
9999 mem: storing 11 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 11
9999 mem: location 1101 is 12
9999 mem: storing 0 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9998 run: base address is 1107
9999 mem: location 1102 is 11
9998 run: address to copy is 1119
9998 run: its type is character
9999 mem: location 1119 is 105
9999 mem: storing 105 in location 1105
 104 run: insert_2 {c: "character"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1105 is 105
9999 mem: location 1103 is 1204
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 105 in location 1155
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1204: 2 -> 3
9999 mem: storing 1204 in location 1156
 105 run: {new-node: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1208
9999 mem: storing 0 in location 1208
9999 mem: storing 0 in location 1209
9999 mem: storing 0 in location 1210
9999 mem: storing 0 in location 1211
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1208: 0 -> 1
9999 mem: storing 1208 in location 1157
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1157 is 1208
9999 mem: skipping refcount at 1208
9999 mem: location 1209 is 0
9999 mem: location 1210 is 0
9999 mem: location 1211 is 0
9999 mem: location 1155 is 105
9999 mem: location 1157 is 1208
9999 mem: skipping refcount at 1208
9998 run: address to copy to is 1209
9999 mem: storing 105 in location 1209
 105 run: {next-node: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1156 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 0
9999 mem: location 1207 is 1200
9999 mem: location 1156 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy is 1206
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1206 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 105 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "duplex-list" "character")}
9999 mem: location 1156 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 0
9999 mem: location 1207 is 1200
9999 mem: location 1157 is 1208
9999 mem: location 1156 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy to is 1206
9999 mem: location 1206 is 0
9999 mem: incrementing refcount of 1208: 1 -> 2
9999 mem: storing 1208 in location 1206
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1208
9999 mem: skipping refcount at 1208
9999 mem: location 1209 is 105
9999 mem: location 1210 is 0
9999 mem: location 1211 is 0
9999 mem: location 1156 is 1204
9999 mem: location 1157 is 1208
9999 mem: skipping refcount at 1208
9998 run: address to copy to is 1211
9999 mem: location 1211 is 0
9999 mem: incrementing refcount of 1204: 3 -> 4
9999 mem: storing 1204 in location 1211
 105 run: {new-node: ("address" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "duplex-list" "character")}
9999 mem: location 1157 is 1208
9999 mem: skipping refcount at 1208
9999 mem: location 1209 is 105
9999 mem: location 1210 is 0
9999 mem: location 1211 is 1204
9999 mem: location 1158 is 0
9999 mem: location 1157 is 1208
9999 mem: skipping refcount at 1208
9998 run: address to copy to is 1210
9999 mem: location 1210 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1210
 105 run: jump-if {next-node: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1158 is 0
9998 run: jump-if fell through
 105 run: return {in: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1156 is 1204
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1155
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1156 is 1204
9999 mem: skipping refcount at 1204
9999 mem: decrementing refcount of 1204: 4 -> 3
9999 mem: storing 0 in location 1156
9999 mem: clearing new-node:address:duplex-list:_elem
9999 mem: location 1157 is 1208
9999 mem: skipping refcount at 1208
9999 mem: decrementing refcount of 1208: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing next-node:address:duplex-list:_elem
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1103 is 1204
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1204: 3 -> 4
9999 mem: storing 1204 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1204
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 1208
9999 mem: location 1207 is 1200
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy is 1206
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1206 is 1208
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1208: 1 -> 2
9999 mem: storing 1208 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1208
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9999 mem: decrementing refcount of 1204: 4 -> 3
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1208
9999 mem: storing 1208 in location 1103
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1102 is 11
9999 mem: storing 12 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 15
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1102 is 12
9999 mem: location 1101 is 12
9999 mem: storing 1 in location 1104
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 1
9998 run: jumping to instruction 22
 104 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1099 is 1129
9999 mem: clearing text:address:array:character
9999 mem: location 1100 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 3 -> 2
9999 mem: storing 0 in location 1100
9999 mem: clearing len:number
9999 mem: storing 0 in location 1101
9999 mem: clearing idx:number
9999 mem: storing 0 in location 1102
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1103 is 1208
9999 mem: skipping refcount at 1208
9999 mem: decrementing refcount of 1208: 2 -> 1
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing c:character
9999 mem: storing 0 in location 1105
9999 mem: clearing curr
9999 mem: location 1103 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1103
9999 mem: clearing idx
9999 mem: storing 0 in location 1102
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1129
9999 mem: storing 1129 in location 1127
 103 run: _, _, {screen: ("address" "screen")}, {result: ("address" "editor-data")} <- render {screen: ("address" "screen")}, {result: ("address" "editor-data")}
9999 mem: location 1124 is 1008
9999 mem: location 1127 is 1129
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 mem: new alloc: 1212
9999 mem: storing 0 in location 1212
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
9999 mem: storing 0 in location 1215
9999 mem: storing 0 in location 1216
9999 mem: storing 0 in location 1217
9999 mem: storing 0 in location 1218
9999 mem: storing 0 in location 1219
9999 mem: storing 0 in location 1220
9999 mem: storing 0 in location 1221
9999 mem: storing 0 in location 1222
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
9999 mem: storing 0 in location 1225
9999 mem: storing 0 in location 1226
9999 mem: storing 0 in location 1227
9999 mem: storing 0 in location 1228
9999 mem: storing 0 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
9999 mem: storing 0 in location 1232
9999 mem: storing 0 in location 1233
9999 mem: storing 0 in location 1234
9999 mem: storing 0 in location 1235
9999 mem: storing 0 in location 1236
9999 mem: storing 0 in location 1237
9999 mem: storing 0 in location 1238
9999 mem: storing 0 in location 1239
9999 mem: storing 26 in location 1213
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1215 is 0
9999 mem: incrementing refcount of 1008: 3 -> 4
9999 mem: storing 1008 in location 1215
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1216 is 0
9999 mem: incrementing refcount of 1129: 2 -> 3
9999 mem: storing 1129 in location 1216
 104 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1216 is 1129
9998 run: jumping to instruction 6
 104 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1217
 104 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1215 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1008: 4 -> 5
9999 mem: storing 1008 in location 1166
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1166 is 1008
9998 run: jump-unless fell through
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1167
 105 run: return {height: "number"}
9999 mem: location 1167 is 4
9999 mem: clearing screen:address:screen
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 4
9999 mem: storing 4 in location 1218
 104 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1219
 104 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1148
9999 mem: location 1220 is 0
9999 mem: incrementing refcount of 1148: 6 -> 7
9999 mem: storing 1148 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1148
9999 mem: location 1221 is 0
9999 mem: incrementing refcount of 1148: 7 -> 8
9999 mem: storing 1148 in location 1221
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1148
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1148: 8 -> 9
9999 mem: storing 1148 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1148
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 167
9999 mem: location 1150 is 1159
9999 mem: location 1151 is 0
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1150 is 1159
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1159: 3 -> 4
9999 mem: storing 1159 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1159
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 9 -> 8
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1159
9999 mem: storing 1159 in location 1220
 104 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1222
 104 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1223
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1225
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1226
 104 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1148
9999 mem: location 1227 is 0
9999 mem: incrementing refcount of 1148: 8 -> 9
9999 mem: storing 1148 in location 1227
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 1
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 4 -> 5
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 1
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1159
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1226 is 0
9999 mem: storing 1 in location 1230
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 1
9998 run: jump-unless fell through
 104 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1148
9999 mem: location 1227 is 1148
9999 mem: skipping refcount at 1148
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1148 in location 1227
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 1168
9999 mem: location 1162 is 1148
9999 mem: location 1220 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1160
9998 run: its type is "character"
9999 mem: location 1160 is 97
9999 mem: storing 97 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1240
9999 mem: storing 0 in location 1240
9999 mem: storing 0 in location 1241
9999 mem: storing 0 in location 1242
9999 mem: storing 0 in location 1243
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
9999 mem: storing 0 in location 1246
9999 mem: storing 0 in location 1247
9999 mem: storing 0 in location 1248
9999 mem: storing 0 in location 1249
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
9999 mem: storing 10 in location 1241
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 97
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 97
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 97
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 97
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 mem: new alloc: 1252
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
9999 mem: storing 0 in location 1254
9999 mem: storing 0 in location 1255
9999 mem: storing 0 in location 1256
9999 mem: storing 0 in location 1257
9999 mem: storing 0 in location 1258
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
9999 mem: storing 0 in location 1261
9999 mem: storing 0 in location 1262
9999 mem: storing 0 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
9999 mem: storing 0 in location 1266
9999 mem: storing 0 in location 1267
9999 mem: storing 0 in location 1268
9999 mem: storing 0 in location 1269
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: storing 0 in location 1276
9999 mem: storing 0 in location 1277
9999 mem: storing 24 in location 1253
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 97
  90 print-character: 97
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 97
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 0
9999 mem: storing 10 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 97
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 97
9999 mem: location 1257 is 7
9999 mem: storing 97 in location 1274
9999 mem: storing 7 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 10
9998 run: address to copy to is 1036
9999 mem: location 1274 is 97
9999 mem: location 1275 is 7
9999 mem: storing 97 in location 1036
9999 mem: storing 7 in location 1037
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 6 -> 5
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1159
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1159: 4 -> 5
9999 mem: storing 1159 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1159
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 1168
9999 mem: location 1162 is 1148
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1168
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1168: 3 -> 4
9999 mem: storing 1168 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1168
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1168
9999 mem: storing 1168 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1148
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1148: 9 -> 10
9999 mem: storing 1148 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1148
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9999 mem: location 1149 is 167
9999 mem: location 1150 is 1159
9999 mem: location 1151 is 0
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9998 run: address to copy is 1150
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1150 is 1159
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1159: 4 -> 5
9999 mem: storing 1159 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1159
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 10 -> 9
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1159
9999 mem: storing 1159 in location 1221
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1168
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 1
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1159
9999 mem: location 1220 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy is 1169
9998 run: its type is "character"
9999 mem: location 1169 is 98
9999 mem: storing 98 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 98
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 98
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 98
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 1
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 98
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 98
  90 print-character: 98
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 98
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 1
9999 mem: storing 11 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 98
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 98
9999 mem: location 1257 is 7
9999 mem: storing 98 in location 1274
9999 mem: storing 7 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 11
9998 run: address to copy to is 1038
9999 mem: location 1274 is 98
9999 mem: location 1275 is 7
9999 mem: storing 98 in location 1038
9999 mem: storing 7 in location 1039
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 6 -> 5
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1168
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1168: 4 -> 5
9999 mem: storing 1168 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1168
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1159
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy is 1170
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1170 is 1172
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1172: 3 -> 4
9999 mem: storing 1172 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1172
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9999 mem: decrementing refcount of 1168: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1172
9999 mem: storing 1172 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1159
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1159: 5 -> 6
9999 mem: storing 1159 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1159
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 1168
9999 mem: location 1162 is 1148
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1161
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1161 is 1168
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1168: 4 -> 5
9999 mem: storing 1168 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1168
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1168
9999 mem: storing 1168 in location 1221
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 1
9999 mem: storing 2 in location 1224
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1172
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 2
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1168
9999 mem: location 1220 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1173
9998 run: its type is "character"
9999 mem: location 1173 is 99
9999 mem: storing 99 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 99
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 99
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 99
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 99
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 2
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 99
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 99
  90 print-character: 99
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 99
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 2
9999 mem: storing 12 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 99
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
9990 schedule: print/render/new-editor/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 99
9999 mem: location 1257 is 7
9999 mem: storing 99 in location 1274
9999 mem: storing 7 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 12
9998 run: address to copy to is 1040
9999 mem: location 1274 is 99
9999 mem: location 1275 is 7
9999 mem: storing 99 in location 1040
9999 mem: storing 7 in location 1041
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 6 -> 5
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1172
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1172: 4 -> 5
9999 mem: storing 1172 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1172
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1168
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1174
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1174 is 1176
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1176: 3 -> 4
9999 mem: storing 1176 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1176
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1176
9999 mem: storing 1176 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1168
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1168: 5 -> 6
9999 mem: storing 1168 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1168
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1159
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy is 1170
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1170 is 1172
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1172: 4 -> 5
9999 mem: storing 1172 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1172
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1168
9999 mem: skipping refcount at 1168
9999 mem: decrementing refcount of 1168: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1172
9999 mem: storing 1172 in location 1221
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 2
9999 mem: storing 3 in location 1224
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1176
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 3
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1172
9999 mem: location 1220 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy is 1177
9998 run: its type is "character"
9999 mem: location 1177 is 100
9999 mem: storing 100 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 100
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 100
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 100
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 100
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 3
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 100
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 100
  90 print-character: 100
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 100
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 3
9999 mem: storing 13 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 100
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 100
9999 mem: location 1257 is 7
9999 mem: storing 100 in location 1274
9999 mem: storing 7 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 13
9998 run: address to copy to is 1042
9999 mem: location 1274 is 100
9999 mem: location 1275 is 7
9999 mem: storing 100 in location 1042
9999 mem: storing 7 in location 1043
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 6 -> 5
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1176
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1176: 4 -> 5
9999 mem: storing 1176 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1176
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1172
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy is 1178
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1178 is 1180
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1180: 3 -> 4
9999 mem: storing 1180 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1180
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9999 mem: decrementing refcount of 1176: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1180
9999 mem: storing 1180 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1172
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1172: 5 -> 6
9999 mem: storing 1172 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1172
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1168
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1174
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1174 is 1176
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1176: 4 -> 5
9999 mem: storing 1176 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1176
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1176
9999 mem: storing 1176 in location 1221
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 3
9999 mem: storing 4 in location 1224
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1180
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 4
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1220 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1181
9998 run: its type is "character"
9999 mem: location 1181 is 101
9999 mem: storing 101 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 101
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 101
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 101
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 101
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 4
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 101
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 101
  90 print-character: 101
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 4
9999 mem: storing 14 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 101
9999 mem: location 1257 is 7
9999 mem: storing 101 in location 1274
9999 mem: storing 7 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 14
9998 run: address to copy to is 1044
9999 mem: location 1274 is 101
9999 mem: location 1275 is 7
9999 mem: storing 101 in location 1044
9999 mem: storing 7 in location 1045
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 6 -> 5
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1180
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1180: 4 -> 5
9999 mem: storing 1180 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1180
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1182
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1182 is 1184
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1184: 3 -> 4
9999 mem: storing 1184 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1184
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1176
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1176: 5 -> 6
9999 mem: storing 1176 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1176
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1172
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy is 1178
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1178 is 1180
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1180: 4 -> 5
9999 mem: storing 1180 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1180
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1176
9999 mem: skipping refcount at 1176
9999 mem: decrementing refcount of 1176: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1180
9999 mem: storing 1180 in location 1221
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 4
9999 mem: storing 5 in location 1224
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1184
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 5
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1220 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1185
9998 run: its type is "character"
9999 mem: location 1185 is 102
9999 mem: storing 102 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 102
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 102
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 102
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 102
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 5
9999 mem: location 1219 is 5
9999 mem: storing 1 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 1
9998 run: jump-unless fell through
 104 run: {wrap-icon: "character"} <- copy {8617: "literal", "loop-back-to-left": ()}
9999 mem: storing 8617 in location 1235
 104 run: print {screen: ("address" "screen")}, {wrap-icon: "character"}, {245: "literal", "grey": ()}
9999 mem: location 1215 is 1008
9999 mem: location 1235 is 8617
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 8617 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 8617
  90 print-character: 8617
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 8617
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 5
9999 mem: storing 15 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 8617
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 8617
9999 mem: location 1257 is 245
9999 mem: storing 8617 in location 1274
9999 mem: storing 245 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 15
9998 run: address to copy to is 1046
9999 mem: location 1274 is 8617
9999 mem: location 1275 is 245
9999 mem: storing 8617 in location 1046
9999 mem: storing 245 in location 1047
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 6 -> 5
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 104 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 1
9999 mem: storing 2 in location 1223
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 2
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 5 -> 6
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 2
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 104 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1184
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1220 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1185
9998 run: its type is "character"
9999 mem: location 1185 is 102
9999 mem: storing 102 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 102
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 102
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 102
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 102
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 102
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 6 -> 7
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 102
  90 print-character: 102
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 0
9999 mem: storing 20 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 102
9999 mem: location 1257 is 7
9999 mem: storing 102 in location 1274
9999 mem: storing 7 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 20
9998 run: address to copy to is 1056
9999 mem: location 1274 is 102
9999 mem: location 1275 is 7
9999 mem: storing 102 in location 1056
9999 mem: storing 7 in location 1057
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1184
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1184: 4 -> 5
9999 mem: storing 1184 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1184
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1186
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1186 is 1188
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1188: 3 -> 4
9999 mem: storing 1188 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1188
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1188
9999 mem: storing 1188 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1180
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1180: 5 -> 6
9999 mem: storing 1180 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1180
9998 run: jumping to instruction 5
9990 schedule: next_2/render/new-editor/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1182
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1182 is 1184
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1184: 4 -> 5
9999 mem: storing 1184 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1184
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1221
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1188
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1220 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1189
9998 run: its type is "character"
9999 mem: location 1189 is 10
9999 mem: storing 10 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 10
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 10
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 10
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 10
9999 mem: storing 1 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 46
 104 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1219 is 5
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 6 -> 7
9999 mem: storing 1008 in location 1099
 105 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 105 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 7 -> 8
9999 mem: storing 1008 in location 1145
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1146
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 106 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 2
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 8 -> 7
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 2
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 105 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 7 -> 8
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 1
9999 mem: storing 21 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 21
9998 run: address to copy to is 1058
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1058
9999 mem: storing 7 in location 1059
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 8 -> 9
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 2
9999 mem: storing 22 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 22
9998 run: address to copy to is 1060
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1060
9999 mem: storing 7 in location 1061
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 9 -> 10
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 3
9999 mem: storing 23 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 23
9998 run: address to copy to is 1062
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1062
9999 mem: storing 7 in location 1063
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 10 -> 11
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 4
9999 mem: storing 24 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 24
9998 run: address to copy to is 1064
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1064
9999 mem: storing 7 in location 1065
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 11 -> 12
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 5
9999 mem: storing 25 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 25
9998 run: address to copy to is 1066
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1066
9999 mem: storing 7 in location 1067
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 105 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 12 -> 11
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
 104 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 2
9999 mem: storing 3 in location 1223
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 3
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 11 -> 12
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 3
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1188
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1188: 4 -> 5
9999 mem: storing 1188 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1188
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 1192
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1192: 3 -> 4
9999 mem: storing 1192 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1184
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1184: 5 -> 6
9999 mem: storing 1184 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1184
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1186
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1186 is 1188
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1188: 4 -> 5
9999 mem: storing 1188 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1188
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1188
9999 mem: storing 1188 in location 1221
 104 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1192
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1220 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1193
9998 run: its type is "character"
9999 mem: location 1193 is 103
9999 mem: storing 103 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 103
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 103
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 103
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 103
9999 mem: storing 0 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 103
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 12 -> 13
9999 mem: storing 1008 in location 1255
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1256
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 103
  90 print-character: 103
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 103
9999 mem: storing 0 in location 1266
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 0
9999 mem: storing 30 in location 1269
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 103
9999 mem: storing 0 in location 1272
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 103
9999 mem: location 1257 is 7
9999 mem: storing 103 in location 1274
9999 mem: storing 7 in location 1275
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 30
9998 run: address to copy to is 1076
9999 mem: location 1274 is 103
9999 mem: location 1275 is 7
9999 mem: storing 103 in location 1076
9999 mem: storing 7 in location 1077
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
9990 schedule: print/render/new-editor/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 13 -> 12
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1192
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1192: 4 -> 5
9999 mem: storing 1192 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1192
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1196
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1196: 3 -> 4
9999 mem: storing 1196 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1188
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1188: 5 -> 6
9999 mem: storing 1188 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1188
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 1192
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1192: 4 -> 5
9999 mem: storing 1192 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1221
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1196
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 104 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1220 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1197
9998 run: its type is "character"
9999 mem: location 1197 is 10
9999 mem: storing 10 in location 1231
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 10
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1243
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1244
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1243 is 7
9999 mem: storing 1 in location 1245
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1244 is 10
9999 mem: storing 0 in location 1246
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1247
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1245 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1244 is 10
9999 mem: storing 0 in location 1249
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1243 is 7
9999 mem: storing 0 in location 1250
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1250 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1243 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1244
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1245
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1246
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1247
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1248
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1249
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1250
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1251
9999 mem: automatically abandoning 1240
9999 abandon: updating refcounts inside 1240: (array number)
9999 abandon: saving 1240 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 10
9999 mem: storing 1 in location 1232
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 46
 104 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1219 is 5
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 12 -> 13
9999 mem: storing 1008 in location 1099
 105 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 105 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 13 -> 14
9999 mem: storing 1008 in location 1145
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1146
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 106 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 3
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 14 -> 13
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 105 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 13 -> 14
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 1
9999 mem: storing 31 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 31
9998 run: address to copy to is 1078
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1078
9999 mem: storing 7 in location 1079
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 14 -> 15
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 2
9999 mem: storing 32 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 32
9998 run: address to copy to is 1080
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1080
9999 mem: storing 7 in location 1081
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 15 -> 16
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 3
9999 mem: storing 33 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 33
9998 run: address to copy to is 1082
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1082
9999 mem: storing 7 in location 1083
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 16 -> 17
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 4
9999 mem: storing 34 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 34
9998 run: address to copy to is 1084
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1084
9999 mem: storing 7 in location 1085
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 17 -> 18
9999 mem: storing 1008 in location 1255
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 106 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 106 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 106 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 5
9999 mem: storing 35 in location 1269
 106 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 106 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 106 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 106 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 35
9998 run: address to copy to is 1086
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1086
9999 mem: storing 7 in location 1087
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 106 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 105 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 18 -> 17
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
 104 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 3
9999 mem: storing 4 in location 1223
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 4
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 17 -> 18
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 4
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 104 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1196
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1196: 4 -> 5
9999 mem: storing 1196 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1196
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 1200
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1200: 3 -> 4
9999 mem: storing 1200 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1200
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1200
9999 mem: storing 1200 in location 1220
 104 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1192
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 105 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1192: 5 -> 6
9999 mem: storing 1192 in location 1166
 105 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1192
9998 run: jumping to instruction 5
 105 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1196
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1196: 4 -> 5
9999 mem: storing 1196 in location 1167
 105 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1221
 104 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 104 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1200
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 4
9999 mem: location 1218 is 4
9999 mem: storing 1 in location 1228
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 1
9998 run: jumping to instruction 70
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1220 is 1200
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1132
9999 mem: location 1132 is 0
9999 mem: incrementing refcount of 1200: 4 -> 5
9999 mem: storing 1200 in location 1132
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 4
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 104 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1226 is 0
9999 mem: storing 1 in location 1236
 104 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1229 is 0
9999 mem: location 1236 is 1
9999 mem: storing 0 in location 1237
 104 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 4
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1238
 104 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1237 is 0
9999 mem: location 1238 is 0
9999 mem: storing 0 in location 1239
 104 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 0
9998 run: jumping to instruction 82
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 0
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1223 is 4
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1136
9999 mem: storing 4 in location 1136
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1225 is 1
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1137
9999 mem: storing 1 in location 1137
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1226 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1138
9999 mem: storing 0 in location 1138
 104 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1227 is 1148
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1133
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1148 in location 1133
 104 run: return {row: "number"}, {column: "number"}, {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1223 is 4
9999 mem: location 1224 is 0
9999 mem: location 1215 is 1008
9999 mem: location 1216 is 1129
9999 mem: clearing left:number
9999 mem: storing 0 in location 1217
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1218
9999 mem: clearing right:number
9999 mem: storing 0 in location 1219
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1220 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 5 -> 4
9999 mem: storing 0 in location 1220
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1221 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 5 -> 4
9999 mem: storing 0 in location 1221
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing color:number
9999 mem: storing 0 in location 1222
9999 mem: clearing row:number
9999 mem: storing 0 in location 1223
9999 mem: clearing column:number
9999 mem: storing 0 in location 1224
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1225
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1227 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 9 -> 8
9999 mem: storing 0 in location 1227
9999 mem: clearing off-screen?:boolean
9999 mem: storing 0 in location 1228
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing at-cursor?:boolean
9999 mem: storing 0 in location 1230
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: clearing c:character
9999 mem: storing 0 in location 1231
9999 mem: clearing color
9999 mem: storing 0 in location 1222
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1232
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing left-of-cursor?:boolean
9999 mem: storing 0 in location 1233
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: clearing row
9999 mem: storing 0 in location 1223
9999 mem: clearing column
9999 mem: storing 0 in location 1224
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing prev
9999 mem: location 1221 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1221
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1234
9999 mem: clearing wrap-icon:character
9999 mem: storing 0 in location 1235
9999 mem: clearing column
9999 mem: storing 0 in location 1224
9999 mem: clearing row
9999 mem: storing 0 in location 1223
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing prev
9999 mem: location 1221 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1221
9999 mem: clearing column
9999 mem: storing 0 in location 1224
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing cursor-outside-line?:boolean
9999 mem: storing 0 in location 1236
9999 mem: clearing before-cursor-on-same-line?:boolean
9999 mem: storing 0 in location 1237
9999 mem: clearing above-cursor-row?:boolean
9999 mem: storing 0 in location 1238
9999 mem: clearing before-cursor?:boolean
9999 mem: storing 0 in location 1239
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1225
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: automatically abandoning 1212
9999 abandon: updating refcounts inside 1212: (array number)
9999 abandon: saving 1212 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9998 run: result 1 is 0
9998 run: result 2 is 1008
9998 run: result 3 is 1129
9999 mem: storing 1008 in location 1124
9999 mem: storing 1129 in location 1127
 103 run: {result: ("address" "editor-data"), "lookup": ()} <- put {result: ("address" "editor-data"), "lookup": ()}, {indent?: "offset"}, {1: "literal", "true": ()}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1139
9999 mem: storing 1 in location 1139
 103 run: reply {result: ("address" "editor-data")}, {screen: ("address" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1127 is 1129
9999 mem: location 1124 is 1008
9999 mem: clearing s:address:array:character
9999 mem: location 1123 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 2 -> 1
9999 mem: storing 0 in location 1123
9999 mem: clearing screen:address:screen
9999 mem: location 1124 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 18 -> 17
9999 mem: storing 0 in location 1124
9999 mem: clearing left:number
9999 mem: storing 0 in location 1125
9999 mem: clearing right:number
9999 mem: storing 0 in location 1126
9999 mem: clearing right
9999 mem: storing 0 in location 1126
9999 mem: clearing init:address:duplex-list:character
9999 mem: location 1128 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 8 -> 7
9999 mem: storing 0 in location 1128
9999 mem: clearing _
9999 mem: clearing _
9999 mem: clearing screen
9999 mem: location 1124 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1124
9999 mem: automatically abandoning 1120
9999 abandon: updating refcounts inside 1120: (array number)
9999 abandon: saving 1120 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1129
9999 mem: storing 1129 in location 2
 102 run: screen-should-contain {"\n    .          .\n    .abcde↩    .\n    .f         .\n    .g         .\n  ": "literal-string"}
 102 run: assume-console {"\n    press page-down\n  ": "literal-string"}
9993 parse: instruction: press
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {page-down: ()}
9992 load: after rewriting: press {page-down: ()}
9999 mem: storing 'press' event starting at 1280
9999 mem: storing console in 1284
9999 mem: storing console data in 1286
 102 run: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {console: ("address" "console")}
9993 parse:   ingredient: {2: ("address" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9992 transform: console => ("address" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")} -> {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1284
9999 mem: location 2 is 1129
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1287
9999 mem: storing 0 in location 1287
9999 mem: storing 0 in location 1288
9999 mem: storing 0 in location 1289
9999 mem: storing 0 in location 1290
9999 mem: storing 0 in location 1291
9999 mem: storing 0 in location 1292
9999 mem: storing 0 in location 1293
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 0 in location 1299
9999 mem: storing 0 in location 1300
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: storing 0 in location 1305
9999 mem: storing 17 in location 1288
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 17 -> 18
9999 mem: storing 1008 in location 1290
 104 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1291 is 0
9999 mem: incrementing refcount of 1284: 1 -> 2
9999 mem: storing 1284 in location 1291
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1292 is 0
9999 mem: incrementing refcount of 1129: 3 -> 4
9999 mem: storing 1129 in location 1292
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1293
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1294
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1290 is 1008
9999 mem: location 1293 is 1
9999 mem: location 1294 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 18 -> 19
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 1
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1290
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1291 is 1284
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1306
9999 mem: storing 0 in location 1306
9999 mem: storing 0 in location 1307
9999 mem: storing 0 in location 1308
9999 mem: storing 0 in location 1309
9999 mem: storing 0 in location 1310
9999 mem: storing 0 in location 1311
9999 mem: storing 0 in location 1312
9999 mem: storing 0 in location 1313
9999 mem: storing 0 in location 1314
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: storing 0 in location 1319
9999 mem: storing 12 in location 1307
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1309 is 0
9999 mem: incrementing refcount of 1284: 2 -> 3
9999 mem: storing 1284 in location 1309
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1309 is 1284
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9999 mem: location 1285 is 0
9999 mem: location 1286 is 1278
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9998 run: address to copy is 1285
9998 run: its type is "number"
9999 mem: location 1285 is 0
9999 mem: storing 0 in location 1310
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9999 mem: location 1285 is 0
9999 mem: location 1286 is 1278
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9998 run: address to copy is 1286
9998 run: its type is ("address" "array" "event")
9999 mem: location 1286 is 1278
9999 mem: location 1311 is 0
9999 mem: incrementing refcount of 1278: 1 -> 2
9999 mem: storing 1278 in location 1311
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1311 is 1278
9999 mem: skipping refcount at 1278
9999 mem: storing 1 in location 1312
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1310 is 0
9999 mem: location 1312 is 1
9999 mem: storing 0 in location 1313
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1313 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1311 is 1278
9999 mem: skipping refcount at 1278
9998 run: base address is 1279
9999 mem: location 1310 is 0
9998 run: address to copy is 1280
9998 run: its type is event
9999 mem: location 1280 is 1
9999 mem: location 1281 is 65518
9999 mem: location 1282 is 0
9999 mem: location 1283 is 0
9999 mem: storing 1 in location 1315
9999 mem: storing 65518 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1310 is 0
9999 mem: storing 1 in location 1310
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9999 mem: location 1285 is 0
9999 mem: location 1286 is 1278
9999 mem: location 1310 is 1
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9998 run: address to copy to is 1285
9999 mem: storing 1 in location 1285
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1315 is 1
9999 mem: location 1316 is 65518
9999 mem: location 1317 is 0
9999 mem: location 1318 is 0
9999 mem: location 1309 is 1284
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1310
9999 mem: clearing buf:address:array:event
9999 mem: location 1311 is 1278
9999 mem: skipping refcount at 1278
9999 mem: decrementing refcount of 1278: 2 -> 1
9999 mem: storing 0 in location 1311
9999 mem: clearing max:number
9999 mem: storing 0 in location 1312
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1313
9999 mem: clearing dummy:address:event
9999 mem: location 1314 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1314
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1310
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1319
9999 mem: automatically abandoning 1306
9999 abandon: updating refcounts inside 1306: (array number)
9999 abandon: saving 1306 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [1, 65518, 0, 0]
9998 run: result 1 is 1284
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 1 in location 1295
9999 mem: storing 65518 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 1284 in location 1291
9999 mem: storing 1 in location 1299
9999 mem: storing 0 in location 1300
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1300 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1295 is 1
9999 mem: location 1296 is 65518
9999 mem: location 1297 is 0
9999 mem: location 1298 is 0
9999 mem: storing 0 in location 1304
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1304 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1304 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {e: "event"}
9999 mem: location 1290 is 1008
9999 mem: location 1292 is 1129
9999 mem: location 1295 is 1
9999 mem: location 1296 is 65518
9999 mem: location 1297 is 0
9999 mem: location 1298 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 102
9999 mem: allocating size 104
9999 mem: new alloc: 1320
9999 mem: storing 0 in location 1320
9999 mem: storing 0 in location 1321
9999 mem: storing 0 in location 1322
9999 mem: storing 0 in location 1323
9999 mem: storing 0 in location 1324
9999 mem: storing 0 in location 1325
9999 mem: storing 0 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
9999 mem: storing 0 in location 1329
9999 mem: storing 0 in location 1330
9999 mem: storing 0 in location 1331
9999 mem: storing 0 in location 1332
9999 mem: storing 0 in location 1333
9999 mem: storing 0 in location 1334
9999 mem: storing 0 in location 1335
9999 mem: storing 0 in location 1336
9999 mem: storing 0 in location 1337
9999 mem: storing 0 in location 1338
9999 mem: storing 0 in location 1339
9999 mem: storing 0 in location 1340
9999 mem: storing 0 in location 1341
9999 mem: storing 0 in location 1342
9999 mem: storing 0 in location 1343
9999 mem: storing 0 in location 1344
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: storing 0 in location 1355
9999 mem: storing 0 in location 1356
9999 mem: storing 0 in location 1357
9999 mem: storing 0 in location 1358
9999 mem: storing 0 in location 1359
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: storing 0 in location 1367
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: storing 0 in location 1377
9999 mem: storing 0 in location 1378
9999 mem: storing 0 in location 1379
9999 mem: storing 0 in location 1380
9999 mem: storing 0 in location 1381
9999 mem: storing 0 in location 1382
9999 mem: storing 0 in location 1383
9999 mem: storing 0 in location 1384
9999 mem: storing 0 in location 1385
9999 mem: storing 0 in location 1386
9999 mem: storing 0 in location 1387
9999 mem: storing 0 in location 1388
9999 mem: storing 0 in location 1389
9999 mem: storing 0 in location 1390
9999 mem: storing 0 in location 1391
9999 mem: storing 0 in location 1392
9999 mem: storing 0 in location 1393
9999 mem: storing 0 in location 1394
9999 mem: storing 0 in location 1395
9999 mem: storing 0 in location 1396
9999 mem: storing 0 in location 1397
9999 mem: storing 0 in location 1398
9999 mem: storing 0 in location 1399
9999 mem: storing 0 in location 1400
9999 mem: storing 0 in location 1401
9999 mem: storing 0 in location 1402
9999 mem: storing 0 in location 1403
9999 mem: storing 0 in location 1404
9999 mem: storing 0 in location 1405
9999 mem: storing 0 in location 1406
9999 mem: storing 0 in location 1407
9999 mem: storing 0 in location 1408
9999 mem: storing 0 in location 1409
9999 mem: storing 0 in location 1410
9999 mem: storing 0 in location 1411
9999 mem: storing 0 in location 1412
9999 mem: storing 0 in location 1413
9999 mem: storing 0 in location 1414
9999 mem: storing 0 in location 1415
9999 mem: storing 0 in location 1416
9999 mem: storing 0 in location 1417
9999 mem: storing 0 in location 1418
9999 mem: storing 0 in location 1419
9999 mem: storing 0 in location 1420
9999 mem: storing 0 in location 1421
9999 mem: storing 0 in location 1422
9999 mem: storing 0 in location 1423
9999 mem: storing 102 in location 1321
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1323 is 0
9999 mem: incrementing refcount of 1008: 19 -> 20
9999 mem: storing 1008 in location 1323
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1324 is 0
9999 mem: incrementing refcount of 1129: 4 -> 5
9999 mem: storing 1129 in location 1324
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1325
9999 mem: storing 65518 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1329
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1324 is 1129
9998 run: jumping to instruction 8
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1323 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1008: 20 -> 21
9999 mem: storing 1008 in location 1166
9990 schedule: screen-width/handle-keyboard-event/editor-event-loop/run_1001/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1166 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1167
 106 run: return {width: "number"}
9999 mem: location 1167 is 10
9999 mem: clearing screen:address:screen
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 21 -> 20
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1330
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1323 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1008: 20 -> 21
9999 mem: storing 1008 in location 1166
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1166 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1167
 106 run: return {height: "number"}
9999 mem: location 1167 is 4
9999 mem: clearing screen:address:screen
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 21 -> 20
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 4
9999 mem: storing 4 in location 1331
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1332
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1333
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1148
9999 mem: location 1334 is 0
9999 mem: incrementing refcount of 1148: 7 -> 8
9999 mem: storing 1148 in location 1334
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1335
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1336
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1335 is 1
9999 mem: storing 1 in location 1337
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1336 is 0
9999 mem: storing 0 in location 1338
 105 run: {c: "character"}, {is-unicode?: "boolean"} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1325 is 1
9999 mem: location 1326 is 65518
9999 mem: location 1327 is 0
9999 mem: location 1328 is 0
9999 mem: storing 0 in location 1340
 105 run: jump-unless {is-unicode?: "boolean"}, {: "offset"}
9999 mem: location 1340 is 0
9998 run: jumping to instruction 460
 105 run: {k: "number"}, {is-keycode?: "boolean"} <- maybe-convert {e: "event"}, {keycode: "variant"}
9999 mem: location 1325 is 1
9999 mem: location 1326 is 65518
9999 mem: location 1327 is 0
9999 mem: location 1328 is 0
9999 mem: storing 1 in location 1411
9999 mem: storing 65518 in location 1410
 105 run: assert {is-keycode?: "boolean"}, {"event was of unknown type; neither keyboard nor mouse": "literal-string"}
9999 mem: location 1411 is 1
 105 run: {page-up?: "boolean"} <- equal {k: "number"}, {65519: "literal", "page-up": ()}
9999 mem: location 1410 is 65518
9999 mem: storing 0 in location 1383
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1383 is 0
9998 run: jumping to instruction 502
 105 run: {page-down?: "boolean"} <- equal {k: "number"}, {65518: "literal", "page-down": ()}
9999 mem: location 1410 is 65518
9999 mem: storing 1 in location 1394
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 1
9998 run: jump-unless fell through
 105 run: {old-top: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1148
9999 mem: location 1384 is 0
9999 mem: incrementing refcount of 1148: 8 -> 9
9999 mem: storing 1148 in location 1384
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1385
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1386
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1148
9999 mem: location 1387 is 0
9999 mem: incrementing refcount of 1148: 9 -> 10
9999 mem: storing 1148 in location 1387
 105 run: page-down {editor: ("address" "editor-data")}
9999 mem: location 1324 is 1129
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1129: 5 -> 6
9999 mem: storing 1129 in location 1003
 106 run: {bottom-of-screen: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1132
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1132 is 1200
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1200: 4 -> 5
9999 mem: storing 1200 in location 1004
 106 run: jump-if {bottom-of-screen: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 1200
9998 run: jumping to instruction 6
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1148
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1148: 10 -> 11
9999 mem: storing 1148 in location 1005
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- prev_2 {bottom-of-screen: ("address" "duplex-list" "character")}
9999 mem: location 1004 is 1200
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1200: 5 -> 6
9999 mem: storing 1200 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1200
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1203
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1203 is 1196
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1196: 4 -> 5
9999 mem: storing 1196 in location 1167
 107 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1167 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1005
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1148
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1005 is 1196
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1133
9999 mem: location 1133 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 11 -> 10
9999 mem: incrementing refcount of 1196: 5 -> 6
9999 mem: storing 1196 in location 1133
 106 run: {last: "character"} <- get {before-cursor: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1005 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1005 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1197
9998 run: its type is "character"
9999 mem: location 1197 is 10
9999 mem: storing 10 in location 1006
 106 run: {newline?: "boolean"} <- equal {last: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1006 is 10
9999 mem: storing 1 in location 1007
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1007 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- prev_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1005 is 1196
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1196: 6 -> 7
9999 mem: storing 1196 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1196
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1199
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1199 is 1192
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1192: 5 -> 6
9999 mem: storing 1192 in location 1167
 107 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1167 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 7 -> 6
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1005
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1196
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1005 is 1192
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1133
9999 mem: location 1133 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 6 -> 5
9999 mem: incrementing refcount of 1192: 6 -> 7
9999 mem: storing 1192 in location 1133
 106 run: move-to-start-of-line {editor: ("address" "editor-data")}
9999 mem: location 1003 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1424
9999 mem: storing 0 in location 1424
9999 mem: storing 0 in location 1425
9999 mem: storing 0 in location 1426
9999 mem: storing 0 in location 1427
9999 mem: storing 0 in location 1428
9999 mem: storing 0 in location 1429
9999 mem: storing 0 in location 1430
9999 mem: storing 0 in location 1431
9999 mem: storing 0 in location 1432
9999 mem: storing 0 in location 1433
9999 mem: storing 0 in location 1434
9999 mem: storing 9 in location 1425
 107 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1427 is 0
9999 mem: incrementing refcount of 1129: 6 -> 7
9999 mem: storing 1129 in location 1427
 107 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1192
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1428
 107 run: {cursor-column: "number"} <- copy {left: "number"}
9999 mem: location 1428 is 0
9999 mem: storing 0 in location 1429
 107 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1192
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1429 is 0
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1138
9999 mem: storing 0 in location 1138
 107 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1192
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1192
9999 mem: location 1430 is 0
9999 mem: incrementing refcount of 1192: 7 -> 8
9999 mem: storing 1192 in location 1430
 107 run: {init: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1192
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1130 is 1148
9999 mem: location 1431 is 0
9999 mem: incrementing refcount of 1148: 10 -> 11
9999 mem: storing 1148 in location 1431
 107 run: {at-start-of-text?: "boolean"} <- equal {before-cursor: ("address" "duplex-list" "character")}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1430 is 1192
9999 mem: location 1431 is 1148
9999 mem: storing 0 in location 1432
 107 run: jump-if {at-start-of-text?: "boolean"}, {: "offset"}
9999 mem: location 1432 is 0
9998 run: jump-if fell through
 107 run: {prev: "character"} <- get {before-cursor: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1430 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1430 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1193
9998 run: its type is "character"
9999 mem: location 1193 is 103
9999 mem: storing 103 in location 1433
 107 run: {at-start-of-line?: "boolean"} <- equal {prev: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1433 is 103
9999 mem: storing 0 in location 1434
 107 run: jump-if {at-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1434 is 0
9998 run: jump-if fell through
 107 run: {before-cursor: ("address" "duplex-list" "character")} <- prev_2 {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1430 is 1192
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 108 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1192: 8 -> 9
9999 mem: storing 1192 in location 1166
 108 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1192
9998 run: jumping to instruction 5
 108 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1195
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1195 is 1188
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1188: 5 -> 6
9999 mem: storing 1188 in location 1167
 108 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1167 is 1188
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 9 -> 8
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1188
9999 mem: storing 1188 in location 1430
 107 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1192
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1430 is 1188
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1133
9999 mem: location 1133 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 8 -> 7
9999 mem: incrementing refcount of 1188: 6 -> 7
9999 mem: storing 1188 in location 1133
 107 run: assert {before-cursor: ("address" "duplex-list" "character")}, {"move-to-start-of-line tried to move before start of text": "literal-string"}
9999 mem: location 1430 is 1188
 107 run: jump {: "offset"}
9998 run: jumping to instruction 8
 107 run: {at-start-of-text?: "boolean"} <- equal {before-cursor: ("address" "duplex-list" "character")}, {init: ("address" "duplex-list" "character")}
9999 mem: location 1430 is 1188
9999 mem: location 1431 is 1148
9999 mem: storing 0 in location 1432
 107 run: jump-if {at-start-of-text?: "boolean"}, {: "offset"}
9999 mem: location 1432 is 0
9998 run: jump-if fell through
 107 run: {prev: "character"} <- get {before-cursor: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1430 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1430 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1189
9998 run: its type is "character"
9999 mem: location 1189 is 10
9999 mem: storing 10 in location 1433
 107 run: {at-start-of-line?: "boolean"} <- equal {prev: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1433 is 10
9999 mem: storing 1 in location 1434
 107 run: jump-if {at-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1434 is 1
9998 run: jumping to instruction 17
 107 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "0"}
9999 mem: location 1427 is 1129
9999 mem: clearing editor:address:editor-data
9999 mem: location 1427 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 7 -> 6
9999 mem: storing 0 in location 1427
9999 mem: clearing left:number
9999 mem: storing 0 in location 1428
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1429
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1430 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 7 -> 6
9999 mem: storing 0 in location 1430
9999 mem: clearing init:address:duplex-list:character
9999 mem: location 1431 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 11 -> 10
9999 mem: storing 0 in location 1431
9999 mem: clearing at-start-of-text?:boolean
9999 mem: storing 0 in location 1432
9999 mem: clearing prev:character
9999 mem: storing 0 in location 1433
9999 mem: clearing at-start-of-line?:boolean
9999 mem: storing 0 in location 1434
9999 mem: clearing before-cursor
9999 mem: location 1430 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1430
9999 mem: automatically abandoning 1424
9999 abandon: updating refcounts inside 1424: (array number)
9999 abandon: saving 1424 in free-list of size 11
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1188
9999 mem: location 1005 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 7 -> 6
9999 mem: incrementing refcount of 1188: 6 -> 7
9999 mem: storing 1188 in location 1005
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1148
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1005 is 1188
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1131
9999 mem: location 1131 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 10 -> 9
9999 mem: incrementing refcount of 1188: 7 -> 8
9999 mem: storing 1188 in location 1131
 106 run: reply {editor: ("address" "editor-data"), "same-as-ingredient": "0"}
9999 mem: location 1003 is 1129
9999 mem: clearing editor:address:editor-data
9999 mem: location 1003 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 6 -> 5
9999 mem: storing 0 in location 1003
9999 mem: clearing bottom-of-screen:address:duplex-list:character
9999 mem: location 1004 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 5 -> 4
9999 mem: storing 0 in location 1004
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1005 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 8 -> 7
9999 mem: storing 0 in location 1005
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1005 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1005
9999 mem: clearing last:character
9999 mem: storing 0 in location 1006
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1007
9999 mem: clearing before-cursor
9999 mem: location 1005 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1005
9999 mem: clearing before-cursor
9999 mem: location 1005 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1005
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
 105 run: {undo-coalesce-tag: "number"} <- copy {0: "literal", "never": ()}
9999 mem: storing 0 in location 1388
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1188
9999 mem: location 1389 is 0
9999 mem: incrementing refcount of 1188: 7 -> 8
9999 mem: storing 1188 in location 1389
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1335
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1336
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1388 is 0
9998 run: jumping to instruction 531
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1240
9999 mem: location 1343 is 0
9999 mem: incrementing refcount of 1240: 0 -> 1
9999 mem: storing 1240 in location 1343
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1385 is 1
9999 mem: location 1386 is 0
9999 mem: location 1387 is 1148
9999 mem: location 1335 is 1
9999 mem: location 1336 is 0
9999 mem: location 1389 is 1188
9999 mem: location 1388 is 0
9999 mem: location 1343 is 1240
9999 mem: skipping refcount at 1240
9999 mem: location 1343 is 1240
9999 mem: skipping refcount at 1240
9999 mem: incrementing refcount of 1148: 9 -> 10
9999 mem: incrementing refcount of 1188: 8 -> 9
9999 mem: storing 1 in location 1241
9999 mem: storing 1 in location 1242
9999 mem: storing 0 in location 1243
9999 mem: storing 1148 in location 1244
9999 mem: storing 1 in location 1245
9999 mem: storing 0 in location 1246
9999 mem: storing 1188 in location 1247
9999 mem: storing 0 in location 1248
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1324 is 1129
9999 mem: location 1343 is 1240
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1155 is 0
9999 mem: incrementing refcount of 1129: 5 -> 6
9999 mem: storing 1129 in location 1155
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1240: 1 -> 2
9999 mem: storing 1240 in location 1156
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1140
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1140 is 0
9999 mem: location 1157 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1157
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1156 is 1240
9999 mem: location 1157 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1240: 2 -> 3
9999 mem: storing 1240 in location 1145
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1146 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1146
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1435
9999 mem: storing 0 in location 1435
9999 mem: storing 0 in location 1436
9999 mem: storing 0 in location 1437
9999 mem: location 1147 is 0
9999 mem: incrementing refcount of 1435: 0 -> 1
9999 mem: storing 1435 in location 1147
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1145 is 1240
9999 mem: location 1146 is 0
9999 mem: location 1147 is 1435
9999 mem: skipping refcount at 1435
9999 mem: location 1147 is 1435
9999 mem: skipping refcount at 1435
9999 mem: incrementing refcount of 1240: 3 -> 4
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1240 in location 1436
9999 mem: storing 0 in location 1437
 107 run: reply {result: ("address" "list" "address" "operation")}
9999 mem: location 1147 is 1435
9999 mem: clearing x:_elem
9999 mem: location 1145 is 1240
9999 mem: skipping refcount at 1240
9999 mem: decrementing refcount of 1240: 4 -> 3
9999 mem: storing 0 in location 1145
9999 mem: clearing in:address:list:_elem
9999 mem: location 1146 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1435
9999 mem: storing 1435 in location 1157
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: location 1157 is 1435
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1140
9999 mem: location 1140 is 0
9999 mem: incrementing refcount of 1435: 1 -> 2
9999 mem: storing 1435 in location 1140
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1141
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1141 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1158 is 0
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1141
9999 mem: location 1141 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1141
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1155 is 1129
9999 mem: clearing op:address:operation
9999 mem: location 1156 is 1240
9999 mem: skipping refcount at 1240
9999 mem: decrementing refcount of 1240: 3 -> 2
9999 mem: storing 0 in location 1156
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1157 is 1435
9999 mem: skipping refcount at 1435
9999 mem: decrementing refcount of 1435: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing undo
9999 mem: location 1157 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1157
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: clearing redo
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1129
9999 mem: storing 1129 in location 1324
 105 run: {top-of-screen: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1188
9999 mem: location 1392 is 0
9999 mem: incrementing refcount of 1188: 9 -> 10
9999 mem: storing 1188 in location 1392
 105 run: {no-movement?: "boolean"} <- equal {top-of-screen: ("address" "duplex-list" "character")}, {old-top: ("address" "duplex-list" "character")}
9999 mem: location 1392 is 1188
9999 mem: location 1384 is 1148
9999 mem: storing 0 in location 1393
 105 run: {go-render?: "boolean"} <- not {no-movement?: "boolean"}
9999 mem: location 1393 is 0
9999 mem: storing 1 in location 1329
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1323 is 1008
9999 mem: location 1324 is 1129
9999 mem: location 1329 is 1
9999 mem: clearing e:event
9999 mem: storing 0 in location 1325
9999 mem: storing 0 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
9999 mem: clearing screen-width:number
9999 mem: storing 0 in location 1330
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1331
9999 mem: clearing left:number
9999 mem: storing 0 in location 1332
9999 mem: clearing right:number
9999 mem: storing 0 in location 1333
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 10 -> 9
9999 mem: storing 0 in location 1334
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing save-row:number
9999 mem: storing 0 in location 1337
9999 mem: clearing save-column:number
9999 mem: storing 0 in location 1338
9999 mem: clearing c:character
9999 mem: storing 0 in location 1339
9999 mem: clearing is-unicode?:boolean
9999 mem: storing 0 in location 1340
9999 mem: clearing redo?:boolean
9999 mem: storing 0 in location 1341
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 1240
9999 mem: skipping refcount at 1240
9999 mem: decrementing refcount of 1240: 2 -> 1
9999 mem: storing 0 in location 1343
9999 mem: clearing redo
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing undo
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1356 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1356
9999 mem: clearing end:address:duplex-list:character
9999 mem: location 1357 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1357
9999 mem: clearing data:address:duplex-list:character
9999 mem: location 1358 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1358
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing undo?:boolean
9999 mem: storing 0 in location 1379
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing undo
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing redo
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing anchor:address:duplex-list:character
9999 mem: location 1380 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1380
9999 mem: clearing deleted:address:duplex-list:character
9999 mem: location 1381 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1381
9999 mem: clearing old-cursor:address:duplex-list:character
9999 mem: location 1382 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1382
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1356 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1356
9999 mem: clearing end:address:duplex-list:character
9999 mem: location 1357 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1357
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing page-up?:boolean
9999 mem: storing 0 in location 1383
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 9 -> 8
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 8 -> 7
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 10 -> 9
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 9 -> 8
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing page-down?:boolean
9999 mem: storing 0 in location 1394
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing delete-to-end-of-line?:boolean
9999 mem: storing 0 in location 1395
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing deleted-cells:address:duplex-list:character
9999 mem: location 1396 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1396
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing delete-to-start-of-line?:boolean
9999 mem: storing 0 in location 1398
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing deleted-cells:address:duplex-list:character
9999 mem: location 1396 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1396
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing move-to-end-of-line?:boolean
9999 mem: storing 0 in location 1399
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-start-of-line?:boolean
9999 mem: storing 0 in location 1400
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing delete-previous-character?:boolean
9999 mem: storing 0 in location 1401
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing backspaced-cell:address:duplex-list:character
9999 mem: location 1402 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1402
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing backspaced-so-far:address:duplex-list:character
9999 mem: location 1403 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1403
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing tab?:boolean
9999 mem: storing 0 in location 1404
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1405 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1405
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-until:address:duplex-list:character
9999 mem: location 1406 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1406
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1407 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1407
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1408
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1405 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1405
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1407 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1407
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing regular-character?:boolean
9999 mem: storing 0 in location 1409
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1405 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1405
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-until:address:duplex-list:character
9999 mem: location 1406 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1406
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1407 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1407
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing k:number
9999 mem: storing 0 in location 1410
9999 mem: clearing is-keycode?:boolean
9999 mem: storing 0 in location 1411
9999 mem: clearing page-up?:boolean
9999 mem: storing 0 in location 1383
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing page-down?:boolean
9999 mem: storing 0 in location 1394
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing move-to-end-of-line?:boolean
9999 mem: storing 0 in location 1399
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-start-of-line?:boolean
9999 mem: storing 0 in location 1400
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-next-line?:boolean
9999 mem: storing 0 in location 1412
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-previous-line?:boolean
9999 mem: storing 0 in location 1413
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-previous-character?:boolean
9999 mem: storing 0 in location 1414
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1415 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1415
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-next-character?:boolean
9999 mem: storing 0 in location 1416
9999 mem: clearing next-cursor:address:duplex-list:character
9999 mem: location 1417 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1417
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing delete-next-character?:boolean
9999 mem: storing 0 in location 1418
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing deleted-cell:address:duplex-list:character
9999 mem: location 1419 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1419
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing delete-until:address:duplex-list:character
9999 mem: location 1420 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1420
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deleted-so-far:address:duplex-list:character
9999 mem: location 1421 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1421
9999 mem: clearing deleted-so-far
9999 mem: location 1421 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1421
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing paste-end?:boolean
9999 mem: storing 0 in location 1422
9999 mem: clearing paste-start?:boolean
9999 mem: storing 0 in location 1423
9999 mem: automatically abandoning 1320
9999 abandon: updating refcounts inside 1320: (array number)
9999 abandon: saving 1320 in free-list of size 104
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1129
9998 run: result 2 is 1
9999 mem: storing 1008 in location 1290
9999 mem: storing 1129 in location 1292
9999 mem: storing 1 in location 1305
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 104 run: {screen: ("address" "screen")} <- editor-render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1290 is 1008
9999 mem: location 1292 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1120
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1123 is 0
9999 mem: incrementing refcount of 1008: 20 -> 21
9999 mem: storing 1008 in location 1123
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1124 is 0
9999 mem: incrementing refcount of 1129: 6 -> 7
9999 mem: storing 1129 in location 1124
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1125
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1126
 105 run: {row: "number"}, {column: "number"} <- render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1123 is 1008
9999 mem: location 1124 is 1129
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1212
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1215 is 0
9999 mem: incrementing refcount of 1008: 21 -> 22
9999 mem: storing 1008 in location 1215
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1216 is 0
9999 mem: incrementing refcount of 1129: 7 -> 8
9999 mem: storing 1129 in location 1216
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1216 is 1129
9998 run: jumping to instruction 6
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1217
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1215 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1008: 22 -> 23
9999 mem: storing 1008 in location 1166
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1166 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1167
 107 run: return {height: "number"}
9999 mem: location 1167 is 4
9999 mem: clearing screen:address:screen
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 23 -> 22
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 4
9999 mem: storing 4 in location 1218
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1219
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1188
9999 mem: location 1220 is 0
9999 mem: incrementing refcount of 1188: 8 -> 9
9999 mem: storing 1188 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1188
9999 mem: location 1221 is 0
9999 mem: incrementing refcount of 1188: 9 -> 10
9999 mem: storing 1188 in location 1221
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1188
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1188: 10 -> 11
9999 mem: storing 1188 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1188
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 1192
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1192: 6 -> 7
9999 mem: storing 1192 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 11 -> 10
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1220
 106 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1222
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1223
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1225
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1226
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1188
9999 mem: location 1227 is 0
9999 mem: incrementing refcount of 1188: 10 -> 11
9999 mem: storing 1188 in location 1227
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 1
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 22 -> 23
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 1
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1192
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1226 is 0
9999 mem: storing 1 in location 1230
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1188
9999 mem: location 1227 is 1188
9999 mem: skipping refcount at 1188
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1188 in location 1227
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1220 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1193
9998 run: its type is "character"
9999 mem: location 1193 is 103
9999 mem: storing 103 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 103
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1438
9999 mem: storing 0 in location 1438
9999 mem: storing 0 in location 1439
9999 mem: storing 0 in location 1440
9999 mem: storing 0 in location 1441
9999 mem: storing 0 in location 1442
9999 mem: storing 0 in location 1443
9999 mem: storing 0 in location 1444
9999 mem: storing 0 in location 1445
9999 mem: storing 0 in location 1446
9999 mem: storing 0 in location 1447
9999 mem: storing 0 in location 1448
9999 mem: storing 0 in location 1449
9999 mem: storing 10 in location 1439
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1441
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1442
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1441 is 7
9999 mem: storing 1 in location 1443
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1442 is 103
9999 mem: storing 0 in location 1444
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1445
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1445 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1442 is 103
9999 mem: storing 0 in location 1447
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1447 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1448
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1441 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1442
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1443
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1444
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1445
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1446
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1447
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1448
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1449
9999 mem: automatically abandoning 1438
9999 abandon: updating refcounts inside 1438: (array number)
9999 abandon: saving 1438 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 103
9999 mem: storing 0 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 103
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 23 -> 24
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 103
  90 print-character: 103
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 103
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 0
9999 mem: storing 10 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 103
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 103
9999 mem: location 1257 is 7
9999 mem: storing 103 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 10
9998 run: address to copy to is 1036
9999 mem: location 1274 is 103
9999 mem: location 1275 is 7
9999 mem: storing 103 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 24 -> 23
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1192
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1192: 7 -> 8
9999 mem: storing 1192 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1192
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1196
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1196: 5 -> 6
9999 mem: storing 1196 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 8 -> 7
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1188
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1188: 11 -> 12
9999 mem: storing 1188 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1188
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 1192
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1192: 7 -> 8
9999 mem: storing 1192 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 12 -> 11
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1221
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1196
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 1
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1220 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1197
9998 run: its type is "character"
9999 mem: location 1197 is 10
9999 mem: storing 10 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1438
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1441
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1442
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1441 is 7
9999 mem: storing 1 in location 1443
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1442 is 10
9999 mem: storing 0 in location 1444
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1445
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1445 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1442 is 10
9999 mem: storing 0 in location 1447
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1447 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1448
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1441 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1442
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1443
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1444
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1445
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1446
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1447
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1448
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1449
9999 mem: automatically abandoning 1438
9999 abandon: updating refcounts inside 1438: (array number)
9999 abandon: saving 1438 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 10
9999 mem: storing 1 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 106 run: {left-of-cursor?: "boolean"} <- lesser-than {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 1
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1233
 106 run: jump-unless {left-of-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jumping to instruction 46
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1219 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 23 -> 24
9999 mem: storing 1008 in location 1099
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 24 -> 25
9999 mem: storing 1008 in location 1145
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1146
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 1
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 25 -> 24
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 24 -> 25
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 1
9999 mem: storing 11 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 11
9998 run: address to copy to is 1038
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1038
9999 mem: storing 7 in location 1039
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 25 -> 26
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 2
9999 mem: storing 12 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 12
9998 run: address to copy to is 1040
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1040
9999 mem: storing 7 in location 1041
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
9990 schedule: print/clear-line-until/render/editor-render/editor-event-loop/run_1001/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 26 -> 27
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 3
9999 mem: storing 13 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 13
9998 run: address to copy to is 1042
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 27 -> 28
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 4
9999 mem: storing 14 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 14
9998 run: address to copy to is 1044
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1044
9999 mem: storing 7 in location 1045
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 28 -> 29
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 5
9999 mem: storing 15 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 15
9998 run: address to copy to is 1046
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1046
9999 mem: storing 7 in location 1047
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 29 -> 28
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 1
9999 mem: storing 2 in location 1223
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 2
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 28 -> 29
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 2
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1196
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1196: 6 -> 7
9999 mem: storing 1196 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1196
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 1200
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1200: 4 -> 5
9999 mem: storing 1200 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1200
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 7 -> 6
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1200
9999 mem: storing 1200 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1192
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1192: 8 -> 9
9999 mem: storing 1192 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1192
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1196
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1196: 6 -> 7
9999 mem: storing 1196 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 9 -> 8
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1221
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1200
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1220 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1201
9998 run: its type is "character"
9999 mem: location 1201 is 104
9999 mem: storing 104 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 104
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1438
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1441
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 104 in location 1442
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1441 is 7
9999 mem: storing 1 in location 1443
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1442 is 104
9999 mem: storing 0 in location 1444
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1445
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1445 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1442 is 104
9999 mem: storing 0 in location 1447
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1447 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1448
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1441 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1442
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1443
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1444
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1445
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1446
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1447
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1448
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1449
9999 mem: automatically abandoning 1438
9999 abandon: updating refcounts inside 1438: (array number)
9999 abandon: saving 1438 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 104
9999 mem: storing 0 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 104
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 29 -> 30
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 104 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 104
  90 print-character: 104
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 104
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 0
9999 mem: storing 20 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 104
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 104
9999 mem: location 1257 is 7
9999 mem: storing 104 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 20
9998 run: address to copy to is 1056
9999 mem: location 1274 is 104
9999 mem: location 1275 is 7
9999 mem: storing 104 in location 1056
9999 mem: storing 7 in location 1057
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 30 -> 29
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1200
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1200: 5 -> 6
9999 mem: storing 1200 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1200
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1202
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1202 is 1204
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1204: 3 -> 4
9999 mem: storing 1204 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1204
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1204
9999 mem: storing 1204 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1196
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1196: 7 -> 8
9999 mem: storing 1196 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1196
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 1200
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1200: 5 -> 6
9999 mem: storing 1200 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1200
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 8 -> 7
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1200
9999 mem: storing 1200 in location 1221
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1204
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 1208
9999 mem: location 1207 is 1200
9999 mem: location 1220 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy is 1205
9998 run: its type is "character"
9999 mem: location 1205 is 10
9999 mem: storing 10 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1438
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1441
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1442
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1441 is 7
9999 mem: storing 1 in location 1443
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1442 is 10
9999 mem: storing 0 in location 1444
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1445
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1445 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1442 is 10
9999 mem: storing 0 in location 1447
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1447 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1448
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1441 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1442
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1443
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1444
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1445
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1446
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1447
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1448
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1449
9999 mem: automatically abandoning 1438
9999 abandon: updating refcounts inside 1438: (array number)
9999 abandon: saving 1438 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 10
9999 mem: storing 1 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 46
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1219 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 29 -> 30
9999 mem: storing 1008 in location 1099
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 30 -> 31
9999 mem: storing 1008 in location 1145
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1146
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 2
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 31 -> 30
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 2
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 30 -> 31
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 1
9999 mem: storing 21 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 21
9998 run: address to copy to is 1058
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1058
9999 mem: storing 7 in location 1059
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 31 -> 32
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 2
9999 mem: storing 22 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
9990 schedule: print/clear-line-until/render/editor-render/editor-event-loop/run_1001/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 22
9998 run: address to copy to is 1060
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1060
9999 mem: storing 7 in location 1061
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 32 -> 33
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 3
9999 mem: storing 23 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 23
9998 run: address to copy to is 1062
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1062
9999 mem: storing 7 in location 1063
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 33 -> 34
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 4
9999 mem: storing 24 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 24
9998 run: address to copy to is 1064
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1064
9999 mem: storing 7 in location 1065
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 34 -> 35
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 5
9999 mem: storing 25 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 25
9998 run: address to copy to is 1066
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1066
9999 mem: storing 7 in location 1067
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 35 -> 34
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 2
9999 mem: storing 3 in location 1223
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 3
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 34 -> 35
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 3
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1204
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1204: 4 -> 5
9999 mem: storing 1204 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1204
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 1208
9999 mem: location 1207 is 1200
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy is 1206
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1206 is 1208
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1208: 1 -> 2
9999 mem: storing 1208 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1208
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9999 mem: decrementing refcount of 1204: 5 -> 4
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1208
9999 mem: storing 1208 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1200
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1200: 6 -> 7
9999 mem: storing 1200 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1200
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1202
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1202 is 1204
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1204: 4 -> 5
9999 mem: storing 1204 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1204
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 7 -> 6
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1204
9999 mem: storing 1204 in location 1221
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1208
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1208
9999 mem: skipping refcount at 1208
9999 mem: location 1209 is 105
9999 mem: location 1210 is 0
9999 mem: location 1211 is 1204
9999 mem: location 1220 is 1208
9999 mem: skipping refcount at 1208
9998 run: address to copy is 1209
9998 run: its type is "character"
9999 mem: location 1209 is 105
9999 mem: storing 105 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 105
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1438
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1441
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 105 in location 1442
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1441 is 7
9999 mem: storing 1 in location 1443
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1442 is 105
9999 mem: storing 0 in location 1444
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1444 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1445
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1445 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1443 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1442 is 105
9999 mem: storing 0 in location 1447
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1447 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1441 is 7
9999 mem: storing 0 in location 1448
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1448 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1441 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1442
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1443
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1444
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1445
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1446
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1447
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1448
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1449
9999 mem: automatically abandoning 1438
9999 abandon: updating refcounts inside 1438: (array number)
9999 abandon: saving 1438 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 105
9999 mem: storing 0 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 105
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 35 -> 36
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 105 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 105
  90 print-character: 105
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 105
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 0
9999 mem: storing 30 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 105
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 105
9999 mem: location 1257 is 7
9999 mem: storing 105 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 30
9998 run: address to copy to is 1076
9999 mem: location 1274 is 105
9999 mem: location 1275 is 7
9999 mem: storing 105 in location 1076
9999 mem: storing 7 in location 1077
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 36 -> 35
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1208
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1208: 2 -> 3
9999 mem: storing 1208 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1208
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1208
9999 mem: skipping refcount at 1208
9999 mem: location 1209 is 105
9999 mem: location 1210 is 0
9999 mem: location 1211 is 1204
9999 mem: location 1166 is 1208
9999 mem: skipping refcount at 1208
9998 run: address to copy is 1210
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1210 is 0
9999 mem: location 1167 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 0
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1208
9999 mem: skipping refcount at 1208
9999 mem: decrementing refcount of 1208: 3 -> 2
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1204
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1204: 5 -> 6
9999 mem: storing 1204 in location 1166
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1166 is 1204
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 1208
9999 mem: location 1207 is 1200
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy is 1206
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1206 is 1208
9999 mem: location 1167 is 0
9999 mem: incrementing refcount of 1208: 2 -> 3
9999 mem: storing 1208 in location 1167
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1167 is 1208
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1166 is 1204
9999 mem: skipping refcount at 1204
9999 mem: decrementing refcount of 1204: 6 -> 5
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1208
9999 mem: storing 1208 in location 1221
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 0
9998 run: jumping to instruction 70
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 1200
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1220 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1132
9999 mem: location 1132 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 6 -> 5
9999 mem: storing 0 in location 1132
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 1
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1236
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1229 is 0
9999 mem: location 1236 is 0
9999 mem: storing 0 in location 1237
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1238
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1237 is 0
9999 mem: location 1238 is 0
9999 mem: storing 0 in location 1239
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 0
9998 run: jumping to instruction 82
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1223 is 3
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1136
9999 mem: storing 3 in location 1136
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1225 is 1
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1137
9999 mem: storing 1 in location 1137
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1226 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1138
9999 mem: storing 0 in location 1138
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1227 is 1188
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1133
9999 mem: location 1133 is 1188
9999 mem: skipping refcount at 1188
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1188 in location 1133
 106 run: return {row: "number"}, {column: "number"}, {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1223 is 3
9999 mem: location 1224 is 1
9999 mem: location 1215 is 1008
9999 mem: location 1216 is 1129
9999 mem: clearing screen:address:screen
9999 mem: location 1215 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 35 -> 34
9999 mem: storing 0 in location 1215
9999 mem: clearing editor:address:editor-data
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 8 -> 7
9999 mem: storing 0 in location 1216
9999 mem: clearing left:number
9999 mem: storing 0 in location 1217
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1218
9999 mem: clearing right:number
9999 mem: storing 0 in location 1219
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1221 is 1208
9999 mem: skipping refcount at 1208
9999 mem: decrementing refcount of 1208: 3 -> 2
9999 mem: storing 0 in location 1221
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing color:number
9999 mem: storing 0 in location 1222
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1225
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1227 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 11 -> 10
9999 mem: storing 0 in location 1227
9999 mem: clearing screen
9999 mem: location 1215 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1215
9999 mem: clearing off-screen?:boolean
9999 mem: storing 0 in location 1228
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing at-cursor?:boolean
9999 mem: storing 0 in location 1230
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: clearing c:character
9999 mem: storing 0 in location 1231
9999 mem: clearing color
9999 mem: storing 0 in location 1222
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1232
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing left-of-cursor?:boolean
9999 mem: storing 0 in location 1233
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: clearing screen
9999 mem: location 1215 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1215
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing prev
9999 mem: location 1221 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1221
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1234
9999 mem: clearing wrap-icon:character
9999 mem: storing 0 in location 1235
9999 mem: clearing screen
9999 mem: location 1215 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1215
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing prev
9999 mem: location 1221 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1221
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing cursor-outside-line?:boolean
9999 mem: storing 0 in location 1236
9999 mem: clearing before-cursor-on-same-line?:boolean
9999 mem: storing 0 in location 1237
9999 mem: clearing above-cursor-row?:boolean
9999 mem: storing 0 in location 1238
9999 mem: clearing before-cursor?:boolean
9999 mem: storing 0 in location 1239
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1225
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: automatically abandoning 1212
9999 abandon: updating refcounts inside 1212: (array number)
9999 abandon: saving 1212 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9998 run: result 1 is 1
9999 mem: storing 3 in location 1127
9999 mem: storing 1 in location 1128
 105 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1123 is 1008
9999 mem: location 1126 is 5
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 34 -> 35
9999 mem: storing 1008 in location 1099
 106 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 106 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 35 -> 36
9999 mem: storing 1008 in location 1145
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1146
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 107 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 3
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 36 -> 35
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 3
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 35 -> 36
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 1
9999 mem: storing 31 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 31
9998 run: address to copy to is 1078
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1078
9999 mem: storing 7 in location 1079
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 36 -> 37
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 2
9999 mem: storing 32 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 32
9998 run: address to copy to is 1080
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1080
9999 mem: storing 7 in location 1081
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
9990 schedule: print/clear-line-until/editor-render/editor-event-loop/run_1001/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 37 -> 38
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 3
9999 mem: storing 33 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 33
9998 run: address to copy to is 1082
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1082
9999 mem: storing 7 in location 1083
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 38 -> 39
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 4
9999 mem: storing 34 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 34
9998 run: address to copy to is 1084
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1084
9999 mem: storing 7 in location 1085
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 39 -> 40
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 5
9999 mem: storing 35 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 35
9998 run: address to copy to is 1086
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1086
9999 mem: storing 7 in location 1087
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 40 -> 39
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1127 is 3
9999 mem: storing 4 in location 1127
 105 run: draw-horizontal {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}, {9480: "literal", "horizontal-dotted": ()}
9999 mem: location 1123 is 1008
9999 mem: location 1127 is 4
9999 mem: location 1125 is 0
9999 mem: location 1126 is 5
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1306
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1309 is 0
9999 mem: incrementing refcount of 1008: 39 -> 40
9999 mem: storing 1008 in location 1309
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1310
 106 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1311
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1312
 106 run: {style: "character"}, {style-found?: "boolean"} <- next-ingredient 
9999 mem: storing 9480 in location 1313
9999 mem: storing 1 in location 1314
 106 run: jump-if {style-found?: "boolean"}, {: "offset"}
9999 mem: location 1314 is 1
9998 run: jumping to instruction 9
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jump-if fell through
 106 run: {color: "number"} <- copy {245: "literal", "grey": ()}
9999 mem: storing 245 in location 1315
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1317
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {x: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1310 is 4
9999 mem: location 1311 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 40 -> 41
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 4
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1309
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 0
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 0
9999 mem: storing 1 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 1
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 1
9999 mem: storing 2 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 2
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 2
9999 mem: storing 3 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 3
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 3
9999 mem: storing 4 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 4
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 4
9999 mem: storing 5 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 5
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 5
9999 mem: storing 6 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 6
9999 mem: location 1312 is 5
9999 mem: storing 0 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 0
9998 run: jumping to instruction 27
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1309 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1309 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 41 -> 40
9999 mem: storing 0 in location 1309
9999 mem: clearing row:number
9999 mem: storing 0 in location 1310
9999 mem: clearing x:number
9999 mem: storing 0 in location 1311
9999 mem: clearing right:number
9999 mem: storing 0 in location 1312
9999 mem: clearing style:character
9999 mem: storing 0 in location 1313
9999 mem: clearing style-found?:boolean
9999 mem: storing 0 in location 1314
9999 mem: clearing style
9999 mem: storing 0 in location 1313
9999 mem: clearing color:number
9999 mem: storing 0 in location 1315
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1316
9999 mem: clearing color
9999 mem: storing 0 in location 1315
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1317
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1318
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1317
9999 mem: clearing screen
9999 mem: location 1309 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1309
9999 mem: clearing continue?:boolean
9999 mem: storing 0 in location 1319
9999 mem: clearing x
9999 mem: storing 0 in location 1311
9999 mem: automatically abandoning 1306
9999 abandon: updating refcounts inside 1306: (array number)
9999 abandon: saving 1306 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1127 is 4
9999 mem: storing 5 in location 1127
 105 run: clear-screen-from {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1123 is 1008
9999 mem: location 1127 is 5
9999 mem: location 1125 is 0
9999 mem: location 1125 is 0
9999 mem: location 1126 is 5
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1008: 40 -> 41
9999 mem: storing 1008 in location 1003
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1004
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1006
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1007
 106 run: jump-if {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 5
9999 mem: location 1005 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 41 -> 42
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 5
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 5 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1003
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1007 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 42 -> 43
9999 mem: storing 1008 in location 1099
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 43 -> 44
9999 mem: storing 1008 in location 1145
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1146
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1147
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 5
9999 mem: location 1147 is 0
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 44 -> 43
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 5
9998 run: result 1 is 0
9999 mem: storing 0 in location 1101
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 0
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 43 -> 44
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 0
9999 mem: storing 1 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 44 -> 45
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
9990 schedule: print/clear-line-until/clear-screen-from/editor-render/editor-event-loop/run_1001/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 45 -> 46
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 46 -> 47
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 47 -> 48
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 48 -> 49
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 49 -> 48
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: clear-rest-of-screen {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 5
9999 mem: location 1006 is 0
9999 mem: location 1007 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1450
9999 mem: storing 0 in location 1450
9999 mem: storing 0 in location 1451
9999 mem: storing 0 in location 1452
9999 mem: storing 0 in location 1453
9999 mem: storing 0 in location 1454
9999 mem: storing 0 in location 1455
9999 mem: storing 0 in location 1456
9999 mem: storing 0 in location 1457
9999 mem: storing 0 in location 1458
9999 mem: storing 7 in location 1451
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1453 is 0
9999 mem: incrementing refcount of 1008: 48 -> 49
9999 mem: storing 1008 in location 1453
 107 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1454
 107 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1455
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1456
 107 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1454 is 5
9999 mem: storing 6 in location 1454
 107 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1453 is 1008
9999 mem: location 1454 is 6
9999 mem: location 1455 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 49 -> 50
9999 mem: storing 1008 in location 1145
 108 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1146
 108 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 6
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 6 in location 1011
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1453
 107 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1453 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1166 is 0
9999 mem: incrementing refcount of 1008: 50 -> 51
9999 mem: storing 1008 in location 1166
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1166 is 1008
9998 run: jump-unless fell through
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1167
 108 run: return {height: "number"}
9999 mem: location 1167 is 4
9999 mem: clearing screen:address:screen
9999 mem: location 1166 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 51 -> 50
9999 mem: storing 0 in location 1166
9999 mem: automatically abandoning 1163
9999 abandon: updating refcounts inside 1163: (array number)
9999 abandon: saving 1163 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 4
9999 mem: storing 4 in location 1457
 107 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1454 is 6
9999 mem: location 1457 is 4
9999 mem: storing 1 in location 1458
 107 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1458 is 1
9998 run: jumping to instruction 15
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1453 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1453 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 50 -> 49
9999 mem: storing 0 in location 1453
9999 mem: clearing row:number
9999 mem: storing 0 in location 1454
9999 mem: clearing left:number
9999 mem: storing 0 in location 1455
9999 mem: clearing right:number
9999 mem: storing 0 in location 1456
9999 mem: clearing row
9999 mem: storing 0 in location 1454
9999 mem: clearing screen
9999 mem: location 1453 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1453
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1457
9999 mem: clearing at-bottom-of-screen?:boolean
9999 mem: storing 0 in location 1458
9999 mem: clearing screen
9999 mem: location 1453 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1453
9999 mem: clearing row
9999 mem: storing 0 in location 1454
9999 mem: automatically abandoning 1450
9999 abandon: updating refcounts inside 1450: (array number)
9999 abandon: saving 1450 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 49 -> 48
9999 mem: storing 0 in location 1003
9999 mem: clearing row:number
9999 mem: storing 0 in location 1004
9999 mem: clearing column:number
9999 mem: storing 0 in location 1005
9999 mem: clearing left:number
9999 mem: storing 0 in location 1006
9999 mem: clearing right:number
9999 mem: storing 0 in location 1007
9999 mem: clearing screen
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
 105 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1123 is 1008
9999 mem: location 1124 is 1129
9999 mem: clearing editor:address:editor-data
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 7 -> 6
9999 mem: storing 0 in location 1124
9999 mem: clearing left:number
9999 mem: storing 0 in location 1125
9999 mem: clearing right:number
9999 mem: storing 0 in location 1126
9999 mem: clearing row:number
9999 mem: storing 0 in location 1127
9999 mem: clearing column:number
9999 mem: storing 0 in location 1128
9999 mem: clearing row
9999 mem: storing 0 in location 1127
9999 mem: clearing row
9999 mem: storing 0 in location 1127
9999 mem: automatically abandoning 1120
9999 abandon: updating refcounts inside 1120: (array number)
9999 abandon: saving 1120 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1290
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1293
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1294
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1290 is 1008
9999 mem: location 1293 is 1
9999 mem: location 1294 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 48 -> 49
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 1
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1290
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1291 is 1284
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1306
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1309 is 0
9999 mem: incrementing refcount of 1284: 3 -> 4
9999 mem: storing 1284 in location 1309
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1309 is 1284
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9999 mem: location 1285 is 1
9999 mem: location 1286 is 1278
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9998 run: address to copy is 1285
9998 run: its type is "number"
9999 mem: location 1285 is 1
9999 mem: storing 1 in location 1310
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9999 mem: location 1285 is 1
9999 mem: location 1286 is 1278
9999 mem: location 1309 is 1284
9999 mem: skipping refcount at 1284
9998 run: address to copy is 1286
9998 run: its type is ("address" "array" "event")
9999 mem: location 1286 is 1278
9999 mem: location 1311 is 0
9999 mem: incrementing refcount of 1278: 1 -> 2
9999 mem: storing 1278 in location 1311
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1311 is 1278
9999 mem: skipping refcount at 1278
9999 mem: storing 1 in location 1312
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1310 is 1
9999 mem: location 1312 is 1
9999 mem: storing 1 in location 1313
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1313 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1163
9999 mem: location 1314 is 0
9999 mem: incrementing refcount of 1163: 0 -> 1
9999 mem: storing 1163 in location 1314
 105 run: return {dummy: ("address" "event"), "lookup": ()}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1314 is 1163
9999 mem: skipping refcount at 1163
9999 mem: location 1164 is 0
9999 mem: location 1165 is 0
9999 mem: location 1166 is 0
9999 mem: location 1167 is 0
9999 mem: location 1309 is 1284
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1310
9999 mem: clearing buf:address:array:event
9999 mem: location 1311 is 1278
9999 mem: skipping refcount at 1278
9999 mem: decrementing refcount of 1278: 2 -> 1
9999 mem: storing 0 in location 1311
9999 mem: clearing max:number
9999 mem: storing 0 in location 1312
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1313
9999 mem: clearing result
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1310
9999 mem: clearing result:event
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1319
9999 mem: automatically abandoning 1306
9999 abandon: updating refcounts inside 1306: (array number)
9999 abandon: saving 1306 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1284
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 1284 in location 1291
9999 mem: storing 1 in location 1299
9999 mem: storing 1 in location 1300
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1300 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {console: ("address" "console"), "same-as-ingredient": "1"}, {editor: ("address" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1290 is 1008
9999 mem: location 1291 is 1284
9999 mem: location 1292 is 1129
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 49 -> 48
9999 mem: storing 0 in location 1290
9999 mem: clearing console:address:console
9999 mem: location 1291 is 1284
9999 mem: skipping refcount at 1284
9999 mem: decrementing refcount of 1284: 4 -> 3
9999 mem: storing 0 in location 1291
9999 mem: clearing editor:address:editor-data
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 6 -> 5
9999 mem: storing 0 in location 1292
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1293
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1294
9999 mem: clearing screen
9999 mem: location 1290 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1290
9999 mem: clearing e:event
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: clearing console:address:console
9999 mem: location 1291 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1291
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing quit?:boolean
9999 mem: storing 0 in location 1300
9999 mem: clearing t:touch-event
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: clearing is-touch?:boolean
9999 mem: storing 0 in location 1304
9999 mem: clearing screen
9999 mem: location 1290 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1290
9999 mem: clearing editor
9999 mem: location 1292 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1292
9999 mem: clearing go-render?:boolean
9999 mem: storing 0 in location 1305
9999 mem: clearing screen
9999 mem: location 1290 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1290
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .          .\n    .g         .\n    .h         .\n    .i         .\n  ": "literal-string"}
 102 run: assume-console {"\n    press up-arrow\n  ": "literal-string"}
9993 parse: instruction: press
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {up-arrow: ()}
9992 load: after rewriting: press {up-arrow: ()}
9999 mem: storing 'press' event starting at 1461
9999 mem: storing console in 1465
9999 mem: storing console data in 1467
 102 run: run {"\n    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1002
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {console: ("address" "console")}
9993 parse:   ingredient: {2: ("address" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 parse: recipe run_1002 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1002
9991 transform: --- rewrite 'stash' instructions in recipe run_1002
9991 transform: --- fill in reply ingredients from header for recipe run_1002
9991 transform: --- deduce types for recipe run_1002
9992 transform: screen => ("address" "screen")
9992 transform: console => ("address" "console")
9991 transform: --- check for invalid types in recipe run_1002
9991 transform: --- collect surrounding spaces for recipe run_1002
9991 transform: --- transform names for recipe run_1002
9991 transform: --- resolve ambiguous calls for recipe run_1002
9992 transform: instruction editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")} -> {screen: ("address" "screen")} {console: ("address" "console")} {editor: ("address" "editor-data")}
9992 transform: --- compute address offsets for run_1002
9993 transform: - compute address offsets for editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1002
9991 transform: --- transform braces for recipe run_1002
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1002
9991 transform: --- perform checks for recipe run_1002
9991 transform: --- type-check 'call' instructions inside recipe run_1002
9991 transform: --- type-check calls inside recipe run_1002
9991 transform: --- convert 'new' to 'allocate' for recipe run_1002
9991 transform: --- check types of reply instructions in recipe run_1002
9991 transform: --- type-check merge instructions in recipe run_1002
9991 transform: --- checking reply instructions against header for run_1002
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "screen")}, {console: ("address" "console")}, {2: ("address" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1465
9999 mem: location 2 is 1129
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 17
9999 mem: allocating size 19
9999 abandon: picking up space from free-list of size 19
9999 mem: new alloc from free list: 1287
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1290 is 0
9999 mem: incrementing refcount of 1008: 48 -> 49
9999 mem: storing 1008 in location 1290
 104 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1291 is 0
9999 mem: incrementing refcount of 1465: 1 -> 2
9999 mem: storing 1465 in location 1291
 104 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1292 is 0
9999 mem: incrementing refcount of 1129: 5 -> 6
9999 mem: storing 1129 in location 1292
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1293
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1294
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1290 is 1008
9999 mem: location 1293 is 1
9999 mem: location 1294 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 49 -> 50
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 1
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1290
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1291 is 1465
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1306
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1309 is 0
9999 mem: incrementing refcount of 1465: 2 -> 3
9999 mem: storing 1465 in location 1309
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1309 is 1465
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9999 mem: location 1466 is 0
9999 mem: location 1467 is 1459
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9998 run: address to copy is 1466
9998 run: its type is "number"
9999 mem: location 1466 is 0
9999 mem: storing 0 in location 1310
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9999 mem: location 1466 is 0
9999 mem: location 1467 is 1459
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9998 run: address to copy is 1467
9998 run: its type is ("address" "array" "event")
9999 mem: location 1467 is 1459
9999 mem: location 1311 is 0
9999 mem: incrementing refcount of 1459: 1 -> 2
9999 mem: storing 1459 in location 1311
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1311 is 1459
9999 mem: skipping refcount at 1459
9999 mem: storing 1 in location 1312
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1310 is 0
9999 mem: location 1312 is 1
9999 mem: storing 0 in location 1313
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1313 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1311 is 1459
9999 mem: skipping refcount at 1459
9998 run: base address is 1460
9999 mem: location 1310 is 0
9998 run: address to copy is 1461
9998 run: its type is event
9999 mem: location 1461 is 1
9999 mem: location 1462 is 65517
9999 mem: location 1463 is 0
9999 mem: location 1464 is 0
9999 mem: storing 1 in location 1315
9999 mem: storing 65517 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1310 is 0
9999 mem: storing 1 in location 1310
 105 run: {console: ("address" "console"), "lookup": ()} <- put {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9999 mem: location 1466 is 0
9999 mem: location 1467 is 1459
9999 mem: location 1310 is 1
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9998 run: address to copy to is 1466
9999 mem: storing 1 in location 1466
 105 run: return {result: "event"}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1315 is 1
9999 mem: location 1316 is 65517
9999 mem: location 1317 is 0
9999 mem: location 1318 is 0
9999 mem: location 1309 is 1465
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1310
9999 mem: clearing buf:address:array:event
9999 mem: location 1311 is 1459
9999 mem: skipping refcount at 1459
9999 mem: decrementing refcount of 1459: 2 -> 1
9999 mem: storing 0 in location 1311
9999 mem: clearing max:number
9999 mem: storing 0 in location 1312
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1313
9999 mem: clearing dummy:address:event
9999 mem: location 1314 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1314
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1310
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1319
9999 mem: automatically abandoning 1306
9999 abandon: updating refcounts inside 1306: (array number)
9999 abandon: saving 1306 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [1, 65517, 0, 0]
9998 run: result 1 is 1465
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 1 in location 1295
9999 mem: storing 65517 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 1465 in location 1291
9999 mem: storing 1 in location 1299
9999 mem: storing 0 in location 1300
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1300 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event
 104 run: {t: "touch-event"}, {is-touch?: "boolean"} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1295 is 1
9999 mem: location 1296 is 65517
9999 mem: location 1297 is 0
9999 mem: location 1298 is 0
9999 mem: storing 0 in location 1304
 104 run: jump-unless {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1304 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {is-touch?: "boolean"}, {: "offset"}
9999 mem: location 1304 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "screen")}, {editor: ("address" "editor-data")}, {e: "event"}
9999 mem: location 1290 is 1008
9999 mem: location 1292 is 1129
9999 mem: location 1295 is 1
9999 mem: location 1296 is 65517
9999 mem: location 1297 is 0
9999 mem: location 1298 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 102
9999 mem: allocating size 104
9999 abandon: picking up space from free-list of size 104
9999 mem: new alloc from free list: 1320
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1323 is 0
9999 mem: incrementing refcount of 1008: 50 -> 51
9999 mem: storing 1008 in location 1323
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1324 is 0
9999 mem: incrementing refcount of 1129: 6 -> 7
9999 mem: storing 1129 in location 1324
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1325
9999 mem: storing 65517 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1329
 105 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1324 is 1129
9998 run: jumping to instruction 8
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "screen")}
9999 mem: location 1323 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1468
9999 mem: storing 0 in location 1468
9999 mem: storing 0 in location 1469
9999 mem: storing 0 in location 1470
9999 mem: storing 0 in location 1471
9999 mem: storing 0 in location 1472
9999 mem: storing 3 in location 1469
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1008: 51 -> 52
9999 mem: storing 1008 in location 1471
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1471 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1472
 106 run: return {width: "number"}
9999 mem: location 1472 is 10
9999 mem: clearing screen:address:screen
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 52 -> 51
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1330
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1323 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1008: 51 -> 52
9999 mem: storing 1008 in location 1471
 106 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1471 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1472
 106 run: return {height: "number"}
9999 mem: location 1472 is 4
9999 mem: clearing screen:address:screen
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 52 -> 51
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 4
9999 mem: storing 4 in location 1331
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1332
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1333
 105 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1188
9999 mem: location 1334 is 0
9999 mem: incrementing refcount of 1188: 10 -> 11
9999 mem: storing 1188 in location 1334
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1335
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1336
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1335 is 1
9999 mem: storing 1 in location 1337
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1336 is 0
9999 mem: storing 0 in location 1338
 105 run: {c: "character"}, {is-unicode?: "boolean"} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1325 is 1
9999 mem: location 1326 is 65517
9999 mem: location 1327 is 0
9999 mem: location 1328 is 0
9999 mem: storing 0 in location 1340
 105 run: jump-unless {is-unicode?: "boolean"}, {: "offset"}
9999 mem: location 1340 is 0
9998 run: jumping to instruction 460
 105 run: {k: "number"}, {is-keycode?: "boolean"} <- maybe-convert {e: "event"}, {keycode: "variant"}
9999 mem: location 1325 is 1
9999 mem: location 1326 is 65517
9999 mem: location 1327 is 0
9999 mem: location 1328 is 0
9999 mem: storing 1 in location 1411
9999 mem: storing 65517 in location 1410
 105 run: assert {is-keycode?: "boolean"}, {"event was of unknown type; neither keyboard nor mouse": "literal-string"}
9999 mem: location 1411 is 1
 105 run: {page-up?: "boolean"} <- equal {k: "number"}, {65519: "literal", "page-up": ()}
9999 mem: location 1410 is 65517
9999 mem: storing 0 in location 1383
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1383 is 0
9998 run: jumping to instruction 502
 105 run: {page-down?: "boolean"} <- equal {k: "number"}, {65518: "literal", "page-down": ()}
9999 mem: location 1410 is 65517
9999 mem: storing 0 in location 1394
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jumping to instruction 541
 105 run: {move-to-end-of-line?: "boolean"} <- equal {k: "number"}, {65520: "literal", "end": ()}
9999 mem: location 1410 is 65517
9999 mem: storing 0 in location 1399
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1399 is 0
9998 run: jumping to instruction 577
 105 run: {move-to-start-of-line?: "boolean"} <- equal {k: "number"}, {65521: "literal", "home": ()}
9999 mem: location 1410 is 65517
9999 mem: storing 0 in location 1400
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1400 is 0
9998 run: jumping to instruction 613
 105 run: {move-to-next-line?: "boolean"} <- equal {k: "number"}, {65516: "literal", "down-arrow": ()}
9999 mem: location 1410 is 65517
9999 mem: storing 0 in location 1412
 105 run: jump-unless {move-to-next-line?: "boolean"}, {: "offset"}
9999 mem: location 1412 is 0
9998 run: jumping to instruction 648
 105 run: {move-to-previous-line?: "boolean"} <- equal {k: "number"}, {65517: "literal", "up-arrow": ()}
9999 mem: location 1410 is 65517
9999 mem: storing 1 in location 1413
 105 run: jump-unless {move-to-previous-line?: "boolean"}, {: "offset"}
9999 mem: location 1413 is 1
9998 run: jump-unless fell through
 105 run: {cursor-row-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1385
 105 run: {cursor-column-before: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1386
 105 run: {top-before: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1188
9999 mem: location 1387 is 0
9999 mem: incrementing refcount of 1188: 11 -> 12
9999 mem: storing 1188 in location 1387
 105 run: {editor: ("address" "editor-data")}, {go-render?: "boolean"} <- move-to-previous-line {editor: ("address" "editor-data")}
9999 mem: location 1324 is 1129
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 20
9999 mem: allocating size 22
9999 mem: new alloc: 1473
9999 mem: storing 0 in location 1473
9999 mem: storing 0 in location 1474
9999 mem: storing 0 in location 1475
9999 mem: storing 0 in location 1476
9999 mem: storing 0 in location 1477
9999 mem: storing 0 in location 1478
9999 mem: storing 0 in location 1479
9999 mem: storing 0 in location 1480
9999 mem: storing 0 in location 1481
9999 mem: storing 0 in location 1482
9999 mem: storing 0 in location 1483
9999 mem: storing 0 in location 1484
9999 mem: storing 0 in location 1485
9999 mem: storing 0 in location 1486
9999 mem: storing 0 in location 1487
9999 mem: storing 0 in location 1488
9999 mem: storing 0 in location 1489
9999 mem: storing 0 in location 1490
9999 mem: storing 0 in location 1491
9999 mem: storing 0 in location 1492
9999 mem: storing 0 in location 1493
9999 mem: storing 0 in location 1494
9999 mem: storing 20 in location 1474
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1476 is 0
9999 mem: incrementing refcount of 1129: 7 -> 8
9999 mem: storing 1129 in location 1476
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1477
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1478
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1188
9999 mem: location 1479 is 0
9999 mem: incrementing refcount of 1188: 12 -> 13
9999 mem: storing 1188 in location 1479
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1480
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1481
 106 run: {already-at-top?: "boolean"} <- lesser-or-equal {cursor-row: "number"}, {1: "literal", "top": ()}
9999 mem: location 1477 is 1
9999 mem: storing 1 in location 1482
 106 run: jump-if {already-at-top?: "boolean"}, {: "offset"}
9999 mem: location 1482 is 1
9998 run: jumping to instruction 57
 106 run: jump-unless {already-at-top?: "boolean"}, {: "offset"}
9999 mem: location 1482 is 1
9998 run: jump-unless fell through
 106 run: trace {10: "literal"}, {"app": "literal-string"}, {"scroll up": "literal-string"}
  10 app: scroll up
 106 run: {top-of-screen: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1188
9999 mem: location 1492 is 0
9999 mem: incrementing refcount of 1188: 13 -> 14
9999 mem: storing 1188 in location 1492
 106 run: {old-top: ("address" "duplex-list" "character")} <- copy {top-of-screen: ("address" "duplex-list" "character")}
9999 mem: location 1492 is 1188
9999 mem: location 1493 is 0
9999 mem: incrementing refcount of 1188: 14 -> 15
9999 mem: storing 1188 in location 1493
 106 run: {top-of-screen: ("address" "duplex-list" "character")} <- before-previous-line {top-of-screen: ("address" "duplex-list" "character")}, {editor: ("address" "editor-data")}
9999 mem: location 1492 is 1188
9999 mem: location 1476 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 1495
9999 mem: storing 0 in location 1495
9999 mem: storing 0 in location 1496
9999 mem: storing 0 in location 1497
9999 mem: storing 0 in location 1498
9999 mem: storing 0 in location 1499
9999 mem: storing 0 in location 1500
9999 mem: storing 0 in location 1501
9999 mem: storing 0 in location 1502
9999 mem: storing 0 in location 1503
9999 mem: storing 0 in location 1504
9999 mem: storing 0 in location 1505
9999 mem: storing 0 in location 1506
9999 mem: storing 0 in location 1507
9999 mem: storing 0 in location 1508
9999 mem: storing 0 in location 1509
9999 mem: storing 0 in location 1510
9999 mem: storing 14 in location 1496
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1498 is 0
9999 mem: incrementing refcount of 1188: 15 -> 16
9999 mem: storing 1188 in location 1498
 107 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1499 is 0
9999 mem: incrementing refcount of 1129: 8 -> 9
9999 mem: storing 1129 in location 1499
 107 run: {curr: ("address" "duplex-list" "character")} <- copy {in: ("address" "duplex-list" "character")}
9999 mem: location 1498 is 1188
9999 mem: location 1500 is 0
9999 mem: incrementing refcount of 1188: 16 -> 17
9999 mem: storing 1188 in location 1500
 107 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1500 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1500 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1189
9998 run: its type is "character"
9999 mem: location 1189 is 10
9999 mem: storing 10 in location 1501
 107 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1499 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1499 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1502
 107 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1499 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1499 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1503
 107 run: {max-line-length: "number"} <- subtract {right: "number"}, {left: "number"}, {-1: "literal", "exclusive-right": ()}, {1: "literal", "wrap-icon": ()}
9999 mem: location 1503 is 5
9999 mem: location 1502 is 0
9999 mem: storing 5 in location 1504
 107 run: {sentinel: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1499 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1499 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1130 is 1148
9999 mem: location 1505 is 0
9999 mem: incrementing refcount of 1148: 7 -> 8
9999 mem: storing 1148 in location 1505
 107 run: {len: "number"} <- previous-line-length {curr: ("address" "duplex-list" "character")}, {sentinel: ("address" "duplex-list" "character")}
9999 mem: location 1500 is 1188
9999 mem: location 1505 is 1148
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1120
 108 run: {curr: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1123 is 0
9999 mem: incrementing refcount of 1188: 17 -> 18
9999 mem: storing 1188 in location 1123
 108 run: {start: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1124 is 0
9999 mem: incrementing refcount of 1148: 8 -> 9
9999 mem: storing 1148 in location 1124
 108 run: {result: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1125
 108 run: jump-if {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1188
9998 run: jumping to instruction 7
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1188
9999 mem: location 1124 is 1148
9999 mem: storing 0 in location 1126
 108 run: jump-unless {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jumping to instruction 12
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1188
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1188: 18 -> 19
9999 mem: storing 1188 in location 1471
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1188
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1191
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1191 is 1184
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1184: 5 -> 6
9999 mem: storing 1184 in location 1472
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1184
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 19 -> 18
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1123
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1184
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1184
9999 mem: location 1124 is 1148
9999 mem: storing 0 in location 1126
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1123 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1123 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1185
9998 run: its type is "character"
9999 mem: location 1185 is 102
9999 mem: storing 102 in location 1127
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1127 is 102
9999 mem: storing 0 in location 1128
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1128 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1125 is 0
9999 mem: storing 1 in location 1125
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1184
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1184: 6 -> 7
9999 mem: storing 1184 in location 1471
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1184
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1187
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1187 is 1180
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1180: 5 -> 6
9999 mem: storing 1180 in location 1472
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1180
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1180
9999 mem: storing 1180 in location 1123
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1180
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1180
9999 mem: location 1124 is 1148
9999 mem: storing 0 in location 1126
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1123 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1123 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1181
9998 run: its type is "character"
9999 mem: location 1181 is 101
9999 mem: storing 101 in location 1127
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1127 is 101
9999 mem: storing 0 in location 1128
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1128 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1125 is 1
9999 mem: storing 2 in location 1125
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1180
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1180: 6 -> 7
9999 mem: storing 1180 in location 1471
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1180
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1183
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1183 is 1176
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1176: 5 -> 6
9999 mem: storing 1176 in location 1472
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1176
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1176
9999 mem: storing 1176 in location 1123
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1176
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1176
9999 mem: location 1124 is 1148
9999 mem: storing 0 in location 1126
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1123 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1172
9999 mem: location 1123 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy is 1177
9998 run: its type is "character"
9999 mem: location 1177 is 100
9999 mem: storing 100 in location 1127
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1127 is 100
9999 mem: storing 0 in location 1128
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1128 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1125 is 2
9999 mem: storing 3 in location 1125
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1176
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1176: 6 -> 7
9999 mem: storing 1176 in location 1471
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1176
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1176
9999 mem: skipping refcount at 1176
9999 mem: location 1177 is 100
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1172
9999 mem: location 1471 is 1176
9999 mem: skipping refcount at 1176
9998 run: address to copy is 1179
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1179 is 1172
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1172: 5 -> 6
9999 mem: storing 1172 in location 1472
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1172
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1176
9999 mem: skipping refcount at 1176
9999 mem: decrementing refcount of 1176: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1172
9999 mem: storing 1172 in location 1123
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1172
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1172
9999 mem: location 1124 is 1148
9999 mem: storing 0 in location 1126
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1123 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1168
9999 mem: location 1123 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1173
9998 run: its type is "character"
9999 mem: location 1173 is 99
9999 mem: storing 99 in location 1127
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1127 is 99
9999 mem: storing 0 in location 1128
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1128 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1125 is 3
9999 mem: storing 4 in location 1125
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1172
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1172: 6 -> 7
9999 mem: storing 1172 in location 1471
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1172
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1172
9999 mem: skipping refcount at 1172
9999 mem: location 1173 is 99
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1168
9999 mem: location 1471 is 1172
9999 mem: skipping refcount at 1172
9998 run: address to copy is 1175
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1175 is 1168
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1168: 5 -> 6
9999 mem: storing 1168 in location 1472
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1168
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1172
9999 mem: skipping refcount at 1172
9999 mem: decrementing refcount of 1172: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1168
9999 mem: storing 1168 in location 1123
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1168
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1168
9999 mem: location 1124 is 1148
9999 mem: storing 0 in location 1126
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1123 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1159
9999 mem: location 1123 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy is 1169
9998 run: its type is "character"
9999 mem: location 1169 is 98
9999 mem: storing 98 in location 1127
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1127 is 98
9999 mem: storing 0 in location 1128
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1128 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1125 is 4
9999 mem: storing 5 in location 1125
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1168
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1168: 6 -> 7
9999 mem: storing 1168 in location 1471
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1168
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1168
9999 mem: skipping refcount at 1168
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1159
9999 mem: location 1471 is 1168
9999 mem: skipping refcount at 1168
9998 run: address to copy is 1171
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1171 is 1159
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1159: 5 -> 6
9999 mem: storing 1159 in location 1472
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1159
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1168
9999 mem: skipping refcount at 1168
9999 mem: decrementing refcount of 1168: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1159
9999 mem: storing 1159 in location 1123
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1159
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1159
9999 mem: location 1124 is 1148
9999 mem: storing 0 in location 1126
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jump-if fell through
 108 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1123 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 1168
9999 mem: location 1162 is 1148
9999 mem: location 1123 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1160
9998 run: its type is "character"
9999 mem: location 1160 is 97
9999 mem: storing 97 in location 1127
 108 run: {at-newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1127 is 97
9999 mem: storing 0 in location 1128
 108 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1128 is 0
9998 run: jump-if fell through
 108 run: {result: "number"} <- add {result: "number"}, {1: "literal"}
9999 mem: location 1125 is 5
9999 mem: storing 6 in location 1125
 108 run: jump {: "offset"}
9998 run: jumping to instruction 14
 108 run: {curr: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1159
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 109 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1159: 6 -> 7
9999 mem: storing 1159 in location 1471
 109 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1159
9998 run: jumping to instruction 5
 109 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1160 is 97
9999 mem: location 1161 is 1168
9999 mem: location 1162 is 1148
9999 mem: location 1471 is 1159
9999 mem: skipping refcount at 1159
9998 run: address to copy is 1162
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1162 is 1148
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1148: 9 -> 10
9999 mem: storing 1148 in location 1472
 109 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1148
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1159
9999 mem: skipping refcount at 1159
9999 mem: decrementing refcount of 1159: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1148
9999 mem: storing 1148 in location 1123
 108 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1123 is 1148
9998 run: jump-unless fell through
 108 run: {at-start?: "boolean"} <- equal {curr: ("address" "duplex-list" "character")}, {start: ("address" "duplex-list" "character")}
9999 mem: location 1123 is 1148
9999 mem: location 1124 is 1148
9999 mem: storing 1 in location 1126
 108 run: jump-if {at-start?: "boolean"}, {: "offset"}
9999 mem: location 1126 is 1
9998 run: jumping to instruction 23
 108 run: reply {result: "number"}
9999 mem: location 1125 is 6
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1123 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 10 -> 9
9999 mem: storing 0 in location 1123
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1124 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 9 -> 8
9999 mem: storing 0 in location 1124
9999 mem: clearing at-start?:boolean
9999 mem: storing 0 in location 1126
9999 mem: clearing curr
9999 mem: location 1123 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1123
9999 mem: clearing at-start?:boolean
9999 mem: storing 0 in location 1126
9999 mem: clearing c:character
9999 mem: storing 0 in location 1127
9999 mem: clearing at-newline?:boolean
9999 mem: storing 0 in location 1128
9999 mem: automatically abandoning 1120
9999 abandon: updating refcounts inside 1120: (array number)
9999 abandon: saving 1120 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 6
9999 mem: storing 6 in location 1506
 107 run: jump-if {len: "number"}, {: "offset"}
9999 mem: location 1506 is 6
9998 run: jumping to instruction 18
 107 run: _, {max: "number"} <- divide-with-remainder {len: "number"}, {max-line-length: "number"}
9999 mem: location 1506 is 6
9999 mem: location 1504 is 5
9999 mem: storing 1 in location 1508
 107 run: jump-if {max: "number"}, {: "offset"}
9999 mem: location 1508 is 1
9998 run: jumping to instruction 23
 107 run: {max: "number"} <- add {max: "number"}, {1: "literal"}
9999 mem: location 1508 is 1
9999 mem: storing 2 in location 1508
 107 run: {count: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1509
 107 run: {done?: "boolean"} <- greater-or-equal {count: "number"}, {max: "number"}
9999 mem: location 1509 is 0
9999 mem: location 1508 is 2
9999 mem: storing 0 in location 1510
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1510 is 0
9998 run: jump-if fell through
 107 run: {prev: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1500 is 1188
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 108 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1188: 18 -> 19
9999 mem: storing 1188 in location 1471
 108 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1188
9998 run: jumping to instruction 5
 108 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1191
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1191 is 1184
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1184: 6 -> 7
9999 mem: storing 1184 in location 1472
 108 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1184
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 19 -> 18
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1507
 107 run: jump-unless {prev: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1507 is 1184
9998 run: jump-unless fell through
 107 run: {curr: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1507 is 1184
9999 mem: location 1500 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 18 -> 17
9999 mem: incrementing refcount of 1184: 7 -> 8
9999 mem: storing 1184 in location 1500
 107 run: {count: "number"} <- add {count: "number"}, {1: "literal"}
9999 mem: location 1509 is 0
9999 mem: storing 1 in location 1509
 107 run: jump {: "offset"}
9998 run: jumping to instruction 27
 107 run: {done?: "boolean"} <- greater-or-equal {count: "number"}, {max: "number"}
9999 mem: location 1509 is 1
9999 mem: location 1508 is 2
9999 mem: storing 0 in location 1510
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1510 is 0
9998 run: jump-if fell through
 107 run: {prev: ("address" "duplex-list" "character")} <- prev_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1500 is 1184
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 108 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1184: 8 -> 9
9999 mem: storing 1184 in location 1471
 108 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1184
9998 run: jumping to instruction 5
 108 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1187
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1187 is 1180
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1180: 6 -> 7
9999 mem: storing 1180 in location 1472
 108 run: return {result: ("address" "duplex-list" "character")}
9999 mem: location 1472 is 1180
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 9 -> 8
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1180
9999 mem: storing 1180 in location 1507
 107 run: jump-unless {prev: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1507 is 1180
9998 run: jump-unless fell through
 107 run: {curr: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1507 is 1180
9999 mem: location 1500 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 8 -> 7
9999 mem: incrementing refcount of 1180: 7 -> 8
9999 mem: storing 1180 in location 1500
 107 run: {count: "number"} <- add {count: "number"}, {1: "literal"}
9999 mem: location 1509 is 1
9999 mem: storing 2 in location 1509
 107 run: jump {: "offset"}
9998 run: jumping to instruction 27
 107 run: {done?: "boolean"} <- greater-or-equal {count: "number"}, {max: "number"}
9999 mem: location 1509 is 2
9999 mem: location 1508 is 2
9999 mem: storing 1 in location 1510
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1510 is 1
9998 run: jumping to instruction 34
 107 run: return {curr: ("address" "duplex-list" "character")}
9999 mem: location 1500 is 1180
9999 mem: clearing in:address:duplex-list:character
9999 mem: location 1498 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 17 -> 16
9999 mem: storing 0 in location 1498
9999 mem: clearing editor:address:editor-data
9999 mem: location 1499 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 9 -> 8
9999 mem: storing 0 in location 1499
9999 mem: clearing c:character
9999 mem: storing 0 in location 1501
9999 mem: clearing left:number
9999 mem: storing 0 in location 1502
9999 mem: clearing right:number
9999 mem: storing 0 in location 1503
9999 mem: clearing max-line-length:number
9999 mem: storing 0 in location 1504
9999 mem: clearing sentinel:address:duplex-list:character
9999 mem: location 1505 is 1148
9999 mem: skipping refcount at 1148
9999 mem: decrementing refcount of 1148: 8 -> 7
9999 mem: storing 0 in location 1505
9999 mem: clearing len:number
9999 mem: storing 0 in location 1506
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1507 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 8 -> 7
9999 mem: storing 0 in location 1507
9999 mem: clearing _
9999 mem: clearing max:number
9999 mem: storing 0 in location 1508
9999 mem: clearing max
9999 mem: storing 0 in location 1508
9999 mem: clearing max
9999 mem: storing 0 in location 1508
9999 mem: clearing count:number
9999 mem: storing 0 in location 1509
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1510
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1507 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1507
9999 mem: clearing count
9999 mem: storing 0 in location 1509
9999 mem: automatically abandoning 1495
9999 abandon: updating refcounts inside 1495: (array number)
9999 abandon: saving 1495 in free-list of size 16
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1180
9999 mem: storing 1180 in location 1492
9990 schedule: move-to-previous-line/handle-keyboard-event/editor-event-loop/run_1002/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {top-of-screen: ("address" "duplex-list" "character")}
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1188
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1492 is 1180
9999 mem: location 1476 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1131
9999 mem: location 1131 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 16 -> 15
9999 mem: incrementing refcount of 1180: 7 -> 8
9999 mem: storing 1180 in location 1131
 106 run: {no-movement?: "boolean"} <- equal {old-top: ("address" "duplex-list" "character")}, {top-of-screen: ("address" "duplex-list" "character")}
9999 mem: location 1493 is 1188
9999 mem: location 1492 is 1180
9999 mem: storing 0 in location 1494
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1488
 106 run: jump-unless {no-movement?: "boolean"}, {: "offset"}
9999 mem: location 1494 is 0
9998 run: jumping to instruction 71
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1488
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0"}, {go-render?: "boolean"}
9999 mem: location 1476 is 1129
9999 mem: location 1488 is 1
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1477
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1478
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1479 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 15 -> 14
9999 mem: storing 0 in location 1479
9999 mem: clearing left:number
9999 mem: storing 0 in location 1480
9999 mem: clearing right:number
9999 mem: storing 0 in location 1481
9999 mem: clearing already-at-top?:boolean
9999 mem: storing 0 in location 1482
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1483 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1483
9999 mem: clearing old:address:duplex-list:character
9999 mem: location 1484 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1484
9999 mem: clearing c2:character
9999 mem: storing 0 in location 1485
9999 mem: clearing at-newline?:boolean
9999 mem: storing 0 in location 1486
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1483 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1483
9999 mem: clearing no-motion?:boolean
9999 mem: storing 0 in location 1487
9999 mem: clearing old
9999 mem: location 1484 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1484
9999 mem: clearing curr
9999 mem: location 1483 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1483
9999 mem: clearing no-motion?:boolean
9999 mem: storing 0 in location 1487
9999 mem: clearing before-cursor
9999 mem: location 1479 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1479
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1477
9999 mem: clearing target-column:number
9999 mem: storing 0 in location 1489
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1478
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1490
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1483 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1483
9999 mem: clearing currc:character
9999 mem: storing 0 in location 1491
9999 mem: clearing at-newline?:boolean
9999 mem: storing 0 in location 1486
9999 mem: clearing before-cursor
9999 mem: location 1479 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1479
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1478
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1492 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 8 -> 7
9999 mem: storing 0 in location 1492
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1493 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 14 -> 13
9999 mem: storing 0 in location 1493
9999 mem: clearing top-of-screen
9999 mem: location 1492 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1492
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1494
9999 mem: automatically abandoning 1473
9999 abandon: updating refcounts inside 1473: (array number)
9999 abandon: saving 1473 in free-list of size 22
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1129
9998 run: result 1 is 1
9999 mem: storing 1129 in location 1324
9999 mem: storing 1 in location 1329
 105 run: {undo-coalesce-tag: "number"} <- copy {3: "literal", "up-arrow": ()}
9999 mem: storing 3 in location 1388
 105 run: {top-after: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1180
9999 mem: location 1389 is 0
9999 mem: incrementing refcount of 1180: 7 -> 8
9999 mem: storing 1180 in location 1389
 105 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1335
 105 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1336
 105 run: jump-unless {undo-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1388 is 3
9998 run: jump-unless fell through
 105 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1324 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1140
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1140 is 1435
9999 mem: location 1344 is 0
9999 mem: incrementing refcount of 1435: 1 -> 2
9999 mem: storing 1435 in location 1344
 105 run: jump-unless {undo: ("address" "list" "address" "operation")}, {: "offset"}
9999 mem: location 1344 is 1435
9998 run: jump-unless fell through
 105 run: {op: ("address" "operation")} <- first_3 {undo: ("address" "list" "address" "operation")}
9999 mem: location 1344 is 1435
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 106 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1435: 2 -> 3
9999 mem: storing 1435 in location 1471
 106 run: {result: ("address" "operation")} <- get {in: ("address" "list" "address" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1471 is 1435
9999 mem: skipping refcount at 1435
9999 mem: location 1436 is 1240
9999 mem: location 1437 is 0
9999 mem: location 1471 is 1435
9999 mem: skipping refcount at 1435
9998 run: address to copy is 1436
9998 run: its type is ("address" "operation")
9999 mem: location 1436 is 1240
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1240: 1 -> 2
9999 mem: storing 1240 in location 1472
 106 run: reply {result: ("address" "operation")}
9999 mem: location 1472 is 1240
9999 mem: clearing in:address:list:_elem
9999 mem: location 1471 is 1435
9999 mem: skipping refcount at 1435
9999 mem: decrementing refcount of 1435: 3 -> 2
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1240
9999 mem: storing 1240 in location 1343
 105 run: {move: "move-operation"}, {is-move?: "boolean"} <- maybe-convert {op: ("address" "operation"), "lookup": ()}, {move: "variant"}
9999 mem: location 1343 is 1240
9999 mem: skipping refcount at 1240
9999 mem: location 1241 is 1
9999 mem: location 1242 is 1
9999 mem: location 1243 is 0
9999 mem: location 1244 is 1148
9999 mem: location 1245 is 1
9999 mem: location 1246 is 0
9999 mem: location 1247 is 1188
9999 mem: location 1248 is 0
9999 mem: location 1249 is 0
9999 mem: location 1250 is 0
9999 mem: location 1251 is 0
9999 mem: location 1343 is 1240
9999 mem: skipping refcount at 1240
9999 mem: storing 1 in location 1367
9999 mem: incrementing refcount of 1148: 7 -> 8
9999 mem: incrementing refcount of 1188: 13 -> 14
9999 mem: storing 1 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 1148 in location 1362
9999 mem: storing 1 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 1188 in location 1365
9999 mem: storing 0 in location 1366
 105 run: jump-unless {is-move?: "boolean"}, {: "offset"}
9999 mem: location 1367 is 1
9998 run: jump-unless fell through
 105 run: {previous-coalesce-tag: "number"} <- get {move: "move-operation"}, {tag: "offset"}
9999 mem: location 1360 is 1
9999 mem: location 1361 is 0
9999 mem: location 1362 is 1148
9999 mem: location 1363 is 1
9999 mem: location 1364 is 0
9999 mem: location 1365 is 1188
9999 mem: location 1366 is 0
9998 run: address to copy is 1366
9998 run: its type is "number"
9999 mem: location 1366 is 0
9999 mem: storing 0 in location 1390
 105 run: {coalesce?: "boolean"} <- equal {undo-coalesce-tag: "number"}, {previous-coalesce-tag: "number"}
9999 mem: location 1388 is 3
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1391
 105 run: jump-unless {coalesce?: "boolean"}, {: "offset"}
9999 mem: location 1391 is 0
9998 run: jumping to instruction 676
 105 run: {op: ("address" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1438
9999 mem: location 1343 is 1240
9999 mem: skipping refcount at 1240
9999 mem: decrementing refcount of 1240: 2 -> 1
9999 mem: incrementing refcount of 1438: 0 -> 1
9999 mem: storing 1438 in location 1343
 105 run: {op: ("address" "operation"), "lookup": ()} <- merge {1: "literal", "move-operation": ()}, {cursor-row-before: "number"}, {cursor-column-before: "number"}, {top-before: ("address" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "duplex-list" "character")}, {undo-coalesce-tag: "number"}
9999 mem: location 1385 is 1
9999 mem: location 1386 is 0
9999 mem: location 1387 is 1188
9999 mem: location 1335 is 1
9999 mem: location 1336 is 0
9999 mem: location 1389 is 1180
9999 mem: location 1388 is 3
9999 mem: location 1343 is 1438
9999 mem: skipping refcount at 1438
9999 mem: location 1343 is 1438
9999 mem: skipping refcount at 1438
9999 mem: incrementing refcount of 1188: 14 -> 15
9999 mem: incrementing refcount of 1180: 8 -> 9
9999 mem: storing 1 in location 1439
9999 mem: storing 1 in location 1440
9999 mem: storing 0 in location 1441
9999 mem: storing 1188 in location 1442
9999 mem: storing 1 in location 1443
9999 mem: storing 0 in location 1444
9999 mem: storing 1180 in location 1445
9999 mem: storing 3 in location 1446
 105 run: {editor: ("address" "editor-data")} <- add-operation {editor: ("address" "editor-data")}, {op: ("address" "operation")}
9999 mem: location 1324 is 1129
9999 mem: location 1343 is 1438
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1152
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1155 is 0
9999 mem: incrementing refcount of 1129: 8 -> 9
9999 mem: storing 1129 in location 1155
 106 run: {op: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1156 is 0
9999 mem: incrementing refcount of 1438: 1 -> 2
9999 mem: storing 1438 in location 1156
 106 run: {undo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1140
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1140 is 1435
9999 mem: location 1157 is 0
9999 mem: incrementing refcount of 1435: 2 -> 3
9999 mem: storing 1435 in location 1157
 106 run: {undo: ("address" "list" "address" "operation")} <- push_4 {op: ("address" "operation")}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1156 is 1438
9999 mem: location 1157 is 1435
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {x: ("address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1438: 2 -> 3
9999 mem: storing 1438 in location 1145
 107 run: {in: ("address" "list" "address" "operation")} <- next-ingredient-without-typechecking 
9999 mem: location 1146 is 0
9999 mem: incrementing refcount of 1435: 3 -> 4
9999 mem: storing 1435 in location 1146
 107 run: {result: ("address" "list" "address" "operation")} <- new {(list address operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1511
9999 mem: storing 0 in location 1511
9999 mem: storing 0 in location 1512
9999 mem: storing 0 in location 1513
9999 mem: location 1147 is 0
9999 mem: incrementing refcount of 1511: 0 -> 1
9999 mem: storing 1511 in location 1147
 107 run: {result: ("address" "list" "address" "operation"), "lookup": ()} <- merge {x: ("address" "operation")}, {in: ("address" "list" "address" "operation")}
9999 mem: location 1145 is 1438
9999 mem: location 1146 is 1435
9999 mem: location 1147 is 1511
9999 mem: skipping refcount at 1511
9999 mem: location 1147 is 1511
9999 mem: skipping refcount at 1511
9999 mem: incrementing refcount of 1438: 3 -> 4
9999 mem: incrementing refcount of 1435: 4 -> 5
9999 mem: storing 1438 in location 1512
9999 mem: storing 1435 in location 1513
 107 run: reply {result: ("address" "list" "address" "operation")}
9999 mem: location 1147 is 1511
9999 mem: clearing x:_elem
9999 mem: location 1145 is 1438
9999 mem: skipping refcount at 1438
9999 mem: decrementing refcount of 1438: 4 -> 3
9999 mem: storing 0 in location 1145
9999 mem: clearing in:address:list:_elem
9999 mem: location 1146 is 1435
9999 mem: skipping refcount at 1435
9999 mem: decrementing refcount of 1435: 5 -> 4
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1511
9999 mem: storing 1511 in location 1157
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "list" "address" "operation")}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1435
9999 mem: location 1141 is 0
9999 mem: location 1157 is 1511
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1140
9999 mem: location 1140 is 1435
9999 mem: skipping refcount at 1435
9999 mem: decrementing refcount of 1435: 4 -> 3
9999 mem: incrementing refcount of 1511: 1 -> 2
9999 mem: storing 1511 in location 1140
 106 run: {redo: ("address" "list" "address" "operation")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1141
9998 run: its type is ("address" "list" "address" "operation")
9999 mem: location 1141 is 0
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 106 run: {redo: ("address" "list" "address" "operation")} <- copy {0: "literal"}
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "list" "address" "operation")}
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1158 is 0
9999 mem: location 1155 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1141
9999 mem: location 1141 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1141
 106 run: return {editor: ("address" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1155 is 1129
9999 mem: clearing op:address:operation
9999 mem: location 1156 is 1438
9999 mem: skipping refcount at 1438
9999 mem: decrementing refcount of 1438: 3 -> 2
9999 mem: storing 0 in location 1156
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1157 is 1511
9999 mem: skipping refcount at 1511
9999 mem: decrementing refcount of 1511: 2 -> 1
9999 mem: storing 0 in location 1157
9999 mem: clearing undo
9999 mem: location 1157 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1157
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: clearing redo
9999 mem: location 1158 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1158
9999 mem: automatically abandoning 1152
9999 abandon: updating refcounts inside 1152: (array number)
9999 abandon: saving 1152 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1129
9999 mem: storing 1129 in location 1324
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1323 is 1008
9999 mem: location 1324 is 1129
9999 mem: location 1329 is 1
9999 mem: clearing e:event
9999 mem: storing 0 in location 1325
9999 mem: storing 0 in location 1326
9999 mem: storing 0 in location 1327
9999 mem: storing 0 in location 1328
9999 mem: clearing screen-width:number
9999 mem: storing 0 in location 1330
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1331
9999 mem: clearing left:number
9999 mem: storing 0 in location 1332
9999 mem: clearing right:number
9999 mem: storing 0 in location 1333
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 15 -> 14
9999 mem: storing 0 in location 1334
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing save-row:number
9999 mem: storing 0 in location 1337
9999 mem: clearing save-column:number
9999 mem: storing 0 in location 1338
9999 mem: clearing c:character
9999 mem: storing 0 in location 1339
9999 mem: clearing is-unicode?:boolean
9999 mem: storing 0 in location 1340
9999 mem: clearing redo?:boolean
9999 mem: storing 0 in location 1341
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 1438
9999 mem: skipping refcount at 1438
9999 mem: decrementing refcount of 1438: 2 -> 1
9999 mem: storing 0 in location 1343
9999 mem: clearing redo
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 1435
9999 mem: skipping refcount at 1435
9999 mem: decrementing refcount of 1435: 3 -> 2
9999 mem: storing 0 in location 1344
9999 mem: clearing undo
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1356 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1356
9999 mem: clearing end:address:duplex-list:character
9999 mem: location 1357 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1357
9999 mem: clearing data:address:duplex-list:character
9999 mem: location 1358 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1358
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing move:move-operation
9999 mem: decrementing refcount of 1148: 8 -> 7
9999 mem: decrementing refcount of 1188: 14 -> 13
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing undo?:boolean
9999 mem: storing 0 in location 1379
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing undo
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing redo:address:list:address:operation
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing redo
9999 mem: location 1342 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1342
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing anchor:address:duplex-list:character
9999 mem: location 1380 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1380
9999 mem: clearing deleted:address:duplex-list:character
9999 mem: location 1381 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1381
9999 mem: clearing old-cursor:address:duplex-list:character
9999 mem: location 1382 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1382
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing start:address:duplex-list:character
9999 mem: location 1356 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1356
9999 mem: clearing end:address:duplex-list:character
9999 mem: location 1357 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1357
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1336
9999 mem: clearing top:address:duplex-list:character
9999 mem: location 1359 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1359
9999 mem: clearing page-up?:boolean
9999 mem: storing 0 in location 1383
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 13 -> 12
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 9 -> 8
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing page-down?:boolean
9999 mem: storing 0 in location 1394
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing delete-to-end-of-line?:boolean
9999 mem: storing 0 in location 1395
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing deleted-cells:address:duplex-list:character
9999 mem: location 1396 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1396
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing delete-to-start-of-line?:boolean
9999 mem: storing 0 in location 1398
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing deleted-cells:address:duplex-list:character
9999 mem: location 1396 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1396
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing move-to-end-of-line?:boolean
9999 mem: storing 0 in location 1399
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-start-of-line?:boolean
9999 mem: storing 0 in location 1400
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing delete-previous-character?:boolean
9999 mem: storing 0 in location 1401
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing backspaced-cell:address:duplex-list:character
9999 mem: location 1402 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1402
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing backspaced-so-far:address:duplex-list:character
9999 mem: location 1403 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1403
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing tab?:boolean
9999 mem: storing 0 in location 1404
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1405 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1405
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-until:address:duplex-list:character
9999 mem: location 1406 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1406
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1407 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1407
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1408
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1405 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1405
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1407 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1407
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing regular-character?:boolean
9999 mem: storing 0 in location 1409
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing cursor-before:address:duplex-list:character
9999 mem: location 1405 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1405
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing typing:insert-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing is-insert?:boolean
9999 mem: storing 0 in location 1377
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing insert-until:address:duplex-list:character
9999 mem: location 1406 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1406
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing typing
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1368
9999 mem: storing 0 in location 1369
9999 mem: storing 0 in location 1370
9999 mem: storing 0 in location 1371
9999 mem: storing 0 in location 1372
9999 mem: storing 0 in location 1373
9999 mem: storing 0 in location 1374
9999 mem: storing 0 in location 1375
9999 mem: storing 0 in location 1376
9999 mem: clearing insert-from:address:duplex-list:character
9999 mem: location 1378 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1378
9999 mem: clearing insert-to:address:duplex-list:character
9999 mem: location 1407 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1407
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing k:number
9999 mem: storing 0 in location 1410
9999 mem: clearing is-keycode?:boolean
9999 mem: storing 0 in location 1411
9999 mem: clearing page-up?:boolean
9999 mem: storing 0 in location 1383
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing page-down?:boolean
9999 mem: storing 0 in location 1394
9999 mem: clearing old-top:address:duplex-list:character
9999 mem: location 1384 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1384
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing top-of-screen:address:duplex-list:character
9999 mem: location 1392 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1392
9999 mem: clearing no-movement?:boolean
9999 mem: storing 0 in location 1393
9999 mem: clearing move-to-end-of-line?:boolean
9999 mem: storing 0 in location 1399
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-start-of-line?:boolean
9999 mem: storing 0 in location 1400
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-next-line?:boolean
9999 mem: storing 0 in location 1412
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-previous-line?:boolean
9999 mem: storing 0 in location 1413
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-previous-character?:boolean
9999 mem: storing 0 in location 1414
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1415 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1415
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move-to-next-character?:boolean
9999 mem: storing 0 in location 1416
9999 mem: clearing next-cursor:address:duplex-list:character
9999 mem: location 1417 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1417
9999 mem: clearing cursor-row-before:number
9999 mem: storing 0 in location 1385
9999 mem: clearing cursor-column-before:number
9999 mem: storing 0 in location 1386
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing before-cursor
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo-coalesce-tag:number
9999 mem: storing 0 in location 1388
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing move:move-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing is-move?:boolean
9999 mem: storing 0 in location 1367
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing move
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1360
9999 mem: storing 0 in location 1361
9999 mem: storing 0 in location 1362
9999 mem: storing 0 in location 1363
9999 mem: storing 0 in location 1364
9999 mem: storing 0 in location 1365
9999 mem: storing 0 in location 1366
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing delete-next-character?:boolean
9999 mem: storing 0 in location 1418
9999 mem: clearing top-before:address:duplex-list:character
9999 mem: location 1387 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1387
9999 mem: clearing deleted-cell:address:duplex-list:character
9999 mem: location 1419 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1419
9999 mem: clearing top-after:address:duplex-list:character
9999 mem: location 1389 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1389
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1335
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1336
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1334 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1334
9999 mem: clearing undo:address:list:address:operation
9999 mem: location 1344 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1344
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deletion:delete-operation
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing is-delete?:boolean
9999 mem: storing 0 in location 1355
9999 mem: clearing previous-coalesce-tag:number
9999 mem: storing 0 in location 1390
9999 mem: clearing coalesce?:boolean
9999 mem: storing 0 in location 1391
9999 mem: clearing delete-until:address:duplex-list:character
9999 mem: location 1420 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1420
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deleted-so-far:address:duplex-list:character
9999 mem: location 1421 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1421
9999 mem: clearing deleted-so-far
9999 mem: location 1421 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1421
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing deletion
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1345
9999 mem: storing 0 in location 1346
9999 mem: storing 0 in location 1347
9999 mem: storing 0 in location 1348
9999 mem: storing 0 in location 1349
9999 mem: storing 0 in location 1350
9999 mem: storing 0 in location 1351
9999 mem: storing 0 in location 1352
9999 mem: storing 0 in location 1353
9999 mem: storing 0 in location 1354
9999 mem: clearing op:address:operation
9999 mem: location 1343 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1343
9999 mem: clearing deleted-until:address:duplex-list:character
9999 mem: location 1397 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1397
9999 mem: clearing paste-end?:boolean
9999 mem: storing 0 in location 1422
9999 mem: clearing paste-start?:boolean
9999 mem: storing 0 in location 1423
9999 mem: automatically abandoning 1320
9999 abandon: updating refcounts inside 1320: (array number)
9999 abandon: saving 1320 in free-list of size 104
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1129
9998 run: result 2 is 1
9999 mem: storing 1008 in location 1290
9999 mem: storing 1129 in location 1292
9999 mem: storing 1 in location 1305
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1305 is 1
9998 run: jump-unless fell through
 104 run: {screen: ("address" "screen")} <- editor-render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1290 is 1008
9999 mem: location 1292 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1120
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1123 is 0
9999 mem: incrementing refcount of 1008: 51 -> 52
9999 mem: storing 1008 in location 1123
 105 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1124 is 0
9999 mem: incrementing refcount of 1129: 9 -> 10
9999 mem: storing 1129 in location 1124
 105 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1125
 105 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1126
 105 run: {row: "number"}, {column: "number"} <- render {screen: ("address" "screen")}, {editor: ("address" "editor-data")}
9999 mem: location 1123 is 1008
9999 mem: location 1124 is 1129
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1212
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1215 is 0
9999 mem: incrementing refcount of 1008: 52 -> 53
9999 mem: storing 1008 in location 1215
 106 run: {editor: ("address" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: location 1216 is 0
9999 mem: incrementing refcount of 1129: 10 -> 11
9999 mem: storing 1129 in location 1216
 106 run: jump-if {editor: ("address" "editor-data")}, {: "offset"}
9999 mem: location 1216 is 1129
9998 run: jumping to instruction 6
 106 run: {left: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1134
9998 run: its type is "number"
9999 mem: location 1134 is 0
9999 mem: storing 0 in location 1217
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1215 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1008: 53 -> 54
9999 mem: storing 1008 in location 1471
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1471 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1472
 107 run: return {height: "number"}
9999 mem: location 1472 is 4
9999 mem: clearing screen:address:screen
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 54 -> 53
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 4
9999 mem: storing 4 in location 1218
 106 run: {right: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1135
9998 run: its type is "number"
9999 mem: location 1135 is 5
9999 mem: storing 5 in location 1219
 106 run: {curr: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1131 is 1180
9999 mem: location 1220 is 0
9999 mem: incrementing refcount of 1180: 8 -> 9
9999 mem: storing 1180 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- copy {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1180
9999 mem: location 1221 is 0
9999 mem: incrementing refcount of 1180: 9 -> 10
9999 mem: storing 1180 in location 1221
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1180
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1180: 10 -> 11
9999 mem: storing 1180 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1180
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1182
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1182 is 1184
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1184: 7 -> 8
9999 mem: storing 1184 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1184
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 11 -> 10
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1220
 106 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1222
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1223
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 106 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1225
 106 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1226
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- get {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1133
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1133 is 1188
9999 mem: location 1227 is 0
9999 mem: incrementing refcount of 1188: 12 -> 13
9999 mem: storing 1188 in location 1227
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 1
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 53 -> 54
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 1
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1184
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1226 is 0
9999 mem: storing 1 in location 1230
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "duplex-list" "character")} <- copy {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1180
9999 mem: location 1227 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 13 -> 12
9999 mem: incrementing refcount of 1180: 10 -> 11
9999 mem: storing 1180 in location 1227
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1220 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1185
9998 run: its type is "character"
9999 mem: location 1185 is 102
9999 mem: storing 102 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 102
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1514
9999 mem: storing 0 in location 1514
9999 mem: storing 0 in location 1515
9999 mem: storing 0 in location 1516
9999 mem: storing 0 in location 1517
9999 mem: storing 0 in location 1518
9999 mem: storing 0 in location 1519
9999 mem: storing 0 in location 1520
9999 mem: storing 0 in location 1521
9999 mem: storing 0 in location 1522
9999 mem: storing 0 in location 1523
9999 mem: storing 0 in location 1524
9999 mem: storing 0 in location 1525
9999 mem: storing 10 in location 1515
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1517
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1518
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1517 is 7
9999 mem: storing 1 in location 1519
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1518 is 102
9999 mem: storing 0 in location 1520
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1520 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1521
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1521 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1518 is 102
9999 mem: storing 0 in location 1523
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1523 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1524
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1524 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1517 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1518
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1519
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1520
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1521
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1522
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1523
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1524
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1525
9999 mem: automatically abandoning 1514
9999 abandon: updating refcounts inside 1514: (array number)
9999 abandon: saving 1514 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 102
9999 mem: storing 0 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 102
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 54 -> 55
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 102
  90 print-character: 102
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 0
9999 mem: storing 10 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 102
9999 mem: location 1257 is 7
9999 mem: storing 102 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 10
9998 run: address to copy to is 1036
9999 mem: location 1274 is 102
9999 mem: location 1275 is 7
9999 mem: storing 102 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 55 -> 54
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1184
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1184: 8 -> 9
9999 mem: storing 1184 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1184
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1186
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1186 is 1188
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1188: 12 -> 13
9999 mem: storing 1188 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1188
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 9 -> 8
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1188
9999 mem: storing 1188 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1180
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1180: 11 -> 12
9999 mem: storing 1180 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1180
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9999 mem: location 1181 is 101
9999 mem: location 1182 is 1184
9999 mem: location 1183 is 1176
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9998 run: address to copy is 1182
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1182 is 1184
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1184: 8 -> 9
9999 mem: storing 1184 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1184
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 12 -> 11
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1221
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1188
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 1
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1230 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1220 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1189
9998 run: its type is "character"
9999 mem: location 1189 is 10
9999 mem: storing 10 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1514
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1517
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1518
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1517 is 7
9999 mem: storing 1 in location 1519
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1518 is 10
9999 mem: storing 0 in location 1520
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1520 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1521
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1521 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1518 is 10
9999 mem: storing 0 in location 1523
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1523 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1524
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1524 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1517 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1518
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1519
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1520
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1521
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1522
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1523
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1524
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1525
9999 mem: automatically abandoning 1514
9999 abandon: updating refcounts inside 1514: (array number)
9999 abandon: saving 1514 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 10
9999 mem: storing 1 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 1
9999 mem: location 1225 is 1
9999 mem: storing 1 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 1
9998 run: jump-unless fell through
 106 run: {left-of-cursor?: "boolean"} <- lesser-than {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 1
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1233
 106 run: jump-unless {left-of-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1233 is 0
9998 run: jumping to instruction 46
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1219 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 54 -> 55
9999 mem: storing 1008 in location 1099
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 55 -> 56
9999 mem: storing 1008 in location 1145
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1146
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 1
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 56 -> 55
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 55 -> 56
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 1
9999 mem: storing 11 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 11
9998 run: address to copy to is 1038
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1038
9999 mem: storing 7 in location 1039
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 56 -> 57
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 2
9999 mem: storing 12 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 12
9998 run: address to copy to is 1040
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1040
9999 mem: storing 7 in location 1041
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 57 -> 58
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 3
9999 mem: storing 13 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 13
9998 run: address to copy to is 1042
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 58 -> 59
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
9990 schedule: print/clear-line-until/render/editor-render/editor-event-loop/run_1002/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 4
9999 mem: storing 14 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 14
9998 run: address to copy to is 1044
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1044
9999 mem: storing 7 in location 1045
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 59 -> 60
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 1
9999 mem: location 1261 is 10
9999 mem: storing 10 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 10
9999 mem: location 1265 is 5
9999 mem: storing 15 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 15
9998 run: address to copy to is 1046
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1046
9999 mem: storing 7 in location 1047
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 60 -> 59
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 1
9999 mem: storing 2 in location 1223
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 2
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 59 -> 60
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 2
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1188
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1188: 13 -> 14
9999 mem: storing 1188 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1188
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 1192
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1192: 8 -> 9
9999 mem: storing 1192 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 14 -> 13
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1184
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1184: 9 -> 10
9999 mem: storing 1184 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1184
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: location 1185 is 102
9999 mem: location 1186 is 1188
9999 mem: location 1187 is 1180
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9998 run: address to copy is 1186
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1186 is 1188
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1188: 13 -> 14
9999 mem: storing 1188 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1188
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1184
9999 mem: skipping refcount at 1184
9999 mem: decrementing refcount of 1184: 10 -> 9
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1188
9999 mem: storing 1188 in location 1221
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1192
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1220 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1193
9998 run: its type is "character"
9999 mem: location 1193 is 103
9999 mem: storing 103 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 103
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1514
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1517
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1518
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1517 is 7
9999 mem: storing 1 in location 1519
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1518 is 103
9999 mem: storing 0 in location 1520
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1520 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1521
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1521 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1518 is 103
9999 mem: storing 0 in location 1523
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1523 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1524
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1524 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1517 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1518
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1519
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1520
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1521
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1522
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1523
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1524
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1525
9999 mem: automatically abandoning 1514
9999 abandon: updating refcounts inside 1514: (array number)
9999 abandon: saving 1514 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 103
9999 mem: storing 0 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 103
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 60 -> 61
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 103 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 103
  90 print-character: 103
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 103
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 0
9999 mem: storing 20 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 103
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 103
9999 mem: location 1257 is 7
9999 mem: storing 103 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 20
9998 run: address to copy to is 1056
9999 mem: location 1274 is 103
9999 mem: location 1275 is 7
9999 mem: storing 103 in location 1056
9999 mem: storing 7 in location 1057
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 61 -> 60
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1192
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1192: 9 -> 10
9999 mem: storing 1192 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1192
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1471 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1196
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1196: 7 -> 8
9999 mem: storing 1196 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 10 -> 9
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1188
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1188: 14 -> 15
9999 mem: storing 1188 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1188
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: location 1189 is 10
9999 mem: location 1190 is 1192
9999 mem: location 1191 is 1184
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9998 run: address to copy is 1190
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1190 is 1192
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1192: 9 -> 10
9999 mem: storing 1192 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1192
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 15 -> 14
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1192
9999 mem: storing 1192 in location 1221
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1196
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1220 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1197
9998 run: its type is "character"
9999 mem: location 1197 is 10
9999 mem: storing 10 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1514
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1517
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1518
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1517 is 7
9999 mem: storing 1 in location 1519
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1518 is 10
9999 mem: storing 0 in location 1520
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1520 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1521
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1521 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1518 is 10
9999 mem: storing 0 in location 1523
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1523 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1524
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1524 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1517 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1518
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1519
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1520
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1521
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1522
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1523
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1524
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1525
9999 mem: automatically abandoning 1514
9999 abandon: updating refcounts inside 1514: (array number)
9999 abandon: saving 1514 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 10
9999 mem: storing 1 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 2
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 46
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1219 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 60 -> 61
9999 mem: storing 1008 in location 1099
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 61 -> 62
9999 mem: storing 1008 in location 1145
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1146
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 2
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 62 -> 61
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 2
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 61 -> 62
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 1
9999 mem: storing 21 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 21
9998 run: address to copy to is 1058
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1058
9999 mem: storing 7 in location 1059
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 62 -> 63
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 2
9999 mem: storing 22 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 22
9998 run: address to copy to is 1060
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1060
9999 mem: storing 7 in location 1061
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 63 -> 64
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 3
9999 mem: storing 23 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 23
9998 run: address to copy to is 1062
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1062
9999 mem: storing 7 in location 1063
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 64 -> 65
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
9990 schedule: print/clear-line-until/render/editor-render/editor-event-loop/run_1002/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 4
9999 mem: storing 24 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 24
9998 run: address to copy to is 1064
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1064
9999 mem: storing 7 in location 1065
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 65 -> 66
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 2
9999 mem: location 1261 is 10
9999 mem: storing 20 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 20
9999 mem: location 1265 is 5
9999 mem: storing 25 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 25
9998 run: address to copy to is 1066
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1066
9999 mem: storing 7 in location 1067
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 66 -> 65
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 2
9999 mem: storing 3 in location 1223
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 3
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 65 -> 66
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 3
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1196
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1196: 8 -> 9
9999 mem: storing 1196 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1196
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1471 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 1200
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1200: 5 -> 6
9999 mem: storing 1200 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1200
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 9 -> 8
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1200
9999 mem: storing 1200 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1192
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1192: 10 -> 11
9999 mem: storing 1192 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1192
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1192
9999 mem: skipping refcount at 1192
9999 mem: location 1193 is 103
9999 mem: location 1194 is 1196
9999 mem: location 1195 is 1188
9999 mem: location 1471 is 1192
9999 mem: skipping refcount at 1192
9998 run: address to copy is 1194
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1194 is 1196
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1196: 8 -> 9
9999 mem: storing 1196 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1196
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1192
9999 mem: skipping refcount at 1192
9999 mem: decrementing refcount of 1192: 11 -> 10
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1196
9999 mem: storing 1196 in location 1221
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1200
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1220 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1201
9998 run: its type is "character"
9999 mem: location 1201 is 104
9999 mem: storing 104 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 104
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1514
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1517
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 104 in location 1518
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1517 is 7
9999 mem: storing 1 in location 1519
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1518 is 104
9999 mem: storing 0 in location 1520
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1520 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1521
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1521 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1518 is 104
9999 mem: storing 0 in location 1523
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1523 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1524
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1524 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1517 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1518
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1519
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1520
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1521
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1522
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1523
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1524
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1525
9999 mem: automatically abandoning 1514
9999 abandon: updating refcounts inside 1514: (array number)
9999 abandon: saving 1514 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 104
9999 mem: storing 0 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 0
9998 run: jumping to instruction 54
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1219 is 5
9999 mem: storing 0 in location 1234
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1234 is 0
9998 run: jumping to instruction 64
 106 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1231 is 104
9999 mem: location 1222 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 66 -> 67
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 104 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 0 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1259
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 104
  90 print-character: 104
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1265
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 104
9999 mem: storing 0 in location 1266
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 0
9999 mem: storing 30 in location 1269
 107 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 107 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 104
9999 mem: storing 0 in location 1272
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 107 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 104
9999 mem: location 1257 is 7
9999 mem: storing 104 in location 1274
9999 mem: storing 7 in location 1275
 107 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 30
9998 run: address to copy to is 1076
9999 mem: location 1274 is 104
9999 mem: location 1275 is 7
9999 mem: storing 104 in location 1076
9999 mem: storing 7 in location 1077
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 0
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 0
9999 mem: storing 1 in location 1265
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 1
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 67 -> 66
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1200
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1200: 6 -> 7
9999 mem: storing 1200 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1200
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1471 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1202
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1202 is 1204
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1204: 5 -> 6
9999 mem: storing 1204 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1204
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1204
9999 mem: storing 1204 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1196
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1196: 9 -> 10
9999 mem: storing 1196 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1196
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1196
9999 mem: skipping refcount at 1196
9999 mem: location 1197 is 10
9999 mem: location 1198 is 1200
9999 mem: location 1199 is 1192
9999 mem: location 1471 is 1196
9999 mem: skipping refcount at 1196
9998 run: address to copy is 1198
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1198 is 1200
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1200: 6 -> 7
9999 mem: storing 1200 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1200
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1196
9999 mem: skipping refcount at 1196
9999 mem: decrementing refcount of 1196: 10 -> 9
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1200
9999 mem: storing 1200 in location 1221
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1224 is 0
9999 mem: storing 1 in location 1224
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1204
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1218 is 4
9999 mem: storing 0 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 32
 106 run: {c: "character"} <- get {curr: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1220 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 1208
9999 mem: location 1207 is 1200
9999 mem: location 1220 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy is 1205
9998 run: its type is "character"
9999 mem: location 1205 is 10
9999 mem: storing 10 in location 1231
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1222 is 7
9999 mem: location 1231 is 10
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1514
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1517
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1518
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1517 is 7
9999 mem: storing 1 in location 1519
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1518 is 10
9999 mem: storing 0 in location 1520
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1520 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1521
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1521 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1519 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1518 is 10
9999 mem: storing 0 in location 1523
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1523 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1517 is 7
9999 mem: storing 0 in location 1524
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1524 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1517 is 7
9999 mem: clearing c:character
9999 mem: storing 0 in location 1518
9999 mem: clearing color-is-white?:boolean
9999 mem: storing 0 in location 1519
9999 mem: clearing starting-comment?:boolean
9999 mem: storing 0 in location 1520
9999 mem: clearing color-is-blue?:boolean
9999 mem: storing 0 in location 1521
9999 mem: clearing ending-comment?:boolean
9999 mem: storing 0 in location 1522
9999 mem: clearing starting-assignment?:boolean
9999 mem: storing 0 in location 1523
9999 mem: clearing color-is-red?:boolean
9999 mem: storing 0 in location 1524
9999 mem: clearing ending-assignment?:boolean
9999 mem: storing 0 in location 1525
9999 mem: automatically abandoning 1514
9999 abandon: updating refcounts inside 1514: (array number)
9999 abandon: saving 1514 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1222
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1231 is 10
9999 mem: storing 1 in location 1232
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1232 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 3
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1229 is 0
9998 run: jumping to instruction 46
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1219 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 66 -> 67
9999 mem: storing 1008 in location 1099
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 67 -> 68
9999 mem: storing 1008 in location 1145
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1146
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1147
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 3
9999 mem: location 1147 is 1
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 68 -> 67
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 3
9998 run: result 1 is 1
9999 mem: storing 1 in location 1101
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 67 -> 68
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 1
9999 mem: storing 31 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 31
9998 run: address to copy to is 1078
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1078
9999 mem: storing 7 in location 1079
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 1
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 1
9999 mem: storing 2 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 2
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 68 -> 69
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 2
9999 mem: storing 32 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 32
9998 run: address to copy to is 1080
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1080
9999 mem: storing 7 in location 1081
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 2
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 2
9999 mem: storing 3 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 3
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 69 -> 70
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 3
9999 mem: storing 33 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 33
9998 run: address to copy to is 1082
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1082
9999 mem: storing 7 in location 1083
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 3
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 3
9999 mem: storing 4 in location 1265
9990 schedule: print/clear-line-until/render/editor-render/editor-event-loop/run_1002/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 4
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 70 -> 71
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 4
9999 mem: storing 34 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 34
9998 run: address to copy to is 1084
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1084
9999 mem: storing 7 in location 1085
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 4
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 4
9999 mem: storing 5 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 5
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 5 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 71 -> 72
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 3
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1262 is 4
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 28
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1265
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 34
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1261 is 10
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 39
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1266
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1266 is 0
9998 run: jumping to instruction 53
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1263 is 3
9999 mem: location 1261 is 10
9999 mem: storing 30 in location 1269
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1269 is 30
9999 mem: location 1265 is 5
9999 mem: storing 35 in location 1269
 108 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1270 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1270
 108 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1271
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1256 is 32
9999 mem: storing 0 in location 1272
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1272 is 0
9998 run: jumping to instruction 71
 108 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1256 is 32
9999 mem: location 1257 is 7
9999 mem: storing 32 in location 1274
9999 mem: storing 7 in location 1275
 108 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1269 is 35
9998 run: address to copy to is 1086
9999 mem: location 1274 is 32
9999 mem: location 1275 is 7
9999 mem: storing 32 in location 1086
9999 mem: storing 7 in location 1087
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1261 is 10
9999 mem: storing 9 in location 1276
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1265 is 5
9999 mem: location 1276 is 9
9999 mem: storing 0 in location 1277
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1277 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1265 is 5
9999 mem: storing 6 in location 1265
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1265 is 6
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 6 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 72 -> 71
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1223 is 3
9999 mem: storing 4 in location 1223
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1217 is 0
9999 mem: storing 0 in location 1224
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1215 is 1008
9999 mem: location 1223 is 4
9999 mem: location 1224 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 71 -> 72
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 4
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 6
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1215
 106 run: {curr: ("address" "duplex-list" "character")} <- next_2 {curr: ("address" "duplex-list" "character")}
9999 mem: location 1220 is 1204
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1204: 6 -> 7
9999 mem: storing 1204 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1204
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1204
9999 mem: skipping refcount at 1204
9999 mem: location 1205 is 10
9999 mem: location 1206 is 1208
9999 mem: location 1207 is 1200
9999 mem: location 1471 is 1204
9999 mem: skipping refcount at 1204
9998 run: address to copy is 1206
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1206 is 1208
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1208: 2 -> 3
9999 mem: storing 1208 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1208
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1204
9999 mem: skipping refcount at 1204
9999 mem: decrementing refcount of 1204: 7 -> 6
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1208
9999 mem: storing 1208 in location 1220
 106 run: {prev: ("address" "duplex-list" "character")} <- next_2 {prev: ("address" "duplex-list" "character")}
9999 mem: location 1221 is 1200
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 107 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1200: 7 -> 8
9999 mem: storing 1200 in location 1471
 107 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1471 is 1200
9998 run: jumping to instruction 5
 107 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1471 is 1200
9999 mem: skipping refcount at 1200
9999 mem: location 1201 is 104
9999 mem: location 1202 is 1204
9999 mem: location 1203 is 1196
9999 mem: location 1471 is 1200
9999 mem: skipping refcount at 1200
9998 run: address to copy is 1202
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1202 is 1204
9999 mem: location 1472 is 0
9999 mem: incrementing refcount of 1204: 6 -> 7
9999 mem: storing 1204 in location 1472
 107 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1472 is 1204
9999 mem: clearing in:address:duplex-list:_elem
9999 mem: location 1471 is 1200
9999 mem: skipping refcount at 1200
9999 mem: decrementing refcount of 1200: 8 -> 7
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1204
9999 mem: storing 1204 in location 1221
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 23
 106 run: jump-unless {curr: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1220 is 1208
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1223 is 4
9999 mem: location 1218 is 4
9999 mem: storing 1 in location 1228
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1228 is 1
9998 run: jumping to instruction 70
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 0
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1220 is 1208
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1132
9999 mem: location 1132 is 0
9999 mem: incrementing refcount of 1208: 3 -> 4
9999 mem: storing 1208 in location 1132
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 4
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1229
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1224 is 0
9999 mem: location 1226 is 0
9999 mem: storing 1 in location 1236
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1229 is 0
9999 mem: location 1236 is 1
9999 mem: storing 0 in location 1237
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1223 is 4
9999 mem: location 1225 is 1
9999 mem: storing 0 in location 1238
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1237 is 0
9999 mem: location 1238 is 0
9999 mem: storing 0 in location 1239
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1239 is 0
9998 run: jumping to instruction 82
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 1208
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 3
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1223 is 4
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1136
9999 mem: storing 4 in location 1136
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 1208
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1225 is 1
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1137
9999 mem: storing 1 in location 1137
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 1208
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1226 is 0
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1138
9999 mem: storing 0 in location 1138
 106 run: {editor: ("address" "editor-data"), "lookup": ()} <- put {editor: ("address" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "duplex-list" "character")}
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 1208
9999 mem: location 1133 is 1188
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1227 is 1180
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1133
9999 mem: location 1133 is 1188
9999 mem: skipping refcount at 1188
9999 mem: decrementing refcount of 1188: 14 -> 13
9999 mem: incrementing refcount of 1180: 11 -> 12
9999 mem: storing 1180 in location 1133
 106 run: return {row: "number"}, {column: "number"}, {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1223 is 4
9999 mem: location 1224 is 0
9999 mem: location 1215 is 1008
9999 mem: location 1216 is 1129
9999 mem: clearing screen:address:screen
9999 mem: location 1215 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 72 -> 71
9999 mem: storing 0 in location 1215
9999 mem: clearing editor:address:editor-data
9999 mem: location 1216 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 11 -> 10
9999 mem: storing 0 in location 1216
9999 mem: clearing left:number
9999 mem: storing 0 in location 1217
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1218
9999 mem: clearing right:number
9999 mem: storing 0 in location 1219
9999 mem: clearing curr:address:duplex-list:character
9999 mem: location 1220 is 1208
9999 mem: skipping refcount at 1208
9999 mem: decrementing refcount of 1208: 4 -> 3
9999 mem: storing 0 in location 1220
9999 mem: clearing prev:address:duplex-list:character
9999 mem: location 1221 is 1204
9999 mem: skipping refcount at 1204
9999 mem: decrementing refcount of 1204: 7 -> 6
9999 mem: storing 0 in location 1221
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing color:number
9999 mem: storing 0 in location 1222
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1225
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor:address:duplex-list:character
9999 mem: location 1227 is 1180
9999 mem: skipping refcount at 1180
9999 mem: decrementing refcount of 1180: 12 -> 11
9999 mem: storing 0 in location 1227
9999 mem: clearing screen
9999 mem: location 1215 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1215
9999 mem: clearing off-screen?:boolean
9999 mem: storing 0 in location 1228
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing at-cursor?:boolean
9999 mem: storing 0 in location 1230
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: clearing c:character
9999 mem: storing 0 in location 1231
9999 mem: clearing color
9999 mem: storing 0 in location 1222
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1232
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing left-of-cursor?:boolean
9999 mem: storing 0 in location 1233
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: clearing screen
9999 mem: location 1215 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1215
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing prev
9999 mem: location 1221 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1221
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1234
9999 mem: clearing wrap-icon:character
9999 mem: storing 0 in location 1235
9999 mem: clearing screen
9999 mem: location 1215 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1215
9999 mem: clearing curr
9999 mem: location 1220 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1220
9999 mem: clearing prev
9999 mem: location 1221 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1221
9999 mem: clearing at-cursor-row?:boolean
9999 mem: storing 0 in location 1229
9999 mem: clearing cursor-outside-line?:boolean
9999 mem: storing 0 in location 1236
9999 mem: clearing before-cursor-on-same-line?:boolean
9999 mem: storing 0 in location 1237
9999 mem: clearing above-cursor-row?:boolean
9999 mem: storing 0 in location 1238
9999 mem: clearing before-cursor?:boolean
9999 mem: storing 0 in location 1239
9999 mem: clearing cursor-row
9999 mem: storing 0 in location 1225
9999 mem: clearing cursor-column
9999 mem: storing 0 in location 1226
9999 mem: clearing before-cursor
9999 mem: location 1227 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1227
9999 mem: automatically abandoning 1212
9999 abandon: updating refcounts inside 1212: (array number)
9999 abandon: saving 1212 in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 4
9998 run: result 1 is 0
9999 mem: storing 4 in location 1127
9999 mem: storing 0 in location 1128
 105 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1123 is 1008
9999 mem: location 1126 is 5
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 71 -> 72
9999 mem: storing 1008 in location 1099
 106 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 106 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 72 -> 73
9999 mem: storing 1008 in location 1145
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1146
 107 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1147
 107 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 4
9999 mem: location 1147 is 0
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 73 -> 72
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 4
9998 run: result 1 is 0
9999 mem: storing 0 in location 1101
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 0
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 72 -> 73
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 0
9999 mem: storing 1 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 73 -> 74
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 74 -> 75
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 75 -> 76
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 76 -> 77
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 77 -> 78
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 4
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 4
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 78 -> 77
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1127 is 4
9999 mem: storing 5 in location 1127
 105 run: draw-horizontal {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}, {9480: "literal", "horizontal-dotted": ()}
9999 mem: location 1123 is 1008
9999 mem: location 1127 is 5
9999 mem: location 1125 is 0
9999 mem: location 1126 is 5
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1306
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1309 is 0
9999 mem: incrementing refcount of 1008: 77 -> 78
9999 mem: storing 1008 in location 1309
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1310
 106 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1311
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1312
 106 run: {style: "character"}, {style-found?: "boolean"} <- next-ingredient 
9999 mem: storing 9480 in location 1313
9999 mem: storing 1 in location 1314
 106 run: jump-if {style-found?: "boolean"}, {: "offset"}
9999 mem: location 1314 is 1
9998 run: jumping to instruction 9
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1316 is 0
9998 run: jump-if fell through
 106 run: {color: "number"} <- copy {245: "literal", "grey": ()}
9999 mem: storing 245 in location 1315
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1318 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1317
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {x: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1310 is 5
9999 mem: location 1311 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 78 -> 79
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 5
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 5 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1309
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 0
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 0
9999 mem: storing 1 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 1
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 1
9999 mem: storing 2 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 2
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
9990 schedule: print/draw-horizontal/editor-render/editor-event-loop/run_1002/scenario_editor-scrolls-up-past-wrapped-line-using-arrow-keys-3
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 2
9999 mem: storing 3 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 3
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 3
9999 mem: storing 4 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 4
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 4
9999 mem: storing 5 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 5
9999 mem: location 1312 is 5
9999 mem: storing 1 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1309 is 1008
9999 mem: location 1313 is 9480
9999 mem: location 1315 is 245
9999 mem: location 1317 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1255
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1256
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1257
9999 mem: storing 1 in location 1258
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 9480
  90 print-character: 9480
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 107 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 107 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1263
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 5
9999 mem: storing 1 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 5
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 107 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 80 -> 79
9999 mem: storing 0 in location 1255
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1311 is 5
9999 mem: storing 6 in location 1311
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1311 is 6
9999 mem: location 1312 is 5
9999 mem: storing 0 in location 1319
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1319 is 0
9998 run: jumping to instruction 27
 106 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1309 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1309 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 79 -> 78
9999 mem: storing 0 in location 1309
9999 mem: clearing row:number
9999 mem: storing 0 in location 1310
9999 mem: clearing x:number
9999 mem: storing 0 in location 1311
9999 mem: clearing right:number
9999 mem: storing 0 in location 1312
9999 mem: clearing style:character
9999 mem: storing 0 in location 1313
9999 mem: clearing style-found?:boolean
9999 mem: storing 0 in location 1314
9999 mem: clearing style
9999 mem: storing 0 in location 1313
9999 mem: clearing color:number
9999 mem: storing 0 in location 1315
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1316
9999 mem: clearing color
9999 mem: storing 0 in location 1315
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1317
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1318
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1317
9999 mem: clearing screen
9999 mem: location 1309 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1309
9999 mem: clearing continue?:boolean
9999 mem: storing 0 in location 1319
9999 mem: clearing x
9999 mem: storing 0 in location 1311
9999 mem: automatically abandoning 1306
9999 abandon: updating refcounts inside 1306: (array number)
9999 abandon: saving 1306 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1127 is 5
9999 mem: storing 6 in location 1127
 105 run: clear-screen-from {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1123 is 1008
9999 mem: location 1127 is 6
9999 mem: location 1125 is 0
9999 mem: location 1125 is 0
9999 mem: location 1126 is 5
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1008: 78 -> 79
9999 mem: storing 1008 in location 1003
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1004
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1006
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1007
 106 run: jump-if {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 106 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 6
9999 mem: location 1005 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 79 -> 80
9999 mem: storing 1008 in location 1145
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1146
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 107 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 6
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 6 in location 1011
 107 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1003
 106 run: clear-line-until {screen: ("address" "screen")}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1007 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1096
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 80 -> 81
9999 mem: storing 1008 in location 1099
 107 run: {right: "number", "inclusive": ()} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1100
 107 run: _, {column: "number"} <- cursor-position {screen: ("address" "screen")}
9999 mem: location 1099 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 81 -> 82
9999 mem: storing 1008 in location 1145
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 6
9999 mem: storing 6 in location 1146
 108 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1147
 108 run: return {row: "number"}, {column: "number"}
9999 mem: location 1146 is 6
9999 mem: location 1147 is 0
9999 mem: clearing screen:address:screen
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 82 -> 81
9999 mem: storing 0 in location 1145
9999 mem: clearing row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing row
9999 mem: storing 0 in location 1146
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 6
9998 run: result 1 is 0
9999 mem: storing 0 in location 1101
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1102
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1104 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1103
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 0
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 81 -> 82
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 6
9999 mem: storing 6 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 6
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 6
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 0
9999 mem: storing 1 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 1
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 82 -> 83
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 6
9999 mem: storing 6 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 6
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 6
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 1
9999 mem: storing 2 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 2
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 83 -> 84
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 6
9999 mem: storing 6 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 6
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 6
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 2
9999 mem: storing 3 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 3
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 84 -> 85
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 6
9999 mem: storing 6 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 6
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 6
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 3
9999 mem: storing 4 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 4
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 85 -> 86
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 6
9999 mem: storing 6 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 6
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 6
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 4
9999 mem: storing 5 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 5
9999 mem: location 1100 is 5
9999 mem: storing 0 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1099 is 1008
9999 mem: location 1102 is 32
9999 mem: location 1103 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1252
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1255 is 0
9999 mem: incrementing refcount of 1008: 86 -> 87
9999 mem: storing 1008 in location 1255
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1256
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1257
9999 mem: storing 1 in location 1258
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1258 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1259
9999 mem: storing 1 in location 1260
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1260 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1256 is 32
  90 print-character: 32
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1255 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1261
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1262
 108 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1255 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 6
9999 mem: storing 6 in location 1263
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1263 is 6
9999 mem: storing 1 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 1
9998 run: jumping to instruction 23
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1263 is 6
9999 mem: location 1262 is 4
9999 mem: storing 0 in location 1264
 108 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1264 is 0
9998 run: jump-if fell through
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1255 is 1008
9999 mem: clearing c:character
9999 mem: storing 0 in location 1256
9999 mem: clearing color:number
9999 mem: storing 0 in location 1257
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1258
9999 mem: clearing color
9999 mem: storing 0 in location 1257
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1259
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1260
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1259
9999 mem: clearing width:number
9999 mem: storing 0 in location 1261
9999 mem: clearing height:number
9999 mem: storing 0 in location 1262
9999 mem: clearing row:number
9999 mem: storing 0 in location 1263
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing column:number
9999 mem: storing 0 in location 1265
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing legal?
9999 mem: storing 0 in location 1264
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1266
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1267
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1268
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing row
9999 mem: storing 0 in location 1263
9999 mem: clearing index:number
9999 mem: storing 0 in location 1269
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1270 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1270
9999 mem: clearing len:number
9999 mem: storing 0 in location 1271
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1272
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1273
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: clearing index
9999 mem: storing 0 in location 1269
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1274
9999 mem: storing 0 in location 1275
9999 mem: clearing right:number
9999 mem: storing 0 in location 1276
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1277
9999 mem: clearing column
9999 mem: storing 0 in location 1265
9999 mem: automatically abandoning 1252
9999 abandon: updating refcounts inside 1252: (array number)
9999 abandon: saving 1252 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1099
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1101 is 5
9999 mem: storing 6 in location 1101
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1101 is 6
9999 mem: location 1100 is 5
9999 mem: storing 1 in location 1105
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1105 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 87 -> 86
9999 mem: storing 0 in location 1099
9999 mem: clearing right:number/inclusive
9999 mem: storing 0 in location 1100
9999 mem: clearing _
9999 mem: clearing column:number
9999 mem: storing 0 in location 1101
9999 mem: clearing space:character
9999 mem: storing 0 in location 1102
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1103
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1104
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1103
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1105
9999 mem: clearing screen
9999 mem: location 1099 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1099
9999 mem: clearing column
9999 mem: storing 0 in location 1101
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: clear-rest-of-screen {screen: ("address" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 6
9999 mem: location 1006 is 0
9999 mem: location 1007 is 5
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1450
 107 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1453 is 0
9999 mem: incrementing refcount of 1008: 86 -> 87
9999 mem: storing 1008 in location 1453
 107 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1454
 107 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1455
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1456
 107 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1454 is 6
9999 mem: storing 7 in location 1454
 107 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1453 is 1008
9999 mem: location 1454 is 7
9999 mem: location 1455 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 87 -> 88
9999 mem: storing 1008 in location 1145
 108 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1146
 108 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 6
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 7
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 7 in location 1011
 108 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 7
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 108 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1453
 107 run: {screen-height: "number"} <- screen-height {screen: ("address" "screen")}
9999 mem: location 1453 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
 108 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1471 is 0
9999 mem: incrementing refcount of 1008: 88 -> 89
9999 mem: storing 1008 in location 1471
 108 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1471 is 1008
9998 run: jump-unless fell through
 108 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 7
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1472
 108 run: return {height: "number"}
9999 mem: location 1472 is 4
9999 mem: clearing screen:address:screen
9999 mem: location 1471 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 89 -> 88
9999 mem: storing 0 in location 1471
9999 mem: automatically abandoning 1468
9999 abandon: updating refcounts inside 1468: (array number)
9999 abandon: saving 1468 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 4
9999 mem: storing 4 in location 1457
 107 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1454 is 7
9999 mem: location 1457 is 4
9999 mem: storing 1 in location 1458
 107 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1458 is 1
9998 run: jumping to instruction 15
 107 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1453 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1453 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 88 -> 87
9999 mem: storing 0 in location 1453
9999 mem: clearing row:number
9999 mem: storing 0 in location 1454
9999 mem: clearing left:number
9999 mem: storing 0 in location 1455
9999 mem: clearing right:number
9999 mem: storing 0 in location 1456
9999 mem: clearing row
9999 mem: storing 0 in location 1454
9999 mem: clearing screen
9999 mem: location 1453 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1453
9999 mem: clearing screen-height:number
9999 mem: storing 0 in location 1457
9999 mem: clearing at-bottom-of-screen?:boolean
9999 mem: storing 0 in location 1458
9999 mem: clearing screen
9999 mem: location 1453 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1453
9999 mem: clearing row
9999 mem: storing 0 in location 1454
9999 mem: automatically abandoning 1450
9999 abandon: updating refcounts inside 1450: (array number)
9999 abandon: saving 1450 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
 106 run: return {screen: ("address" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 mem: clearing screen:address:screen
9999 mem: location 1003 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 87 -> 86
9999 mem: storing 0 in location 1003
9999 mem: clearing row:number
9999 mem: storing 0 in location 1004
9999 mem: clearing column:number
9999 mem: storing 0 in location 1005
9999 mem: clearing left:number
9999 mem: storing 0 in location 1006
9999 mem: clearing right:number
9999 mem: storing 0 in location 1007
9999 mem: clearing screen
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
 105 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1123 is 1008
9999 mem: location 1124 is 1129
9999 mem: clearing editor:address:editor-data
9999 mem: location 1124 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 10 -> 9
9999 mem: storing 0 in location 1124
9999 mem: clearing left:number
9999 mem: storing 0 in location 1125
9999 mem: clearing right:number
9999 mem: storing 0 in location 1126
9999 mem: clearing row:number
9999 mem: storing 0 in location 1127
9999 mem: clearing column:number
9999 mem: storing 0 in location 1128
9999 mem: clearing row
9999 mem: storing 0 in location 1127
9999 mem: clearing row
9999 mem: storing 0 in location 1127
9999 mem: automatically abandoning 1120
9999 abandon: updating refcounts inside 1120: (array number)
9999 abandon: saving 1120 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1290
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 1208
9999 mem: location 1133 is 1180
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1137
9998 run: its type is "number"
9999 mem: location 1137 is 1
9999 mem: storing 1 in location 1293
 104 run: {cursor-column: "number"} <- get {editor: ("address" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 1148
9999 mem: location 1131 is 1180
9999 mem: location 1132 is 1208
9999 mem: location 1133 is 1180
9999 mem: location 1134 is 0
9999 mem: location 1135 is 5
9999 mem: location 1136 is 4
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: location 1139 is 1
9999 mem: location 1140 is 1511
9999 mem: location 1141 is 0
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1138
9998 run: its type is "number"
9999 mem: location 1138 is 0
9999 mem: storing 0 in location 1294
 104 run: {screen: ("address" "screen")} <- move-cursor {screen: ("address" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1290 is 1008
9999 mem: location 1293 is 1
9999 mem: location 1294 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1142
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1008: 86 -> 87
9999 mem: storing 1008 in location 1145
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1146
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1147
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1145 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 7
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1146 is 1
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 4
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1147 is 0
9999 mem: location 1145 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1145 is 1008
9999 mem: clearing new-row:number
9999 mem: storing 0 in location 1146
9999 mem: clearing new-column:number
9999 mem: storing 0 in location 1147
9999 mem: automatically abandoning 1142
9999 abandon: updating refcounts inside 1142: (array number)
9999 abandon: saving 1142 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1290
 104 run: {e: "event"}, {console: ("address" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "console")}
9999 mem: location 1291 is 1465
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1306
 105 run: {console: ("address" "console")} <- next-ingredient-without-typechecking 
9999 mem: location 1309 is 0
9999 mem: incrementing refcount of 1465: 3 -> 4
9999 mem: storing 1465 in location 1309
 105 run: jump-unless {console: ("address" "console")}, {: "offset"}
9999 mem: location 1309 is 1465
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9999 mem: location 1466 is 1
9999 mem: location 1467 is 1459
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9998 run: address to copy is 1466
9998 run: its type is "number"
9999 mem: location 1466 is 1
9999 mem: storing 1 in location 1310
 105 run: {buf: ("address" "array" "event")} <- get {console: ("address" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9999 mem: location 1466 is 1
9999 mem: location 1467 is 1459
9999 mem: location 1309 is 1465
9999 mem: skipping refcount at 1465
9998 run: address to copy is 1467
9998 run: its type is ("address" "array" "event")
9999 mem: location 1467 is 1459
9999 mem: location 1311 is 0
9999 mem: incrementing refcount of 1459: 1 -> 2
9999 mem: storing 1459 in location 1311
 105 run: {max: "number"} <- length {buf: ("address" "array" "event"), "lookup": ()}
9999 mem: location 1311 is 1459
9999 mem: skipping refcount at 1459
9999 mem: storing 1 in location 1312
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1310 is 1
9999 mem: location 1312 is 1
9999 mem: storing 1 in location 1313
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1313 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1468
9999 mem: location 1314 is 0
9999 mem: incrementing refcount of 1468: 0 -> 1
9999 mem: storing 1468 in location 1314
 105 run: return {dummy: ("address" "event"), "lookup": ()}, {console: ("address" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1314 is 1468
9999 mem: skipping refcount at 1468
9999 mem: location 1469 is 0
9999 mem: location 1470 is 0
9999 mem: location 1471 is 0
9999 mem: location 1472 is 0
9999 mem: location 1309 is 1465
9999 mem: clearing current-event-index:number
9999 mem: storing 0 in location 1310
9999 mem: clearing buf:address:array:event
9999 mem: location 1311 is 1459
9999 mem: skipping refcount at 1459
9999 mem: decrementing refcount of 1459: 2 -> 1
9999 mem: storing 0 in location 1311
9999 mem: clearing max:number
9999 mem: storing 0 in location 1312
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1313
9999 mem: clearing result
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: clearing current-event-index
9999 mem: storing 0 in location 1310
9999 mem: clearing result:event
9999 mem: storing 0 in location 1315
9999 mem: storing 0 in location 1316
9999 mem: storing 0 in location 1317
9999 mem: storing 0 in location 1318
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1319
9999 mem: automatically abandoning 1306
9999 abandon: updating refcounts inside 1306: (array number)
9999 abandon: saving 1306 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1465
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: storing 1465 in location 1291
9999 mem: storing 1 in location 1299
9999 mem: storing 1 in location 1300
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1299 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1300 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}, {console: ("address" "console"), "same-as-ingredient": "1"}, {editor: ("address" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1290 is 1008
9999 mem: location 1291 is 1465
9999 mem: location 1292 is 1129
9999 mem: clearing screen:address:screen
9999 mem: location 1290 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 87 -> 86
9999 mem: storing 0 in location 1290
9999 mem: clearing console:address:console
9999 mem: location 1291 is 1465
9999 mem: skipping refcount at 1465
9999 mem: decrementing refcount of 1465: 4 -> 3
9999 mem: storing 0 in location 1291
9999 mem: clearing editor:address:editor-data
9999 mem: location 1292 is 1129
9999 mem: skipping refcount at 1129
9999 mem: decrementing refcount of 1129: 9 -> 8
9999 mem: storing 0 in location 1292
9999 mem: clearing cursor-row:number
9999 mem: storing 0 in location 1293
9999 mem: clearing cursor-column:number
9999 mem: storing 0 in location 1294
9999 mem: clearing screen
9999 mem: location 1290 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1290
9999 mem: clearing e:event
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
9999 mem: storing 0 in location 1297
9999 mem: storing 0 in location 1298
9999 mem: clearing console:address:console
9999 mem: location 1291 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1291
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1299
9999 mem: clearing quit?:boolean
9999 mem: storing 0 in location 1300
9999 mem: clearing t:touch-event
9999 mem: storing 0 in location 1301
9999 mem: storing 0 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: clearing is-touch?:boolean
9999 mem: storing 0 in location 1304
9999 mem: clearing screen
9999 mem: location 1290 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1290
9999 mem: clearing editor
9999 mem: location 1292 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1292
9999 mem: clearing go-render?:boolean
9999 mem: storing 0 in location 1305
9999 mem: clearing screen
9999 mem: location 1290 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1290
9999 mem: automatically abandoning 1287
9999 abandon: updating refcounts inside 1287: (array number)
9999 abandon: saving 1287 in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .          .\n    .f         .\n    .g         .\n    .h         .\n  ": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
