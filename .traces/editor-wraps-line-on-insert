9991 parse: --- defining scenario_editor-wraps-line-on-insert
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal", "width": ()}
9993 parse:   ingredient: {5: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {1: ("address" "shared" "array" "character")}
9992 load: after rewriting: {1: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {1: ("address" "shared" "array" "character")}
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {0: "literal", "left": ()}
9993 parse:   ingredient: {5: "literal", "right": ()}
9993 parse:   product: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9993 parse: instruction: editor-render
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {screen: ()}
9993 parse:   ingredient: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: editor-render {screen: ()}, {2: ("address" "shared" "editor-data")}
9993 parse: instruction: assume-console
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    type [e]\n  ": "literal-string"}
9992 load: after rewriting: assume-console {"\n    type [e]\n  ": "literal-string"}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .     .\n    .eabc .\n    .┈┈┈┈┈.\n    .     .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .     .\n    .eabc .\n    .┈┈┈┈┈.\n    .     .\n    .     .\n  ": "literal-string"}
9993 parse: instruction: assume-console
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    type [f]\n  ": "literal-string"}
9992 load: after rewriting: assume-console {"\n    type [f]\n  ": "literal-string"}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .     .\n    .efab↩.\n    .c    .\n    .┈┈┈┈┈.\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain {"\n    .     .\n    .efab↩.\n    .c    .\n    .┈┈┈┈┈.\n    .     .\n  ": "literal-string"}
9999 parse: recipe scenario_editor-wraps-line-on-insert has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_editor-wraps-line-on-insert
9991 transform: --- rewrite 'stash' instructions in recipe scenario_editor-wraps-line-on-insert
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-wraps-line-on-insert
9991 transform: --- deduce types for recipe scenario_editor-wraps-line-on-insert
9992 transform: screen => ("address" "shared" "screen")
9992 transform: screen <= ("address" "shared" "screen")
9991 transform: --- check for invalid types in recipe scenario_editor-wraps-line-on-insert
9991 transform: --- collect surrounding spaces for recipe scenario_editor-wraps-line-on-insert
9991 transform: --- transform names for recipe scenario_editor-wraps-line-on-insert
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-wraps-line-on-insert
9992 transform: instruction {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "shared" "screen")}
9992 transform: instruction {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9992 transform: checking variant (strict) 0: recipe new-editor {s: ("address" "shared" "array" "character")} {screen: ("address" "shared" "screen")} {left: "number"} {right: "number"} -> {result: ("address" "shared" "editor-data")} {screen: ("address" "shared" "screen")}
9992 transform: instruction editor-render {screen: ()}, {2: ("address" "shared" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-render {screen: ("address" "shared" "screen")} {editor: ("address" "shared" "editor-data")} -> {screen: ("address" "shared" "screen")} {editor: ("address" "shared" "editor-data")}
9991 transform: --- compute instruction operations for recipe scenario_editor-wraps-line-on-insert
9991 transform: --- transform braces for recipe scenario_editor-wraps-line-on-insert
9992 transform: assume-screen ...
9992 transform: new ...
9992 transform: new-editor ...
9992 transform: editor-render ...
9992 transform: assume-console ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform: assume-console ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_editor-wraps-line-on-insert
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-wraps-line-on-insert
9991 transform: --- type-check calls inside recipe scenario_editor-wraps-line-on-insert
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-wraps-line-on-insert
9991 transform: --- type-check merge instructions in recipe scenario_editor-wraps-line-on-insert
9991 transform: --- check types of reply instructions in recipe scenario_editor-wraps-line-on-insert
9991 transform: --- checking reply instructions against header for scenario_editor-wraps-line-on-insert
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-wraps-line-on-insert
 102 run: {screen: ("address" "shared" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {5: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1004
 103 run: {result: ("address" "shared" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 0 -> 1
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 5
9999 mem: location 1004 is 5
9999 mem: storing 25 in location 1006
 103 run: {data: ("address" "shared" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 25
9999 mem: array size is 25
9999 mem: allocating size 52
9999 mem: new alloc: 1014
9999 mem: storing 25 in location 1015
9999 mem: storing 1014 in location 1007
9999 mem: incrementing refcount of 1014: 0 -> 1
 103 run: {result: ("address" "shared" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "shared" "array" "screen-cell")}
9999 mem: location 1004 is 5
9999 mem: location 1003 is 5
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: storing 5 in location 1009
9999 mem: storing 5 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "shared" "screen")} <- clear-screen {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1066
9999 mem: storing 7 in location 1067
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1069
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1069 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1070
9999 mem: incrementing refcount of 1014: 1 -> 2
 104 run: {max: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1071
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1072
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 0
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 0
9999 mem: storing 1016 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1016
9999 mem: location 1074 is 1016
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 0
9999 mem: storing 1 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 1
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 1
9999 mem: storing 1018 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1018
9999 mem: location 1074 is 1018
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 1
9999 mem: storing 2 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 2
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 2
9999 mem: storing 1020 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1020
9999 mem: location 1074 is 1020
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 2
9999 mem: storing 3 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 3
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 3
9999 mem: storing 1022 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1022
9999 mem: location 1074 is 1022
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 3
9999 mem: storing 4 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 4
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 4
9999 mem: storing 1024 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1024
9999 mem: location 1074 is 1024
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 4
9999 mem: storing 5 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 5
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 5
9999 mem: storing 1026 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1026
9999 mem: location 1074 is 1026
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 5
9999 mem: storing 6 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 6
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 6
9999 mem: storing 1028 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1028
9999 mem: location 1074 is 1028
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 6
9999 mem: storing 7 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 7
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 7
9999 mem: storing 1030 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1030
9999 mem: location 1074 is 1030
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 7
9999 mem: storing 8 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 8
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 8
9999 mem: storing 1032 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1032
9999 mem: location 1074 is 1032
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 8
9999 mem: storing 9 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 9
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 9
9999 mem: storing 1034 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1034
9999 mem: location 1074 is 1034
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 9
9999 mem: storing 10 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 10
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 10
9999 mem: storing 1036 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1036
9999 mem: location 1074 is 1036
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 10
9999 mem: storing 11 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 11
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 11
9999 mem: storing 1038 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1038
9999 mem: location 1074 is 1038
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 11
9999 mem: storing 12 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 12
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 12
9999 mem: storing 1040 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1040
9999 mem: location 1074 is 1040
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 12
9999 mem: storing 13 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 13
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 13
9999 mem: storing 1042 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1042
9999 mem: location 1074 is 1042
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 13
9999 mem: storing 14 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 14
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 14
9999 mem: storing 1044 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1044
9999 mem: location 1074 is 1044
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 14
9999 mem: storing 15 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 15
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 15
9999 mem: storing 1046 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1046
9999 mem: location 1074 is 1046
9999 mem: storing 0 in location 1046
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 15
9999 mem: storing 16 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 16
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 16
9999 mem: storing 1048 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1048
9999 mem: location 1074 is 1048
9999 mem: storing 0 in location 1048
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 16
9999 mem: storing 17 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 17
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 17
9999 mem: storing 1050 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1050
9999 mem: location 1074 is 1050
9999 mem: storing 0 in location 1050
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 17
9999 mem: storing 18 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 18
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 18
9999 mem: storing 1052 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1052
9999 mem: location 1074 is 1052
9999 mem: storing 0 in location 1052
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 18
9999 mem: storing 19 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 19
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 19
9999 mem: storing 1054 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1054
9999 mem: location 1074 is 1054
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 19
9999 mem: storing 20 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 20
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 20
9999 mem: storing 1056 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1056
9999 mem: location 1074 is 1056
9999 mem: storing 0 in location 1056
9999 mem: storing 7 in location 1057
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 20
9999 mem: storing 21 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 21
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 21
9999 mem: storing 1058 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1058
9999 mem: location 1074 is 1058
9999 mem: storing 0 in location 1058
9999 mem: storing 7 in location 1059
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 21
9999 mem: storing 22 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 22
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 22
9999 mem: storing 1060 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1060
9999 mem: location 1074 is 1060
9999 mem: storing 0 in location 1060
9999 mem: storing 7 in location 1061
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 22
9999 mem: storing 23 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 23
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 23
9999 mem: storing 1062 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1062
9999 mem: location 1074 is 1062
9999 mem: storing 0 in location 1062
9999 mem: storing 7 in location 1063
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 23
9999 mem: storing 24 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 24
9999 mem: location 1071 is 25
9999 mem: storing 0 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 0
9998 run: jump-if fell through
 104 run: {curr: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {i: "number"}
9999 mem: location 1070 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1072 is 24
9999 mem: storing 1064 in location 1074
 104 run: {curr: ("address" "screen-cell"), "lookup": ()} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: location 1074 is 1064
9999 mem: location 1074 is 1064
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1072 is 24
9999 mem: storing 25 in location 1072
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1072 is 25
9999 mem: location 1071 is 25
9999 mem: storing 1 in location 1073
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1073 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1069 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 2 -> 1
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: reply {result: ("address" "shared" "screen")}
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
9999 mem: incrementing refcount of 1008: 2 -> 3
 102 run: {1: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9999 mem: new string alloc: 1075
9999 mem: storing 1075 in location 1
9999 mem: incrementing refcount of 1075: 0 -> 1
 102 run: {2: ("address" "shared" "editor-data")} <- new-editor {1: ("address" "shared" "array" "character")}, {screen: ("address" "shared" "screen")}, {0: "literal", "left": ()}, {5: "literal", "right": ()}
9999 mem: location 1 is 1075
9999 mem: location 900 is 1008
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1066
 103 run: {s: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1075 in location 1069
9999 mem: incrementing refcount of 1075: 1 -> 2
 103 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1070
9999 mem: incrementing refcount of 1008: 3 -> 4
 103 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1071
 103 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1072
 103 run: {right: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1072 is 5
9999 mem: storing 4 in location 1072
 103 run: {result: ("address" "shared" "editor-data")} <- new {editor-data: "type"}
9999 mem: allocating size 13
9999 mem: new alloc: 1080
9999 mem: storing 1080 in location 1073
9999 mem: incrementing refcount of 1080: 0 -> 1
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}, {left: "number"}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1071 is 0
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1085
9999 mem: storing 0 in location 1085
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}, {right: "number"}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1072 is 4
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1086
9999 mem: storing 4 in location 1086
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {1: "literal", "top": ()}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1088
9999 mem: storing 1 in location 1088
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {left: "number"}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1071 is 0
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1089
9999 mem: storing 0 in location 1089
 103 run: {init: ("address" "shared" "duplex-list" "character")} <- push_3 {167: "literal", "§": ()}, {0: "literal", "tail": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1093
9999 mem: storing 4 in location 1094
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1096
 104 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1097
 104 run: {result: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1099
9999 mem: storing 1099 in location 1098
9999 mem: incrementing refcount of 1099: 0 -> 1
 104 run: {result: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "shared" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1096 is 167
9999 mem: location 1097 is 0
9999 mem: location 1098 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1098 is 1099
9999 mem: skipping refcount at 1099
9999 mem: storing 167 in location 1100
9999 mem: storing 0 in location 1101
9999 mem: storing 0 in location 1102
 104 run: jump-unless {in: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1097 is 0
9998 run: jumping to instruction 8
 104 run: return {result: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1098 is 1099
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1099
9999 mem: storing 1099 in location 1074
9999 mem: incrementing refcount of 1099: 1 -> 2
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1074 is 1099
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1081
9999 mem: storing 1099 in location 1081
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1074 is 1099
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1082
9999 mem: storing 1099 in location 1082
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {init: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1074 is 1099
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1084
9999 mem: storing 1099 in location 1084
 103 run: {result: ("address" "shared" "editor-data")} <- insert-text {result: ("address" "shared" "editor-data")}, {s: ("address" "shared" "array" "character")}
9999 mem: location 1073 is 1080
9999 mem: location 1069 is 1075
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1103
9999 mem: storing 8 in location 1104
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1106
9999 mem: incrementing refcount of 1080: 1 -> 2
 104 run: {text: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1075 in location 1107
9999 mem: incrementing refcount of 1075: 2 -> 3
 104 run: jump-if {text: ("address" "shared" "array" "character")}, {1: "offset"}
9999 mem: location 1107 is 1075
9998 run: jumping to instruction 5
 104 run: {len: "number"} <- length {text: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1107 is 1075
9999 mem: skipping refcount at 1075
9999 mem: storing 3 in location 1108
 104 run: jump-if {len: "number"}, {1: "offset"}
9999 mem: location 1108 is 3
9998 run: jumping to instruction 8
 104 run: {idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1109
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {data: "offset"}
9999 mem: location 1106 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1106 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1081
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1081 is 1099
9999 mem: storing 1099 in location 1110
9999 mem: incrementing refcount of 1099: 2 -> 3
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1109 is 0
9999 mem: location 1108 is 3
9999 mem: storing 0 in location 1111
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1107 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1109 is 0
9998 run: address to copy is 1077
9998 run: its type is character
9999 mem: location 1077 is 97
9999 mem: storing 97 in location 1112
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1112 is 97
9999 mem: location 1110 is 1099
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1113
9999 mem: storing 5 in location 1114
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1117
9999 mem: incrementing refcount of 1099: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1120
9999 mem: storing 1120 in location 1118
9999 mem: incrementing refcount of 1120: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1118 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 0
9999 mem: location 1122 is 0
9999 mem: location 1123 is 0
9999 mem: location 1116 is 97
9999 mem: location 1118 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy to is 1121
9999 mem: storing 97 in location 1121
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 0
9999 mem: storing 0 in location 1119
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1118 is 1120
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy to is 1101
9999 mem: storing 1120 in location 1101
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 0
9999 mem: location 1123 is 0
9999 mem: location 1117 is 1099
9999 mem: location 1118 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy to is 1123
9999 mem: storing 1099 in location 1123
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1099
9999 mem: location 1119 is 0
9999 mem: location 1118 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy to is 1122
9999 mem: storing 0 in location 1122
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1117 is 1099
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1099
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1124
9999 mem: storing 3 in location 1125
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1127
9999 mem: incrementing refcount of 1099: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1099
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1120
9999 mem: location 1102 is 0
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1099: 5 -> 4
9999 mem: storing 1120 in location 1110
9999 mem: incrementing refcount of 1120: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1109 is 0
9999 mem: storing 1 in location 1109
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1109 is 1
9999 mem: location 1108 is 3
9999 mem: storing 0 in location 1111
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1107 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1109 is 1
9998 run: address to copy is 1078
9998 run: its type is character
9999 mem: location 1078 is 98
9999 mem: storing 98 in location 1112
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1112 is 98
9999 mem: location 1110 is 1120
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1113
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1117
9999 mem: incrementing refcount of 1120: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1129
9999 mem: storing 1129 in location 1118
9999 mem: incrementing refcount of 1129: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1118 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 0
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1116 is 98
9999 mem: location 1118 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1130
9999 mem: storing 98 in location 1130
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1117 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1099
9999 mem: location 1117 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 0
9999 mem: storing 0 in location 1119
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1117 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1099
9999 mem: location 1118 is 1129
9999 mem: location 1117 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy to is 1122
9999 mem: storing 1129 in location 1122
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 0
9999 mem: location 1132 is 0
9999 mem: location 1117 is 1120
9999 mem: location 1118 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1132
9999 mem: storing 1120 in location 1132
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 0
9999 mem: location 1132 is 1120
9999 mem: location 1119 is 0
9999 mem: location 1118 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1131
9999 mem: storing 0 in location 1131
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1117 is 1120
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1120
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1127
9999 mem: incrementing refcount of 1120: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1120
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1128
9999 mem: incrementing refcount of 1129: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 5 -> 4
9999 mem: storing 1129 in location 1110
9999 mem: incrementing refcount of 1129: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1109 is 1
9999 mem: storing 2 in location 1109
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1109 is 2
9999 mem: location 1108 is 3
9999 mem: storing 0 in location 1111
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {text: ("address" "shared" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1107 is 1075
9999 mem: skipping refcount at 1075
9998 run: base address is 1076
9999 mem: location 1109 is 2
9998 run: address to copy is 1079
9998 run: its type is character
9999 mem: location 1079 is 99
9999 mem: storing 99 in location 1112
 104 run: insert_2 {c: "character"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1112 is 99
9999 mem: location 1110 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1113
 105 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1116
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1117
9999 mem: incrementing refcount of 1129: 3 -> 4
 105 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1133
9999 mem: storing 1133 in location 1118
9999 mem: incrementing refcount of 1133: 0 -> 1
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1118 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
9999 mem: location 1136 is 0
9999 mem: location 1116 is 99
9999 mem: location 1118 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy to is 1134
9999 mem: storing 99 in location 1134
 105 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1117 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 0
9999 mem: location 1132 is 1120
9999 mem: location 1117 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 0
9999 mem: storing 0 in location 1119
 105 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1117 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 0
9999 mem: location 1132 is 1120
9999 mem: location 1118 is 1133
9999 mem: location 1117 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy to is 1131
9999 mem: storing 1133 in location 1131
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 0
9999 mem: location 1117 is 1129
9999 mem: location 1118 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy to is 1136
9999 mem: storing 1129 in location 1136
 105 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1119 is 0
9999 mem: location 1118 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy to is 1135
9999 mem: storing 0 in location 1135
 105 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 0
9998 run: jump-if fell through
 105 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1117 is 1129
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1110 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1127
9999 mem: incrementing refcount of 1129: 4 -> 5
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1128
9999 mem: incrementing refcount of 1133: 1 -> 2
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 5 -> 4
9999 mem: storing 1133 in location 1110
9999 mem: incrementing refcount of 1133: 2 -> 3
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1109 is 2
9999 mem: storing 3 in location 1109
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1109 is 3
9999 mem: location 1108 is 3
9999 mem: storing 1 in location 1111
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 1
9998 run: jumping to instruction 18
 104 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1106 is 1080
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1080
9999 mem: decrementing refcount of 1080: 2 -> 1
9999 mem: storing 1080 in location 1073
9999 mem: incrementing refcount of 1080: 1 -> 2
 103 run: _, _, {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")} <- render {screen: ("address" "shared" "screen")}, {result: ("address" "shared" "editor-data")}
9999 mem: location 1070 is 1008
9999 mem: location 1073 is 1080
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 mem: new alloc: 1137
9999 mem: storing 26 in location 1138
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 4 -> 5
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1141
9999 mem: incrementing refcount of 1080: 2 -> 3
 104 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1141 is 1080
9998 run: jumping to instruction 5
 104 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1142
 104 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1140 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1127
9999 mem: incrementing refcount of 1008: 5 -> 6
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1127 is 1008
9998 run: jump-unless fell through
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1128
 105 run: return {height: "number"}
9999 mem: location 1128 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 5
9999 mem: storing 5 in location 1143
 104 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1144
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1082
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1082 is 1099
9999 mem: storing 1099 in location 1145
9999 mem: incrementing refcount of 1099: 4 -> 5
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1099
9999 mem: storing 1099 in location 1146
9999 mem: incrementing refcount of 1099: 5 -> 6
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1099
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1127
9999 mem: incrementing refcount of 1099: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1099
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1120
9999 mem: location 1102 is 0
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1099: 7 -> 6
9999 mem: storing 1120 in location 1145
9999 mem: incrementing refcount of 1120: 5 -> 6
 104 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1147
 104 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1148
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1150
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 0
9999 mem: storing 0 in location 1151
 104 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1099
9999 mem: storing 1099 in location 1152
9999 mem: incrementing refcount of 1099: 6 -> 7
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 6 -> 7
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 6 -> 7
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1120
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1151 is 0
9999 mem: storing 1 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 1
9998 run: jump-unless fell through
 104 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1099
9999 mem: decrementing refcount of 1099: 7 -> 6
9999 mem: storing 1099 in location 1152
9999 mem: incrementing refcount of 1099: 6 -> 7
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1145 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1121
9998 run: its type is "character"
9999 mem: location 1121 is 97
9999 mem: storing 97 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1165
9999 mem: storing 10 in location 1166
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 97
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 97
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 97
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 97
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 mem: new alloc: 1177
9999 mem: storing 23 in location 1178
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 7 -> 8
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 97
  90 print-character: 97 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 0
9999 mem: storing 5 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 2 -> 3
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 5
9999 mem: storing 1026 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 97
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1026
9999 mem: location 1199 is 1026
9999 mem: storing 97 in location 1026
9999 mem: storing 7 in location 1027
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1120
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1127
9999 mem: incrementing refcount of 1120: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1120
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1128
9999 mem: incrementing refcount of 1129: 4 -> 5
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 7 -> 6
9999 mem: storing 1129 in location 1145
9999 mem: incrementing refcount of 1129: 5 -> 6
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1099
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1127
9999 mem: incrementing refcount of 1099: 7 -> 8
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1099
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1120
9999 mem: location 1102 is 0
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1099: 8 -> 7
9999 mem: storing 1120 in location 1146
9999 mem: incrementing refcount of 1120: 7 -> 8
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1129
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 98
9999 mem: storing 98 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 98
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 98
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 98
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 98
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 8 -> 9
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 98
  90 print-character: 98 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
9990 schedule: print/render/new-editor/scenario_editor-wraps-line-on-insert
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 1
9999 mem: storing 6 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 3 -> 4
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 6
9999 mem: storing 1028 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 98
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1028
9999 mem: location 1199 is 1028
9999 mem: storing 98 in location 1028
9999 mem: storing 7 in location 1029
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1127
9999 mem: incrementing refcount of 1129: 6 -> 7
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1128
9999 mem: incrementing refcount of 1133: 3 -> 4
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 7 -> 6
9999 mem: storing 1133 in location 1145
9999 mem: incrementing refcount of 1133: 4 -> 5
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1120
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1127
9999 mem: incrementing refcount of 1120: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1120
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1128
9999 mem: incrementing refcount of 1129: 6 -> 7
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 9 -> 8
9999 mem: storing 1129 in location 1146
9999 mem: incrementing refcount of 1129: 7 -> 8
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 1
9999 mem: storing 2 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1133
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 99
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 99
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 99
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 99
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 99
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 9 -> 10
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 99
  90 print-character: 99 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 2
9999 mem: storing 7 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 4 -> 5
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 7
9999 mem: storing 1030 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 99
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1030
9999 mem: location 1199 is 1030
9999 mem: storing 99 in location 1030
9999 mem: storing 7 in location 1031
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1133
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1127
9999 mem: incrementing refcount of 1133: 5 -> 6
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1133
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1127 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1128
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1133: 6 -> 5
9999 mem: storing 0 in location 1145
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1127
9999 mem: incrementing refcount of 1129: 8 -> 9
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1128
9999 mem: incrementing refcount of 1133: 5 -> 6
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 9 -> 8
9999 mem: storing 1133 in location 1146
9999 mem: incrementing refcount of 1133: 6 -> 7
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 2
9999 mem: storing 3 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 0
9998 run: jumping to instruction 68
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1145 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1083
9999 mem: storing 0 in location 1083
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1161
 104 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1154 is 1
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1162
 104 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1163
 104 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1162 is 0
9999 mem: location 1163 is 0
9999 mem: storing 0 in location 1164
 104 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1164 is 0
9998 run: jumping to instruction 80
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 0
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1148 is 1
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1087
9999 mem: storing 1 in location 1087
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1150 is 1
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1088
9999 mem: storing 1 in location 1088
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1151 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1089
9999 mem: storing 0 in location 1089
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1152 is 1099
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1084
9999 mem: storing 1099 in location 1084
 104 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1140 is 1008
9999 mem: location 1141 is 1080
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9998 run: result 1 is 3
9998 run: result 2 is 1008
9998 run: result 3 is 1080
9999 mem: decrementing refcount of 1008: 10 -> 9
9999 mem: storing 1008 in location 1070
9999 mem: incrementing refcount of 1008: 9 -> 10
9999 mem: decrementing refcount of 1080: 3 -> 2
9999 mem: storing 1080 in location 1073
9999 mem: incrementing refcount of 1080: 2 -> 3
 103 run: {result: ("address" "shared" "editor-data"), "lookup": ()} <- put {result: ("address" "shared" "editor-data"), "lookup": ()}, {indent?: "offset"}, {1: "literal", "true": ()}
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1073 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1090
9999 mem: storing 1 in location 1090
 103 run: reply {result: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "1"}
9999 mem: location 1073 is 1080
9999 mem: location 1070 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1080
9999 mem: storing 1080 in location 2
9999 mem: incrementing refcount of 1080: 3 -> 4
 102 run: editor-render {screen: ("address" "shared" "screen")}, {2: ("address" "shared" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 2 is 1080
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1066
 103 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1069
9999 mem: incrementing refcount of 1008: 10 -> 11
 103 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1070
9999 mem: incrementing refcount of 1080: 4 -> 5
 103 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1071
 103 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1072
 103 run: {row: "number"}, {column: "number"} <- render {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}
9999 mem: location 1069 is 1008
9999 mem: location 1070 is 1080
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1137
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 11 -> 12
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1141
9999 mem: incrementing refcount of 1080: 5 -> 6
 104 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1141 is 1080
9998 run: jumping to instruction 5
 104 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1142
 104 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1140 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1127
9999 mem: incrementing refcount of 1008: 12 -> 13
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1127 is 1008
9998 run: jump-unless fell through
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1128
 105 run: return {height: "number"}
9999 mem: location 1128 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 5
9999 mem: storing 5 in location 1143
 104 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1144
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1082
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1082 is 1099
9999 mem: storing 1099 in location 1145
9999 mem: incrementing refcount of 1099: 7 -> 8
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1099
9999 mem: storing 1099 in location 1146
9999 mem: incrementing refcount of 1099: 8 -> 9
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1099
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1127
9999 mem: incrementing refcount of 1099: 9 -> 10
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1099
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1120
9999 mem: location 1102 is 0
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 8 -> 9
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1099: 10 -> 9
9999 mem: storing 1120 in location 1145
9999 mem: incrementing refcount of 1120: 9 -> 10
 104 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1147
 104 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1148
 104 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1150
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 0
9999 mem: storing 0 in location 1151
 104 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1099
9999 mem: storing 1099 in location 1152
9999 mem: incrementing refcount of 1099: 9 -> 10
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 13 -> 14
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 14 -> 13
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 13 -> 14
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1120
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1151 is 0
9999 mem: storing 1 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 1
9998 run: jump-unless fell through
 104 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1099
9999 mem: decrementing refcount of 1099: 10 -> 9
9999 mem: storing 1099 in location 1152
9999 mem: incrementing refcount of 1099: 9 -> 10
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1145 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1121
9998 run: its type is "character"
9999 mem: location 1121 is 97
9999 mem: storing 97 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 97
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 97
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 97
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 97
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 14 -> 15
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 97
  90 print-character: 97 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 0
9999 mem: storing 5 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 5 -> 6
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 5
9999 mem: storing 1026 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 97
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1026
9999 mem: location 1199 is 1026
9999 mem: storing 97 in location 1026
9999 mem: storing 7 in location 1027
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1120
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1127
9999 mem: incrementing refcount of 1120: 10 -> 11
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1120
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1128
9999 mem: incrementing refcount of 1129: 8 -> 9
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 11 -> 10
9999 mem: storing 1129 in location 1145
9999 mem: incrementing refcount of 1129: 9 -> 10
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1099
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1127
9999 mem: incrementing refcount of 1099: 10 -> 11
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1099
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1120
9999 mem: location 1102 is 0
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 10 -> 11
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1099: 11 -> 10
9999 mem: storing 1120 in location 1146
9999 mem: incrementing refcount of 1120: 11 -> 12
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1129
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 98
9999 mem: storing 98 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 98
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 98
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 98
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 98
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 98
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 15 -> 16
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 98
  90 print-character: 98 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 1
9999 mem: storing 6 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 6 -> 7
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 6
9999 mem: storing 1028 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 98
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1028
9999 mem: location 1199 is 1028
9999 mem: storing 98 in location 1028
9999 mem: storing 7 in location 1029
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1127
9999 mem: incrementing refcount of 1129: 10 -> 11
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1128
9999 mem: incrementing refcount of 1133: 7 -> 8
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 11 -> 10
9999 mem: storing 1133 in location 1145
9999 mem: incrementing refcount of 1133: 8 -> 9
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1120
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1127
9999 mem: incrementing refcount of 1120: 12 -> 13
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1120
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1128
9999 mem: incrementing refcount of 1129: 10 -> 11
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 13 -> 12
9999 mem: storing 1129 in location 1146
9999 mem: incrementing refcount of 1129: 11 -> 12
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 1
9999 mem: storing 2 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1133
9998 run: jump-unless fell through
 104 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 104 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 104 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1155
 104 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 104 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1156
 104 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 99
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
 105 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1168
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1169
 105 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1168 is 7
9999 mem: storing 1 in location 1170
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1169 is 99
9999 mem: storing 0 in location 1171
 105 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1171 is 0
9998 run: jumping to instruction 11
 105 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1172
 105 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1172 is 0
9998 run: jumping to instruction 20
 105 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1170 is 1
9998 run: jump-unless fell through
 105 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1169 is 99
9999 mem: storing 0 in location 1174
 105 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1174 is 0
9998 run: jumping to instruction 27
 105 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1168 is 7
9999 mem: storing 0 in location 1175
 105 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1175 is 0
9998 run: jumping to instruction 35
 105 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1168 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 99
9999 mem: storing 0 in location 1157
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 104 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 104 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 104 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 99
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 16 -> 17
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 99
  90 print-character: 99 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
9990 schedule: print/render/editor-render/scenario_editor-wraps-line-on-insert
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 2
9999 mem: storing 7 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 7 -> 8
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 7
9999 mem: storing 1030 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 99
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1030
9999 mem: location 1199 is 1030
9999 mem: storing 99 in location 1030
9999 mem: storing 7 in location 1031
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1133
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1127
9999 mem: incrementing refcount of 1133: 9 -> 10
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1133
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1127 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1128
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1133: 10 -> 9
9999 mem: storing 0 in location 1145
 104 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1129
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 105 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1127
9999 mem: incrementing refcount of 1129: 12 -> 13
 105 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1129
9998 run: jumping to instruction 4
 105 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1128
9999 mem: incrementing refcount of 1133: 9 -> 10
 105 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 13 -> 12
9999 mem: storing 1133 in location 1146
9999 mem: incrementing refcount of 1133: 10 -> 11
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 2
9999 mem: storing 3 in location 1149
 104 run: jump {: "offset"}
9998 run: jumping to instruction 20
 104 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 0
9998 run: jumping to instruction 68
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1145 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1083
9999 mem: storing 0 in location 1083
 104 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 104 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1151 is 0
9999 mem: storing 0 in location 1161
 104 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1154 is 1
9999 mem: location 1161 is 0
9999 mem: storing 0 in location 1162
 104 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1163
 104 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1162 is 0
9999 mem: location 1163 is 0
9999 mem: storing 0 in location 1164
 104 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1164 is 0
9998 run: jumping to instruction 80
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1148 is 1
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1087
9999 mem: storing 1 in location 1087
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1150 is 1
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1088
9999 mem: storing 1 in location 1088
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1151 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1089
9999 mem: storing 0 in location 1089
 104 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1152 is 1099
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1084
9999 mem: storing 1099 in location 1084
 104 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1148 is 1
9999 mem: location 1149 is 3
9999 mem: location 1140 is 1008
9999 mem: location 1141 is 1080
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9998 run: result 1 is 3
9999 mem: storing 1 in location 1073
9999 mem: storing 3 in location 1074
 103 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1069 is 1008
9999 mem: location 1074 is 3
9999 mem: location 1072 is 4
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1103
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 17 -> 18
 104 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1107
 104 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1108
 104 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1109
 104 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1110
9999 mem: storing 0 in location 1111
 104 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 104 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1110
 104 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 3
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 18 -> 19
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 3
9999 mem: storing 8 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 8 -> 9
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 8
9999 mem: storing 1032 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1032
9999 mem: location 1199 is 1032
9999 mem: storing 32 in location 1032
9999 mem: storing 7 in location 1033
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 19 -> 18
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 18 -> 19
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 3
9999 mem: storing 4 in location 1107
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 4
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 19 -> 20
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 4
9999 mem: storing 9 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 9 -> 10
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 9
9999 mem: storing 1034 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1034
9999 mem: location 1199 is 1034
9999 mem: storing 32 in location 1034
9999 mem: storing 7 in location 1035
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 20 -> 19
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 19 -> 20
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 4
9999 mem: storing 5 in location 1107
 104 run: jump {: "offset"}
9998 run: jumping to instruction 11
 104 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 5
9999 mem: location 1108 is 4
9999 mem: storing 1 in location 1112
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 1
9998 run: jumping to instruction 16
 104 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1106 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
 103 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1073 is 1
9999 mem: storing 2 in location 1073
 103 run: draw-horizontal {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}, {9480: "literal", "horizontal-dotted": ()}
9999 mem: location 1069 is 1008
9999 mem: location 1073 is 2
9999 mem: location 1071 is 0
9999 mem: location 1072 is 4
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1202
9999 mem: storing 12 in location 1203
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 20 -> 21
 104 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1206
 104 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1207
 104 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1208
 104 run: {style: "character"}, {style-found?: "boolean"} <- next-ingredient 
9999 mem: storing 9480 in location 1209
9999 mem: storing 1 in location 1210
 104 run: jump-if {style-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 1
9998 run: jumping to instruction 9
 104 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1211
9999 mem: storing 0 in location 1212
 104 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1212 is 0
9998 run: jump-if fell through
 104 run: {color: "number"} <- copy {245: "literal", "grey": ()}
9999 mem: storing 245 in location 1211
 104 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
 104 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jump-if fell through
 104 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1213
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {x: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1206 is 2
9999 mem: location 1207 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 21 -> 22
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 2
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 22 -> 21
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 21 -> 22
 104 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 0
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 104 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 104 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 22 -> 23
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 0
9999 mem: storing 10 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 10 -> 11
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 10
9999 mem: storing 1036 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1036
9999 mem: location 1199 is 1036
9999 mem: storing 9480 in location 1036
9999 mem: storing 245 in location 1037
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 0
9999 mem: storing 1 in location 1207
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 1
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 104 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 104 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 23 -> 24
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 1
9999 mem: storing 11 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 11 -> 12
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 11
9999 mem: storing 1038 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1038
9999 mem: location 1199 is 1038
9999 mem: storing 9480 in location 1038
9999 mem: storing 245 in location 1039
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 1
9999 mem: storing 2 in location 1207
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 2
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 104 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 104 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 24 -> 25
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 2
9999 mem: storing 12 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 12 -> 13
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 12
9999 mem: storing 1040 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1040
9999 mem: location 1199 is 1040
9999 mem: storing 9480 in location 1040
9999 mem: storing 245 in location 1041
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 2
9999 mem: storing 3 in location 1207
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 3
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 104 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 104 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 25 -> 26
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 3
9999 mem: storing 13 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 13 -> 14
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 13
9999 mem: storing 1042 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1042
9999 mem: location 1199 is 1042
9999 mem: storing 9480 in location 1042
9999 mem: storing 245 in location 1043
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 3
9999 mem: storing 4 in location 1207
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 4
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 104 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 104 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 26 -> 27
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 105 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 105 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 105 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 105 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 4
9999 mem: storing 14 in location 1194
 105 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 14 -> 15
 105 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 105 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 14
9999 mem: storing 1044 in location 1199
 105 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1044
9999 mem: location 1199 is 1044
9999 mem: storing 9480 in location 1044
9999 mem: storing 245 in location 1045
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 4
 104 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 4
9999 mem: storing 5 in location 1207
 104 run: jump {: "offset"}
9998 run: jumping to instruction 22
 104 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 5
9999 mem: location 1208 is 4
9999 mem: storing 0 in location 1215
 104 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 27
 104 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 3
 103 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1073 is 2
9999 mem: storing 3 in location 1073
 103 run: clear-screen-from {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1069 is 1008
9999 mem: location 1073 is 3
9999 mem: location 1071 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 4
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 27 -> 28
 104 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1004
 104 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 104 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1006
 104 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1007
 104 run: jump-if {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 3
9999 mem: location 1005 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 28 -> 29
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 3
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
9990 schedule: move-cursor/clear-screen-from/editor-render/scenario_editor-wraps-line-on-insert
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 29 -> 28
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 28 -> 29
 104 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1005 is 0
9999 mem: location 1007 is 4
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1103
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 29 -> 30
 105 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1107
 105 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1108
 105 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1109
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1110
9999 mem: storing 0 in location 1111
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 105 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1110
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 0
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 30 -> 31
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 0
9999 mem: storing 15 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 15 -> 16
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 15
9999 mem: storing 1046 in location 1199
 106 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1046
9999 mem: location 1199 is 1046
9999 mem: storing 32 in location 1046
9999 mem: storing 7 in location 1047
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 31 -> 30
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 30 -> 31
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 0
9999 mem: storing 1 in location 1107
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 1
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 31 -> 32
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 1
9999 mem: storing 16 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 16 -> 17
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 16
9999 mem: storing 1048 in location 1199
 106 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1048
9999 mem: location 1199 is 1048
9999 mem: storing 32 in location 1048
9999 mem: storing 7 in location 1049
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 32 -> 31
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 31 -> 32
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 1
9999 mem: storing 2 in location 1107
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 2
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 32 -> 33
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 2
9999 mem: storing 17 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 17 -> 18
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 17
9999 mem: storing 1050 in location 1199
 106 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1050
9999 mem: location 1199 is 1050
9999 mem: storing 32 in location 1050
9999 mem: storing 7 in location 1051
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 33 -> 32
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 32 -> 33
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 2
9999 mem: storing 3 in location 1107
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 3
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 33 -> 34
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 3
9999 mem: storing 18 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 18 -> 19
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 18
9999 mem: storing 1052 in location 1199
 106 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1052
9999 mem: location 1199 is 1052
9999 mem: storing 32 in location 1052
9999 mem: storing 7 in location 1053
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 34 -> 33
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 33 -> 34
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 3
9999 mem: storing 4 in location 1107
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 4
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 34 -> 35
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 106 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 106 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 106 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 106 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 106 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 106 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 106 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 106 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 106 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 106 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 4
9999 mem: storing 19 in location 1194
 106 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 19 -> 20
 106 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 106 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 106 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 19
9999 mem: storing 1054 in location 1199
 106 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1054
9999 mem: location 1199 is 1054
9999 mem: storing 32 in location 1054
9999 mem: storing 7 in location 1055
 106 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 106 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 35 -> 34
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 34 -> 35
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 4
9999 mem: storing 5 in location 1107
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 5
9999 mem: location 1108 is 4
9999 mem: storing 1 in location 1112
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 1
9998 run: jumping to instruction 16
 105 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1106 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
 104 run: clear-rest-of-screen {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 3
9999 mem: location 1006 is 0
9999 mem: location 1007 is 4
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1216
9999 mem: storing 7 in location 1217
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 35 -> 36
 105 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1220
 105 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1221
 105 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1222
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1220 is 3
9999 mem: storing 4 in location 1220
 105 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1219 is 1008
9999 mem: location 1220 is 4
9999 mem: location 1221 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 36 -> 37
 106 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1097
 106 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 4
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 37 -> 36
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 36 -> 37
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1219 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1127
9999 mem: incrementing refcount of 1008: 37 -> 38
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1127 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1128
 106 run: return {height: "number"}
9999 mem: location 1128 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1223
 105 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1220 is 4
9999 mem: location 1223 is 5
9999 mem: storing 0 in location 1224
 105 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 0
9998 run: jump-if fell through
 105 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1219 is 1008
9999 mem: location 1220 is 4
9999 mem: location 1221 is 0
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 38 -> 39
 106 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1097
 106 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 4
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 106 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 39 -> 38
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 38 -> 39
 105 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {left: "number"}, {right: "number"}
9999 mem: location 1219 is 1008
9999 mem: location 1221 is 0
9999 mem: location 1222 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1103
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 39 -> 40
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1107
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1108
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1109
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1110
9999 mem: storing 0 in location 1111
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1110
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 0
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 40 -> 41
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 0
9999 mem: storing 20 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 20 -> 21
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 20
9999 mem: storing 1056 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1056
9999 mem: location 1199 is 1056
9999 mem: storing 32 in location 1056
9999 mem: storing 7 in location 1057
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 41 -> 40
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 40 -> 41
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 0
9999 mem: storing 1 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 1
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 41 -> 42
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 1
9999 mem: storing 21 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 21 -> 22
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 21
9999 mem: storing 1058 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1058
9999 mem: location 1199 is 1058
9999 mem: storing 32 in location 1058
9999 mem: storing 7 in location 1059
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 42 -> 41
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 41 -> 42
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 1
9999 mem: storing 2 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 2
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 42 -> 43
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 2
9999 mem: storing 22 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 22 -> 23
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 22
9999 mem: storing 1060 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1060
9999 mem: location 1199 is 1060
9999 mem: storing 32 in location 1060
9999 mem: storing 7 in location 1061
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 43 -> 42
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 42 -> 43
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 2
9999 mem: storing 3 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 3
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 43 -> 44
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
9990 schedule: print/clear-line-delimited/clear-rest-of-screen/clear-screen-from/editor-render/scenario_editor-wraps-line-on-insert
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 3
9999 mem: storing 23 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 23 -> 24
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 23
9999 mem: storing 1062 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1062
9999 mem: location 1199 is 1062
9999 mem: storing 32 in location 1062
9999 mem: storing 7 in location 1063
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 44 -> 43
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 43 -> 44
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 3
9999 mem: storing 4 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 4
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 44 -> 45
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 4
9999 mem: storing 24 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 24 -> 25
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 24
9999 mem: storing 1064 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1064
9999 mem: location 1199 is 1064
9999 mem: storing 32 in location 1064
9999 mem: storing 7 in location 1065
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 45 -> 44
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 44 -> 45
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 4
9999 mem: storing 5 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 5
9999 mem: location 1108 is 4
9999 mem: storing 1 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 1
9998 run: jumping to instruction 16
 106 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1106 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1220 is 4
9999 mem: storing 5 in location 1220
 105 run: jump {: "offset"}
9998 run: jumping to instruction 9
 105 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1220 is 5
9999 mem: location 1223 is 5
9999 mem: storing 1 in location 1224
 105 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jumping to instruction 15
 105 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1219 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
 104 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1069 is 1008
9999 mem: location 1070 is 1080
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
 102 run: assume-console {"\n    type [e]\n  ": "literal-string"}
9993 parse: instruction: type
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"e": "literal-string"}
9992 load: after rewriting: type {"e": "literal-string"}
9999 mem: storing 'type' event starting at 1227
9999 mem: storing 'text' tag at 1227
9999 mem: storing character 101 at 1228
9999 mem: storing console in 1231
9999 mem: storing console data in 1233
 102 run: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {console: ("address" "shared" "console")}
9993 parse:   ingredient: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "shared" "screen")
9992 transform: console => ("address" "shared" "console")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")} -> {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1231
9999 mem: location 2 is 1080
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 1234
9999 mem: storing 14 in location 1235
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 45 -> 46
 104 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1231 in location 1238
9999 mem: incrementing refcount of 1231: 0 -> 1
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1239
9999 mem: incrementing refcount of 1080: 6 -> 7
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1240
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 0
9999 mem: storing 0 in location 1241
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1237 is 1008
9999 mem: location 1240 is 1
9999 mem: location 1241 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 46 -> 47
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 47 -> 46
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 46 -> 47
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1238 is 1231
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1202
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1231 in location 1205
9999 mem: incrementing refcount of 1231: 1 -> 2
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1205 is 1231
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 0
9999 mem: location 1233 is 1225
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1232
9998 run: its type is "number"
9999 mem: location 1232 is 0
9999 mem: storing 0 in location 1206
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 0
9999 mem: location 1233 is 1225
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1233
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1233 is 1225
9999 mem: storing 1225 in location 1207
9999 mem: incrementing refcount of 1225: 1 -> 2
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1207 is 1225
9999 mem: skipping refcount at 1225
9999 mem: storing 1 in location 1208
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1206 is 0
9999 mem: location 1208 is 1
9999 mem: storing 0 in location 1209
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1209 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1207 is 1225
9999 mem: skipping refcount at 1225
9998 run: base address is 1226
9999 mem: location 1206 is 0
9998 run: address to copy is 1227
9998 run: its type is event
9999 mem: location 1227 is 0
9999 mem: location 1228 is 101
9999 mem: location 1229 is 0
9999 mem: location 1230 is 0
9999 mem: storing 0 in location 1211
9999 mem: storing 101 in location 1212
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1206 is 0
9999 mem: storing 1 in location 1206
 105 run: {console: ("address" "shared" "console"), "lookup": ()} <- put {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 0
9999 mem: location 1233 is 1225
9999 mem: location 1206 is 1
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy to is 1232
9999 mem: storing 1 in location 1232
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1211 is 0
9999 mem: location 1212 is 101
9999 mem: location 1213 is 0
9999 mem: location 1214 is 0
9999 mem: location 1205 is 1231
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 101, 0, 0]
9998 run: result 1 is 1231
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1242
9999 mem: storing 101 in location 1243
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
9999 mem: decrementing refcount of 1231: 2 -> 1
9999 mem: storing 1231 in location 1238
9999 mem: incrementing refcount of 1231: 1 -> 2
9999 mem: storing 1 in location 1246
9999 mem: storing 0 in location 1247
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: ("address" "touch-event")} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1242 is 0
9999 mem: location 1243 is 101
9999 mem: location 1244 is 0
9999 mem: location 1245 is 0
9999 mem: storing 0 in location 1248
 104 run: jump-unless {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1248 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1248 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {e: "event"}
9999 mem: location 1237 is 1008
9999 mem: location 1239 is 1080
9999 mem: location 1242 is 0
9999 mem: location 1243 is 101
9999 mem: location 1244 is 0
9999 mem: location 1245 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 74
9999 mem: allocating size 76
9999 mem: new alloc: 1250
9999 mem: storing 74 in location 1251
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1253
9999 mem: incrementing refcount of 1008: 47 -> 48
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1254
9999 mem: incrementing refcount of 1080: 7 -> 8
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1255
9999 mem: storing 101 in location 1256
9999 mem: storing 0 in location 1257
9999 mem: storing 0 in location 1258
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1259
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1254 is 1080
9998 run: jumping to instruction 7
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1253 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1127
9999 mem: incrementing refcount of 1008: 48 -> 49
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1127 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1128
 106 run: return {width: "number"}
9999 mem: location 1128 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1260
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1253 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1127
9999 mem: incrementing refcount of 1008: 49 -> 50
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1127 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1128
 106 run: return {height: "number"}
9999 mem: location 1128 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1261
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1262
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1263
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1099
9999 mem: storing 1099 in location 1264
9999 mem: incrementing refcount of 1099: 10 -> 11
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1265
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 0
9999 mem: storing 0 in location 1266
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1267
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1266 is 0
9999 mem: storing 0 in location 1268
 105 run: {c: ("address" "character")} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1255 is 0
9999 mem: location 1256 is 101
9999 mem: location 1257 is 0
9999 mem: location 1258 is 0
9999 mem: storing 1256 in location 1269
 105 run: jump-unless {c: ("address" "character")}, {: "offset"}
9999 mem: location 1269 is 1256
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1270
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 71
 105 run: {undo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1282
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1282 is 0
9998 run: jumping to instruction 126
 105 run: {page-up?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1286
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1286 is 0
9998 run: jumping to instruction 164
 105 run: {page-down?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1297
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1297 is 0
9998 run: jumping to instruction 202
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1298
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1298 is 0
9998 run: jumping to instruction 223
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1301
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 245
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1302
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1302 is 0
9998 run: jumping to instruction 280
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1303
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1303 is 0
9998 run: jumping to instruction 315
 105 run: {delete-previous-character?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {8: "literal", "backspace": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1304
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1304 is 0
9998 run: jumping to instruction 354
 105 run: {tab?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {9: "literal", "tab": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1307
 105 run: jump-unless {tab?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 391
 105 run: {newline?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {10: "literal", "newline": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 0 in location 1311
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1311 is 0
9998 run: jumping to instruction 413
 105 run: {regular-character?: "boolean"} <- greater-or-equal {c: ("address" "character"), "lookup": ()}, {32: "literal", "space": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: storing 1 in location 1312
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1259
 105 run: jump-if {regular-character?: "boolean"}, {1: "offset"}
9999 mem: location 1312 is 1
9998 run: jumping to instruction 418
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1082
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1082 is 1099
9999 mem: storing 1099 in location 1290
9999 mem: incrementing refcount of 1099: 11 -> 12
 105 run: {cursor-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1099
9999 mem: storing 1099 in location 1308
9999 mem: incrementing refcount of 1099: 12 -> 13
 105 run: {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}, {go-render?: "boolean"} <- insert-at-cursor {editor: ("address" "shared" "editor-data")}, {c: ("address" "character"), "lookup": ()}, {screen: ("address" "shared" "screen")}
9999 mem: location 1254 is 1080
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 101
9999 mem: location 1253 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 mem: new alloc: 1326
9999 mem: storing 31 in location 1327
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1329
9999 mem: incrementing refcount of 1080: 8 -> 9
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1330
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1331
9999 mem: incrementing refcount of 1008: 50 -> 51
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1099
9999 mem: storing 1099 in location 1332
9999 mem: incrementing refcount of 1099: 13 -> 14
 106 run: insert_2 {c: "character"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1330 is 101
9999 mem: location 1332 is 1099
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1113
 107 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1117
9999 mem: incrementing refcount of 1099: 14 -> 15
 107 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1359
9999 mem: storing 1359 in location 1118
9999 mem: incrementing refcount of 1359: 0 -> 1
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1118 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 0
9999 mem: location 1361 is 0
9999 mem: location 1362 is 0
9999 mem: location 1116 is 101
9999 mem: location 1118 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy to is 1360
9999 mem: storing 101 in location 1360
 107 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1120
9999 mem: location 1102 is 0
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1120
9999 mem: storing 1120 in location 1119
9999 mem: incrementing refcount of 1120: 12 -> 13
 107 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1120
9999 mem: location 1102 is 0
9999 mem: location 1118 is 1359
9999 mem: location 1117 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy to is 1101
9999 mem: storing 1359 in location 1101
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 0
9999 mem: location 1362 is 0
9999 mem: location 1117 is 1099
9999 mem: location 1118 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy to is 1362
9999 mem: storing 1099 in location 1362
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 0
9999 mem: location 1362 is 1099
9999 mem: location 1119 is 1120
9999 mem: location 1118 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy to is 1361
9999 mem: storing 1120 in location 1361
 107 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1120
9998 run: jumping to instruction 11
 107 run: {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1119 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1099
9999 mem: location 1118 is 1359
9999 mem: location 1119 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy to is 1123
9999 mem: storing 1359 in location 1123
 107 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1117 is 1099
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1332 is 1099
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1127
9999 mem: incrementing refcount of 1099: 15 -> 16
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1099
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1359
9999 mem: location 1102 is 0
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1359
9999 mem: storing 1359 in location 1128
9999 mem: incrementing refcount of 1359: 1 -> 2
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1359
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1359
9999 mem: decrementing refcount of 1099: 16 -> 15
9999 mem: storing 1359 in location 1332
9999 mem: incrementing refcount of 1359: 2 -> 3
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1099
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1332 is 1359
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1084
9999 mem: storing 1359 in location 1084
 106 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1333
 106 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 0
9999 mem: storing 0 in location 1334
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1335
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1336
 106 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1333 is 1
9999 mem: storing 1 in location 1337
 106 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1334 is 0
9999 mem: storing 0 in location 1338
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1331 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1127
9999 mem: incrementing refcount of 1008: 51 -> 52
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1127 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1128
 107 run: return {width: "number"}
9999 mem: location 1128 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1339
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1331 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1127
9999 mem: incrementing refcount of 1008: 52 -> 53
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1127 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1127 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1128
 107 run: return {height: "number"}
9999 mem: location 1128 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1340
 106 run: {wrap-column: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1336 is 4
9999 mem: storing 3 in location 1341
 106 run: {at-wrap?: "boolean"} <- greater-or-equal {cursor-column: "number"}, {wrap-column: "number"}
9999 mem: location 1334 is 0
9999 mem: location 1341 is 3
9999 mem: storing 0 in location 1342
 106 run: jump-unless {at-wrap?: "boolean"}, {: "offset"}
9999 mem: location 1342 is 0
9998 run: jumping to instruction 45
 106 run: {cursor-column: "number"} <- add {cursor-column: "number"}, {1: "literal"}
9999 mem: location 1334 is 0
9999 mem: storing 1 in location 1334
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1334 is 1
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1089
9999 mem: storing 1 in location 1089
 106 run: {next: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1332 is 1359
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1359 in location 1127
9999 mem: incrementing refcount of 1359: 3 -> 4
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1359
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1120
9999 mem: location 1362 is 1099
9999 mem: location 1127 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1361
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1361 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 13 -> 14
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1120
9999 mem: storing 1120 in location 1349
9999 mem: incrementing refcount of 1120: 14 -> 15
 106 run: {at-end?: "boolean"} <- equal {next: ("address" "shared" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1349 is 1120
9999 mem: storing 0 in location 1350
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1350 is 0
9998 run: jumping to instruction 61
 106 run: jump-unless {next: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1349 is 1120
9998 run: jump-unless fell through
 106 run: {at-right?: "boolean"} <- greater-or-equal {cursor-column: "number"}, {screen-width: "number"}
9999 mem: location 1334 is 1
9999 mem: location 1339 is 5
9999 mem: storing 0 in location 1353
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1353 is 0
9998 run: jump-if fell through
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1332 is 1359
9999 mem: storing 1359 in location 1355
9999 mem: incrementing refcount of 1359: 4 -> 5
 106 run: move-cursor {screen: ("address" "shared" "screen")}, {save-row: "number"}, {save-column: "number"}
9999 mem: location 1331 is 1008
9999 mem: location 1337 is 1
9999 mem: location 1338 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 53 -> 54
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- copy {save-column: "number"}
9999 mem: location 1338 is 0
9999 mem: storing 0 in location 1356
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 0
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1359
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1120
9999 mem: location 1362 is 1099
9999 mem: location 1355 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1360
9998 run: its type is "character"
9999 mem: location 1360 is 101
9999 mem: storing 101 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 101
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 54 -> 55
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 101
  90 print-character: 101 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 101
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 0
9999 mem: storing 5 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 25 -> 26
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 101
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 5
9999 mem: storing 1026 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 101
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1026
9999 mem: location 1199 is 1026
9999 mem: storing 101 in location 1026
9999 mem: storing 7 in location 1027
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 0
9999 mem: storing 1 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1359
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1359 in location 1127
9999 mem: incrementing refcount of 1359: 5 -> 6
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1359
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1120
9999 mem: location 1362 is 1099
9999 mem: location 1127 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1361
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1361 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 15 -> 16
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1359: 6 -> 5
9999 mem: storing 1120 in location 1355
9999 mem: incrementing refcount of 1120: 16 -> 17
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 1
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1120
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1359
9999 mem: location 1355 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1121
9998 run: its type is "character"
9999 mem: location 1121 is 97
9999 mem: storing 97 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 97
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 97
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 55 -> 56
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 97
  90 print-character: 97 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 1
9999 mem: storing 6 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 26 -> 27
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 6
9999 mem: storing 1028 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 97
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1028
9999 mem: location 1199 is 1028
9999 mem: storing 97 in location 1028
9999 mem: storing 7 in location 1029
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 1
9999 mem: storing 2 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1120
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1127
9999 mem: incrementing refcount of 1120: 17 -> 18
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1120
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1359
9999 mem: location 1127 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1128
9999 mem: incrementing refcount of 1129: 12 -> 13
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 18 -> 17
9999 mem: storing 1129 in location 1355
9999 mem: incrementing refcount of 1129: 13 -> 14
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 2
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1129
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1355 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 98
9999 mem: storing 98 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 98
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 98
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 56 -> 57
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 98
  90 print-character: 98 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 2
9999 mem: storing 7 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 27 -> 28
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 7
9999 mem: storing 1030 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 98
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1030
9999 mem: location 1199 is 1030
9999 mem: storing 98 in location 1030
9999 mem: storing 7 in location 1031
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
9990 schedule: print/insert-at-cursor/handle-keyboard-event/editor-event-loop/run_1001/scenario_editor-wraps-line-on-insert
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 2
9999 mem: storing 3 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1127
9999 mem: incrementing refcount of 1129: 14 -> 15
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1127 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1128
9999 mem: incrementing refcount of 1133: 11 -> 12
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 15 -> 14
9999 mem: storing 1133 in location 1355
9999 mem: incrementing refcount of 1133: 12 -> 13
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 3
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1133
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1355 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 99
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 57 -> 58
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 3
9999 mem: storing 8 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 28 -> 29
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 8
9999 mem: storing 1032 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 99
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1032
9999 mem: location 1199 is 1032
9999 mem: storing 99 in location 1032
9999 mem: storing 7 in location 1033
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 3
9999 mem: storing 4 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1127
9999 mem: incrementing refcount of 1133: 13 -> 14
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1133
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1127 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1128
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1133: 14 -> 13
9999 mem: storing 0 in location 1355
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 4
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 0
9998 run: jumping to instruction 82
 106 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1348
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "2"}, {go-render?: "boolean"}
9999 mem: location 1329 is 1080
9999 mem: location 1331 is 1008
9999 mem: location 1348 is 0
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1080
9998 run: result 1 is 1008
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1080: 9 -> 8
9999 mem: storing 1080 in location 1254
9999 mem: incrementing refcount of 1080: 8 -> 9
9999 mem: decrementing refcount of 1008: 58 -> 57
9999 mem: storing 1008 in location 1253
9999 mem: incrementing refcount of 1008: 57 -> 58
9999 mem: storing 0 in location 1259
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1082
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1082 is 1099
9999 mem: storing 1099 in location 1292
9999 mem: incrementing refcount of 1099: 15 -> 16
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1265
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 1
9999 mem: storing 1 in location 1266
 105 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1091
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 1273
 105 run: jump-unless {undo: ("address" "shared" "list" "address" "shared" "operation")}, {: "offset"}
9999 mem: location 1273 is 0
9998 run: jumping to instruction 440
 105 run: {insert-from: ("address" "shared" "duplex-list" "character")} <- next_2 {cursor-before: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1308 is 1099
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1127
9999 mem: incrementing refcount of 1099: 16 -> 17
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1099
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1359
9999 mem: location 1102 is 0
9999 mem: location 1127 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1359
9999 mem: storing 1359 in location 1128
9999 mem: incrementing refcount of 1359: 5 -> 6
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1359
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1359
9999 mem: storing 1359 in location 1281
9999 mem: incrementing refcount of 1359: 6 -> 7
 105 run: {insert-to: ("address" "shared" "duplex-list" "character")} <- next_2 {insert-from: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1281 is 1359
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1359 in location 1127
9999 mem: incrementing refcount of 1359: 7 -> 8
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1127 is 1359
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1127 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1120
9999 mem: location 1362 is 1099
9999 mem: location 1127 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1361
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1361 is 1120
9999 mem: storing 1120 in location 1128
9999 mem: incrementing refcount of 1120: 17 -> 18
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1128 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1120
9999 mem: storing 1120 in location 1310
9999 mem: incrementing refcount of 1120: 18 -> 19
 105 run: {op: ("address" "shared" "operation")} <- new {operation: "type"}
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1165
9999 mem: storing 1165 in location 1272
9999 mem: incrementing refcount of 1165: 0 -> 1
 105 run: {op: ("address" "shared" "operation"), "lookup": ()} <- merge {0: "literal", "insert-operation": ()}, {save-row: "number", "before": ()}, {save-column: "number", "before": ()}, {top-before: ("address" "shared" "duplex-list" "character")}, {cursor-row: "number", "after": ()}, {cursor-column: "number", "after": ()}, {top-after: ("address" "shared" "duplex-list" "character")}, {insert-from: ("address" "shared" "duplex-list" "character")}, {insert-to: ("address" "shared" "duplex-list" "character")}, {1: "literal", "coalesce": ()}
9999 mem: location 1267 is 1
9999 mem: location 1268 is 0
9999 mem: location 1290 is 1099
9999 mem: location 1265 is 1
9999 mem: location 1266 is 1
9999 mem: location 1292 is 1099
9999 mem: location 1281 is 1359
9999 mem: location 1310 is 1120
9999 mem: location 1272 is 1165
9999 mem: skipping refcount at 1165
9999 mem: location 1272 is 1165
9999 mem: skipping refcount at 1165
9999 mem: storing 0 in location 1166
9999 mem: storing 1 in location 1167
9999 mem: storing 0 in location 1168
9999 mem: storing 1099 in location 1169
9999 mem: storing 1 in location 1170
9999 mem: storing 1 in location 1171
9999 mem: storing 1099 in location 1172
9999 mem: storing 1359 in location 1173
9999 mem: storing 1120 in location 1174
9999 mem: storing 1 in location 1175
 105 run: {editor: ("address" "shared" "editor-data")} <- add-operation {editor: ("address" "shared" "editor-data")}, {op: ("address" "shared" "operation")}
9999 mem: location 1254 is 1080
9999 mem: location 1272 is 1165
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1113
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1116
9999 mem: incrementing refcount of 1080: 9 -> 10
 106 run: {op: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1165 in location 1117
9999 mem: incrementing refcount of 1165: 1 -> 2
 106 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1091
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1091 is 0
9999 mem: storing 0 in location 1118
 106 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- push_4 {op: ("address" "shared" "operation")}, {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1117 is 1165
9999 mem: location 1118 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 107 run: {x: ("address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1165 in location 1096
9999 mem: incrementing refcount of 1165: 2 -> 3
 107 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1097
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation")} <- new {(list address shared operation): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1363
9999 mem: storing 1363 in location 1098
9999 mem: incrementing refcount of 1363: 0 -> 1
 107 run: {result: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()} <- merge {x: ("address" "shared" "operation")}, {in: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1096 is 1165
9999 mem: location 1097 is 0
9999 mem: location 1098 is 1363
9999 mem: skipping refcount at 1363
9999 mem: location 1098 is 1363
9999 mem: skipping refcount at 1363
9999 mem: storing 1165 in location 1364
9999 mem: storing 0 in location 1365
 107 run: return {result: ("address" "shared" "list" "address" "shared" "operation"), "same-as-ingredient": "1"}
9999 mem: location 1098 is 1363
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1363
9999 mem: storing 1363 in location 1118
9999 mem: incrementing refcount of 1363: 1 -> 2
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}, {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1118 is 1363
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1091
9999 mem: storing 1363 in location 1091
 106 run: {redo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1092
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1092 is 0
9999 mem: storing 0 in location 1119
 106 run: {redo: ("address" "shared" "list" "address" "shared" "operation")} <- copy {0: "literal"}
9999 mem: storing 0 in location 1119
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {redo: "offset"}, {redo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1119 is 0
9999 mem: location 1116 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1092
9999 mem: storing 0 in location 1092
 106 run: return {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1116 is 1080
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1080
9999 mem: decrementing refcount of 1080: 10 -> 9
9999 mem: storing 1080 in location 1254
9999 mem: incrementing refcount of 1080: 9 -> 10
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1253 is 1008
9999 mem: location 1254 is 1080
9999 mem: location 1259 is 0
9999 abandon: saving in free-list of size 76
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1080
9998 run: result 2 is 0
9999 mem: decrementing refcount of 1008: 58 -> 57
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 57 -> 58
9999 mem: decrementing refcount of 1080: 10 -> 9
9999 mem: storing 1080 in location 1239
9999 mem: incrementing refcount of 1080: 9 -> 10
9999 mem: storing 0 in location 1249
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 0
9998 run: jumping to instruction 25
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1240
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 1
9999 mem: storing 1 in location 1241
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1237 is 1008
9999 mem: location 1240 is 1
9999 mem: location 1241 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 58 -> 59
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 59 -> 58
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 58 -> 59
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1238 is 1231
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1202
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1231 in location 1205
9999 mem: incrementing refcount of 1231: 2 -> 3
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1205 is 1231
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 1
9999 mem: location 1233 is 1225
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1232
9998 run: its type is "number"
9999 mem: location 1232 is 1
9999 mem: storing 1 in location 1206
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9999 mem: location 1232 is 1
9999 mem: location 1233 is 1225
9999 mem: location 1205 is 1231
9999 mem: skipping refcount at 1231
9998 run: address to copy is 1233
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1233 is 1225
9999 mem: storing 1225 in location 1207
9999 mem: incrementing refcount of 1225: 2 -> 3
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1207 is 1225
9999 mem: skipping refcount at 1225
9999 mem: storing 1 in location 1208
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1206 is 1
9999 mem: location 1208 is 1
9999 mem: storing 1 in location 1209
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1209 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "shared" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1124
9999 mem: storing 1124 in location 1210
9999 mem: incrementing refcount of 1124: 0 -> 1
 105 run: return {dummy: ("address" "shared" "event"), "lookup": ()}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1210 is 1124
9999 mem: skipping refcount at 1124
9999 mem: location 1125 is 0
9999 mem: location 1126 is 0
9999 mem: location 1127 is 0
9999 mem: location 1128 is 0
9999 mem: location 1205 is 1231
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1231
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1242
9999 mem: storing 0 in location 1243
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
9999 mem: decrementing refcount of 1231: 3 -> 2
9999 mem: storing 1231 in location 1238
9999 mem: incrementing refcount of 1231: 2 -> 3
9999 mem: storing 1 in location 1246
9999 mem: storing 1 in location 1247
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {console: ("address" "shared" "console"), "same-as-ingredient": "1"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1237 is 1008
9999 mem: location 1238 is 1231
9999 mem: location 1239 is 1080
9999 abandon: saving in free-list of size 16
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .     .\n    .eabc .\n    .┈┈┈┈┈.\n    .     .\n    .     .\n  ": "literal-string"}
 102 run: assume-console {"\n    type [f]\n  ": "literal-string"}
9993 parse: instruction: type
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"f": "literal-string"}
9992 load: after rewriting: type {"f": "literal-string"}
9999 mem: storing 'type' event starting at 1368
9999 mem: storing 'text' tag at 1368
9999 mem: storing character 102 at 1369
9999 mem: storing console in 1372
9999 mem: storing console data in 1374
 102 run: run {"\n    editor-event-loop screen:address:shared:screen, console:address:shared:console, 2:address:shared:editor-data\n  ": "literal-string"}
9991 parse: --- defining run_1002
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "shared" "screen")}
9993 parse:   ingredient: {console: ("address" "shared" "console")}
9993 parse:   ingredient: {2: ("address" "shared" "editor-data")}
9992 load: after rewriting: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 parse: recipe run_1002 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1002
9991 transform: --- rewrite 'stash' instructions in recipe run_1002
9991 transform: --- fill in reply ingredients from header for recipe run_1002
9991 transform: --- deduce types for recipe run_1002
9992 transform: screen => ("address" "shared" "screen")
9992 transform: console => ("address" "shared" "console")
9991 transform: --- check for invalid types in recipe run_1002
9991 transform: --- collect surrounding spaces for recipe run_1002
9991 transform: --- transform names for recipe run_1002
9991 transform: --- resolve ambiguous calls for recipe run_1002
9992 transform: instruction editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9992 transform: checking variant (strict) 0: recipe editor-event-loop {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")} -> {screen: ("address" "shared" "screen")} {console: ("address" "shared" "console")} {editor: ("address" "shared" "editor-data")}
9991 transform: --- compute instruction operations for recipe run_1002
9991 transform: --- transform braces for recipe run_1002
9992 transform: editor-event-loop ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1002
9991 transform: --- type-check 'call' instructions inside recipe run_1002
9991 transform: --- type-check calls inside recipe run_1002
9991 transform: --- convert 'new' to 'allocate' for recipe run_1002
9991 transform: --- type-check merge instructions in recipe run_1002
9991 transform: --- check types of reply instructions in recipe run_1002
9991 transform: --- checking reply instructions against header for run_1002
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop {screen: ("address" "shared" "screen")}, {console: ("address" "shared" "console")}, {2: ("address" "shared" "editor-data")}
9999 mem: location 900 is 1008
9999 mem: location 901 is 1372
9999 mem: location 2 is 1080
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 abandon: picking up space from free-list of size 16
9999 mem: new alloc from free list: 1234
 104 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 59 -> 60
 104 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1372 in location 1238
9999 mem: incrementing refcount of 1372: 0 -> 1
 104 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1239
9999 mem: incrementing refcount of 1080: 10 -> 11
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1240
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 1
9999 mem: storing 1 in location 1241
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1237 is 1008
9999 mem: location 1240 is 1
9999 mem: location 1241 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 60 -> 61
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 61 -> 60
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 60 -> 61
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1238 is 1372
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1202
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1372 in location 1205
9999 mem: incrementing refcount of 1372: 1 -> 2
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1205 is 1372
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9999 mem: location 1373 is 0
9999 mem: location 1374 is 1366
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9998 run: address to copy is 1373
9998 run: its type is "number"
9999 mem: location 1373 is 0
9999 mem: storing 0 in location 1206
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9999 mem: location 1373 is 0
9999 mem: location 1374 is 1366
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9998 run: address to copy is 1374
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1374 is 1366
9999 mem: storing 1366 in location 1207
9999 mem: incrementing refcount of 1366: 1 -> 2
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1207 is 1366
9999 mem: skipping refcount at 1366
9999 mem: storing 1 in location 1208
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1206 is 0
9999 mem: location 1208 is 1
9999 mem: storing 0 in location 1209
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1209 is 0
9998 run: jumping to instruction 12
 105 run: {result: "event"} <- index {buf: ("address" "shared" "array" "event"), "lookup": ()}, {current-event-index: "number"}
9999 mem: location 1207 is 1366
9999 mem: skipping refcount at 1366
9998 run: base address is 1367
9999 mem: location 1206 is 0
9998 run: address to copy is 1368
9998 run: its type is event
9999 mem: location 1368 is 0
9999 mem: location 1369 is 102
9999 mem: location 1370 is 0
9999 mem: location 1371 is 0
9999 mem: storing 0 in location 1211
9999 mem: storing 102 in location 1212
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
 105 run: {current-event-index: "number"} <- add {current-event-index: "number"}, {1: "literal"}
9999 mem: location 1206 is 0
9999 mem: storing 1 in location 1206
 105 run: {console: ("address" "shared" "console"), "lookup": ()} <- put {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}, {current-event-index: "number"}
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9999 mem: location 1373 is 0
9999 mem: location 1374 is 1366
9999 mem: location 1206 is 1
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9998 run: address to copy to is 1373
9999 mem: storing 1 in location 1373
 105 run: return {result: "event"}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {0: "literal", "quit": ()}
9999 mem: location 1211 is 0
9999 mem: location 1212 is 102
9999 mem: location 1213 is 0
9999 mem: location 1214 is 0
9999 mem: location 1205 is 1372
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 102, 0, 0]
9998 run: result 1 is 1372
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1242
9999 mem: storing 102 in location 1243
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
9999 mem: decrementing refcount of 1372: 2 -> 1
9999 mem: storing 1372 in location 1238
9999 mem: incrementing refcount of 1372: 1 -> 2
9999 mem: storing 1 in location 1246
9999 mem: storing 0 in location 1247
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 0
9998 run: jump-if fell through
 104 run: trace {10: "literal"}, {"app": "literal-string"}, {"next-event": "literal-string"}
  10 app: next-event 
 104 run: {t: ("address" "touch-event")} <- maybe-convert {e: "event"}, {touch: "variant"}
9999 mem: location 1242 is 0
9999 mem: location 1243 is 102
9999 mem: location 1244 is 0
9999 mem: location 1245 is 0
9999 mem: storing 0 in location 1248
 104 run: jump-unless {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1248 is 0
9998 run: jumping to instruction 18
 104 run: jump-if {t: ("address" "touch-event")}, {: "offset"}
9999 mem: location 1248 is 0
9998 run: jump-if fell through
 104 run: {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {go-render?: "boolean"} <- handle-keyboard-event {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}, {e: "event"}
9999 mem: location 1237 is 1008
9999 mem: location 1239 is 1080
9999 mem: location 1242 is 0
9999 mem: location 1243 is 102
9999 mem: location 1244 is 0
9999 mem: location 1245 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 74
9999 mem: allocating size 76
9999 abandon: picking up space from free-list of size 76
9999 mem: new alloc from free list: 1250
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1253
9999 mem: incrementing refcount of 1008: 61 -> 62
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1254
9999 mem: incrementing refcount of 1080: 11 -> 12
 105 run: {e: "event"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1255
9999 mem: storing 102 in location 1256
9999 mem: storing 0 in location 1257
9999 mem: storing 0 in location 1258
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1259
 105 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1254 is 1080
9998 run: jumping to instruction 7
 105 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1253 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1375
9999 mem: storing 3 in location 1376
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1378
9999 mem: incrementing refcount of 1008: 62 -> 63
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1378 is 1008
9998 run: jump-unless fell through
 106 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1379
 106 run: return {width: "number"}
9999 mem: location 1379 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1260
 105 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1253 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1378
9999 mem: incrementing refcount of 1008: 63 -> 64
 106 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1378 is 1008
9998 run: jump-unless fell through
 106 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1379
 106 run: return {height: "number"}
9999 mem: location 1379 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1261
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1262
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1263
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1359
9999 mem: storing 1359 in location 1264
9999 mem: incrementing refcount of 1359: 8 -> 9
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1265
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 1
9999 mem: storing 1 in location 1266
 105 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1265 is 1
9999 mem: storing 1 in location 1267
 105 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1266 is 1
9999 mem: storing 1 in location 1268
 105 run: {c: ("address" "character")} <- maybe-convert {e: "event"}, {text: "variant"}
9999 mem: location 1255 is 0
9999 mem: location 1256 is 102
9999 mem: location 1257 is 0
9999 mem: location 1258 is 0
9999 mem: storing 1256 in location 1269
 105 run: jump-unless {c: ("address" "character")}, {: "offset"}
9999 mem: location 1269 is 1256
9998 run: jump-unless fell through
 105 run: trace {10: "literal"}, {"app": "literal-string"}, {"handle-keyboard-event: special character": "literal-string"}
  10 app: handle-keyboard-event: special character 
 105 run: {redo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {25: "literal", "ctrl-y": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1270
 105 run: jump-unless {redo?: "boolean"}, {: "offset"}
9999 mem: location 1270 is 0
9998 run: jumping to instruction 71
 105 run: {undo?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {26: "literal", "ctrl-z": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1282
 105 run: jump-unless {undo?: "boolean"}, {: "offset"}
9999 mem: location 1282 is 0
9998 run: jumping to instruction 126
 105 run: {page-up?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {2: "literal", "ctrl-b": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1286
 105 run: jump-unless {page-up?: "boolean"}, {: "offset"}
9999 mem: location 1286 is 0
9998 run: jumping to instruction 164
 105 run: {page-down?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {6: "literal", "ctrl-f": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1297
 105 run: jump-unless {page-down?: "boolean"}, {: "offset"}
9999 mem: location 1297 is 0
9998 run: jumping to instruction 202
 105 run: {delete-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1298
 105 run: jump-unless {delete-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1298 is 0
9998 run: jumping to instruction 223
 105 run: {delete-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {21: "literal", "ctrl-u": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1301
 105 run: jump-unless {delete-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1301 is 0
9998 run: jumping to instruction 245
 105 run: {move-to-end-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {5: "literal", "ctrl-e": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1302
 105 run: jump-unless {move-to-end-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1302 is 0
9998 run: jumping to instruction 280
 105 run: {move-to-start-of-line?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {1: "literal", "ctrl-a": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1303
 105 run: jump-unless {move-to-start-of-line?: "boolean"}, {: "offset"}
9999 mem: location 1303 is 0
9998 run: jumping to instruction 315
 105 run: {delete-previous-character?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {8: "literal", "backspace": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1304
 105 run: jump-unless {delete-previous-character?: "boolean"}, {: "offset"}
9999 mem: location 1304 is 0
9998 run: jumping to instruction 354
 105 run: {tab?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {9: "literal", "tab": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1307
 105 run: jump-unless {tab?: "boolean"}, {: "offset"}
9999 mem: location 1307 is 0
9998 run: jumping to instruction 391
 105 run: {newline?: "boolean"} <- equal {c: ("address" "character"), "lookup": ()}, {10: "literal", "newline": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 0 in location 1311
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1311 is 0
9998 run: jumping to instruction 413
 105 run: {regular-character?: "boolean"} <- greater-or-equal {c: ("address" "character"), "lookup": ()}, {32: "literal", "space": ()}
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: storing 1 in location 1312
 105 run: {go-render?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 1259
 105 run: jump-if {regular-character?: "boolean"}, {1: "offset"}
9999 mem: location 1312 is 1
9998 run: jumping to instruction 418
 105 run: {top-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1082
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1082 is 1099
9999 mem: storing 1099 in location 1290
9999 mem: incrementing refcount of 1099: 17 -> 18
 105 run: {cursor-before: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1359
9999 mem: storing 1359 in location 1308
9999 mem: incrementing refcount of 1359: 9 -> 10
 105 run: {editor: ("address" "shared" "editor-data")}, {screen: ("address" "shared" "screen")}, {go-render?: "boolean"} <- insert-at-cursor {editor: ("address" "shared" "editor-data")}, {c: ("address" "character"), "lookup": ()}, {screen: ("address" "shared" "screen")}
9999 mem: location 1254 is 1080
9999 mem: location 1269 is 1256
9999 mem: location 1256 is 102
9999 mem: location 1253 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 31
9999 mem: allocating size 33
9999 abandon: picking up space from free-list of size 33
9999 mem: new alloc from free list: 1326
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1329
9999 mem: incrementing refcount of 1080: 12 -> 13
 106 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1330
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1331
9999 mem: incrementing refcount of 1008: 64 -> 65
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1359
9999 mem: storing 1359 in location 1332
9999 mem: incrementing refcount of 1359: 10 -> 11
 106 run: insert_2 {c: "character"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1330 is 102
9999 mem: location 1332 is 1359
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
9999 mem: new alloc from free list: 1113
 107 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1116
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1359 in location 1117
9999 mem: incrementing refcount of 1359: 11 -> 12
 107 run: {new-node: ("address" "shared" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1380
9999 mem: storing 1380 in location 1118
9999 mem: incrementing refcount of 1380: 0 -> 1
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}, {x: "character"}
9999 mem: location 1118 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 0
9999 mem: location 1382 is 0
9999 mem: location 1383 is 0
9999 mem: location 1116 is 102
9999 mem: location 1118 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy to is 1381
9999 mem: storing 102 in location 1381
 107 run: {next-node: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1117 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1120
9999 mem: location 1362 is 1099
9999 mem: location 1117 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1361
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1361 is 1120
9999 mem: storing 1120 in location 1119
9999 mem: incrementing refcount of 1120: 19 -> 20
 107 run: {in: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1117 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1120
9999 mem: location 1362 is 1099
9999 mem: location 1118 is 1380
9999 mem: location 1117 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy to is 1361
9999 mem: storing 1380 in location 1361
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {in: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 0
9999 mem: location 1383 is 0
9999 mem: location 1117 is 1359
9999 mem: location 1118 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy to is 1383
9999 mem: storing 1359 in location 1383
 107 run: {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {new-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1118 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 0
9999 mem: location 1383 is 1359
9999 mem: location 1119 is 1120
9999 mem: location 1118 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy to is 1382
9999 mem: storing 1120 in location 1382
 107 run: jump-if {next-node: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1119 is 1120
9998 run: jumping to instruction 11
 107 run: {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()} <- put {next-node: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {new-node: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1119 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1359
9999 mem: location 1118 is 1380
9999 mem: location 1119 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy to is 1123
9999 mem: storing 1380 in location 1123
 107 run: reply {in: ("address" "shared" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1117 is 1359
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1332 is 1359
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1359 in location 1378
9999 mem: incrementing refcount of 1359: 12 -> 13
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1359
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1380
9999 mem: location 1362 is 1099
9999 mem: location 1378 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1361
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1361 is 1380
9999 mem: storing 1380 in location 1379
9999 mem: incrementing refcount of 1380: 1 -> 2
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1380
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1380
9999 mem: decrementing refcount of 1359: 13 -> 12
9999 mem: storing 1380 in location 1332
9999 mem: incrementing refcount of 1380: 2 -> 3
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1359
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1332 is 1380
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1084
9999 mem: storing 1380 in location 1084
 106 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1333
 106 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 1
9999 mem: storing 1 in location 1334
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1335
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1336
 106 run: {save-row: "number"} <- copy {cursor-row: "number"}
9999 mem: location 1333 is 1
9999 mem: storing 1 in location 1337
 106 run: {save-column: "number"} <- copy {cursor-column: "number"}
9999 mem: location 1334 is 1
9999 mem: storing 1 in location 1338
 106 run: {screen-width: "number"} <- screen-width {screen: ("address" "shared" "screen")}
9999 mem: location 1331 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1378
9999 mem: incrementing refcount of 1008: 65 -> 66
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1378 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1379
 107 run: return {width: "number"}
9999 mem: location 1379 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1339
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1331 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1378
9999 mem: incrementing refcount of 1008: 66 -> 67
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1378 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1379
 107 run: return {height: "number"}
9999 mem: location 1379 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1340
 106 run: {wrap-column: "number"} <- subtract {right: "number"}, {1: "literal"}
9999 mem: location 1336 is 4
9999 mem: storing 3 in location 1341
 106 run: {at-wrap?: "boolean"} <- greater-or-equal {cursor-column: "number"}, {wrap-column: "number"}
9999 mem: location 1334 is 1
9999 mem: location 1341 is 3
9999 mem: storing 0 in location 1342
 106 run: jump-unless {at-wrap?: "boolean"}, {: "offset"}
9999 mem: location 1342 is 0
9998 run: jumping to instruction 45
 106 run: {cursor-column: "number"} <- add {cursor-column: "number"}, {1: "literal"}
9999 mem: location 1334 is 1
9999 mem: storing 2 in location 1334
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 1
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1334 is 2
9999 mem: location 1329 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1089
9999 mem: storing 2 in location 1089
 106 run: {next: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1332 is 1380
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1380 in location 1378
9999 mem: incrementing refcount of 1380: 3 -> 4
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1380
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 1120
9999 mem: location 1383 is 1359
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1382
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1382 is 1120
9999 mem: storing 1120 in location 1379
9999 mem: incrementing refcount of 1120: 20 -> 21
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1120
9999 mem: storing 1120 in location 1349
9999 mem: incrementing refcount of 1120: 21 -> 22
 106 run: {at-end?: "boolean"} <- equal {next: ("address" "shared" "duplex-list" "character")}, {0: "literal", "null": ()}
9999 mem: location 1349 is 1120
9999 mem: storing 0 in location 1350
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1350 is 0
9998 run: jumping to instruction 61
 106 run: jump-unless {next: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1349 is 1120
9998 run: jump-unless fell through
 106 run: {at-right?: "boolean"} <- greater-or-equal {cursor-column: "number"}, {screen-width: "number"}
9999 mem: location 1334 is 2
9999 mem: location 1339 is 5
9999 mem: storing 0 in location 1353
 106 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1353 is 0
9998 run: jump-if fell through
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- copy {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1332 is 1380
9999 mem: storing 1380 in location 1355
9999 mem: incrementing refcount of 1380: 4 -> 5
 106 run: move-cursor {screen: ("address" "shared" "screen")}, {save-row: "number"}, {save-column: "number"}
9999 mem: location 1331 is 1008
9999 mem: location 1337 is 1
9999 mem: location 1338 is 1
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 67 -> 68
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1098
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- copy {save-column: "number"}
9999 mem: location 1338 is 1
9999 mem: storing 1 in location 1356
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 1
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1380
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 1120
9999 mem: location 1383 is 1359
9999 mem: location 1355 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1381
9998 run: its type is "character"
9999 mem: location 1381 is 102
9999 mem: storing 102 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 102
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 102
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 68 -> 69
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 102
  90 print-character: 102 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 102
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 1
9999 mem: storing 6 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 29 -> 30
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 102
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 6
9999 mem: storing 1028 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 102
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1028
9999 mem: location 1199 is 1028
9999 mem: storing 102 in location 1028
9999 mem: storing 7 in location 1029
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 1
9999 mem: storing 2 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1380
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1380 in location 1378
9999 mem: incrementing refcount of 1380: 5 -> 6
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1380
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 1120
9999 mem: location 1383 is 1359
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1382
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1382 is 1120
9999 mem: storing 1120 in location 1379
9999 mem: incrementing refcount of 1120: 22 -> 23
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1380: 6 -> 5
9999 mem: storing 1120 in location 1355
9999 mem: incrementing refcount of 1120: 23 -> 24
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 2
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1120
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1380
9999 mem: location 1355 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1121
9998 run: its type is "character"
9999 mem: location 1121 is 97
9999 mem: storing 97 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 97
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 97
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 69 -> 70
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 97
  90 print-character: 97 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 2
9999 mem: storing 7 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 30 -> 31
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 7
9999 mem: storing 1030 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 97
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1030
9999 mem: location 1199 is 1030
9999 mem: storing 97 in location 1030
9999 mem: storing 7 in location 1031
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 2
9999 mem: storing 3 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1120
9999 trace: incrementing callstack depth to 6
9990 schedule: next_2/insert-at-cursor/handle-keyboard-event/editor-event-loop/run_1002/scenario_editor-wraps-line-on-insert
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1378
9999 mem: incrementing refcount of 1120: 24 -> 25
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1120
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1380
9999 mem: location 1378 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1379
9999 mem: incrementing refcount of 1129: 14 -> 15
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 25 -> 24
9999 mem: storing 1129 in location 1355
9999 mem: incrementing refcount of 1129: 15 -> 16
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 3
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1129
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1355 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 98
9999 mem: storing 98 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 98
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 98
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 70 -> 71
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 98
  90 print-character: 98 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 3
9999 mem: storing 8 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 31 -> 32
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 8
9999 mem: storing 1032 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 98
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1032
9999 mem: location 1199 is 1032
9999 mem: storing 98 in location 1032
9999 mem: storing 7 in location 1033
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 3
9999 mem: storing 4 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1378
9999 mem: incrementing refcount of 1129: 16 -> 17
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1378 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1379
9999 mem: incrementing refcount of 1133: 13 -> 14
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 17 -> 16
9999 mem: storing 1133 in location 1355
9999 mem: incrementing refcount of 1133: 14 -> 15
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 4
9999 mem: location 1336 is 4
9999 mem: storing 0 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 0
9998 run: jumping to instruction 74
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1355 is 1133
9998 run: jump-unless fell through
 106 run: {currc: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1355 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1355 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1357
 106 run: {at-newline?: "boolean"} <- equal {currc: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1357 is 99
9999 mem: storing 0 in location 1358
 106 run: jump-if {at-newline?: "boolean"}, {: "offset"}
9999 mem: location 1358 is 0
9998 run: jump-if fell through
 106 run: print {screen: ("address" "shared" "screen")}, {currc: "character"}
9999 mem: location 1331 is 1008
9999 mem: location 1357 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 71 -> 72
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1182
9999 mem: storing 0 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 0
9998 run: jump-if fell through
 107 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1182
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 4
9999 mem: storing 9 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 32 -> 33
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 9
9999 mem: storing 1034 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 99
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1034
9999 mem: location 1199 is 1034
9999 mem: storing 99 in location 1034
9999 mem: storing 7 in location 1035
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr-column: "number"} <- add {curr-column: "number"}, {1: "literal"}
9999 mem: location 1356 is 4
9999 mem: storing 5 in location 1356
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1355 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1378
9999 mem: incrementing refcount of 1133: 15 -> 16
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1133
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1378 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1379
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1133: 16 -> 15
9999 mem: storing 0 in location 1355
 106 run: jump {: "offset"}
9998 run: jumping to instruction 70
 106 run: {go-render?: "boolean"} <- copy {1: "literal", "true": ()}
9999 mem: storing 1 in location 1348
 106 run: {at-right?: "boolean"} <- greater-than {curr-column: "number"}, {right: "number"}
9999 mem: location 1356 is 5
9999 mem: location 1336 is 4
9999 mem: storing 1 in location 1353
 106 run: jump-unless {at-right?: "boolean"}, {1: "offset"}
9999 mem: location 1353 is 1
9998 run: jump-unless fell through
 106 run: reply {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "0"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "2"}, {go-render?: "boolean"}
9999 mem: location 1329 is 1080
9999 mem: location 1331 is 1008
9999 mem: location 1348 is 1
9999 abandon: saving in free-list of size 33
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1080
9998 run: result 1 is 1008
9998 run: result 2 is 1
9999 mem: decrementing refcount of 1080: 13 -> 12
9999 mem: storing 1080 in location 1254
9999 mem: incrementing refcount of 1080: 12 -> 13
9999 mem: decrementing refcount of 1008: 72 -> 71
9999 mem: storing 1008 in location 1253
9999 mem: incrementing refcount of 1008: 71 -> 72
9999 mem: storing 1 in location 1259
 105 run: {top-after: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1082
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1082 is 1099
9999 mem: storing 1099 in location 1292
9999 mem: incrementing refcount of 1099: 18 -> 19
 105 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1265
 105 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 2
9999 mem: storing 2 in location 1266
 105 run: {undo: ("address" "shared" "list" "address" "shared" "operation")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {undo: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1091
9998 run: its type is ("address" "shared" "list" "address" "shared" "operation")
9999 mem: location 1091 is 1363
9999 mem: storing 1363 in location 1273
9999 mem: incrementing refcount of 1363: 2 -> 3
 105 run: jump-unless {undo: ("address" "shared" "list" "address" "shared" "operation")}, {: "offset"}
9999 mem: location 1273 is 1363
9998 run: jump-unless fell through
 105 run: {op: ("address" "shared" "operation")} <- first_3 {undo: ("address" "shared" "list" "address" "shared" "operation")}
9999 mem: location 1273 is 1363
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 106 run: {in: ("address" "shared" "list" "address" "shared" "operation")} <- next-ingredient-without-typechecking 
9999 mem: storing 1363 in location 1378
9999 mem: incrementing refcount of 1363: 3 -> 4
 106 run: {result: ("address" "shared" "operation")} <- get {in: ("address" "shared" "list" "address" "shared" "operation"), "lookup": ()}, {value: "offset"}
9999 mem: location 1378 is 1363
9999 mem: skipping refcount at 1363
9999 mem: location 1364 is 1165
9999 mem: location 1365 is 0
9999 mem: location 1378 is 1363
9999 mem: skipping refcount at 1363
9998 run: address to copy is 1364
9998 run: its type is ("address" "shared" "operation")
9999 mem: location 1364 is 1165
9999 mem: storing 1165 in location 1379
9999 mem: incrementing refcount of 1165: 3 -> 4
 106 run: reply {result: ("address" "shared" "operation")}
9999 mem: location 1379 is 1165
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1165
9999 mem: storing 1165 in location 1272
9999 mem: incrementing refcount of 1165: 4 -> 5
 105 run: {typing: ("address" "insert-operation")} <- maybe-convert {op: ("address" "shared" "operation"), "lookup": ()}, {typing: "variant"}
9999 mem: location 1272 is 1165
9999 mem: skipping refcount at 1165
9999 mem: location 1166 is 0
9999 mem: location 1167 is 1
9999 mem: location 1168 is 0
9999 mem: location 1169 is 1099
9999 mem: location 1170 is 1
9999 mem: location 1171 is 1
9999 mem: location 1172 is 1099
9999 mem: location 1173 is 1359
9999 mem: location 1174 is 1120
9999 mem: location 1175 is 1
9999 mem: location 1176 is 0
9999 mem: location 1272 is 1165
9999 mem: skipping refcount at 1165
9999 mem: storing 1167 in location 1280
 105 run: jump-unless {typing: ("address" "insert-operation")}, {: "offset"}
9999 mem: location 1280 is 1167
9998 run: jump-unless fell through
 105 run: {previous-coalesce-tag: "number"} <- get {typing: ("address" "insert-operation"), "lookup": ()}, {tag: "offset"}
9999 mem: location 1280 is 1167
9999 mem: location 1167 is 1
9999 mem: location 1168 is 0
9999 mem: location 1169 is 1099
9999 mem: location 1170 is 1
9999 mem: location 1171 is 1
9999 mem: location 1172 is 1099
9999 mem: location 1173 is 1359
9999 mem: location 1174 is 1120
9999 mem: location 1175 is 1
9999 mem: location 1280 is 1167
9998 run: address to copy is 1175
9998 run: its type is "number"
9999 mem: location 1175 is 1
9999 mem: storing 1 in location 1293
 105 run: jump-unless {previous-coalesce-tag: "number"}, {: "offset"}
9999 mem: location 1293 is 1
9998 run: jump-unless fell through
 105 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1254 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1380
9999 mem: decrementing refcount of 1359: 12 -> 11
9999 mem: storing 1380 in location 1264
9999 mem: incrementing refcount of 1380: 5 -> 6
 105 run: {insert-until: ("address" "shared" "duplex-list" "character")} <- next_2 {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1264 is 1380
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 106 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1380 in location 1378
9999 mem: incrementing refcount of 1380: 6 -> 7
 106 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1380
9998 run: jumping to instruction 4
 106 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 1120
9999 mem: location 1383 is 1359
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1382
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1382 is 1120
9999 mem: storing 1120 in location 1379
9999 mem: incrementing refcount of 1120: 24 -> 25
 106 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1120
9999 mem: storing 1120 in location 1309
9999 mem: incrementing refcount of 1120: 25 -> 26
 105 run: {typing: ("address" "insert-operation"), "lookup": ()} <- put {typing: ("address" "insert-operation"), "lookup": ()}, {insert-until: "offset"}, {insert-until: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1280 is 1167
9999 mem: location 1167 is 1
9999 mem: location 1168 is 0
9999 mem: location 1169 is 1099
9999 mem: location 1170 is 1
9999 mem: location 1171 is 1
9999 mem: location 1172 is 1099
9999 mem: location 1173 is 1359
9999 mem: location 1174 is 1120
9999 mem: location 1175 is 1
9999 mem: location 1309 is 1120
9999 mem: location 1280 is 1167
9998 run: address to copy to is 1174
9999 mem: storing 1120 in location 1174
 105 run: {typing: ("address" "insert-operation"), "lookup": ()} <- put {typing: ("address" "insert-operation"), "lookup": ()}, {after-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1280 is 1167
9999 mem: location 1167 is 1
9999 mem: location 1168 is 0
9999 mem: location 1169 is 1099
9999 mem: location 1170 is 1
9999 mem: location 1171 is 1
9999 mem: location 1172 is 1099
9999 mem: location 1173 is 1359
9999 mem: location 1174 is 1120
9999 mem: location 1175 is 1
9999 mem: location 1265 is 1
9999 mem: location 1280 is 1167
9998 run: address to copy to is 1170
9999 mem: storing 1 in location 1170
 105 run: {typing: ("address" "insert-operation"), "lookup": ()} <- put {typing: ("address" "insert-operation"), "lookup": ()}, {after-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1280 is 1167
9999 mem: location 1167 is 1
9999 mem: location 1168 is 0
9999 mem: location 1169 is 1099
9999 mem: location 1170 is 1
9999 mem: location 1171 is 1
9999 mem: location 1172 is 1099
9999 mem: location 1173 is 1359
9999 mem: location 1174 is 1120
9999 mem: location 1175 is 1
9999 mem: location 1266 is 2
9999 mem: location 1280 is 1167
9998 run: address to copy to is 1171
9999 mem: storing 2 in location 1171
 105 run: {typing: ("address" "insert-operation"), "lookup": ()} <- put {typing: ("address" "insert-operation"), "lookup": ()}, {after-top-of-screen: "offset"}, {top-after: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1280 is 1167
9999 mem: location 1167 is 1
9999 mem: location 1168 is 0
9999 mem: location 1169 is 1099
9999 mem: location 1170 is 1
9999 mem: location 1171 is 2
9999 mem: location 1172 is 1099
9999 mem: location 1173 is 1359
9999 mem: location 1174 is 1120
9999 mem: location 1175 is 1
9999 mem: location 1292 is 1099
9999 mem: location 1280 is 1167
9998 run: address to copy to is 1172
9999 mem: storing 1099 in location 1172
 105 run: jump {+handle-keyboard-event_0_27+done-adding-insert-operation: "label"}
9998 run: jumping to instruction 447
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}, {go-render?: "boolean"}
9999 mem: location 1253 is 1008
9999 mem: location 1254 is 1080
9999 mem: location 1259 is 1
9999 abandon: saving in free-list of size 76
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9998 run: result 1 is 1080
9998 run: result 2 is 1
9999 mem: decrementing refcount of 1008: 72 -> 71
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 71 -> 72
9999 mem: decrementing refcount of 1080: 13 -> 12
9999 mem: storing 1080 in location 1239
9999 mem: incrementing refcount of 1080: 12 -> 13
9999 mem: storing 1 in location 1249
 104 run: jump-unless {go-render?: "boolean"}, {: "offset"}
9999 mem: location 1249 is 1
9998 run: jump-unless fell through
 104 run: {screen: ("address" "shared" "screen")} <- editor-render {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}
9999 mem: location 1237 is 1008
9999 mem: location 1239 is 1080
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1066
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1069
9999 mem: incrementing refcount of 1008: 72 -> 73
 105 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1070
9999 mem: incrementing refcount of 1080: 13 -> 14
 105 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1071
 105 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1070 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1072
 105 run: {row: "number"}, {column: "number"} <- render {screen: ("address" "shared" "screen")}, {editor: ("address" "shared" "editor-data")}
9999 mem: location 1069 is 1008
9999 mem: location 1070 is 1080
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 26
9999 mem: allocating size 28
9999 abandon: picking up space from free-list of size 28
9999 mem: new alloc from free list: 1137
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 73 -> 74
 106 run: {editor: ("address" "shared" "editor-data")} <- next-ingredient-without-typechecking 
9999 mem: storing 1080 in location 1141
9999 mem: incrementing refcount of 1080: 14 -> 15
 106 run: jump-if {editor: ("address" "shared" "editor-data")}, {1: "offset"}
9999 mem: location 1141 is 1080
9998 run: jumping to instruction 5
 106 run: {left: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {left: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1085
9998 run: its type is "number"
9999 mem: location 1085 is 0
9999 mem: storing 0 in location 1142
 106 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1140 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1378
9999 mem: incrementing refcount of 1008: 74 -> 75
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1378 is 1008
9998 run: jump-unless fell through
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1379
 107 run: return {height: "number"}
9999 mem: location 1379 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1143
 106 run: {right: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {right: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1086
9998 run: its type is "number"
9999 mem: location 1086 is 4
9999 mem: storing 4 in location 1144
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {top-of-screen: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1082
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1082 is 1099
9999 mem: storing 1099 in location 1145
9999 mem: incrementing refcount of 1099: 19 -> 20
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- copy {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1099
9999 mem: storing 1099 in location 1146
9999 mem: incrementing refcount of 1099: 20 -> 21
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1099
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1378
9999 mem: incrementing refcount of 1099: 21 -> 22
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1099
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1359
9999 mem: location 1102 is 0
9999 mem: location 1378 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1359
9999 mem: storing 1359 in location 1379
9999 mem: incrementing refcount of 1359: 11 -> 12
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1359
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1359
9999 mem: decrementing refcount of 1099: 22 -> 21
9999 mem: storing 1359 in location 1145
9999 mem: incrementing refcount of 1359: 12 -> 13
 106 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1147
 106 run: {row: "number"} <- copy {1: "literal", "top": ()}
9999 mem: storing 1 in location 1148
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 106 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1150
 106 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 2
9999 mem: storing 2 in location 1151
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1084
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1084 is 1380
9999 mem: storing 1380 in location 1152
9999 mem: incrementing refcount of 1380: 7 -> 8
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 1
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 75 -> 76
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 76 -> 75
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 75 -> 76
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1359
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1151 is 2
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1380
9999 mem: location 1362 is 1099
9999 mem: location 1145 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1360
9998 run: its type is "character"
9999 mem: location 1360 is 101
9999 mem: storing 101 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 101
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1384
9999 mem: storing 10 in location 1385
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1387
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1388
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1387 is 7
9999 mem: storing 1 in location 1389
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1388 is 101
9999 mem: storing 0 in location 1390
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1390 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1391
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1391 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1388 is 101
9999 mem: storing 0 in location 1393
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1394
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1387 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 101
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 106 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 101
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 76 -> 77
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 101 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 101
  90 print-character: 101 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 101
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 0
9999 mem: storing 5 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 33 -> 34
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 101
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 5
9999 mem: storing 1026 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 101
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1026
9999 mem: location 1199 is 1026
9999 mem: storing 101 in location 1026
9999 mem: storing 7 in location 1027
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1359
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1359 in location 1378
9999 mem: incrementing refcount of 1359: 13 -> 14
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1359
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1380
9999 mem: location 1362 is 1099
9999 mem: location 1378 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1361
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1361 is 1380
9999 mem: storing 1380 in location 1379
9999 mem: incrementing refcount of 1380: 8 -> 9
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1380
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1380
9999 mem: decrementing refcount of 1359: 14 -> 13
9999 mem: storing 1380 in location 1145
9999 mem: incrementing refcount of 1380: 9 -> 10
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1099
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1099 in location 1378
9999 mem: incrementing refcount of 1099: 21 -> 22
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1099
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1099
9999 mem: skipping refcount at 1099
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1359
9999 mem: location 1102 is 0
9999 mem: location 1378 is 1099
9999 mem: skipping refcount at 1099
9998 run: address to copy is 1101
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1101 is 1359
9999 mem: storing 1359 in location 1379
9999 mem: incrementing refcount of 1359: 13 -> 14
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1359
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1359
9999 mem: decrementing refcount of 1099: 22 -> 21
9999 mem: storing 1359 in location 1146
9999 mem: incrementing refcount of 1359: 14 -> 15
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 106 run: jump {: "offset"}
9998 run: jumping to instruction 20
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1380
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 2
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 1120
9999 mem: location 1383 is 1359
9999 mem: location 1145 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1381
9998 run: its type is "character"
9999 mem: location 1381 is 102
9999 mem: storing 102 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 102
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1384
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1387
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1388
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1387 is 7
9999 mem: storing 1 in location 1389
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1388 is 102
9999 mem: storing 0 in location 1390
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1390 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1391
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1391 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1388 is 102
9999 mem: storing 0 in location 1393
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1394
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1387 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 102
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 106 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 102
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 77 -> 78
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 102 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 102
  90 print-character: 102 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 102
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 1
9999 mem: storing 6 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 34 -> 35
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 102
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 6
9999 mem: storing 1028 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 102
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1028
9999 mem: location 1199 is 1028
9999 mem: storing 102 in location 1028
9999 mem: storing 7 in location 1029
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1380
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1380 in location 1378
9999 mem: incrementing refcount of 1380: 10 -> 11
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1380
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 1120
9999 mem: location 1383 is 1359
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1382
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1382 is 1120
9999 mem: storing 1120 in location 1379
9999 mem: incrementing refcount of 1120: 26 -> 27
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1380: 11 -> 10
9999 mem: storing 1120 in location 1145
9999 mem: incrementing refcount of 1120: 27 -> 28
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1359
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1359 in location 1378
9999 mem: incrementing refcount of 1359: 15 -> 16
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1359
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1359
9999 mem: skipping refcount at 1359
9999 mem: location 1360 is 101
9999 mem: location 1361 is 1380
9999 mem: location 1362 is 1099
9999 mem: location 1378 is 1359
9999 mem: skipping refcount at 1359
9998 run: address to copy is 1361
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1361 is 1380
9999 mem: storing 1380 in location 1379
9999 mem: incrementing refcount of 1380: 10 -> 11
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1380
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1380
9999 mem: decrementing refcount of 1359: 16 -> 15
9999 mem: storing 1380 in location 1146
9999 mem: incrementing refcount of 1380: 11 -> 12
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 1
9999 mem: storing 2 in location 1149
 106 run: jump {: "offset"}
9998 run: jumping to instruction 20
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1120
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1151 is 2
9999 mem: storing 1 in location 1155
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 1
9998 run: jump-unless fell through
 106 run: {before-cursor: ("address" "shared" "duplex-list" "character")} <- copy {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1380
9999 mem: decrementing refcount of 1380: 12 -> 11
9999 mem: storing 1380 in location 1152
9999 mem: incrementing refcount of 1380: 11 -> 12
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1380
9999 mem: location 1145 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1121
9998 run: its type is "character"
9999 mem: location 1121 is 97
9999 mem: storing 97 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 97
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1384
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1387
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1388
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1387 is 7
9999 mem: storing 1 in location 1389
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1388 is 97
9999 mem: storing 0 in location 1390
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1390 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1391
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1391 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1388 is 97
9999 mem: storing 0 in location 1393
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1394
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1387 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 97
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 2
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 106 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 97
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 78 -> 79
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 97
  90 print-character: 97 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
9990 schedule: print/render/editor-render/editor-event-loop/run_1002/scenario_editor-wraps-line-on-insert
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 2
9999 mem: storing 7 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 35 -> 36
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 97
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 7
9999 mem: storing 1030 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 97
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1030
9999 mem: location 1199 is 1030
9999 mem: storing 97 in location 1030
9999 mem: storing 7 in location 1031
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1120
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1378
9999 mem: incrementing refcount of 1120: 28 -> 29
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1120
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1380
9999 mem: location 1378 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1379
9999 mem: incrementing refcount of 1129: 16 -> 17
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 29 -> 28
9999 mem: storing 1129 in location 1145
9999 mem: incrementing refcount of 1129: 17 -> 18
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1380
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1380 in location 1378
9999 mem: incrementing refcount of 1380: 12 -> 13
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1380
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9999 mem: location 1381 is 102
9999 mem: location 1382 is 1120
9999 mem: location 1383 is 1359
9999 mem: location 1378 is 1380
9999 mem: skipping refcount at 1380
9998 run: address to copy is 1382
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1382 is 1120
9999 mem: storing 1120 in location 1379
9999 mem: incrementing refcount of 1120: 28 -> 29
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1120
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1120
9999 mem: decrementing refcount of 1380: 13 -> 12
9999 mem: storing 1120 in location 1146
9999 mem: incrementing refcount of 1120: 29 -> 30
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 2
9999 mem: storing 3 in location 1149
 106 run: jump {: "offset"}
9998 run: jumping to instruction 20
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1129
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1151 is 2
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1145 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1130
9998 run: its type is "character"
9999 mem: location 1130 is 98
9999 mem: storing 98 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 98
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1384
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1387
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1388
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1387 is 7
9999 mem: storing 1 in location 1389
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1388 is 98
9999 mem: storing 0 in location 1390
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1390 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1391
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1391 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1388 is 98
9999 mem: storing 0 in location 1393
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1394
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1387 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 98
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 3
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 106 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 98
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 79 -> 80
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 98
  90 print-character: 98 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 3
9999 mem: storing 8 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 36 -> 37
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 98
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 8
9999 mem: storing 1032 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 98
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1032
9999 mem: location 1199 is 1032
9999 mem: storing 98 in location 1032
9999 mem: storing 7 in location 1033
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1378
9999 mem: incrementing refcount of 1129: 18 -> 19
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1378 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1379
9999 mem: incrementing refcount of 1133: 15 -> 16
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 19 -> 18
9999 mem: storing 1133 in location 1145
9999 mem: incrementing refcount of 1133: 16 -> 17
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1120
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1120 in location 1378
9999 mem: incrementing refcount of 1120: 30 -> 31
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1120
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1120
9999 mem: skipping refcount at 1120
9999 mem: location 1121 is 97
9999 mem: location 1122 is 1129
9999 mem: location 1123 is 1380
9999 mem: location 1378 is 1120
9999 mem: skipping refcount at 1120
9998 run: address to copy is 1122
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1122 is 1129
9999 mem: storing 1129 in location 1379
9999 mem: incrementing refcount of 1129: 18 -> 19
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1129
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1129
9999 mem: decrementing refcount of 1120: 31 -> 30
9999 mem: storing 1129 in location 1146
9999 mem: incrementing refcount of 1129: 19 -> 20
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 3
9999 mem: storing 4 in location 1149
 106 run: jump {: "offset"}
9998 run: jumping to instruction 20
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1133
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 1
9999 mem: location 1150 is 1
9999 mem: storing 1 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 1
9998 run: jump-unless fell through
 106 run: {at-cursor?: "boolean"} <- equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 4
9999 mem: location 1151 is 2
9999 mem: storing 0 in location 1155
 106 run: jump-unless {at-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1155 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1384
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1387
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1388
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1387 is 7
9999 mem: storing 1 in location 1389
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1388 is 99
9999 mem: storing 0 in location 1390
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1390 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1391
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1391 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1388 is 99
9999 mem: storing 0 in location 1393
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1394
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1387 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 99
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 4
9999 mem: location 1144 is 4
9999 mem: storing 1 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 1
9998 run: jump-unless fell through
 106 run: {wrap-icon: "character"} <- copy {8617: "literal", "loop-back-to-left": ()}
9999 mem: storing 8617 in location 1160
 106 run: print {screen: ("address" "shared" "screen")}, {wrap-icon: "character"}, {245: "literal", "grey": ()}
9999 mem: location 1140 is 1008
9999 mem: location 1160 is 8617
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 80 -> 81
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 8617 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 8617
  90 print-character: 8617 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 8617
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 1
9999 mem: location 1186 is 5
9999 mem: storing 5 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 5
9999 mem: location 1190 is 4
9999 mem: storing 9 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 37 -> 38
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 8617
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 9
9999 mem: storing 1034 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 8617
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1034
9999 mem: location 1199 is 1034
9999 mem: storing 8617 in location 1034
9999 mem: storing 245 in location 1035
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {column: "number"} <- copy {left: "number"}
9999 mem: location 1142 is 0
9999 mem: storing 0 in location 1149
 106 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1148 is 1
9999 mem: storing 2 in location 1148
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1148 is 2
9999 mem: location 1149 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 81 -> 82
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1097
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 2
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 2 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 82 -> 81
9999 mem: storing 1008 in location 1140
9999 mem: incrementing refcount of 1008: 81 -> 82
 106 run: jump {+next-character: "label"}
9998 run: jumping to instruction 21
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 1133
9998 run: jump-unless fell through
 106 run: {off-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1143 is 5
9999 mem: storing 0 in location 1153
 106 run: jump-if {off-screen?: "boolean"}, {: "offset"}
9999 mem: location 1153 is 0
9998 run: jump-if fell through
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1154
 106 run: jump-unless {at-cursor-row?: "boolean"}, {: "offset"}
9999 mem: location 1154 is 0
9998 run: jumping to instruction 30
 106 run: {c: "character"} <- get {curr: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1145 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1134
9998 run: its type is "character"
9999 mem: location 1134 is 99
9999 mem: storing 99 in location 1156
 106 run: {color: "number"} <- get-color {color: "number"}, {c: "character"}
9999 mem: location 1147 is 7
9999 mem: location 1156 is 99
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1384
 107 run: {color: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 7 in location 1387
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1388
 107 run: {color-is-white?: "boolean"} <- equal {color: "number"}, {7: "literal", "white": ()}
9999 mem: location 1387 is 7
9999 mem: storing 1 in location 1389
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-comment?: "boolean"} <- equal {c: "character"}, {35: "literal", "#": ()}
9999 mem: location 1388 is 99
9999 mem: storing 0 in location 1390
 107 run: jump-unless {starting-comment?: "boolean"}, {: "offset"}
9999 mem: location 1390 is 0
9998 run: jumping to instruction 11
 107 run: {color-is-blue?: "boolean"} <- equal {color: "number"}, {12: "literal", "lightblue": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1391
 107 run: jump-unless {color-is-blue?: "boolean"}, {: "offset"}
9999 mem: location 1391 is 0
9998 run: jumping to instruction 20
 107 run: jump-unless {color-is-white?: "boolean"}, {: "offset"}
9999 mem: location 1389 is 1
9998 run: jump-unless fell through
 107 run: {starting-assignment?: "boolean"} <- equal {c: "character"}, {60: "literal", "<": ()}
9999 mem: location 1388 is 99
9999 mem: storing 0 in location 1393
 107 run: jump-unless {starting-assignment?: "boolean"}, {: "offset"}
9999 mem: location 1393 is 0
9998 run: jumping to instruction 27
 107 run: {color-is-red?: "boolean"} <- equal {color: "number"}, {1: "literal", "red": ()}
9999 mem: location 1387 is 7
9999 mem: storing 0 in location 1394
 107 run: jump-unless {color-is-red?: "boolean"}, {: "offset"}
9999 mem: location 1394 is 0
9998 run: jumping to instruction 35
 107 run: return {color: "number", "same-as-ingredient": "0"}
9999 mem: location 1387 is 7
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 7
9999 mem: storing 7 in location 1147
 106 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1156 is 99
9999 mem: storing 0 in location 1157
 106 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1157 is 0
9998 run: jumping to instruction 52
 106 run: {at-right?: "boolean"} <- equal {column: "number"}, {right: "number"}
9999 mem: location 1149 is 0
9999 mem: location 1144 is 4
9999 mem: storing 0 in location 1159
 106 run: jump-unless {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1159 is 0
9998 run: jumping to instruction 62
 106 run: print {screen: ("address" "shared" "screen")}, {c: "character"}, {color: "number"}
9999 mem: location 1140 is 1008
9999 mem: location 1156 is 99
9999 mem: location 1147 is 7
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 82 -> 83
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 0 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1184
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 99
  90 print-character: 99 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 0
9999 mem: storing 10 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 38 -> 39
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 99
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 10
9999 mem: storing 1036 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 99
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1036
9999 mem: location 1199 is 1036
9999 mem: storing 99 in location 1036
9999 mem: storing 7 in location 1037
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {curr: ("address" "shared" "duplex-list" "character")} <- next_2 {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1145 is 1133
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1133 in location 1378
9999 mem: incrementing refcount of 1133: 17 -> 18
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1133
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1133
9999 mem: skipping refcount at 1133
9999 mem: location 1134 is 99
9999 mem: location 1135 is 0
9999 mem: location 1136 is 1129
9999 mem: location 1378 is 1133
9999 mem: skipping refcount at 1133
9998 run: address to copy is 1135
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1379
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1133: 18 -> 17
9999 mem: storing 0 in location 1145
 106 run: {prev: ("address" "shared" "duplex-list" "character")} <- next_2 {prev: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1146 is 1129
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 107 run: {in: ("address" "shared" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1129 in location 1378
9999 mem: incrementing refcount of 1129: 20 -> 21
 107 run: jump-if {in: ("address" "shared" "duplex-list" "character")}, {1: "offset"}
9999 mem: location 1378 is 1129
9998 run: jumping to instruction 4
 107 run: {result: ("address" "shared" "duplex-list" "character")} <- get {in: ("address" "shared" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1378 is 1129
9999 mem: skipping refcount at 1129
9999 mem: location 1130 is 98
9999 mem: location 1131 is 1133
9999 mem: location 1132 is 1120
9999 mem: location 1378 is 1129
9999 mem: skipping refcount at 1129
9998 run: address to copy is 1131
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1131 is 1133
9999 mem: storing 1133 in location 1379
9999 mem: incrementing refcount of 1133: 17 -> 18
 107 run: reply {result: ("address" "shared" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1379 is 1133
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1133
9999 mem: decrementing refcount of 1129: 21 -> 20
9999 mem: storing 1133 in location 1146
9999 mem: incrementing refcount of 1133: 18 -> 19
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1149 is 0
9999 mem: storing 1 in location 1149
 106 run: jump {: "offset"}
9998 run: jumping to instruction 20
 106 run: jump-unless {curr: ("address" "shared" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1145 is 0
9998 run: jumping to instruction 68
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom-of-screen: "offset"}, {curr: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1145 is 0
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1083
9999 mem: storing 0 in location 1083
 106 run: {at-cursor-row?: "boolean"} <- equal {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1154
 106 run: {cursor-outside-line?: "boolean"} <- lesser-or-equal {column: "number"}, {cursor-column: "number"}
9999 mem: location 1149 is 1
9999 mem: location 1151 is 2
9999 mem: storing 1 in location 1161
 106 run: {before-cursor-on-same-line?: "boolean"} <- and {at-cursor-row?: "boolean"}, {cursor-outside-line?: "boolean"}
9999 mem: location 1154 is 0
9999 mem: location 1161 is 1
9999 mem: storing 0 in location 1162
 106 run: {above-cursor-row?: "boolean"} <- lesser-than {row: "number"}, {cursor-row: "number"}
9999 mem: location 1148 is 2
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1163
 106 run: {before-cursor?: "boolean"} <- or {before-cursor-on-same-line?: "boolean"}, {above-cursor-row?: "boolean"}
9999 mem: location 1162 is 0
9999 mem: location 1163 is 0
9999 mem: storing 0 in location 1164
 106 run: jump-unless {before-cursor?: "boolean"}, {: "offset"}
9999 mem: location 1164 is 0
9998 run: jumping to instruction 80
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {bottom: "offset"}, {row: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 1
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1148 is 2
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1087
9999 mem: storing 2 in location 1087
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}, {cursor-row: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 2
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1150 is 1
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1088
9999 mem: storing 1 in location 1088
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}, {cursor-column: "number"}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 2
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1151 is 2
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1089
9999 mem: storing 2 in location 1089
 106 run: {editor: ("address" "shared" "editor-data"), "lookup": ()} <- put {editor: ("address" "shared" "editor-data"), "lookup": ()}, {before-cursor: "offset"}, {before-cursor: ("address" "shared" "duplex-list" "character")}
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 2
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1152 is 1380
9999 mem: location 1141 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy to is 1084
9999 mem: storing 1380 in location 1084
 106 run: return {row: "number"}, {column: "number"}, {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1", "same-as-ingredient": "1"}
9999 mem: location 1148 is 2
9999 mem: location 1149 is 1
9999 mem: location 1140 is 1008
9999 mem: location 1141 is 1080
9999 abandon: saving in free-list of size 28
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 2
9998 run: result 1 is 1
9999 mem: storing 2 in location 1073
9999 mem: storing 1 in location 1074
 105 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1069 is 1008
9999 mem: location 1074 is 1
9999 mem: location 1072 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1103
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 83 -> 84
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1107
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1108
 106 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1109
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1110
9999 mem: storing 0 in location 1111
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1110
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 1
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 84 -> 85
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 1
9999 mem: storing 11 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 39 -> 40
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 11
9999 mem: storing 1038 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1038
9999 mem: location 1199 is 1038
9999 mem: storing 32 in location 1038
9999 mem: storing 7 in location 1039
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 85 -> 84
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 84 -> 85
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 1
9999 mem: storing 2 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 2
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 85 -> 86
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 2
9999 mem: storing 12 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 40 -> 41
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 12
9999 mem: storing 1040 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1040
9999 mem: location 1199 is 1040
9999 mem: storing 32 in location 1040
9999 mem: storing 7 in location 1041
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 86 -> 85
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 85 -> 86
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 2
9999 mem: storing 3 in location 1107
9990 schedule: clear-line-delimited/editor-render/editor-event-loop/run_1002/scenario_editor-wraps-line-on-insert
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 3
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 86 -> 87
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 3
9999 mem: storing 13 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 41 -> 42
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 13
9999 mem: storing 1042 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1042
9999 mem: location 1199 is 1042
9999 mem: storing 32 in location 1042
9999 mem: storing 7 in location 1043
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 87 -> 86
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 86 -> 87
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 3
9999 mem: storing 4 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 4
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 106 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 87 -> 88
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 2
9999 mem: storing 2 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 2
9999 mem: location 1186 is 5
9999 mem: storing 10 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 10
9999 mem: location 1190 is 4
9999 mem: storing 14 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 42 -> 43
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 14
9999 mem: storing 1044 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1044
9999 mem: location 1199 is 1044
9999 mem: storing 32 in location 1044
9999 mem: storing 7 in location 1045
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 88 -> 87
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 87 -> 88
 106 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 4
9999 mem: storing 5 in location 1107
 106 run: jump {: "offset"}
9998 run: jumping to instruction 11
 106 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 5
9999 mem: location 1108 is 4
9999 mem: storing 1 in location 1112
 106 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 1
9998 run: jumping to instruction 16
 106 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1106 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1073 is 2
9999 mem: storing 3 in location 1073
 105 run: draw-horizontal {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}, {9480: "literal", "horizontal-dotted": ()}
9999 mem: location 1069 is 1008
9999 mem: location 1073 is 3
9999 mem: location 1071 is 0
9999 mem: location 1072 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1202
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 88 -> 89
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1206
 106 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1207
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1208
 106 run: {style: "character"}, {style-found?: "boolean"} <- next-ingredient 
9999 mem: storing 9480 in location 1209
9999 mem: storing 1 in location 1210
 106 run: jump-if {style-found?: "boolean"}, {: "offset"}
9999 mem: location 1210 is 1
9998 run: jumping to instruction 9
 106 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1211
9999 mem: storing 0 in location 1212
 106 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1212 is 0
9998 run: jump-if fell through
 106 run: {color: "number"} <- copy {245: "literal", "grey": ()}
9999 mem: storing 245 in location 1211
 106 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
 106 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1214 is 0
9998 run: jump-if fell through
 106 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1213
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {x: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1206 is 3
9999 mem: location 1207 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 89 -> 90
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1097
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 3
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 3 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 90 -> 89
9999 mem: storing 1008 in location 1205
9999 mem: incrementing refcount of 1008: 89 -> 90
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 0
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 90 -> 91
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 0
9999 mem: storing 15 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 43 -> 44
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 15
9999 mem: storing 1046 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1046
9999 mem: location 1199 is 1046
9999 mem: storing 9480 in location 1046
9999 mem: storing 245 in location 1047
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 0
9999 mem: storing 1 in location 1207
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 1
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 91 -> 92
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 1
9999 mem: storing 16 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 44 -> 45
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 16
9999 mem: storing 1048 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1048
9999 mem: location 1199 is 1048
9999 mem: storing 9480 in location 1048
9999 mem: storing 245 in location 1049
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 1
9999 mem: storing 2 in location 1207
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 2
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 92 -> 93
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 2
9999 mem: storing 17 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 45 -> 46
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 17
9999 mem: storing 1050 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1050
9999 mem: location 1199 is 1050
9999 mem: storing 9480 in location 1050
9999 mem: storing 245 in location 1051
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 2
9999 mem: storing 3 in location 1207
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 3
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 93 -> 94
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 3
9999 mem: storing 18 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 46 -> 47
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 18
9999 mem: storing 1052 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1052
9999 mem: location 1199 is 1052
9999 mem: storing 9480 in location 1052
9999 mem: storing 245 in location 1053
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 3
9999 mem: storing 4 in location 1207
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 4
9999 mem: location 1208 is 4
9999 mem: storing 1 in location 1215
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 1
9998 run: jump-unless fell through
 106 run: print {screen: ("address" "shared" "screen")}, {style: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1205 is 1008
9999 mem: location 1209 is 9480
9999 mem: location 1211 is 245
9999 mem: location 1213 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 94 -> 95
 107 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 9480 in location 1181
 107 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 245 in location 1182
9999 mem: storing 1 in location 1183
 107 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 107 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 9480
  90 print-character: 9480 
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 107 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 107 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 107 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 3
9999 mem: storing 3 in location 1188
 107 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 3
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 107 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 107 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 107 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 107 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 107 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 107 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1191
 107 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 107 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 3
9999 mem: location 1186 is 5
9999 mem: storing 15 in location 1194
 107 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 15
9999 mem: location 1190 is 4
9999 mem: storing 19 in location 1194
 107 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 47 -> 48
 107 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 107 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 9480
9999 mem: storing 0 in location 1197
 107 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 107 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 19
9999 mem: storing 1054 in location 1199
 107 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 9480
9999 mem: location 1182 is 245
9999 mem: location 1199 is 1054
9999 mem: location 1199 is 1054
9999 mem: storing 9480 in location 1054
9999 mem: storing 245 in location 1055
 107 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 107 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 107 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 6
 106 run: {x: "number"} <- add {x: "number"}, {1: "literal"}
9999 mem: location 1207 is 4
9999 mem: storing 5 in location 1207
 106 run: jump {: "offset"}
9998 run: jumping to instruction 22
 106 run: {continue?: "boolean"} <- lesser-or-equal {x: "number"}, {right: "number"}
9999 mem: location 1207 is 5
9999 mem: location 1208 is 4
9999 mem: storing 0 in location 1215
 106 run: jump-unless {continue?: "boolean"}, {: "offset"}
9999 mem: location 1215 is 0
9998 run: jumping to instruction 27
 106 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1205 is 1008
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 5
 105 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1073 is 3
9999 mem: storing 4 in location 1073
 105 run: clear-screen-from {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1069 is 1008
9999 mem: location 1073 is 4
9999 mem: location 1071 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 4
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 106 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 95 -> 96
 106 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1004
 106 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1005
 106 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1006
 106 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1007
 106 run: jump-if {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 106 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {column: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 4
9999 mem: location 1005 is 0
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 96 -> 97
 107 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1097
 107 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 107 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 3
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 4
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 4 in location 1011
 107 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 107 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 97 -> 96
9999 mem: storing 1008 in location 1003
9999 mem: incrementing refcount of 1008: 96 -> 97
 106 run: clear-line-delimited {screen: ("address" "shared" "screen")}, {column: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1005 is 0
9999 mem: location 1007 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1103
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 97 -> 98
 107 run: {column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1107
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1108
 107 run: {space: "character"} <- copy {32: "literal", "space": ()}
9999 mem: storing 32 in location 1109
 107 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1110
9999 mem: storing 0 in location 1111
 107 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1111 is 0
9998 run: jump-if fell through
 107 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1110
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 0
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 98 -> 99
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 0
9999 mem: storing 20 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 48 -> 49
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 20
9999 mem: storing 1056 in location 1199
 108 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1056
9999 mem: location 1199 is 1056
9999 mem: storing 32 in location 1056
9999 mem: storing 7 in location 1057
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 0
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 0
9999 mem: storing 1 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 1
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 99 -> 98
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 98 -> 99
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 0
9999 mem: storing 1 in location 1107
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 1
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 99 -> 100
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
9990 schedule: print/clear-line-delimited/clear-screen-from/editor-render/editor-event-loop/run_1002/scenario_editor-wraps-line-on-insert
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 1
9999 mem: storing 21 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 49 -> 50
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 21
9999 mem: storing 1058 in location 1199
 108 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1058
9999 mem: location 1199 is 1058
9999 mem: storing 32 in location 1058
9999 mem: storing 7 in location 1059
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 1
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 2
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 100 -> 99
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 99 -> 100
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 1
9999 mem: storing 2 in location 1107
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 2
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 100 -> 101
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 2
9999 mem: storing 22 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 50 -> 51
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 22
9999 mem: storing 1060 in location 1199
 108 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1060
9999 mem: location 1199 is 1060
9999 mem: storing 32 in location 1060
9999 mem: storing 7 in location 1061
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 2
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 2
9999 mem: storing 3 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 3
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 3 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 101 -> 100
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 100 -> 101
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 2
9999 mem: storing 3 in location 1107
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 3
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 101 -> 102
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 3
9999 mem: storing 23 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 51 -> 52
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 23
9999 mem: storing 1062 in location 1199
 108 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1062
9999 mem: location 1199 is 1062
9999 mem: storing 32 in location 1062
9999 mem: storing 7 in location 1063
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 3
9999 mem: location 1200 is 4
9999 mem: storing 0 in location 1201
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 108 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1190 is 3
9999 mem: storing 4 in location 1190
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1190 is 4
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 4 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 102 -> 101
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 101 -> 102
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 3
9999 mem: storing 4 in location 1107
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 4
9999 mem: location 1108 is 4
9999 mem: storing 0 in location 1112
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 107 run: {screen: ("address" "shared" "screen")} <- print {screen: ("address" "shared" "screen")}, {space: "character"}, {7: "literal", "white": ()}, {bg-color: "number"}
9999 mem: location 1106 is 1008
9999 mem: location 1109 is 32
9999 mem: location 1110 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 23
9999 mem: allocating size 25
9999 abandon: picking up space from free-list of size 25
9999 mem: new alloc from free list: 1177
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1180
9999 mem: incrementing refcount of 1008: 102 -> 103
 108 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1181
 108 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1182
9999 mem: storing 1 in location 1183
 108 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1183 is 1
9998 run: jumping to instruction 7
 108 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1184
9999 mem: storing 1 in location 1185
 108 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1185 is 1
9998 run: jumping to instruction 12
 108 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1181 is 32
  90 print-character: 32 
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1180 is 1008
9998 run: jump-unless fell through
 108 run: {width: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1186
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1187
 108 run: {row: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1188
 108 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1188 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 22
 108 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1187 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 25
 108 run: {column: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1190
 108 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1190 is 4
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 29
 108 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1186 is 5
9999 mem: storing 1 in location 1189
 108 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1189 is 1
9998 run: jumping to instruction 32
 108 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1191
 108 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1191 is 0
9998 run: jumping to instruction 45
 108 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1188 is 4
9999 mem: location 1186 is 5
9999 mem: storing 20 in location 1194
 108 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1194 is 20
9999 mem: location 1190 is 4
9999 mem: storing 24 in location 1194
 108 run: {buf: ("address" "shared" "array" "screen-cell")} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1180 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "shared" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1195
9999 mem: incrementing refcount of 1014: 52 -> 53
 108 run: {len: "number"} <- length {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 25 in location 1196
 108 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1181 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1197 is 0
9998 run: jumping to instruction 63
 108 run: {cursor: ("address" "screen-cell")} <- index-address {buf: ("address" "shared" "array" "screen-cell"), "lookup": ()}, {index: "number"}
9999 mem: location 1195 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1194 is 24
9999 mem: storing 1064 in location 1199
 108 run: {cursor: ("address" "screen-cell"), "lookup": ()} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1181 is 32
9999 mem: location 1182 is 7
9999 mem: location 1199 is 1064
9999 mem: location 1199 is 1064
9999 mem: storing 32 in location 1064
9999 mem: storing 7 in location 1065
 108 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1186 is 5
9999 mem: storing 4 in location 1200
 108 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1190 is 4
9999 mem: location 1200 is 4
9999 mem: storing 1 in location 1201
 108 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1201 is 1
9998 run: jumping to instruction 72
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1180 is 1008
9999 abandon: saving in free-list of size 25
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 103 -> 102
9999 mem: storing 1008 in location 1106
9999 mem: incrementing refcount of 1008: 102 -> 103
 107 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1107 is 4
9999 mem: storing 5 in location 1107
 107 run: jump {: "offset"}
9998 run: jumping to instruction 11
 107 run: {done?: "boolean"} <- greater-than {column: "number"}, {right: "number"}
9999 mem: location 1107 is 5
9999 mem: location 1108 is 4
9999 mem: storing 1 in location 1112
 107 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1112 is 1
9998 run: jumping to instruction 16
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1106 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
 106 run: clear-rest-of-screen {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}, {right: "number"}
9999 mem: location 1003 is 1008
9999 mem: location 1004 is 4
9999 mem: location 1006 is 0
9999 mem: location 1007 is 4
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
9999 mem: new alloc from free list: 1216
 107 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 103 -> 104
 107 run: {row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1220
 107 run: {left: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1221
 107 run: {right: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1222
 107 run: {row: "number"} <- add {row: "number"}, {1: "literal"}
9999 mem: location 1220 is 4
9999 mem: storing 5 in location 1220
 107 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {row: "number"}, {left: "number"}
9999 mem: location 1219 is 1008
9999 mem: location 1220 is 5
9999 mem: location 1221 is 0
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 104 -> 105
 108 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1097
 108 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1098
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 4
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 5
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 5 in location 1011
 108 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 0
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 108 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 105 -> 104
9999 mem: storing 1008 in location 1219
9999 mem: incrementing refcount of 1008: 104 -> 105
 107 run: {screen-height: "number"} <- screen-height {screen: ("address" "shared" "screen")}
9999 mem: location 1219 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
 108 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1378
9999 mem: incrementing refcount of 1008: 105 -> 106
 108 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1378 is 1008
9998 run: jump-unless fell through
 108 run: {height: "number"} <- get {screen: ("address" "shared" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1378 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1379
 108 run: return {height: "number"}
9999 mem: location 1379 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 5
9999 mem: storing 5 in location 1223
 107 run: {at-bottom-of-screen?: "boolean"} <- greater-or-equal {row: "number"}, {screen-height: "number"}
9999 mem: location 1220 is 5
9999 mem: location 1223 is 5
9999 mem: storing 1 in location 1224
 107 run: jump-if {at-bottom-of-screen?: "boolean"}, {: "offset"}
9999 mem: location 1224 is 1
9998 run: jumping to instruction 15
 107 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1219 is 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
 106 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0", "same-as-ingredient": "0"}
9999 mem: location 1003 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
 105 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "1"}
9999 mem: location 1069 is 1008
9999 mem: location 1070 is 1080
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 106 -> 105
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 105 -> 106
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {cursor-row: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 2
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1088
9998 run: its type is "number"
9999 mem: location 1088 is 1
9999 mem: storing 1 in location 1240
 104 run: {cursor-column: "number"} <- get {editor: ("address" "shared" "editor-data"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 1099
9999 mem: location 1082 is 1099
9999 mem: location 1083 is 0
9999 mem: location 1084 is 1380
9999 mem: location 1085 is 0
9999 mem: location 1086 is 4
9999 mem: location 1087 is 2
9999 mem: location 1088 is 1
9999 mem: location 1089 is 2
9999 mem: location 1090 is 1
9999 mem: location 1091 is 1363
9999 mem: location 1092 is 0
9999 mem: location 1239 is 1080
9999 mem: skipping refcount at 1080
9998 run: address to copy is 1089
9998 run: its type is "number"
9999 mem: location 1089 is 2
9999 mem: storing 2 in location 1241
 104 run: {screen: ("address" "shared" "screen")} <- move-cursor {screen: ("address" "shared" "screen")}, {cursor-row: "number"}, {cursor-column: "number"}
9999 mem: location 1237 is 1008
9999 mem: location 1240 is 1
9999 mem: location 1241 is 2
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1093
 105 run: {screen: ("address" "shared" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1096
9999 mem: incrementing refcount of 1008: 106 -> 107
 105 run: {new-row: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1097
 105 run: {new-column: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1098
 105 run: jump-unless {screen: ("address" "shared" "screen")}, {: "offset"}
9999 mem: location 1096 is 1008
9998 run: jump-unless fell through
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-row: "offset"}, {new-row: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 1 in location 1011
 105 run: {screen: ("address" "shared" "screen"), "lookup": ()} <- put {screen: ("address" "shared" "screen"), "lookup": ()}, {cursor-column: "offset"}, {new-column: "number"}
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1098 is 2
9999 mem: location 1096 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 2 in location 1012
 105 run: return {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1096 is 1008
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 107 -> 106
9999 mem: storing 1008 in location 1237
9999 mem: incrementing refcount of 1008: 106 -> 107
 104 run: {e: "event"}, {console: ("address" "shared" "console")}, {found?: "boolean"}, {quit?: "boolean"} <- read-event {console: ("address" "shared" "console")}
9999 mem: location 1238 is 1372
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1202
 105 run: {console: ("address" "shared" "console")} <- next-ingredient-without-typechecking 
9999 mem: storing 1372 in location 1205
9999 mem: incrementing refcount of 1372: 2 -> 3
 105 run: jump-unless {console: ("address" "shared" "console")}, {: "offset"}
9999 mem: location 1205 is 1372
9998 run: jump-unless fell through
 105 run: {current-event-index: "number"} <- get {console: ("address" "shared" "console"), "lookup": ()}, {current-event-index: "offset"}
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9999 mem: location 1373 is 1
9999 mem: location 1374 is 1366
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9998 run: address to copy is 1373
9998 run: its type is "number"
9999 mem: location 1373 is 1
9999 mem: storing 1 in location 1206
 105 run: {buf: ("address" "shared" "array" "event")} <- get {console: ("address" "shared" "console"), "lookup": ()}, {events: "offset"}
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9999 mem: location 1373 is 1
9999 mem: location 1374 is 1366
9999 mem: location 1205 is 1372
9999 mem: skipping refcount at 1372
9998 run: address to copy is 1374
9998 run: its type is ("address" "shared" "array" "event")
9999 mem: location 1374 is 1366
9999 mem: storing 1366 in location 1207
9999 mem: incrementing refcount of 1366: 2 -> 3
 105 run: {max: "number"} <- length {buf: ("address" "shared" "array" "event"), "lookup": ()}
9999 mem: location 1207 is 1366
9999 mem: skipping refcount at 1366
9999 mem: storing 1 in location 1208
 105 run: {done?: "boolean"} <- greater-or-equal {current-event-index: "number"}, {max: "number"}
9999 mem: location 1206 is 1
9999 mem: location 1208 is 1
9999 mem: storing 1 in location 1209
 105 run: jump-unless {done?: "boolean"}, {: "offset"}
9999 mem: location 1209 is 1
9998 run: jump-unless fell through
 105 run: {dummy: ("address" "shared" "event")} <- new {event: "type"}
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1375
9999 mem: storing 1375 in location 1210
9999 mem: incrementing refcount of 1375: 0 -> 1
 105 run: return {dummy: ("address" "shared" "event"), "lookup": ()}, {console: ("address" "shared" "console"), "same-as-ingredient": "0", "same-as-ingredient": "0"}, {1: "literal", "found": ()}, {1: "literal", "quit": ()}
9999 mem: location 1210 is 1375
9999 mem: skipping refcount at 1375
9999 mem: location 1376 is 0
9999 mem: location 1377 is 0
9999 mem: location 1378 is 0
9999 mem: location 1379 is 0
9999 mem: location 1205 is 1372
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1372
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1242
9999 mem: storing 0 in location 1243
9999 mem: storing 0 in location 1244
9999 mem: storing 0 in location 1245
9999 mem: decrementing refcount of 1372: 3 -> 2
9999 mem: storing 1372 in location 1238
9999 mem: incrementing refcount of 1372: 2 -> 3
9999 mem: storing 1 in location 1246
9999 mem: storing 1 in location 1247
 104 run: jump-unless {found?: "boolean"}, {: "offset"}
9999 mem: location 1246 is 1
9998 run: jump-unless fell through
 104 run: jump-if {quit?: "boolean"}, {: "offset"}
9999 mem: location 1247 is 1
9998 run: jumping to instruction 28
 104 run: reply {screen: ("address" "shared" "screen"), "same-as-ingredient": "0"}, {console: ("address" "shared" "console"), "same-as-ingredient": "1"}, {editor: ("address" "shared" "editor-data"), "same-as-ingredient": "2"}
9999 mem: location 1237 is 1008
9999 mem: location 1238 is 1372
9999 mem: location 1239 is 1080
9999 abandon: saving in free-list of size 16
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain {"\n    .     .\n    .efab↩.\n    .c    .\n    .┈┈┈┈┈.\n    .     .\n  ": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
