9991 parse: --- defining scenario_find-next-suffix-match-2
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:array:character <- new [abcd]\n    y:address:array:character <- new [cde]\n    10:number/raw <- find-next x, y, 0\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    x:address:array:character <- new [abcd]\n    y:address:array:character <- new [cde]\n    10:number/raw <- find-next x, y, 0\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10 <- 4  # not found\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    10 <- 4  # not found\n  ": "literal-string"}
9999 parse: recipe scenario_find-next-suffix-match-2 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_find-next-suffix-match-2
9991 transform: --- rewrite 'stash' instructions in recipe scenario_find-next-suffix-match-2
9991 transform: --- deduce types for recipe scenario_find-next-suffix-match-2
9993 transform: run {"\n    local-scope\n    x:address:array:character <- new [abcd]\n    y:address:array:character <- new [cde]\n    10:number/raw <- find-next x, y, 0\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    10 <- 4  # not found\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_find-next-suffix-match-2
9991 transform: --- deduce types for recipe scenario_find-next-suffix-match-2
9991 transform: --- check for invalid types in recipe scenario_find-next-suffix-match-2
9991 transform: --- collect surrounding spaces for recipe scenario_find-next-suffix-match-2
9991 transform: --- transform names for recipe scenario_find-next-suffix-match-2
9991 transform: --- resolve ambiguous calls for recipe scenario_find-next-suffix-match-2
9992 transform: --- compute address offsets for scenario_find-next-suffix-match-2
9993 transform: - compute address offsets for run {"\n    local-scope\n    x:address:array:character <- new [abcd]\n    y:address:array:character <- new [cde]\n    10:number/raw <- find-next x, y, 0\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    10 <- 4  # not found\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_find-next-suffix-match-2
9991 transform: --- transform braces for recipe scenario_find-next-suffix-match-2
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_find-next-suffix-match-2
9991 transform: --- perform checks for recipe scenario_find-next-suffix-match-2
9991 transform: --- type-check 'call' instructions inside recipe scenario_find-next-suffix-match-2
9991 transform: --- type-check calls inside recipe scenario_find-next-suffix-match-2
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_find-next-suffix-match-2
9991 transform: --- check types of reply instructions in recipe scenario_find-next-suffix-match-2
9991 transform: --- type-check merge instructions in recipe scenario_find-next-suffix-match-2
9991 transform: --- checking reply instructions against header for scenario_find-next-suffix-match-2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_find-next-suffix-match-2
 102 run: run {"\n    local-scope\n    x:address:array:character <- new [abcd]\n    y:address:array:character <- new [cde]\n    10:number/raw <- find-next x, y, 0\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abcd": "literal-string"}
9993 parse:   product: {x: ("address" "array" "character")}
9992 load: after rewriting: {x: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"cde": "literal-string"}
9993 parse:   product: {y: ("address" "array" "character")}
9992 load: after rewriting: {y: ("address" "array" "character")} <- new {"cde": "literal-string"}
9993 parse: instruction: find-next
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {y: ()}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {10: "number", "raw": ()}
9992 load: after rewriting: {10: "number", "raw": ()} <- find-next {x: ()}, {y: ()}, {0: "literal"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9992 transform: y <= ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9993 transform: {y: ("address" "array" "character")} <- new {"cde": "literal-string"}
9993 transform: {10: "number", "raw": ()} <- find-next {x: ("address" "array" "character")}, {y: ("address" "array" "character")}, {0: "literal"}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {10: "number", "raw": ()} <- find-next {x: ()}, {y: ()}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe find-next {text: ("address" "array" "character")} {pattern: "character"} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 1: recipe find-next_2 {text: ("address" "array" "character")} {pattern: ("address" "array" "character")} {idx: "number"} -> {next-index: "number"}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9993 transform: - compute address offsets for {y: ("address" "array" "character")} <- new {"cde": "literal-string"}
9993 transform: - compute address offsets for {10: "number", "raw": ()} <- find-next_2 {x: ("address" "array" "character")}, {y: ("address" "array" "character")}, {0: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: new ...
9992 transform: find-next ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 3 in location 1001
 103 run: {x: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9999 mem: new string alloc: 1005
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1005: 0 -> 1
9999 mem: storing 1005 in location 1003
 103 run: {y: ("address" "array" "character")} <- new {"cde": "literal-string"}
9999 mem: new string alloc: 1011
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1011: 0 -> 1
9999 mem: storing 1011 in location 1004
 103 run: {10: "number", "raw": ()} <- find-next_2 {x: ("address" "array" "character")}, {y: ("address" "array" "character")}, {0: "literal"}
9999 mem: location 1003 is 1005
9999 mem: location 1004 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1016
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 8 in location 1017
 104 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1019 is 0
9999 mem: incrementing refcount of 1005: 1 -> 2
9999 mem: storing 1005 in location 1019
 104 run: {pattern: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1020 is 0
9999 mem: incrementing refcount of 1011: 1 -> 2
9999 mem: storing 1011 in location 1020
 104 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1021
 104 run: {first: "character"} <- index {pattern: ("address" "array" "character"), "lookup": ()}, {0: "literal"}
9999 mem: location 1020 is 1011
9999 mem: skipping refcount at 1011
9998 run: base address is 1012
9998 run: address to copy is 1013
9998 run: its type is character
9999 mem: location 1013 is 99
9999 mem: storing 99 in location 1022
 104 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1019 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 4 in location 1023
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1021 is 0
9999 mem: location 1023 is 4
9999 mem: storing 0 in location 1024
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 104 run: {found?: "boolean"} <- match-at {text: ("address" "array" "character")}, {pattern: ("address" "array" "character")}, {idx: "number"}
9999 mem: location 1019 is 1005
9999 mem: location 1020 is 1011
9999 mem: location 1021 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1026
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 12 in location 1027
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1029 is 0
9999 mem: incrementing refcount of 1005: 2 -> 3
9999 mem: storing 1005 in location 1029
 105 run: {pattern: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1030 is 0
9999 mem: incrementing refcount of 1011: 2 -> 3
9999 mem: storing 1011 in location 1030
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1031
 105 run: {pattern-len: "number"} <- length {pattern: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1030 is 1011
9999 mem: skipping refcount at 1011
9999 mem: storing 3 in location 1032
 105 run: {x: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1029 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 4 in location 1033
 105 run: {x: "number"} <- subtract {x: "number"}, {pattern-len: "number"}
9999 mem: location 1033 is 4
9999 mem: location 1032 is 3
9999 mem: storing 1 in location 1033
 105 run: {enough-room?: "boolean"} <- lesser-or-equal {idx: "number"}, {x: "number"}
9999 mem: location 1031 is 0
9999 mem: location 1033 is 1
9999 mem: storing 1 in location 1034
 105 run: jump-if {enough-room?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 1
9998 run: jumping to instruction 11
 105 run: {pattern-idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1035
 105 run: {done?: "boolean"} <- greater-or-equal {pattern-idx: "number"}, {pattern-len: "number"}
9999 mem: location 1035 is 0
9999 mem: location 1032 is 3
9999 mem: storing 0 in location 1036
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 105 run: {c: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1029 is 1005
9999 mem: skipping refcount at 1005
9998 run: base address is 1006
9999 mem: location 1031 is 0
9998 run: address to copy is 1007
9998 run: its type is character
9999 mem: location 1007 is 97
9999 mem: storing 97 in location 1037
 105 run: {exp: "character"} <- index {pattern: ("address" "array" "character"), "lookup": ()}, {pattern-idx: "number"}
9999 mem: location 1030 is 1011
9999 mem: skipping refcount at 1011
9998 run: base address is 1012
9999 mem: location 1035 is 0
9998 run: address to copy is 1013
9998 run: its type is character
9999 mem: location 1013 is 99
9999 mem: storing 99 in location 1038
 105 run: {match?: "boolean"} <- equal {c: "character"}, {exp: "character"}
9999 mem: location 1037 is 97
9999 mem: location 1038 is 99
9999 mem: storing 0 in location 1039
 105 run: jump-if {match?: "boolean"}, {: "offset"}
9999 mem: location 1039 is 0
9998 run: jump-if fell through
 105 run: return {0: "literal", "not-found": ()}
9999 mem: clearing text:address:array:character
9999 mem: location 1029 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 3 -> 2
9999 mem: storing 0 in location 1029
9999 mem: clearing pattern:address:array:character
9999 mem: location 1030 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 1030
9999 mem: clearing idx:number
9999 mem: storing 0 in location 1031
9999 mem: clearing pattern-len:number
9999 mem: storing 0 in location 1032
9999 mem: clearing x:number
9999 mem: storing 0 in location 1033
9999 mem: clearing x
9999 mem: storing 0 in location 1033
9999 mem: clearing enough-room?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing pattern-idx:number
9999 mem: storing 0 in location 1035
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1036
9999 mem: clearing c:character
9999 mem: storing 0 in location 1037
9999 mem: clearing exp:character
9999 mem: storing 0 in location 1038
9999 mem: clearing match?:boolean
9999 mem: storing 0 in location 1039
9999 mem: clearing idx
9999 mem: storing 0 in location 1031
9999 mem: clearing pattern-idx
9999 mem: storing 0 in location 1035
9999 mem: automatically abandoning 1026
9999 abandon: updating refcounts inside 1026: (array number)
9999 abandon: saving 1026 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1025
 104 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1025 is 0
9998 run: jump-if fell through
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1021 is 0
9999 mem: storing 1 in location 1021
 104 run: {idx: "number"} <- find-next {text: ("address" "array" "character")}, {first: "character"}, {idx: "number"}
9999 mem: location 1019 is 1005
9999 mem: location 1022 is 99
9999 mem: location 1021 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1040
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 8 in location 1041
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1043 is 0
9999 mem: incrementing refcount of 1005: 2 -> 3
9999 mem: storing 1005 in location 1043
 105 run: {pattern: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1044
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1045
 105 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1043 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 4 in location 1046
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1045 is 1
9999 mem: location 1046 is 4
9999 mem: storing 0 in location 1047
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1047 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1043 is 1005
9999 mem: skipping refcount at 1005
9998 run: base address is 1006
9999 mem: location 1045 is 1
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 98
9999 mem: storing 98 in location 1048
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1048 is 98
9999 mem: location 1044 is 99
9999 mem: storing 0 in location 1049
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1049 is 0
9998 run: jump-if fell through
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1045 is 1
9999 mem: storing 2 in location 1045
 105 run: jump {: "offset"}
9998 run: jumping to instruction 6
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1045 is 2
9999 mem: location 1046 is 4
9999 mem: storing 0 in location 1047
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1047 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1043 is 1005
9999 mem: skipping refcount at 1005
9998 run: base address is 1006
9999 mem: location 1045 is 2
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 99
9999 mem: storing 99 in location 1048
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1048 is 99
9999 mem: location 1044 is 99
9999 mem: storing 1 in location 1049
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1049 is 1
9998 run: jumping to instruction 13
 105 run: return {idx: "number"}
9999 mem: location 1045 is 2
9999 mem: clearing text:address:array:character
9999 mem: location 1043 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 3 -> 2
9999 mem: storing 0 in location 1043
9999 mem: clearing pattern:character
9999 mem: storing 0 in location 1044
9999 mem: clearing len:number
9999 mem: storing 0 in location 1046
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 1047
9999 mem: clearing curr:character
9999 mem: storing 0 in location 1048
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1049
9999 mem: automatically abandoning 1040
9999 abandon: updating refcounts inside 1040: (array number)
9999 abandon: saving 1040 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 2
9999 mem: storing 2 in location 1021
 104 run: jump {: "offset"}
9998 run: jumping to instruction 7
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1021 is 2
9999 mem: location 1023 is 4
9999 mem: storing 0 in location 1024
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 104 run: {found?: "boolean"} <- match-at {text: ("address" "array" "character")}, {pattern: ("address" "array" "character")}, {idx: "number"}
9999 mem: location 1019 is 1005
9999 mem: location 1020 is 1011
9999 mem: location 1021 is 2
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 abandon: picking up space from free-list of size 14
9999 mem: new alloc from free list: 1026
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1029 is 0
9999 mem: incrementing refcount of 1005: 2 -> 3
9999 mem: storing 1005 in location 1029
 105 run: {pattern: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1030 is 0
9999 mem: incrementing refcount of 1011: 2 -> 3
9999 mem: storing 1011 in location 1030
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1031
 105 run: {pattern-len: "number"} <- length {pattern: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1030 is 1011
9999 mem: skipping refcount at 1011
9999 mem: storing 3 in location 1032
 105 run: {x: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1029 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 4 in location 1033
 105 run: {x: "number"} <- subtract {x: "number"}, {pattern-len: "number"}
9999 mem: location 1033 is 4
9999 mem: location 1032 is 3
9999 mem: storing 1 in location 1033
 105 run: {enough-room?: "boolean"} <- lesser-or-equal {idx: "number"}, {x: "number"}
9999 mem: location 1031 is 2
9999 mem: location 1033 is 1
9999 mem: storing 0 in location 1034
 105 run: jump-if {enough-room?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 105 run: return {0: "literal", "not-found": ()}
9999 mem: clearing text:address:array:character
9999 mem: location 1029 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 3 -> 2
9999 mem: storing 0 in location 1029
9999 mem: clearing pattern:address:array:character
9999 mem: location 1030 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 1030
9999 mem: clearing idx:number
9999 mem: storing 0 in location 1031
9999 mem: clearing pattern-len:number
9999 mem: storing 0 in location 1032
9999 mem: clearing x:number
9999 mem: storing 0 in location 1033
9999 mem: clearing x
9999 mem: storing 0 in location 1033
9999 mem: clearing enough-room?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing pattern-idx:number
9999 mem: storing 0 in location 1035
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1036
9999 mem: clearing c:character
9999 mem: storing 0 in location 1037
9999 mem: clearing exp:character
9999 mem: storing 0 in location 1038
9999 mem: clearing match?:boolean
9999 mem: storing 0 in location 1039
9999 mem: clearing idx
9999 mem: storing 0 in location 1031
9999 mem: clearing pattern-idx
9999 mem: storing 0 in location 1035
9999 mem: automatically abandoning 1026
9999 abandon: updating refcounts inside 1026: (array number)
9999 abandon: saving 1026 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1025
 104 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1025 is 0
9998 run: jump-if fell through
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1021 is 2
9999 mem: storing 3 in location 1021
 104 run: {idx: "number"} <- find-next {text: ("address" "array" "character")}, {first: "character"}, {idx: "number"}
9999 mem: location 1019 is 1005
9999 mem: location 1022 is 99
9999 mem: location 1021 is 3
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1040
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1043 is 0
9999 mem: incrementing refcount of 1005: 2 -> 3
9999 mem: storing 1005 in location 1043
 105 run: {pattern: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1044
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1045
 105 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1043 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 4 in location 1046
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1045 is 3
9999 mem: location 1046 is 4
9999 mem: storing 0 in location 1047
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1047 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1043 is 1005
9999 mem: skipping refcount at 1005
9998 run: base address is 1006
9999 mem: location 1045 is 3
9998 run: address to copy is 1010
9998 run: its type is character
9999 mem: location 1010 is 100
9999 mem: storing 100 in location 1048
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1048 is 100
9999 mem: location 1044 is 99
9999 mem: storing 0 in location 1049
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1049 is 0
9998 run: jump-if fell through
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1045 is 3
9999 mem: storing 4 in location 1045
 105 run: jump {: "offset"}
9998 run: jumping to instruction 6
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1045 is 4
9999 mem: location 1046 is 4
9999 mem: storing 1 in location 1047
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1047 is 1
9998 run: jumping to instruction 13
 105 run: return {idx: "number"}
9999 mem: location 1045 is 4
9999 mem: clearing text:address:array:character
9999 mem: location 1043 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 3 -> 2
9999 mem: storing 0 in location 1043
9999 mem: clearing pattern:character
9999 mem: storing 0 in location 1044
9999 mem: clearing len:number
9999 mem: storing 0 in location 1046
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 1047
9999 mem: clearing curr:character
9999 mem: storing 0 in location 1048
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1049
9999 mem: automatically abandoning 1040
9999 abandon: updating refcounts inside 1040: (array number)
9999 abandon: saving 1040 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 4
9999 mem: storing 4 in location 1021
 104 run: jump {: "offset"}
9998 run: jumping to instruction 7
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1021 is 4
9999 mem: location 1023 is 4
9999 mem: storing 1 in location 1024
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1024 is 1
9998 run: jumping to instruction 14
 104 run: return {idx: "number"}
9999 mem: location 1021 is 4
9999 mem: clearing text:address:array:character
9999 mem: location 1019 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 2 -> 1
9999 mem: storing 0 in location 1019
9999 mem: clearing pattern:address:array:character
9999 mem: location 1020 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 2 -> 1
9999 mem: storing 0 in location 1020
9999 mem: clearing first:character
9999 mem: storing 0 in location 1022
9999 mem: clearing len:number
9999 mem: storing 0 in location 1023
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1024
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1025
9999 mem: automatically abandoning 1016
9999 abandon: updating refcounts inside 1016: (array number)
9999 abandon: saving 1016 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 10
 103 run: reply 
9999 mem: clearing x:address:array:character
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 1 -> 0
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: (array character)
9999 abandon: saving 1005 in free-list of size 6
9999 mem: storing 0 in location 1003
9999 mem: clearing y:address:array:character
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 1 -> 0
9999 mem: automatically abandoning 1011
9999 abandon: updating refcounts inside 1011: (array character)
9999 abandon: saving 1011 in free-list of size 5
9999 mem: storing 0 in location 1004
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    10 <- 4  # not found\n  ": "literal-string"}
9999 run: checking location 10
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
