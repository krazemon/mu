9991 parse: --- defining scenario-foo
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {1: "number"}
9992 load: after rewriting: {1: "number"} <- copy {34: "literal"}
9999 parse: recipe scenario-foo has a header
9991 parse: --- defining scenario-foo
9991 parse: already exists
   0 error: redefining recipe scenario-foo

9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {35: "literal"}
9993 parse:   product: {1: "number"}
9992 load: after rewriting: {1: "number"} <- copy {35: "literal"}
9999 parse: recipe scenario-foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario-foo
9991 transform: --- rewrite 'stash' instructions in recipe scenario-foo
9991 transform: --- fill in reply ingredients from header for recipe scenario-foo
9991 transform: --- deduce types for recipe scenario-foo
9991 transform: --- check for invalid types in recipe scenario-foo
9991 transform: --- collect surrounding spaces for recipe scenario-foo
9991 transform: --- transform names for recipe scenario-foo
9991 transform: --- resolve ambiguous calls for recipe scenario-foo
9991 transform: --- compute instruction operations for recipe scenario-foo
9991 transform: --- transform braces for recipe scenario-foo
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario-foo
9991 transform: --- type-check 'call' instructions inside recipe scenario-foo
9991 transform: --- type-check calls inside recipe scenario-foo
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-foo
9991 transform: --- check types of reply instructions in recipe scenario-foo
9991 transform: --- type-check merge instructions in recipe scenario-foo
9991 transform: --- checking reply instructions against header for scenario-foo
9991 transform: --- parsing any uninitialized reagents as integers
