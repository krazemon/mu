9999 parse: container has type ingredients; parsing
9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "_a"}
9993 parse:   element: {y: "_b"}
9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {1: ("address" "shared" "array" "character")}
9992 load: after rewriting: {1: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {34: "literal", "x": ()}
9993 parse:   ingredient: {1: ("address" "shared" "array" "character"), "y": ()}
9993 parse:   product: {2: ("foo" "number" ("address" "shared" "array" "character"))}
9992 load: after rewriting: {2: ("foo" "number" ("address" "shared" "array" "character"))} <- merge {34: "literal", "x": ()}, {1: ("address" "shared" "array" "character"), "y": ()}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("foo" "number" ("address" "shared" "array" "character"))}
9993 parse:   ingredient: {y: "offset"}
9993 parse:   product: {3: ("address" "shared" "array" "character")}
9992 load: after rewriting: {3: ("address" "shared" "array" "character")} <- get {2: ("foo" "number" ("address" "shared" "array" "character"))}, {y: "offset"}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "shared" "array" "character")}
9993 parse:   ingredient: {3: ("address" "shared" "array" "character")}
9993 parse:   product: {4: "boolean"}
9992 load: after rewriting: {4: "boolean"} <- equal {1: ("address" "shared" "array" "character")}, {3: ("address" "shared" "array" "character")}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: element y of type foo is at offset 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {4: "boolean"} <- equal {1: ("address" "shared" "array" "character")}, {3: ("address" "shared" "array" "character")}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: merge ...
9992 transform: get ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 2
9999 transform: checking container {2: ("foo" "number" ("address" "shared" "array" "character"))} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {2: ("foo" "number" ("address" "shared" "array" "character"))} || {y: ("address" "shared" "array" "character")} vs ingredient 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9999 mem: new string alloc: 1000
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: {2: ("foo" "number" ("address" "shared" "array" "character"))} <- merge {34: "literal", "x": ()}, {1: ("address" "shared" "array" "character"), "y": ()}
9999 mem: location 1 is 1000
9999 mem: storing 34 in location 2
9999 mem: storing 1000 in location 3
 102 run: {3: ("address" "shared" "array" "character")} <- get {2: ("foo" "number" ("address" "shared" "array" "character"))}, {y: "offset"}
9999 mem: location 2 is 34
9999 mem: location 3 is 1000
9998 run: address to copy is 3
9998 run: its type is ("address" "shared" "array" "character")
9999 mem: location 3 is 1000
9999 mem: decrementing refcount of 1000: 1 -> 0
9999 mem: storing 1000 in location 3
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: {4: "boolean"} <- equal_2 {1: ("address" "shared" "array" "character")}, {3: ("address" "shared" "array" "character")}
9999 mem: location 1 is 1000
9999 mem: location 3 is 1000
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1005
9999 mem: storing 11 in location 1006
 103 run: {a: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1008
9999 mem: incrementing refcount of 1000: 1 -> 2
 103 run: {b: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1009
9999 mem: incrementing refcount of 1000: 2 -> 3
 103 run: {a-len: "number"} <- length {a: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1010
 103 run: {b-len: "number"} <- length {b: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1009 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1011
 103 run: trace {99: "literal"}, {"text-equal": "literal-string"}, {"comparing lengths": "literal-string"}
  99 text-equal: comparing lengths 
 103 run: {length-equal?: "boolean"} <- equal {a-len: "number"}, {b-len: "number"}
9999 mem: location 1010 is 3
9999 mem: location 1011 is 3
9999 mem: storing 1 in location 1012
 103 run: jump-if {length-equal?: "boolean"}, {: "offset"}
9999 mem: location 1012 is 1
9998 run: jumping to instruction 10
 103 run: trace {99: "literal"}, {"text-equal": "literal-string"}, {"comparing characters": "literal-string"}
  99 text-equal: comparing characters 
 103 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1013
 103 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1013 is 0
9999 mem: location 1010 is 3
9999 mem: storing 0 in location 1014
 103 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1014 is 0
9998 run: jump-if fell through
 103 run: {a2: "character"} <- index {a: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1013 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 97
9999 mem: storing 97 in location 1015
 103 run: {b2: "character"} <- index {b: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1009 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1013 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 97
9999 mem: storing 97 in location 1016
 103 run: {chars-match?: "boolean"} <- equal {a2: "character"}, {b2: "character"}
9999 mem: location 1015 is 97
9999 mem: location 1016 is 97
9999 mem: storing 1 in location 1017
 103 run: jump-if {chars-match?: "boolean"}, {: "offset"}
9999 mem: location 1017 is 1
9998 run: jumping to instruction 22
 103 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1013 is 0
9999 mem: storing 1 in location 1013
 103 run: jump {: "offset"}
9998 run: jumping to instruction 14
 103 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1013 is 1
9999 mem: location 1010 is 3
9999 mem: storing 0 in location 1014
 103 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1014 is 0
9998 run: jump-if fell through
 103 run: {a2: "character"} <- index {a: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1013 is 1
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1015
 103 run: {b2: "character"} <- index {b: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1009 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1013 is 1
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1016
 103 run: {chars-match?: "boolean"} <- equal {a2: "character"}, {b2: "character"}
9999 mem: location 1015 is 98
9999 mem: location 1016 is 98
9999 mem: storing 1 in location 1017
 103 run: jump-if {chars-match?: "boolean"}, {: "offset"}
9999 mem: location 1017 is 1
9998 run: jumping to instruction 22
 103 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1013 is 1
9999 mem: storing 2 in location 1013
 103 run: jump {: "offset"}
9998 run: jumping to instruction 14
 103 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1013 is 2
9999 mem: location 1010 is 3
9999 mem: storing 0 in location 1014
 103 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1014 is 0
9998 run: jump-if fell through
 103 run: {a2: "character"} <- index {a: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1013 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 99
9999 mem: storing 99 in location 1015
 103 run: {b2: "character"} <- index {b: ("address" "shared" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1009 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1013 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 99
9999 mem: storing 99 in location 1016
 103 run: {chars-match?: "boolean"} <- equal {a2: "character"}, {b2: "character"}
9999 mem: location 1015 is 99
9999 mem: location 1016 is 99
9999 mem: storing 1 in location 1017
 103 run: jump-if {chars-match?: "boolean"}, {: "offset"}
9999 mem: location 1017 is 1
9998 run: jumping to instruction 22
 103 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1013 is 2
9999 mem: storing 3 in location 1013
 103 run: jump {: "offset"}
9998 run: jumping to instruction 14
 103 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1013 is 3
9999 mem: location 1010 is 3
9999 mem: storing 1 in location 1014
 103 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1014 is 1
9998 run: jumping to instruction 25
 103 run: return {1: "literal"}
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1
9999 mem: storing 1 in location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
