9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: "character"}
9993 parse:   element: {z: ("address" "shared" "number")}
9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {1: ("address" "shared" "number")}
9992 load: after rewriting: {1: ("address" "shared" "number")} <- new {number: "type"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {1: ("address" "shared" "number"), "lookup": ()}
9992 load: after rewriting: {1: ("address" "shared" "number"), "lookup": ()} <- copy {34: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {97: "literal", "a": ()}
9993 parse:   ingredient: {1: ("address" "shared" "number")}
9993 parse:   product: {2: "foo"}
9992 load: after rewriting: {2: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {1: ("address" "shared" "number")}
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {2: "foo"}
9993 parse:   product: {5: "number"}
9992 load: after rewriting: {5: "number"} <- hash {2: "foo"}
9993 parse: instruction: return-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {5: "number"}
9992 load: after rewriting: reply 
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {6: ("address" "shared" "number")}
9992 load: after rewriting: {6: ("address" "shared" "number")} <- new {number: "type"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {6: ("address" "shared" "number"), "lookup": ()}
9992 load: after rewriting: {6: ("address" "shared" "number"), "lookup": ()} <- copy {34: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {97: "literal", "a": ()}
9993 parse:   ingredient: {6: ("address" "shared" "number")}
9993 parse:   product: {7: "foo"}
9992 load: after rewriting: {7: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {6: ("address" "shared" "number")}
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {7: "foo"}
9993 parse:   product: {10: "number"}
9992 load: after rewriting: {10: "number"} <- hash {7: "foo"}
9993 parse: instruction: return-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {10: "number"}
9992 load: after rewriting: reply 
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "number"}
9993 parse:   ingredient: {10: "number"}
9993 parse:   product: {11: "boolean"}
9992 load: after rewriting: {11: "boolean"} <- equal {5: "number"}, {10: "number"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {11: "boolean"} <- equal {5: "number"}, {10: "number"}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "shared" "array" "character")} {b: ("address" "shared" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: copy ...
9992 transform: merge ...
9992 transform: hash ...
9992 transform: return-unless ...
9992 transform:  ...
9992 transform: new ...
9992 transform: copy ...
9992 transform: merge ...
9992 transform: hash ...
9992 transform: return-unless ...
9992 transform:  ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "number" is 1
9992 new: size of "number" is 1
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 3
9999 transform: checking container {2: "foo"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {2: "foo"} || {y: "character"} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {2: "foo"} || {z: ("address" "shared" "number")} vs ingredient 2
9999 transform: 0 vs 3
9999 transform: checking container {7: "foo"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {7: "foo"} || {y: "character"} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {7: "foo"} || {z: ("address" "shared" "number")} vs ingredient 2
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: ("address" "shared" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1000
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: {1: ("address" "shared" "number"), "lookup": ()} <- copy {34: "literal"}
9999 mem: location 1 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 34 in location 1001
 102 run: {2: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {1: ("address" "shared" "number")}
9999 mem: location 1 is 1000
9999 mem: storing 34 in location 2
9999 mem: storing 97 in location 3
9999 mem: storing 1000 in location 4
 102 run: {5: "number"} <- hash {2: "foo"}
9999 mem: location 2 is 34
9999 mem: location 3 is 97
9999 mem: location 4 is 1000
9999 mem: storing 17506430217704212480 in location 5
 102 run: jump-if {5: "number"}, {1: "offset"}
9999 mem: location 5 is 17506430217704212480
9998 run: jumping to instruction 6
 102 run: {6: ("address" "shared" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1002
9999 mem: storing 1002 in location 6
9999 mem: incrementing refcount of 1002: 0 -> 1
 102 run: {6: ("address" "shared" "number"), "lookup": ()} <- copy {34: "literal"}
9999 mem: location 6 is 1002
9999 mem: skipping refcount at 1002
9999 mem: storing 34 in location 1003
 102 run: {7: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {6: ("address" "shared" "number")}
9999 mem: location 6 is 1002
9999 mem: storing 34 in location 7
9999 mem: storing 97 in location 8
9999 mem: storing 1002 in location 9
 102 run: {10: "number"} <- hash {7: "foo"}
9999 mem: location 7 is 34
9999 mem: location 8 is 97
9999 mem: location 9 is 1002
9999 mem: storing 17506430217704212480 in location 10
 102 run: jump-if {10: "number"}, {1: "offset"}
9999 mem: location 10 is 17506430217704212480
9998 run: jumping to instruction 12
 102 run: {11: "boolean"} <- equal {5: "number"}, {10: "number"}
9999 mem: location 5 is 17506430217704212480
9999 mem: location 10 is 17506430217704212480
9999 mem: storing 1 in location 11
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
