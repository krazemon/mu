9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: "character"}
9993 parse:   element: {z: "bar"}
9991 parse: --- defining container bar
9999 parse: type number: 1001
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: "number"}
9991 parse: --- defining main
9993 parse: instruction: merge
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {97: "literal", "a": ()}
9993 parse:   ingredient: {47: "literal"}
9993 parse:   ingredient: {48: "literal"}
9993 parse:   product: {1: "foo"}
9992 load: after rewriting: {1: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {47: "literal"}, {48: "literal"}
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: "foo"}
9993 parse:   product: {6: "number"}
9992 load: after rewriting: {6: "number"} <- hash {1: "foo"}
9993 parse: instruction: return-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {6: "number"}
9992 load: after rewriting:  
9993 parse: instruction: merge
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {97: "literal", "a": ()}
9993 parse:   ingredient: {47: "literal"}
9993 parse:   ingredient: {48: "literal"}
9993 parse:   product: {7: "foo"}
9992 load: after rewriting: {7: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {47: "literal"}, {48: "literal"}
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {7: "foo"}
9993 parse:   product: {12: "number"}
9992 load: after rewriting: {12: "number"} <- hash {7: "foo"}
9993 parse: instruction: return-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {12: "number"}
9992 load: after rewriting:  
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {6: "number"}
9993 parse:   ingredient: {12: "number"}
9993 parse:   product: {13: "boolean"}
9992 load: after rewriting: {13: "boolean"} <- equal {6: "number"}, {12: "number"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {13: "boolean"} <- equal {6: "number"}, {12: "number"}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: checking container foo, element 2
9993 transform: checking container bar, element 0
9993 transform: checking container bar, element 1
9992 transform: --- compute address offsets for foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: checking container foo, element 2
9993 transform: checking container bar, element 0
9993 transform: checking container bar, element 1
9992 transform: --- compute address offsets for foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: checking container foo, element 2
9993 transform: checking container bar, element 0
9993 transform: checking container bar, element 1
9992 transform: --- compute address offsets for foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: checking container foo, element 2
9993 transform: checking container bar, element 0
9993 transform: checking container bar, element 1
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9993 transform: main: push (open, 2)
9993 transform: push (close, 5)
9993 transform: main: push (open, 8)
9993 transform: push (close, 11)
9992 transform: merge ...
9992 transform: hash ...
9992 transform: jump-if 6, 1:offset
9992 transform:  ...
9992 transform: merge ...
9992 transform: hash ...
9992 transform: jump-if 12, 1:offset
9992 transform:  ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 4
9999 transform: checking container {1: "foo"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 4
9999 transform: checking container {1: "foo"} || {y: "character"} vs ingredient 1
9999 transform: 2 vs 4
9999 transform: checking container {1: "foo"} || {z: "bar"} vs ingredient 2
9999 transform: 2 vs 4
9999 transform: checking container {z: "bar"} || {x: "number"} vs ingredient 2
9999 transform: 3 vs 4
9999 transform: checking container {z: "bar"} || {y: "number"} vs ingredient 3
9999 transform: 0 vs 4
9999 transform: checking container {7: "foo"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 4
9999 transform: checking container {7: "foo"} || {y: "character"} vs ingredient 1
9999 transform: 2 vs 4
9999 transform: checking container {7: "foo"} || {z: "bar"} vs ingredient 2
9999 transform: 2 vs 4
9999 transform: checking container {z: "bar"} || {x: "number"} vs ingredient 2
9999 transform: 3 vs 4
9999 transform: checking container {z: "bar"} || {y: "number"} vs ingredient 3
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {47: "literal"}, {48: "literal"}
9999 mem: storing 34 in location 1
9999 mem: storing 97 in location 2
9999 mem: storing 47 in location 3
9999 mem: storing 48 in location 4
 102 run: {6: "number"} <- hash {1: "foo"}
9999 mem: location 1 is 34
9999 mem: location 2 is 97
9999 mem: location 3 is 47
9999 mem: location 4 is 48
9999 mem: storing 10425260239305852928 in location 6
 102 run: jump-if {6: "number"}, {: "offset"}
9999 mem: location 6 is 10425260239305852928
9998 run: jumping to instruction 5
 102 run: {7: "foo"} <- merge {34: "literal"}, {97: "literal", "a": ()}, {47: "literal"}, {48: "literal"}
9999 mem: storing 34 in location 7
9999 mem: storing 97 in location 8
9999 mem: storing 47 in location 9
9999 mem: storing 48 in location 10
 102 run: {12: "number"} <- hash {7: "foo"}
9999 mem: location 7 is 34
9999 mem: location 8 is 97
9999 mem: location 9 is 47
9999 mem: location 10 is 48
9999 mem: storing 10425260239305852928 in location 12
 102 run: jump-if {12: "number"}, {: "offset"}
9999 mem: location 12 is 10425260239305852928
9998 run: jumping to instruction 11
 102 run: {13: "boolean"} <- equal {6: "number"}, {12: "number"}
9999 mem: location 6 is 10425260239305852928
9999 mem: location 12 is 10425260239305852928
9999 mem: storing 1 in location 13
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
