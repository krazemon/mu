9991 parse: --- defining exclusive-container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "bar"}
9993 parse:   element: {y: "number"}
9991 parse: --- defining container bar
9999 parse: type number: 1001
9993 parse:   element: {a: "number"}
9993 parse:   element: {b: "number"}
9991 parse: --- defining main
9993 parse: instruction: merge
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {0: "literal", "x": ()}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {35: "literal"}
9993 parse:   product: {1: "foo"}
9992 load: after rewriting: {1: "foo"} <- merge {0: "literal", "x": ()}, {34: "literal"}, {35: "literal"}
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: "foo"}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- hash {1: "foo"}
9993 parse: instruction: return-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {4: "number"}
9992 load: after rewriting:  
9993 parse: instruction: merge
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {0: "literal", "x": ()}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {36: "literal"}
9993 parse:   product: {5: "foo"}
9992 load: after rewriting: {5: "foo"} <- merge {0: "literal", "x": ()}, {34: "literal"}, {36: "literal"}
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {5: "foo"}
9993 parse:   product: {8: "number"}
9992 load: after rewriting: {8: "number"} <- hash {5: "foo"}
9993 parse: instruction: return-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {8: "number"}
9992 load: after rewriting:  
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {4: "number"}
9993 parse:   ingredient: {8: "number"}
9993 parse:   product: {9: "boolean"}
9992 load: after rewriting: {9: "boolean"} <- equal {4: "number"}, {8: "number"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {9: "boolean"} <- equal {4: "number"}, {8: "number"}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: "foo"} <- merge {0: "literal", "x": ()}, {34: "literal"}, {35: "literal"}
9994 transform: compute address offsets for exclusive container foo
9993 transform: checking container bar, element 0
9993 transform: checking container bar, element 1
9993 transform: - compute address offsets for {4: "number"} <- hash {1: "foo"}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for break-if {4: "number"}
9993 transform: - compute address offsets for return 
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {5: "foo"} <- merge {0: "literal", "x": ()}, {34: "literal"}, {36: "literal"}
9993 transform: - compute address offsets for {8: "number"} <- hash {5: "foo"}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for break-if {8: "number"}
9993 transform: - compute address offsets for return 
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {9: "boolean"} <- equal {4: "number"}, {8: "number"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9993 transform: main: push (open, 2)
9993 transform: push (close, 5)
9993 transform: main: push (open, 8)
9993 transform: push (close, 11)
9992 transform: merge ...
9992 transform: hash ...
9992 transform: jump-if 4, 1:offset
9992 transform:  ...
9992 transform: merge ...
9992 transform: hash ...
9992 transform: jump-if 8, 1:offset
9992 transform:  ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 3
9999 transform: checking exclusive container {1: "foo"} vs ingredient 0
9999 transform: tag: 0
9999 transform: 1 vs 3
9999 transform: checking container {x: "bar"} || {a: "number"} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {x: "bar"} || {b: "number"} vs ingredient 2
9999 transform: 0 vs 3
9999 transform: checking exclusive container {5: "foo"} vs ingredient 0
9999 transform: tag: 0
9999 transform: 1 vs 3
9999 transform: checking container {x: "bar"} || {a: "number"} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {x: "bar"} || {b: "number"} vs ingredient 2
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: "foo"} <- merge {0: "literal", "x": ()}, {34: "literal"}, {35: "literal"}
9999 mem: storing 0 in location 1
9999 mem: storing 34 in location 2
9999 mem: storing 35 in location 3
 102 run: {4: "number"} <- hash {1: "foo"}
9999 mem: location 1 is 0
9999 mem: location 2 is 34
9999 mem: location 3 is 35
9999 mem: storing 3101029416617422848 in location 4
 102 run: jump-if {4: "number"}, {: "offset"}
9999 mem: location 4 is 3101029416617422848
9998 run: jumping to instruction 5
 102 run: {5: "foo"} <- merge {0: "literal", "x": ()}, {34: "literal"}, {36: "literal"}
9999 mem: storing 0 in location 5
9999 mem: storing 34 in location 6
9999 mem: storing 36 in location 7
 102 run: {8: "number"} <- hash {5: "foo"}
9999 mem: location 5 is 0
9999 mem: location 6 is 34
9999 mem: location 7 is 36
9999 mem: storing 3101029416868630016 in location 8
 102 run: jump-if {8: "number"}, {: "offset"}
9999 mem: location 8 is 3101029416868630016
9998 run: jumping to instruction 11
 102 run: {9: "boolean"} <- equal {4: "number"}, {8: "number"}
9999 mem: location 4 is 3101029416617422848
9999 mem: location 8 is 3101029416868630016
9999 mem: storing 0 in location 9
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
