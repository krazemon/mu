9991 parse: --- defining main
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 3: "literal"
9993 parse:   product: 10: "number"
9992 load: after rewriting: 10:number <- copy 3
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 97: "literal"
9993 parse:   product: 11: "number"
9992 load: after rewriting: 11:number <- copy 97
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 98: "literal"
9993 parse:   product: 12: "number"
9992 load: after rewriting: 12:number <- copy 98
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 99: "literal"
9993 parse:   product: 13: "number"
9992 load: after rewriting: 13:number <- copy 99
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 10: ("array" "number"), {"unsafe": ()}
9993 parse:   product: 2: "number"
9992 load: after rewriting: 2:number <- hash 10:array:number/unsafe
9993 parse: instruction: reply-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: "number"
9992 load: after rewriting: reply 
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "abc": "literal-string"
9993 parse:   product: 3: ("address" "shared" "array" "character")
9992 load: after rewriting: 3:address:shared:array:character <- new [abc]
9993 parse: instruction: hash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 3: ("address" "shared" "array" "character")
9993 parse:   product: 4: "number"
9992 load: after rewriting: 4:number <- hash 3:address:shared:array:character
9993 parse: instruction: reply-unless
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 4: "number"
9992 load: after rewriting: reply 
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 2: "number"
9993 parse:   ingredient: 4: "number"
9993 parse:   product: 5: "boolean"
9992 load: after rewriting: 5:boolean <- equal 2:number, 4:number
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction 5:boolean <- equal 2:number, 4:number
9992 transform: checking variant (strict) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: hash ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: new ...
9992 transform: hash ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 10:number <- copy 3
9999 mem: storing 3 in location 10
 102 run: 11:number <- copy 97
9999 mem: storing 97 in location 11
 102 run: 12:number <- copy 98
9999 mem: storing 98 in location 12
 102 run: 13:number <- copy 99
9999 mem: storing 99 in location 13
 102 run: 2:number <- hash 10:array:number/unsafe
9999 mem: location 10 is 3
9999 mem: location 11 is 97
9999 mem: location 12 is 98
9999 mem: location 13 is 99
9999 mem: storing 13859498567229755392 in location 2
 102 run: jump-if 2:number, 1:offset
9999 mem: location 2 is 13859498567229755392
9998 run: jumping to instruction 7
 102 run: 3:address:shared:array:character <- new [abc]
9999 mem: storing 1000 in location 3
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: 4:number <- hash 3:address:shared:array:character
9999 mem: location 3 is 1000
9999 mem: storing 13859498567229755392 in location 4
 102 run: jump-if 4:number, 1:offset
9999 mem: location 4 is 13859498567229755392
9998 run: jumping to instruction 11
 102 run: 5:boolean <- equal 2:number, 4:number
9999 mem: location 2 is 13859498567229755392
9999 mem: location 4 is 13859498567229755392
9999 mem: storing 1 in location 5
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
