9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {d1: "type"}
9993 parse:   product: {p: ("address" "d1")}
9992 load: after rewriting: {p: ("address" "d1")} <- new {d1: "type"}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {p: ()}
9993 parse:   product: {q: "number"}
9992 load: after rewriting: {q: "number"} <- foo {p: ()}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:d1
9999 parse: header product: q:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {d1: "type"}
9993 parse:   product: {x: ("address" "d1")}
9992 load: after rewriting: {x: ("address" "d1")} <- new {d1: "type"}
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {x: (), "lookup": ()}
9993 parse:   ingredient: {p: "offset"}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {x: (), "lookup": ()}
9992 load: after rewriting: {x: (), "lookup": ()} <- put {x: (), "lookup": ()}, {p: "offset"}, {34: "literal"}
9993 parse: instruction: reply
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {36: "literal"}
9992 load: after rewriting: reply {36: "literal"}
9999 parse: recipe foo has a header
9991 parse: --- defining container d1
9999 parse: type number: 1000
9993 parse:   element: {p: "number"}
9993 parse:   element: {q: "number"}
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "d1")
9992 transform: p <= ("address" "d1")
9992 transform: q => "number"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {p: ("address" "d1")} <- new {d1: "type"}
9993 transform: {q: "number"} <- foo {p: ("address" "d1")}
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "d1")
9992 transform: x => ("address" "d1")
9992 transform: x <= ("address" "d1")
9992 transform: x <= ("address" "d1")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {p: ("address" "d1")} <- next-ingredient-without-typechecking 
9993 transform: {x: ("address" "d1")} <- new {d1: "type"}
9993 transform: {x: ("address" "d1"), "lookup": ()} <- put {x: ("address" "d1"), "lookup": ()}, {p: "offset"}, {34: "literal"}
9993 transform: reply {36: "literal"}
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "d1")
9992 transform: q => "number"
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "d1")
9992 transform: x => ("address" "d1")
9991 transform: --- deduce types from header for foo
9993 transform: type of p is ("address" "d1")
9993 transform: type of q is "number"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {p: ("address" "d1")} <- next-ingredient-without-typechecking 
9993 transform:   product: {p: ("address" "d1")}
9992 transform: instruction: {x: ("address" "d1")} <- new {d1: "type"}
9993 transform:   product: {x: ("address" "d1")}
9992 transform: instruction: {x: ("address" "d1"), "lookup": ()} <- put {x: ("address" "d1"), "lookup": ()}, {p: "offset"}, {34: "literal"}
9993 transform:   product: {x: ("address" "d1"), "lookup": ()}
9992 transform: instruction: reply {36: "literal"}
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9993 name: assign q 2
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: assign x 2
9993 name: element p of type d1 is at offset 0
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {q: "number"} <- foo {p: ()}
9992 transform: checking variant (strict) 0: recipe foo {p: ("address" "d1")} -> {q: "number"}
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {p: ("address" "d1")} <- new {d1: "type"}
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: checking container d1, element 1
9993 transform: - compute address offsets for {q: "number"} <- foo {p: ("address" "d1")}
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: checking container d1, element 1
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for foo
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {p: ("address" "d1")} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: checking container d1, element 1
9993 transform: - compute address offsets for {x: ("address" "d1")} <- new {d1: "type"}
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: checking container d1, element 1
9993 transform: - compute address offsets for {x: ("address" "d1"), "lookup": ()} <- put {x: ("address" "d1"), "lookup": ()}, {p: "offset"}, {34: "literal"}
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: checking container d1, element 1
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: checking container d1, element 1
9993 transform: - compute address offsets for reply {36: "literal"}
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform: put ...
9992 transform: reply ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- check mutability of ingredients in recipe foo
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "d1" is 2
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9992 new: size of "d1" is 2
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 3 in location 1001
 102 run: {p: ("address" "d1")} <- new {d1: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1005
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1005: 0 -> 1
9999 mem: storing 1005 in location 1003
 102 run: {q: "number"} <- foo {p: ("address" "d1")}
9999 mem: location 1003 is 1005
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1008
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 3 in location 1009
 103 run: {p: ("address" "d1")} <- next-ingredient-without-typechecking 
9999 mem: location 1011 is 0
9999 mem: incrementing refcount of 1005: 1 -> 2
9999 mem: storing 1005 in location 1011
 103 run: {x: ("address" "d1")} <- new {d1: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1013
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: location 1012 is 0
9999 mem: incrementing refcount of 1013: 0 -> 1
9999 mem: storing 1013 in location 1012
 103 run: {x: ("address" "d1"), "lookup": ()} <- put {x: ("address" "d1"), "lookup": ()}, {p: "offset"}, {34: "literal"}
9999 mem: location 1012 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1012 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy to is 1014
9999 mem: storing 34 in location 1014
 103 run: reply {36: "literal"}
9999 mem: clearing p:address:d1
9999 mem: location 1011 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 2 -> 1
9999 mem: storing 0 in location 1011
9999 mem: clearing x:address:d1
9999 mem: location 1012 is 1013
9999 mem: skipping refcount at 1013
9999 mem: decrementing refcount of 1013: 1 -> 0
9999 mem: automatically abandoning 1013
9999 abandon: updating refcounts inside 1013: d1
9999 abandon: saving 1013 in free-list of size 3
9999 mem: storing 0 in location 1012
9999 mem: automatically abandoning 1008
9999 abandon: updating refcounts inside 1008: (array number)
9999 abandon: saving 1008 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 36
9999 mem: storing 36 in location 1004
 102 run: reply 
9999 mem: clearing p:address:d1
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 1 -> 0
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: d1
9999 abandon: saving 1005 in free-list of size 3
9999 mem: storing 0 in location 1003
9999 mem: clearing q:number
9999 mem: storing 0 in location 1004
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 1
