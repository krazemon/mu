9991 parse: --- defining main
9993 parse: instruction: create-array
9993 parse:   number of ingredients: 0
9993 parse:   product: {11: ("array" "number" "3")}
9992 load: after rewriting: {11: ("array" "number" "3")} <- create-array 
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {14: "literal"}
9993 parse:   product: {12: "number"}
9992 load: after rewriting: {12: "number"} <- copy {14: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {15: "literal"}
9993 parse:   product: {13: "number"}
9992 load: after rewriting: {13: "number"} <- copy {15: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {16: "literal"}
9993 parse:   product: {14: "number"}
9992 load: after rewriting: {14: "number"} <- copy {16: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {10: "literal", "unsafe": ()}
9993 parse:   product: {1: ("address" "array" "number")}
9992 load: after rewriting: {1: ("address" "array" "number")} <- copy {10: "literal", "unsafe": ()}
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "array" "number"), "lookup": ()}
9993 parse:   ingredient: {1: "literal"}
9993 parse:   product: {2: "number"}
9992 load: after rewriting: {2: "number"} <- index {1: ("address" "array" "number"), "lookup": ()}, {1: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {2: "number"} <- index {1: ("address" "array" "number"), "lookup": ()}, {1: "literal"}
9992 transform: checking variant (strict) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {11: ("array" "number" "3")} <- create-array 
9993 transform: - compute address offsets for {12: "number"} <- copy {14: "literal"}
9993 transform: - compute address offsets for {13: "number"} <- copy {15: "literal"}
9993 transform: - compute address offsets for {14: "number"} <- copy {16: "literal"}
9993 transform: - compute address offsets for {1: ("address" "array" "number")} <- copy {10: "literal", "unsafe": ()}
9993 transform: - compute address offsets for {2: "number"} <- index {1: ("address" "array" "number"), "lookup": ()}, {1: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: create-array ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: index ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {11: ("array" "number" "3")} <- create-array 
9999 mem: storing 3 in location 11
9998 run: creating array of size 4
 102 run: {12: "number"} <- copy {14: "literal"}
9999 mem: storing 14 in location 12
 102 run: {13: "number"} <- copy {15: "literal"}
9999 mem: storing 15 in location 13
 102 run: {14: "number"} <- copy {16: "literal"}
9999 mem: storing 16 in location 14
 102 run: {1: ("address" "array" "number")} <- copy {10: "literal", "unsafe": ()}
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 10: 0 -> 1
9999 mem: storing 10 in location 1
 102 run: {2: "number"} <- index {1: ("address" "array" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1 is 10
9999 mem: skipping refcount at 10
9998 run: base address is 11
9998 run: address to copy is 13
9998 run: its type is number
9999 mem: location 13 is 15
9999 mem: storing 15 in location 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
