9991 parse: --- defining scenario_inserting-into-duplex-list
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "\n    1:address:shared:duplex-list:character <- push 3, 0\n    1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character\n    1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character  # 2 points inside list\n    2:address:shared:duplex-list:character <- insert 6, 2:address:shared:duplex-list:character\n    # check structure like before\n    2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character\n    3:character <- first 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character\n    4:character <- first 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character\n    5:character <- first 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character\n    6:character <- first 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character\n    7:character <- first 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character\n    8:character <- first 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character\n    9:character <- first 2:address:shared:duplex-list:character\n    10:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character\n  ": "literal-string"
9992 load: after rewriting: run [
    1:address:shared:duplex-list:character <- push 3, 0
    1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
    1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character  # 2 points inside list
    2:address:shared:duplex-list:character <- insert 6, 2:address:shared:duplex-list:character
    # check structure like before
    2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
    3:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    4:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    5:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    6:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    7:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    8:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    9:character <- first 2:address:shared:duplex-list:character
    10:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "\n    3 <- 5  # scanning next\n    4 <- 4\n    5 <- 6  # inserted element\n    6 <- 3\n    7 <- 6  # then prev\n    8 <- 4\n    9 <- 5\n    10 <- 1  # list back at start\n  ": "literal-string"
9992 load: after rewriting: memory-should-contain [
    3 <- 5  # scanning next
    4 <- 4
    5 <- 6  # inserted element
    6 <- 3
    7 <- 6  # then prev
    8 <- 4
    9 <- 5
    10 <- 1  # list back at start
  ]
9999 parse: recipe scenario_inserting-into-duplex-list has a header
9990 transform: === transform_all()
9991 transform: --- rewrite 'stash' instructions in recipe scenario_inserting-into-duplex-list
9991 transform: --- fill in reply ingredients from header for recipe scenario_inserting-into-duplex-list
9991 transform: --- deduce types for recipe scenario_inserting-into-duplex-list
9991 transform: --- check for invalid types in recipe scenario_inserting-into-duplex-list
9991 transform: --- collect surrounding spaces for recipe scenario_inserting-into-duplex-list
9991 transform: --- transform names for recipe scenario_inserting-into-duplex-list
9991 transform: --- resolve ambiguous calls for recipe scenario_inserting-into-duplex-list
9991 transform: --- compute instruction operations for recipe scenario_inserting-into-duplex-list
9991 transform: --- transform braces for recipe scenario_inserting-into-duplex-list
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_inserting-into-duplex-list
9991 transform: --- perform checks for recipe scenario_inserting-into-duplex-list
9991 transform: --- type-check 'call' instructions inside recipe scenario_inserting-into-duplex-list
9991 transform: --- type-check calls inside recipe scenario_inserting-into-duplex-list
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_inserting-into-duplex-list
9991 transform: --- type-check merge instructions in recipe scenario_inserting-into-duplex-list
9991 transform: --- check types of reply instructions in recipe scenario_inserting-into-duplex-list
9991 transform: --- checking reply instructions against header for scenario_inserting-into-duplex-list
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_inserting-into-duplex-list
 102 run: run [
    1:address:shared:duplex-list:character <- push 3, 0
    1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
    1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character  # 2 points inside list
    2:address:shared:duplex-list:character <- insert 6, 2:address:shared:duplex-list:character
    # check structure like before
    2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
    3:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    4:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    5:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    6:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    7:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    8:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    9:character <- first 2:address:shared:duplex-list:character
    10:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 3: "literal"
9993 parse:   ingredient: 0: "literal"
9993 parse:   product: 1: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 3, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 4: "literal"
9993 parse:   ingredient: 1: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 1: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 5: "literal"
9993 parse:   ingredient: 1: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 1: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 1: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
9993 parse: instruction: insert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 6: "literal"
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- insert 6, 2:address:shared:duplex-list:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 1: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 3: "character"
9992 load: after rewriting: 3:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 4: "character"
9992 load: after rewriting: 4:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 5: "character"
9992 load: after rewriting: 5:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 6: "character"
9992 load: after rewriting: 6:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: prev
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 7: "character"
9992 load: after rewriting: 7:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: prev
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 8: "character"
9992 load: after rewriting: 8:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: prev
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 2: ("address" "shared" "duplex-list" "character")
9992 load: after rewriting: 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 9: "character"
9992 load: after rewriting: 9:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: 1: ("address" "shared" "duplex-list" "character")
9993 parse:   ingredient: 2: ("address" "shared" "duplex-list" "character")
9993 parse:   product: 10: "boolean"
9992 load: after rewriting: 10:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:duplex-list:character <- push 3, 0
9992 transform: checking variant (strict) 0: recipe push x: "_elem" in: ("address" "shared" "list" "_elem") -> in: ("address" "shared" "list" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: strict match failed: ingredient 0
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 241 push_2
9993 transform: switching push to specialized recipe push_3 x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: compute type names: push_3
9994 transform:     checking x: "_elem": "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of in is ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking x: "_elem": "_elem"
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9994 transform:     checking (duplex-list _elem): "type": "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking result: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of result is ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking value: "offset": "offset"
9994 transform:     checking val: ("address" "_elem"): ("address" "_elem")
9993 transform: type of val is ("address" "_elem")
9993 transform:   instruction: *val <- copy x
9994 transform:     checking x: (): ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking val: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: "offset": "offset"
9994 transform:     checking next: ("address" "address" "shared" "duplex-list" "_elem"): ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: type of next is ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *next <- copy in
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless in
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: "offset": "offset"
9994 transform:     checking prev: ("address" "address" "shared" "duplex-list" "_elem"): ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: type of prev is ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *prev <- copy result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient value:offset
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient next:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient prev:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*prev <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_3
9991 transform: --- rewrite 'stash' instructions in recipe push_3
9991 transform: --- checking reply instructions against header for push_3
9991 transform: --- fill in reply ingredients from header for recipe push_3
9991 transform: --- deduce types for recipe push_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "shared" "duplex-list" "character")
9992 transform: result => ("address" "shared" "duplex-list" "character")
9992 transform: val => ("address" "character")
9992 transform: next => ("address" "address" "shared" "duplex-list" "character")
9992 transform: prev => ("address" "address" "shared" "duplex-list" "character")
9991 transform: --- deduce types from header for push_3
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: "character"
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9993 transform:   product: result: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: ("address" "character")
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: ("address" "character"), {"lookup": ()}
9992 transform: instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9993 transform:   product: next: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless in
9992 transform: instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9993 transform:   product: prev: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *prev <- copy result
9993 transform:   product: prev: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return result
9991 transform: --- check for invalid types in recipe push_3
9991 transform: --- collect surrounding spaces for recipe push_3
9991 transform: --- transform names for recipe push_3
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 6
9991 transform: --- resolve ambiguous calls for recipe push_3
9991 transform: --- compute instruction operations for recipe push_3
9991 transform: --- transform braces for recipe push_3
9993 transform: push_3: push (open, 8)
9993 transform: push (close, 12)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: jump-unless in, 2:offset
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe push_3
9991 transform: --- perform checks for recipe push_3
9991 transform: --- type-check 'call' instructions inside recipe push_3
9991 transform: --- type-check calls inside recipe push_3
9991 transform: --- convert 'new' to 'allocate' for recipe push_3
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- type-check merge instructions in recipe push_3
9991 transform: --- check types of reply instructions in recipe push_3
9991 transform: --- check that recipe push_3 sets default-space
9991 transform: --- checking reply instructions against header for push_3
9992 transform: new specialization: push_3
9992 transform: instruction 1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe push x: "_elem" in: ("address" "shared" "list" "_elem") -> in: ("address" "shared" "list" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 8: recipe push_3 x: "character" in: ("address" "shared" "duplex-list" "character") -> in: ("address" "shared" "duplex-list" "character")
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 241 push_2
9993 transform: switching push to specialized recipe push_4 x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: compute type names: push_4
9994 transform:     checking x: "_elem": "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of in is ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking x: "_elem": "_elem"
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9994 transform:     checking (duplex-list _elem): "type": "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking result: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of result is ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking value: "offset": "offset"
9994 transform:     checking val: ("address" "_elem"): ("address" "_elem")
9993 transform: type of val is ("address" "_elem")
9993 transform:   instruction: *val <- copy x
9994 transform:     checking x: (): ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking val: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: "offset": "offset"
9994 transform:     checking next: ("address" "address" "shared" "duplex-list" "_elem"): ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: type of next is ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *next <- copy in
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless in
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: "offset": "offset"
9994 transform:     checking prev: ("address" "address" "shared" "duplex-list" "_elem"): ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: type of prev is ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *prev <- copy result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient value:offset
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient next:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient prev:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*prev <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_4
9991 transform: --- rewrite 'stash' instructions in recipe push_4
9991 transform: --- checking reply instructions against header for push_4
9991 transform: --- fill in reply ingredients from header for recipe push_4
9991 transform: --- deduce types for recipe push_4
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "shared" "duplex-list" "character")
9992 transform: result => ("address" "shared" "duplex-list" "character")
9992 transform: val => ("address" "character")
9992 transform: next => ("address" "address" "shared" "duplex-list" "character")
9992 transform: prev => ("address" "address" "shared" "duplex-list" "character")
9991 transform: --- deduce types from header for push_4
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: "character"
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9993 transform:   product: result: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: ("address" "character")
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: ("address" "character"), {"lookup": ()}
9992 transform: instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9993 transform:   product: next: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless in
9992 transform: instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9993 transform:   product: prev: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *prev <- copy result
9993 transform:   product: prev: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return result
9991 transform: --- check for invalid types in recipe push_4
9991 transform: --- collect surrounding spaces for recipe push_4
9991 transform: --- transform names for recipe push_4
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 6
9991 transform: --- resolve ambiguous calls for recipe push_4
9991 transform: --- compute instruction operations for recipe push_4
9991 transform: --- transform braces for recipe push_4
9993 transform: push_4: push (open, 8)
9993 transform: push (close, 12)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: jump-unless in, 2:offset
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe push_4
9991 transform: --- perform checks for recipe push_4
9991 transform: --- type-check 'call' instructions inside recipe push_4
9991 transform: --- type-check calls inside recipe push_4
9991 transform: --- convert 'new' to 'allocate' for recipe push_4
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- type-check merge instructions in recipe push_4
9991 transform: --- check types of reply instructions in recipe push_4
9991 transform: --- check that recipe push_4 sets default-space
9991 transform: --- checking reply instructions against header for push_4
9992 transform: new specialization: push_4
9992 transform: instruction 1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe push x: "_elem" in: ("address" "shared" "list" "_elem") -> in: ("address" "shared" "list" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 8: recipe push_3 x: "character" in: ("address" "shared" "duplex-list" "character") -> in: ("address" "shared" "duplex-list" "character")
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 9: recipe push_4 x: "character" in: ("address" "shared" "duplex-list" "character") -> in: ("address" "shared" "duplex-list" "character")
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 241 push_2
9993 transform: switching push to specialized recipe push_5 x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: compute type names: push_5
9994 transform:     checking x: "_elem": "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of in is ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking x: "_elem": "_elem"
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9994 transform:     checking (duplex-list _elem): "type": "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking result: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of result is ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking value: "offset": "offset"
9994 transform:     checking val: ("address" "_elem"): ("address" "_elem")
9993 transform: type of val is ("address" "_elem")
9993 transform:   instruction: *val <- copy x
9994 transform:     checking x: (): ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking val: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9994 transform:     checking result: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: "offset": "offset"
9994 transform:     checking next: ("address" "address" "shared" "duplex-list" "_elem"): ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: type of next is ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *next <- copy in
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless in
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: "offset": "offset"
9994 transform:     checking prev: ("address" "address" "shared" "duplex-list" "_elem"): ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: type of prev is ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *prev <- copy result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient value:offset
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient next:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient prev:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*prev <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_5
9991 transform: --- rewrite 'stash' instructions in recipe push_5
9991 transform: --- checking reply instructions against header for push_5
9991 transform: --- fill in reply ingredients from header for recipe push_5
9991 transform: --- deduce types for recipe push_5
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "shared" "duplex-list" "character")
9992 transform: result => ("address" "shared" "duplex-list" "character")
9992 transform: val => ("address" "character")
9992 transform: next => ("address" "address" "shared" "duplex-list" "character")
9992 transform: prev => ("address" "address" "shared" "duplex-list" "character")
9991 transform: --- deduce types from header for push_5
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: "character"
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9993 transform:   product: result: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: ("address" "character")
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: ("address" "character"), {"lookup": ()}
9992 transform: instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9993 transform:   product: next: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless in
9992 transform: instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9993 transform:   product: prev: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *prev <- copy result
9993 transform:   product: prev: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return result
9991 transform: --- check for invalid types in recipe push_5
9991 transform: --- collect surrounding spaces for recipe push_5
9991 transform: --- transform names for recipe push_5
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 6
9991 transform: --- resolve ambiguous calls for recipe push_5
9991 transform: --- compute instruction operations for recipe push_5
9991 transform: --- transform braces for recipe push_5
9993 transform: push_5: push (open, 8)
9993 transform: push (close, 12)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: jump-unless in, 2:offset
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe push_5
9991 transform: --- perform checks for recipe push_5
9991 transform: --- type-check 'call' instructions inside recipe push_5
9991 transform: --- type-check calls inside recipe push_5
9991 transform: --- convert 'new' to 'allocate' for recipe push_5
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- type-check merge instructions in recipe push_5
9991 transform: --- check types of reply instructions in recipe push_5
9991 transform: --- check that recipe push_5 sets default-space
9991 transform: --- checking reply instructions against header for push_5
9992 transform: new specialization: push_5
9992 transform: instruction 2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 243 next
9993 transform: switching next to specialized recipe next_2 in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: compute type names: next_2
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of in is ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}: ("address" "shared" "duplex-list" "_elem")
9993 transform: type of result is ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: jump-if in, 1:offset
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking 1: "offset": "offset"
9993 transform:   instruction: reply 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9993 transform:   instruction: result <- get *in, next:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: "offset": "offset"
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem/contained-in:in
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'jump-if in, 1:offset'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 1:offset
9993 transform: replacing in instruction 'reply 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in instruction 'result <- get *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: next_2
9991 transform: --- rewrite 'stash' instructions in recipe next_2
9991 transform: --- checking reply instructions against header for next_2
9991 transform: --- fill in reply ingredients from header for recipe next_2
9991 transform: --- deduce types for recipe next_2
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: in => ("address" "shared" "duplex-list" "character")
9992 transform: result => ("address" "shared" "duplex-list" "character")
9991 transform: --- deduce types from header for next_2
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9993 transform: type of result is ("address" "shared" "duplex-list" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: jump-if in, 1:offset
9992 transform: instruction: reply 0
9992 transform: instruction: result <- get *in, next:offset
9993 transform:   product: result: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: reply result:address:shared:duplex-list:_elem/contained-in:in
9991 transform: --- check for invalid types in recipe next_2
9991 transform: --- collect surrounding spaces for recipe next_2
9991 transform: --- transform names for recipe next_2
9993 name: assign in 1
9993 name: element next of type duplex-list is at offset 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe next_2
9991 transform: --- compute instruction operations for recipe next_2
9991 transform: --- transform braces for recipe next_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: return-unless ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe next_2
9991 transform: --- perform checks for recipe next_2
9991 transform: --- type-check 'call' instructions inside recipe next_2
9991 transform: --- type-check calls inside recipe next_2
9991 transform: --- convert 'new' to 'allocate' for recipe next_2
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe next_2
9991 transform: --- check types of reply instructions in recipe next_2
9991 transform: --- check that recipe next_2 sets default-space
9991 transform: --- checking reply instructions against header for next_2
9992 transform: new specialization: next_2
9992 transform: instruction 2:address:shared:duplex-list:character <- insert 6, 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe insert x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 245 insert
9993 transform: switching insert to specialized recipe insert_2 x: "_elem" in: ("address" "shared" "duplex-list" "_elem") -> in: ("address" "shared" "duplex-list" "_elem")
9993 transform: compute type names: insert_2
9994 transform:     checking x: "_elem": "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of in is ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking x: "_elem": "_elem"
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: new-node:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9994 transform:     checking (duplex-list _elem): "type": "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking new-node: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of new-node is ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: val:address:_elem <- get-address *new-node, value:offset
9994 transform:     checking new-node: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking value: "offset": "offset"
9994 transform:     checking val: ("address" "_elem"): ("address" "_elem")
9993 transform: type of val is ("address" "_elem")
9993 transform:   instruction: *val <- copy x
9994 transform:     checking x: (): ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking val: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "_elem")
9993 transform:   instruction: next-node:address:shared:duplex-list:_elem <- get *in, next:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: "offset": "offset"
9994 transform:     checking next-node: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of next-node is ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: y:address:address:shared:duplex-list:_elem <- get-address *in, next:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: "offset": "offset"
9994 transform:     checking y: ("address" "address" "shared" "duplex-list" "_elem"): ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: type of y is ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *y <- copy new-node
9994 transform:     checking new-node: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking y: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: y <- get-address *new-node, prev:offset
9994 transform:     checking new-node: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: "offset": "offset"
9994 transform:     checking y: (): ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *y <- copy in
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking y: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: y <- get-address *new-node, next:offset
9994 transform:     checking new-node: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking next: "offset": "offset"
9994 transform:     checking y: (): ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *y <- copy next-node
9994 transform:     checking next-node: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking y: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: jump-if next-node, 1:offset
9994 transform:     checking next-node: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking 1: "offset": "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: y <- get-address *next-node, prev:offset
9994 transform:     checking next-node: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: "offset": "offset"
9994 transform:     checking y: (): ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: *y <- copy new-node
9994 transform:     checking new-node: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking y: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "address" "shared" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'new-node:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient new-node:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *new-node, value:offset'
9993 transform: replacing in ingredient *new-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient value:offset
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'next-node:address:shared:duplex-list:_elem <- get *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient next-node:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'y:address:address:shared:duplex-list:_elem <- get-address *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient y:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*y <- copy new-node'
9993 transform: replacing in ingredient new-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *y
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'y <- get-address *new-node, prev:offset'
9993 transform: replacing in ingredient *new-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient y
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*y <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *y
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'y <- get-address *new-node, next:offset'
9993 transform: replacing in ingredient *new-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient y
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*y <- copy next-node'
9993 transform: replacing in ingredient next-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *y
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'jump-if next-node, 1:offset'
9993 transform: replacing in ingredient next-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 1:offset
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'y <- get-address *next-node, prev:offset'
9993 transform: replacing in ingredient *next-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient y
9993 transform: _elem => "character"
9993 transform: replacing in instruction '*y <- copy new-node'
9993 transform: replacing in ingredient new-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *y
9993 transform: _elem => "character"
9992 transform: transforming new specialization: insert_2
9991 transform: --- rewrite 'stash' instructions in recipe insert_2
9991 transform: --- checking reply instructions against header for insert_2
9991 transform: --- fill in reply ingredients from header for recipe insert_2
9991 transform: --- deduce types for recipe insert_2
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "shared" "duplex-list" "character")
9992 transform: new-node => ("address" "shared" "duplex-list" "character")
9992 transform: val => ("address" "character")
9992 transform: next-node => ("address" "shared" "duplex-list" "character")
9992 transform: y => ("address" "address" "shared" "duplex-list" "character")
9991 transform: --- deduce types from header for insert_2
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: "character"
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: new-node:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9993 transform:   product: new-node: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: val:address:_elem <- get-address *new-node, value:offset
9993 transform:   product: val: ("address" "character")
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: ("address" "character"), {"lookup": ()}
9992 transform: instruction: next-node:address:shared:duplex-list:_elem <- get *in, next:offset
9993 transform:   product: next-node: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: y:address:address:shared:duplex-list:_elem <- get-address *in, next:offset
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *y <- copy new-node
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: y <- get-address *new-node, prev:offset
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *y <- copy in
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: y <- get-address *new-node, next:offset
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *y <- copy next-node
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: jump-if next-node, 1:offset
9992 transform: instruction: reply in:address:shared:duplex-list:_elem
9992 transform: instruction: y <- get-address *next-node, prev:offset
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character")
9992 transform: instruction: *y <- copy new-node
9993 transform:   product: y: ("address" "address" "shared" "duplex-list" "character"), {"lookup": ()}
9992 transform: instruction: reply in:address:shared:duplex-list:_elem
9991 transform: --- check for invalid types in recipe insert_2
9991 transform: --- collect surrounding spaces for recipe insert_2
9991 transform: --- transform names for recipe insert_2
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign new-node 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next-node 5
9993 name: element next of type duplex-list is at offset 1
9993 name: assign y 6
9993 name: element prev of type duplex-list is at offset 2
9993 name: element next of type duplex-list is at offset 1
9993 name: element prev of type duplex-list is at offset 2
9991 transform: --- resolve ambiguous calls for recipe insert_2
9991 transform: --- compute instruction operations for recipe insert_2
9991 transform: --- transform braces for recipe insert_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: return-unless ...
9992 transform:  ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe insert_2
9991 transform: --- perform checks for recipe insert_2
9991 transform: --- type-check 'call' instructions inside recipe insert_2
9991 transform: --- type-check calls inside recipe insert_2
9991 transform: --- convert 'new' to 'allocate' for recipe insert_2
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- type-check merge instructions in recipe insert_2
9991 transform: --- check types of reply instructions in recipe insert_2
9991 transform: --- check that recipe insert_2 sets default-space
9991 transform: --- checking reply instructions against header for insert_2
9992 transform: new specialization: insert_2
9992 transform: instruction 3:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first in: ("address" "shared" "list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 242 first_2
9993 transform: switching first to specialized recipe first_3 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: compute type names: first_3
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of in is ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking result: "_elem": "_elem"
9993 transform: type of result is "_elem"
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: jump-if in, 1:offset
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking 1: "offset": "offset"
9993 transform:   instruction: reply 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9993 transform:   instruction: result <- get *in, value:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking value: "offset": "offset"
9994 transform:     checking result: (): ()
9994 transform:     deducing type to "_elem"
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'jump-if in, 1:offset'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 1:offset
9993 transform: replacing in instruction 'reply 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in instruction 'result <- get *in, value:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient value:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: first_3
9991 transform: --- rewrite 'stash' instructions in recipe first_3
9991 transform: --- checking reply instructions against header for first_3
9991 transform: --- fill in reply ingredients from header for recipe first_3
9991 transform: --- deduce types for recipe first_3
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: in => ("address" "shared" "duplex-list" "character")
9992 transform: result => "character"
9991 transform: --- deduce types from header for first_3
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9993 transform: type of result is "character"
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: jump-if in, 1:offset
9992 transform: instruction: reply 0
9992 transform: instruction: result <- get *in, value:offset
9993 transform:   product: result: "character"
9992 transform: instruction: reply result:_elem
9991 transform: --- check for invalid types in recipe first_3
9991 transform: --- collect surrounding spaces for recipe first_3
9991 transform: --- transform names for recipe first_3
9993 name: assign in 1
9993 name: element value of type duplex-list is at offset 0
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe first_3
9991 transform: --- compute instruction operations for recipe first_3
9991 transform: --- transform braces for recipe first_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: return-unless ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe first_3
9991 transform: --- perform checks for recipe first_3
9991 transform: --- type-check 'call' instructions inside recipe first_3
9991 transform: --- type-check calls inside recipe first_3
9991 transform: --- convert 'new' to 'allocate' for recipe first_3
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe first_3
9991 transform: --- check types of reply instructions in recipe first_3
9991 transform: --- check that recipe first_3 sets default-space
9991 transform: --- checking reply instructions against header for first_3
9992 transform: new specialization: first_3
9992 transform: instruction 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe next_2 in: ("address" "shared" "duplex-list" "character") -> result: ("address" "shared" "duplex-list" "character"), {"contained-in": "in"}
9992 transform: instruction 4:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first in: ("address" "shared" "list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe first_3 in: ("address" "shared" "duplex-list" "character") -> result: "character"
9992 transform: instruction 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe next_2 in: ("address" "shared" "duplex-list" "character") -> result: ("address" "shared" "duplex-list" "character"), {"contained-in": "in"}
9992 transform: instruction 5:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first in: ("address" "shared" "list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe first_3 in: ("address" "shared" "duplex-list" "character") -> result: "character"
9992 transform: instruction 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe next_2 in: ("address" "shared" "duplex-list" "character") -> result: ("address" "shared" "duplex-list" "character"), {"contained-in": "in"}
9992 transform: instruction 6:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first in: ("address" "shared" "list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe first_3 in: ("address" "shared" "duplex-list" "character") -> result: "character"
9992 transform: instruction 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe prev in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 244 prev
9993 transform: switching prev to specialized recipe prev_2 in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: compute type names: prev_2
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform: type of in is ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}: ("address" "shared" "duplex-list" "_elem")
9993 transform: type of result is ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking in: ("address" "shared" "duplex-list" "_elem"): ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: jump-if in, 1:offset
9994 transform:     checking in: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking 1: "offset": "offset"
9993 transform:   instruction: reply 0
9994 transform:     checking 0: "literal": "literal"
9993 transform: type of 0 is "literal"
9993 transform:   instruction: result <- get *in, prev:offset
9994 transform:     checking in: (), {"lookup": ()}: ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9994 transform:     checking prev: "offset": "offset"
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform:   instruction: return result
9994 transform:     checking result: (): ()
9994 transform:     deducing type to ("address" "shared" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem/contained-in:in
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'jump-if in, 1:offset'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 1:offset
9993 transform: replacing in instruction 'reply 0'
9993 transform: replacing in ingredient 0
9993 transform: replacing in instruction 'result <- get *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'return result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: prev_2
9991 transform: --- rewrite 'stash' instructions in recipe prev_2
9991 transform: --- checking reply instructions against header for prev_2
9991 transform: --- fill in reply ingredients from header for recipe prev_2
9991 transform: --- deduce types for recipe prev_2
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: in => ("address" "shared" "duplex-list" "character")
9992 transform: result => ("address" "shared" "duplex-list" "character")
9991 transform: --- deduce types from header for prev_2
9993 transform: type of in is ("address" "shared" "duplex-list" "character")
9993 transform: type of result is ("address" "shared" "duplex-list" "character")
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: ("address" "shared" "array" "location")
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: jump-if in, 1:offset
9992 transform: instruction: reply 0
9992 transform: instruction: result <- get *in, prev:offset
9993 transform:   product: result: ("address" "shared" "duplex-list" "character")
9992 transform: instruction: return result
9991 transform: --- check for invalid types in recipe prev_2
9991 transform: --- collect surrounding spaces for recipe prev_2
9991 transform: --- transform names for recipe prev_2
9993 name: assign in 1
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe prev_2
9991 transform: --- compute instruction operations for recipe prev_2
9991 transform: --- transform braces for recipe prev_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: return-unless ...
9992 transform:  ...
9992 transform: get ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe prev_2
9991 transform: --- perform checks for recipe prev_2
9991 transform: --- type-check 'call' instructions inside recipe prev_2
9991 transform: --- type-check calls inside recipe prev_2
9991 transform: --- convert 'new' to 'allocate' for recipe prev_2
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe prev_2
9991 transform: --- check types of reply instructions in recipe prev_2
9991 transform: --- check that recipe prev_2 sets default-space
9991 transform: --- checking reply instructions against header for prev_2
9992 transform: new specialization: prev_2
9992 transform: instruction 7:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first in: ("address" "shared" "list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe first_3 in: ("address" "shared" "duplex-list" "character") -> result: "character"
9992 transform: instruction 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe prev in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe prev_2 in: ("address" "shared" "duplex-list" "character") -> result: ("address" "shared" "duplex-list" "character"), {"contained-in": "in"}
9992 transform: instruction 8:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first in: ("address" "shared" "list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe first_3 in: ("address" "shared" "duplex-list" "character") -> result: "character"
9992 transform: instruction 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe prev in: ("address" "shared" "duplex-list" "_elem") -> result: ("address" "shared" "duplex-list" "_elem"), {"contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe prev_2 in: ("address" "shared" "duplex-list" "character") -> result: ("address" "shared" "duplex-list" "character"), {"contained-in": "in"}
9992 transform: instruction 9:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first in: ("address" "shared" "list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 in: ("address" "shared" "duplex-list" "_elem") -> result: "_elem"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe first_3 in: ("address" "shared" "duplex-list" "character") -> result: "character"
9992 transform: instruction 10:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 a: ("address" "shared" "array" "character") b: ("address" "shared" "array" "character") -> result: "boolean"
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: next ...
9992 transform: insert ...
9992 transform: copy ...
9992 transform: first ...
9992 transform: next ...
9992 transform: first ...
9992 transform: next ...
9992 transform: first ...
9992 transform: next ...
9992 transform: first ...
9992 transform: prev ...
9992 transform: first ...
9992 transform: prev ...
9992 transform: first ...
9992 transform: prev ...
9992 transform: first ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:duplex-list:character <- push_3 3, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1000
9999 mem: storing 7 in location 1001
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1004
 104 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1005
9999 mem: incrementing refcount of 1009: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 3
9999 mem: location 1006 is 1010
9999 mem: storing 3 in location 1010
 104 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 0
9999 mem: location 1007 is 1011
9999 mem: storing 0 in location 1011
 104 run: jump-unless in, 
9999 mem: location 1004 is 0
9998 run: jumping to instruction 12
 104 run: return result
9999 mem: location 1005 is 1009
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1004
9999 mem: clearing val:address:_elem
9999 mem: storing 0 in location 1006
9999 mem: clearing next:address:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1007
9999 mem: clearing prev:address:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1
9999 mem: incrementing refcount of 1009: 1 -> 2
 103 run: 1:address:shared:duplex-list:character <- push_4 4, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1003
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1009 in location 1004
9999 mem: incrementing refcount of 1009: 2 -> 3
 104 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1013
9999 mem: storing 1013 in location 1005
9999 mem: incrementing refcount of 1013: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 4
9999 mem: location 1006 is 1014
9999 mem: storing 4 in location 1014
 104 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1009
9999 mem: location 1007 is 1015
9999 mem: storing 1009 in location 1015
9999 mem: incrementing refcount of 1009: 3 -> 4
 104 run: jump-unless in, 
9999 mem: location 1004 is 1009
9998 run: jump-unless fell through
 104 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1008
 104 run: *prev <- copy result
9999 mem: location 1005 is 1013
9999 mem: location 1008 is 1012
9999 mem: storing 1013 in location 1012
9999 mem: incrementing refcount of 1013: 1 -> 2
 104 run: return result
9999 mem: location 1005 is 1013
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1009: 4 -> 3
9999 mem: storing 0 in location 1004
9999 mem: clearing val:address:_elem
9999 mem: storing 0 in location 1006
9999 mem: clearing next:address:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1007
9999 mem: clearing prev:address:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: decrementing refcount of 1009: 3 -> 2
9999 mem: storing 1013 in location 1
9999 mem: incrementing refcount of 1013: 2 -> 3
 103 run: 1:address:shared:duplex-list:character <- push_5 5, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1004
9999 mem: incrementing refcount of 1013: 3 -> 4
 104 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1017
9999 mem: storing 1017 in location 1005
9999 mem: incrementing refcount of 1017: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9999 mem: storing 1018 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 5
9999 mem: location 1006 is 1018
9999 mem: storing 5 in location 1018
 104 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1013
9999 mem: location 1007 is 1019
9999 mem: storing 1013 in location 1019
9999 mem: incrementing refcount of 1013: 4 -> 5
 104 run: jump-unless in, 
9999 mem: location 1004 is 1013
9998 run: jump-unless fell through
 104 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1009
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1008
 104 run: *prev <- copy result
9999 mem: location 1005 is 1017
9999 mem: location 1008 is 1016
9999 mem: storing 1017 in location 1016
9999 mem: incrementing refcount of 1017: 1 -> 2
 104 run: return result
9999 mem: location 1005 is 1017
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1013: 5 -> 4
9999 mem: storing 0 in location 1004
9999 mem: clearing val:address:_elem
9999 mem: storing 0 in location 1006
9999 mem: clearing next:address:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1007
9999 mem: clearing prev:address:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: decrementing refcount of 1013: 4 -> 3
9999 mem: storing 1017 in location 1
9999 mem: incrementing refcount of 1017: 2 -> 3
 103 run: 2:address:shared:duplex-list:character <- next_2 1:address:shared:duplex-list:character
9999 mem: location 1 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1021
9999 mem: storing 3 in location 1022
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 3 -> 4
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1019 is 1013
9999 mem: storing 1013 in location 1025
9999 mem: incrementing refcount of 1013: 3 -> 4
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 1013
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1017: 4 -> 3
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 2
9999 mem: incrementing refcount of 1013: 4 -> 5
 103 run: 2:address:shared:duplex-list:character <- insert_2 6, 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1003
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1004
9999 mem: incrementing refcount of 1013: 5 -> 6
 104 run: new-node:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1026
9999 mem: storing 1026 in location 1005
9999 mem: incrementing refcount of 1026: 0 -> 1
 104 run: val:address:_elem <- get-address *new-node, value:offset
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 6
9999 mem: location 1006 is 1027
9999 mem: storing 6 in location 1027
 104 run: next-node:address:shared:duplex-list:_elem <- get *in, next:offset
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1009
9999 mem: location 1016 is 1017
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1015 is 1009
9999 mem: storing 1009 in location 1007
9999 mem: incrementing refcount of 1009: 2 -> 3
 104 run: y:address:address:shared:duplex-list:_elem <- get-address *in, next:offset
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1009
9999 mem: location 1016 is 1017
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1008
 104 run: *y <- copy new-node
9999 mem: location 1005 is 1026
9999 mem: location 1008 is 1015
9999 mem: decrementing refcount of 1009: 3 -> 2
9999 mem: storing 1026 in location 1015
9999 mem: incrementing refcount of 1026: 1 -> 2
 104 run: y <- get-address *new-node, prev:offset
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 6
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9999 type: type deduced to be character$
9998 run: address to copy is 1029
9999 mem: storing 1029 in location 1008
 104 run: *y <- copy in
9999 mem: location 1004 is 1013
9999 mem: location 1008 is 1029
9999 mem: storing 1013 in location 1029
9999 mem: incrementing refcount of 1013: 6 -> 7
 104 run: y <- get-address *new-node, next:offset
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 6
9999 mem: location 1028 is 0
9999 mem: location 1029 is 1013
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9999 type: type deduced to be character$
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1008
 104 run: *y <- copy next-node
9999 mem: location 1007 is 1009
9999 mem: location 1008 is 1028
9999 mem: storing 1009 in location 1028
9999 mem: incrementing refcount of 1009: 2 -> 3
 104 run: jump-if next-node, 1:offset
9999 mem: location 1007 is 1009
9998 run: jumping to instruction 15
 104 run: y <- get-address *next-node, prev:offset
9999 mem: location 1007 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1013
9999 mem: location 1007 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1008
 104 run: *y <- copy new-node
9999 mem: location 1005 is 1026
9999 mem: location 1008 is 1012
9999 mem: decrementing refcount of 1013: 7 -> 6
9999 mem: storing 1026 in location 1012
9999 mem: incrementing refcount of 1026: 2 -> 3
 104 run: reply in:address:shared:duplex-list:_elem
9999 mem: location 1004 is 1013
9999 mem: clearing new-node:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1026: 3 -> 2
9999 mem: storing 0 in location 1005
9999 mem: clearing val:address:_elem
9999 mem: storing 0 in location 1006
9999 mem: clearing next-node:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1009: 3 -> 2
9999 mem: storing 0 in location 1007
9999 mem: clearing y:address:address:shared:duplex-list:_elem
9999 mem: storing 0 in location 1008
9999 mem: clearing y
9999 mem: storing 0 in location 1008
9999 mem: clearing y
9999 mem: storing 0 in location 1008
9999 mem: clearing y
9999 mem: storing 0 in location 1008
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: decrementing refcount of 1013: 6 -> 5
9999 mem: storing 1013 in location 2
9999 mem: incrementing refcount of 1013: 5 -> 6
 103 run: 2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
9999 mem: location 1 is 1017
9999 mem: decrementing refcount of 1013: 6 -> 5
9999 mem: storing 1017 in location 2
9999 mem: incrementing refcount of 1017: 3 -> 4
 103 run: 3:character <- first_3 2:address:shared:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 4 -> 5
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9998 run: its type is "character"
9999 mem: location 1018 is 5
9999 mem: storing 5 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 5
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1017: 5 -> 4
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 3
 103 run: 2:address:shared:duplex-list:character <- next_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 4 -> 5
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1019 is 1013
9999 mem: storing 1013 in location 1025
9999 mem: incrementing refcount of 1013: 5 -> 6
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 1013
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1017: 5 -> 4
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: decrementing refcount of 1017: 4 -> 3
9999 mem: storing 1013 in location 2
9999 mem: incrementing refcount of 1013: 6 -> 7
 103 run: 4:character <- first_3 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 7 -> 8
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1026
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1014
9998 run: its type is "character"
9999 mem: location 1014 is 4
9999 mem: storing 4 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 4
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1013: 8 -> 7
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 4
 103 run: 2:address:shared:duplex-list:character <- next_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 7 -> 8
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1026
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1015 is 1026
9999 mem: storing 1026 in location 1025
9999 mem: incrementing refcount of 1026: 2 -> 3
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 1026
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1013: 8 -> 7
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1026
9999 mem: decrementing refcount of 1013: 7 -> 6
9999 mem: storing 1026 in location 2
9999 mem: incrementing refcount of 1026: 3 -> 4
 103 run: 5:character <- first_3 2:address:shared:duplex-list:character
9999 mem: location 2 is 1026
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1024
9999 mem: incrementing refcount of 1026: 4 -> 5
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1026
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 6
9999 mem: location 1028 is 1009
9999 mem: location 1029 is 1013
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9998 run: its type is "character"
9999 mem: location 1027 is 6
9999 mem: storing 6 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 6
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1026: 5 -> 4
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 6
9999 mem: storing 6 in location 5
 103 run: 2:address:shared:duplex-list:character <- next_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1026
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1024
9999 mem: incrementing refcount of 1026: 4 -> 5
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1026
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 6
9999 mem: location 1028 is 1009
9999 mem: location 1029 is 1013
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9999 type: type deduced to be character$
9998 run: address to copy is 1028
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1028 is 1009
9999 mem: storing 1009 in location 1025
9999 mem: incrementing refcount of 1009: 2 -> 3
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 1009
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1026: 5 -> 4
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: decrementing refcount of 1026: 4 -> 3
9999 mem: storing 1009 in location 2
9999 mem: incrementing refcount of 1009: 3 -> 4
 103 run: 6:character <- first_3 2:address:shared:duplex-list:character
9999 mem: location 2 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1009 in location 1024
9999 mem: incrementing refcount of 1009: 4 -> 5
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1009
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1026
9999 mem: location 1024 is 1009
9999 mem: skipping refcount at 1009
9998 run: address to copy is 1010
9998 run: its type is "character"
9999 mem: location 1010 is 3
9999 mem: storing 3 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 3
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1009: 5 -> 4
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 6
 103 run: 2:address:shared:duplex-list:character <- prev_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1009 in location 1024
9999 mem: incrementing refcount of 1009: 4 -> 5
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1009
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1024 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1026
9999 mem: location 1024 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1012 is 1026
9999 mem: storing 1026 in location 1025
9999 mem: incrementing refcount of 1026: 3 -> 4
 104 run: return result
9999 mem: location 1025 is 1026
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1009: 5 -> 4
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1026
9999 mem: decrementing refcount of 1009: 4 -> 3
9999 mem: storing 1026 in location 2
9999 mem: incrementing refcount of 1026: 4 -> 5
 103 run: 7:character <- first_3 2:address:shared:duplex-list:character
9999 mem: location 2 is 1026
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1024
9999 mem: incrementing refcount of 1026: 5 -> 6
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1026
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 6
9999 mem: location 1028 is 1009
9999 mem: location 1029 is 1013
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9998 run: its type is "character"
9999 mem: location 1027 is 6
9999 mem: storing 6 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 6
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1026: 6 -> 5
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 6
9999 mem: storing 6 in location 7
 103 run: 2:address:shared:duplex-list:character <- prev_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1026
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1024
9999 mem: incrementing refcount of 1026: 5 -> 6
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1026
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 6
9999 mem: location 1028 is 1009
9999 mem: location 1029 is 1013
9999 mem: location 1024 is 1026
9999 mem: skipping refcount at 1026
9999 type: type deduced to be character$
9998 run: address to copy is 1029
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1029 is 1013
9999 mem: storing 1013 in location 1025
9999 mem: incrementing refcount of 1013: 6 -> 7
 104 run: return result
9999 mem: location 1025 is 1013
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1026: 6 -> 5
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: decrementing refcount of 1026: 5 -> 4
9999 mem: storing 1013 in location 2
9999 mem: incrementing refcount of 1013: 7 -> 8
 103 run: 8:character <- first_3 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 8 -> 9
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1026
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1014
9998 run: its type is "character"
9999 mem: location 1014 is 4
9999 mem: storing 4 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 4
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1013: 9 -> 8
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 8
 103 run: 2:address:shared:duplex-list:character <- prev_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 8 -> 9
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1026
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1016
9998 run: its type is ("address" "shared" "duplex-list" "character")
9999 mem: location 1016 is 1017
9999 mem: storing 1017 in location 1025
9999 mem: incrementing refcount of 1017: 3 -> 4
 104 run: return result
9999 mem: location 1025 is 1017
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1013: 9 -> 8
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: decrementing refcount of 1013: 8 -> 7
9999 mem: storing 1017 in location 2
9999 mem: incrementing refcount of 1017: 4 -> 5
 103 run: 9:character <- first_3 2:address:shared:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 5 -> 6
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9998 run: its type is "character"
9999 mem: location 1018 is 5
9999 mem: storing 5 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 5
9999 mem: clearing in:address:shared:duplex-list:_elem
9999 mem: decrementing refcount of 1017: 6 -> 5
9999 mem: storing 0 in location 1024
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 9
 103 run: 10:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
9999 mem: location 1 is 1017
9999 mem: location 2 is 1017
9999 mem: storing 1 in location 10
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 5  # scanning next
    4 <- 4
    5 <- 6  # inserted element
    6 <- 3
    7 <- 6  # then prev
    8 <- 4
    9 <- 5
    10 <- 1  # list back at start
  ]
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
