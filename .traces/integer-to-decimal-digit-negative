9991 parse: --- defining scenario_integer-to-decimal-digit-negative
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character/raw <- to-text -1\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:array:character/raw <- to-text -1\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 2\n    3 <- 45  # '-'\n    4 <- 49  # '1'\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    2 <- 2\n    3 <- 45  # '-'\n    4 <- 49  # '1'\n  ": "literal-string"}
9999 parse: recipe scenario_integer-to-decimal-digit-negative has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- rewrite 'stash' instructions in recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- deduce types for recipe scenario_integer-to-decimal-digit-negative
9993 transform: run {"\n    1:address:array:character/raw <- to-text -1\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    2 <- 2\n    3 <- 45  # '-'\n    4 <- 49  # '1'\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- deduce types for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- check for invalid types in recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- collect surrounding spaces for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- transform names for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- resolve ambiguous calls for recipe scenario_integer-to-decimal-digit-negative
9992 transform: --- compute address offsets for scenario_integer-to-decimal-digit-negative
9993 transform: - compute address offsets for run {"\n    1:address:array:character/raw <- to-text -1\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    2 <- 2\n    3 <- 45  # '-'\n    4 <- 49  # '1'\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- transform braces for recipe scenario_integer-to-decimal-digit-negative
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- type-check 'call' instructions inside recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- type-check calls inside recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- check types of reply instructions in recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- type-check merge instructions in recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- checking reply instructions against header for scenario_integer-to-decimal-digit-negative
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_integer-to-decimal-digit-negative
 102 run: run {"\n    1:address:array:character/raw <- to-text -1\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: to-text
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {-1: "literal"}
9993 parse:   product: {1: ("address" "array" "character"), "raw": ()}
9992 load: after rewriting: {1: ("address" "array" "character"), "raw": ()} <- to-text {-1: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9993 parse:   product: {2: ("array" "character"), "raw": ()}
9992 load: after rewriting: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9993 transform: {1: ("address" "array" "character"), "raw": ()} <- to-text {-1: "literal"}
9993 transform: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "array" "character"), "raw": ()} <- to-text {-1: "literal"}
9992 transform: checking variant (strict) 0: recipe to-text_2 {x: ("address" "array" "character")} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text_3 {n: "number"} -> {result: ("address" "array" "character")}
9992 transform: checking variant (strict) 2: recipe to-text_4 {x: "boolean"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe to-text_5 {x: ("address" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe to-text_6 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {1: ("address" "array" "character"), "raw": ()} <- to-text_3 {-1: "literal"}
9993 transform: - compute address offsets for {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: to-text ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "array" "character"), "raw": ()} <- to-text_3 {-1: "literal"}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 16
9999 mem: allocating size 18
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 16 in location 1001
 104 run: {n: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing -1 in location 1003
 104 run: jump-if {n: "number"}, {: "offset"}
9999 mem: location 1003 is -1
9998 run: jumping to instruction 6
 104 run: {negate-result: "boolean"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1005
 104 run: {negative?: "boolean"} <- lesser-than {n: "number"}, {0: "literal"}
9999 mem: location 1003 is -1
9999 mem: storing 1 in location 1006
 104 run: jump-unless {negative?: "boolean"}, {: "offset"}
9999 mem: location 1006 is 1
9998 run: jump-unless fell through
 104 run: {negate-result: "boolean"} <- copy {1: "literal"}
9999 mem: storing 1 in location 1005
 104 run: {n: "number"} <- multiply {n: "number"}, {-1: "literal"}
9999 mem: location 1003 is -1
9999 mem: storing 1 in location 1003
 104 run: {tmp: ("address" "buffer")} <- new-buffer {30: "literal"}
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1018
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 4 in location 1019
 105 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1021
 105 run: {result: ("address" "buffer")} <- new {buffer: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1024
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: incrementing refcount of 1024: 0 -> 1
9999 mem: storing 1024 in location 1022
 105 run: {result: ("address" "buffer"), "lookup": ()} <- put {result: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {0: "literal"}
9999 mem: location 1022 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1022 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy to is 1025
9999 mem: storing 0 in location 1025
 105 run: {data: ("address" "array" "character")} <- new {character: "type"}, {capacity: "number"}
9999 mem: location 1021 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1027
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
9999 mem: storing 30 in location 1028
9999 mem: incrementing refcount of 1027: 0 -> 1
9999 mem: storing 1027 in location 1023
 105 run: {result: ("address" "buffer"), "lookup": ()} <- put {result: ("address" "buffer"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "character")}
9999 mem: location 1022 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1023 is 1027
9999 mem: location 1022 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy to is 1026
9999 mem: incrementing refcount of 1027: 1 -> 2
9999 mem: storing 1027 in location 1026
 105 run: return {result: ("address" "buffer")}
9999 mem: location 1022 is 1024
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1024
9999 mem: incrementing refcount of 1024: 1 -> 2
9999 mem: storing 1024 in location 1007
 104 run: {digit-base: "number"} <- copy {48: "literal"}
9999 mem: storing 48 in location 1008
 104 run: {done?: "boolean"} <- equal {n: "number"}, {0: "literal"}
9999 mem: location 1003 is 1
9999 mem: storing 0 in location 1009
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 0
9998 run: jump-if fell through
 104 run: {n: "number"}, {digit: "number"} <- divide-with-remainder {n: "number"}, {10: "literal"}
9999 mem: location 1003 is 1
9999 mem: storing 0 in location 1003
9999 mem: storing 1 in location 1010
 104 run: {c: "character"} <- add {digit-base: "number"}, {digit: "number"}
9999 mem: location 1008 is 48
9999 mem: location 1010 is 1
9999 mem: storing 49 in location 1011
 104 run: {tmp: ("address" "buffer")} <- append_2 {tmp: ("address" "buffer")}, {c: "character"}
9999 mem: location 1007 is 1024
9999 mem: location 1011 is 49
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1059
9999 mem: storing 0 in location 1059
9999 mem: storing 0 in location 1060
9999 mem: storing 0 in location 1061
9999 mem: storing 0 in location 1062
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
9999 mem: storing 0 in location 1065
9999 mem: storing 0 in location 1066
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 8 in location 1060
 105 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1024: 2 -> 3
9999 mem: storing 1024 in location 1062
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 49 in location 1063
 105 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1027
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1025
9998 run: its type is "number"
9999 mem: location 1025 is 0
9999 mem: storing 0 in location 1064
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1063 is 49
9999 mem: storing 0 in location 1065
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jumping to instruction 15
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "buffer")}
9999 mem: location 1062 is 1024
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1069
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
9999 mem: storing 0 in location 1071
9999 mem: storing 0 in location 1072
9999 mem: storing 0 in location 1073
9999 mem: storing 0 in location 1074
9999 mem: storing 0 in location 1075
9999 mem: storing 0 in location 1076
9999 mem: storing 6 in location 1070
 106 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1024: 3 -> 4
9999 mem: storing 1024 in location 1072
 106 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1027
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1025
9998 run: its type is "number"
9999 mem: location 1025 is 0
9999 mem: storing 0 in location 1073
 106 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1027
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1026
9998 run: its type is ("address" "array" "character")
9999 mem: location 1026 is 1027
9999 mem: incrementing refcount of 1027: 2 -> 3
9999 mem: storing 1027 in location 1074
 106 run: {capacity: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1074 is 1027
9999 mem: skipping refcount at 1027
9999 mem: storing 30 in location 1075
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1073 is 0
9999 mem: location 1075 is 30
9999 mem: storing 0 in location 1076
 106 run: reply {result: "boolean"}
9999 mem: location 1076 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1067
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1067 is 0
9998 run: jumping to instruction 20
 105 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1027
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1026
9998 run: its type is ("address" "array" "character")
9999 mem: location 1026 is 1027
9999 mem: incrementing refcount of 1027: 3 -> 4
9999 mem: storing 1027 in location 1068
 105 run: {s: ("address" "array" "character"), "lookup": ()} <- put-index {s: ("address" "array" "character"), "lookup": ()}, {len: "number"}, {c: "character"}
9999 mem: location 1068 is 1027
9999 mem: skipping refcount at 1027
9999 mem: location 1064 is 0
9998 run: address to copy to is 1029
9999 mem: location 1063 is 49
9999 mem: storing 49 in location 1029
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1064 is 0
9999 mem: storing 1 in location 1064
 105 run: {in: ("address" "buffer"), "lookup": ()} <- put {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1027
9999 mem: location 1064 is 1
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy to is 1025
9999 mem: storing 1 in location 1025
 105 run: reply {in: ("address" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1062 is 1024
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1024
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1024 in location 1007
 104 run: jump {: "offset"}
9998 run: jumping to instruction 17
 104 run: {done?: "boolean"} <- equal {n: "number"}, {0: "literal"}
9999 mem: location 1003 is 0
9999 mem: storing 1 in location 1009
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 1
9998 run: jumping to instruction 23
 104 run: jump-unless {negate-result: "boolean"}, {: "offset"}
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 104 run: {minus: "character"} <- copy {45: "literal", "-": ()}
9999 mem: storing 45 in location 1012
 104 run: {tmp: ("address" "buffer")} <- append_2 {tmp: ("address" "buffer")}, {minus: "character"}
9999 mem: location 1007 is 1024
9999 mem: location 1012 is 45
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1059
 105 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1024: 4 -> 5
9999 mem: storing 1024 in location 1062
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 45 in location 1063
 105 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1027
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1025
9998 run: its type is "number"
9999 mem: location 1025 is 1
9999 mem: storing 1 in location 1064
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal", "backspace": ()}
9999 mem: location 1063 is 45
9999 mem: storing 0 in location 1065
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1065 is 0
9998 run: jumping to instruction 15
 105 run: {full?: "boolean"} <- buffer-full? {in: ("address" "buffer")}
9999 mem: location 1062 is 1024
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1069
 106 run: {in: ("address" "buffer")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1024: 5 -> 6
9999 mem: storing 1024 in location 1072
 106 run: {len: "number"} <- get {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1027
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1025
9998 run: its type is "number"
9999 mem: location 1025 is 1
9999 mem: storing 1 in location 1073
 106 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1027
9999 mem: location 1072 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1026
9998 run: its type is ("address" "array" "character")
9999 mem: location 1026 is 1027
9999 mem: incrementing refcount of 1027: 4 -> 5
9999 mem: storing 1027 in location 1074
 106 run: {capacity: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1074 is 1027
9999 mem: skipping refcount at 1027
9999 mem: storing 30 in location 1075
 106 run: {result: "boolean"} <- greater-or-equal {len: "number"}, {capacity: "number"}
9999 mem: location 1073 is 1
9999 mem: location 1075 is 30
9999 mem: storing 0 in location 1076
 106 run: reply {result: "boolean"}
9999 mem: location 1076 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1067
 105 run: jump-unless {full?: "boolean"}, {: "offset"}
9999 mem: location 1067 is 0
9998 run: jumping to instruction 20
 105 run: {s: ("address" "array" "character")} <- get {in: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1027
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1026
9998 run: its type is ("address" "array" "character")
9999 mem: location 1026 is 1027
9999 mem: incrementing refcount of 1027: 5 -> 6
9999 mem: storing 1027 in location 1068
 105 run: {s: ("address" "array" "character"), "lookup": ()} <- put-index {s: ("address" "array" "character"), "lookup": ()}, {len: "number"}, {c: "character"}
9999 mem: location 1068 is 1027
9999 mem: skipping refcount at 1027
9999 mem: location 1064 is 1
9998 run: address to copy to is 1030
9999 mem: location 1063 is 45
9999 mem: storing 45 in location 1030
 105 run: {len: "number"} <- add {len: "number"}, {1: "literal"}
9999 mem: location 1064 is 1
9999 mem: storing 2 in location 1064
 105 run: {in: ("address" "buffer"), "lookup": ()} <- put {in: ("address" "buffer"), "lookup": ()}, {length: "offset"}, {len: "number"}
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1027
9999 mem: location 1064 is 2
9999 mem: location 1062 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy to is 1025
9999 mem: storing 2 in location 1025
 105 run: reply {in: ("address" "buffer"), "same-as-ingredient": "0"}
9999 mem: location 1062 is 1024
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1024
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 1024 in location 1007
 104 run: {len: "number"} <- get {tmp: ("address" "buffer"), "lookup": ()}, {length: "offset"}
9999 mem: location 1007 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 2
9999 mem: location 1026 is 1027
9999 mem: location 1007 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1025
9998 run: its type is "number"
9999 mem: location 1025 is 2
9999 mem: storing 2 in location 1013
 104 run: {buf: ("address" "array" "character")} <- get {tmp: ("address" "buffer"), "lookup": ()}, {data: "offset"}
9999 mem: location 1007 is 1024
9999 mem: skipping refcount at 1024
9999 mem: location 1025 is 2
9999 mem: location 1026 is 1027
9999 mem: location 1007 is 1024
9999 mem: skipping refcount at 1024
9998 run: address to copy is 1026
9998 run: its type is ("address" "array" "character")
9999 mem: location 1026 is 1027
9999 mem: incrementing refcount of 1027: 6 -> 7
9999 mem: storing 1027 in location 1014
 104 run: {result: ("address" "array" "character")} <- new {character: "type"}, {len: "number"}
9999 mem: location 1013 is 2
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1077
9999 mem: storing 0 in location 1077
9999 mem: storing 0 in location 1078
9999 mem: storing 0 in location 1079
9999 mem: storing 0 in location 1080
9999 mem: storing 2 in location 1078
9999 mem: incrementing refcount of 1077: 0 -> 1
9999 mem: storing 1077 in location 1004
 104 run: {i: "number"} <- subtract {len: "number"}, {1: "literal"}
9999 mem: location 1013 is 2
9999 mem: storing 1 in location 1015
 104 run: {j: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1016
 104 run: {done?: "boolean"} <- lesser-than {i: "number"}, {0: "literal"}
9999 mem: location 1015 is 1
9999 mem: storing 0 in location 1009
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 0
9998 run: jump-if fell through
 104 run: {src: "character"} <- index {buf: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1014 is 1027
9999 mem: skipping refcount at 1027
9998 run: base address is 1028
9999 mem: location 1015 is 1
9998 run: address to copy is 1030
9998 run: its type is character
9999 mem: location 1030 is 45
9999 mem: storing 45 in location 1017
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {j: "number"}, {src: "character"}
9999 mem: location 1004 is 1077
9999 mem: skipping refcount at 1077
9999 mem: location 1016 is 0
9998 run: address to copy to is 1079
9999 mem: location 1017 is 45
9999 mem: storing 45 in location 1079
 104 run: {i: "number"} <- subtract {i: "number"}, {1: "literal"}
9999 mem: location 1015 is 1
9999 mem: storing 0 in location 1015
 104 run: {j: "number"} <- add {j: "number"}, {1: "literal"}
9999 mem: location 1016 is 0
9999 mem: storing 1 in location 1016
 104 run: jump {: "offset"}
9998 run: jumping to instruction 35
 104 run: {done?: "boolean"} <- lesser-than {i: "number"}, {0: "literal"}
9999 mem: location 1015 is 0
9999 mem: storing 0 in location 1009
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 0
9998 run: jump-if fell through
 104 run: {src: "character"} <- index {buf: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1014 is 1027
9999 mem: skipping refcount at 1027
9998 run: base address is 1028
9999 mem: location 1015 is 0
9998 run: address to copy is 1029
9998 run: its type is character
9999 mem: location 1029 is 49
9999 mem: storing 49 in location 1017
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {j: "number"}, {src: "character"}
9999 mem: location 1004 is 1077
9999 mem: skipping refcount at 1077
9999 mem: location 1016 is 1
9998 run: address to copy to is 1080
9999 mem: location 1017 is 49
9999 mem: storing 49 in location 1080
 104 run: {i: "number"} <- subtract {i: "number"}, {1: "literal"}
9999 mem: location 1015 is 0
9999 mem: storing -1 in location 1015
 104 run: {j: "number"} <- add {j: "number"}, {1: "literal"}
9999 mem: location 1016 is 1
9999 mem: storing 2 in location 1016
 104 run: jump {: "offset"}
9998 run: jumping to instruction 35
 104 run: {done?: "boolean"} <- lesser-than {i: "number"}, {0: "literal"}
9999 mem: location 1015 is -1
9999 mem: storing 1 in location 1009
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1009 is 1
9998 run: jumping to instruction 42
 104 run: reply {result: ("address" "array" "character")}
9999 mem: location 1004 is 1077
9999 abandon: saving in free-list of size 18
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1077
9999 mem: incrementing refcount of 1077: 1 -> 2
9999 mem: storing 1077 in location 1
 103 run: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9999 mem: location 1 is 1077
9999 mem: skipping refcount at 1077
9999 mem: location 1078 is 2
9999 mem: location 1079 is 45
9999 mem: location 1080 is 49
9999 mem: storing 2 in location 2
9999 mem: storing 45 in location 3
9999 mem: storing 49 in location 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    2 <- 2\n    3 <- 45  # '-'\n    4 <- 49  # '1'\n  ": "literal-string"}
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
