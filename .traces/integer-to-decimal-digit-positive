9991 parse: --- defining scenario_integer-to-decimal-digit-positive
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character/raw <- to-text 234\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:array:character/raw <- to-text 234\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2:array:character <- [234]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    2:array:character <- [234]\n  ": "literal-string"}
9999 parse: recipe scenario_integer-to-decimal-digit-positive has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- rewrite 'stash' instructions in recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- deduce types for recipe scenario_integer-to-decimal-digit-positive
9993 transform: run {"\n    1:address:array:character/raw <- to-text 234\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    2:array:character <- [234]\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- deduce types for recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- check for invalid types in recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- collect surrounding spaces for recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- transform names for recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- resolve ambiguous calls for recipe scenario_integer-to-decimal-digit-positive
9992 transform: --- compute address offsets for scenario_integer-to-decimal-digit-positive
9993 transform: - compute address offsets for run {"\n    1:address:array:character/raw <- to-text 234\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    2:array:character <- [234]\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- transform braces for recipe scenario_integer-to-decimal-digit-positive
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- perform checks for recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- type-check 'call' instructions inside recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- type-check calls inside recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- check types of reply instructions in recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- type-check merge instructions in recipe scenario_integer-to-decimal-digit-positive
9991 transform: --- checking reply instructions against header for scenario_integer-to-decimal-digit-positive
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_integer-to-decimal-digit-positive
 102 run: run {"\n    1:address:array:character/raw <- to-text 234\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: to-text
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {234: "literal"}
9993 parse:   product: {1: ("address" "array" "character"), "raw": ()}
9992 load: after rewriting: {1: ("address" "array" "character"), "raw": ()} <- to-text {234: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9993 parse:   product: {2: ("array" "character"), "raw": ()}
9992 load: after rewriting: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9993 transform: {1: ("address" "array" "character"), "raw": ()} <- to-text {234: "literal"}
9993 transform: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "array" "character"), "raw": ()} <- to-text {234: "literal"}
9992 transform: checking variant (strict) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {1: ("address" "array" "character"), "raw": ()} <- to-text {234: "literal"}
9993 transform: - compute address offsets for {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: to-text ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "array" "character"), "raw": ()} <- to-text {234: "literal"}
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 1000: 0 -> 1
9999 mem: storing 1000 in location 1
 103 run: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9999 mem: location 1 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1001 is 3
9999 mem: location 1002 is 50
9999 mem: location 1003 is 51
9999 mem: location 1004 is 52
9999 mem: storing 3 in location 2
9999 mem: storing 50 in location 3
9999 mem: storing 51 in location 4
9999 mem: storing 52 in location 5
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    2:array:character <- [234]\n  ": "literal-string"}
9999 run: checking string length at 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
