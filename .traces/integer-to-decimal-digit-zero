9991 parse: --- defining scenario_integer-to-decimal-digit-zero
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character/raw <- to-text 0\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:array:character/raw <- to-text 0\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2:array:character <- [0]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    2:array:character <- [0]\n  ": "literal-string"}
9999 parse: recipe scenario_integer-to-decimal-digit-zero has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- rewrite 'stash' instructions in recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- deduce types for recipe scenario_integer-to-decimal-digit-zero
9993 transform: run {"\n    1:address:array:character/raw <- to-text 0\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    2:array:character <- [0]\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- deduce types for recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- check for invalid types in recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- collect surrounding spaces for recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- transform names for recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- resolve ambiguous calls for recipe scenario_integer-to-decimal-digit-zero
9992 transform: --- compute address offsets for scenario_integer-to-decimal-digit-zero
9993 transform: - compute address offsets for run {"\n    1:address:array:character/raw <- to-text 0\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    2:array:character <- [0]\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- transform braces for recipe scenario_integer-to-decimal-digit-zero
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- perform checks for recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- type-check 'call' instructions inside recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- type-check calls inside recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- check types of reply instructions in recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- type-check merge instructions in recipe scenario_integer-to-decimal-digit-zero
9991 transform: --- checking reply instructions against header for scenario_integer-to-decimal-digit-zero
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_integer-to-decimal-digit-zero
 102 run: run {"\n    1:address:array:character/raw <- to-text 0\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: to-text
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {1: ("address" "array" "character"), "raw": ()}
9992 load: after rewriting: {1: ("address" "array" "character"), "raw": ()} <- to-text {0: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9993 parse:   product: {2: ("array" "character"), "raw": ()}
9992 load: after rewriting: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9993 transform: {1: ("address" "array" "character"), "raw": ()} <- to-text {0: "literal"}
9993 transform: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "array" "character"), "raw": ()} <- to-text {0: "literal"}
9992 transform: checking variant (strict) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 236 to-text_2
9993 transform: switching to-text to specialized recipe to-text_3 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: compute type names: to-text_3
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'in' is ("address" "list" "_elem")
9994 transform:     checking {result: ("address" "array" "character")}: ("address" "array" "character")
9993 transform: type of 'result' is ("address" "array" "character")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {buf: ("address" "buffer")} <- new-buffer {80: "literal"}
9994 transform:     checking {80: "literal"}: "literal"
9993 transform: type of '80' is "literal"
9994 transform:     checking {buf: ("address" "buffer")}: ("address" "buffer")
9993 transform: type of 'buf' is ("address" "buffer")
9993 transform:   instruction: {buf: ()} <- to-buffer {in: ()}, {buf: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {buf: ()}: ()
9994 transform:     deducing type to ("address" "buffer")
9994 transform:     checking {buf: ()}: ()
9994 transform:     deducing type to ("address" "buffer")
9993 transform:   instruction: {result: ()} <- buffer-to-array {buf: ()}
9994 transform:     checking {buf: ()}: ()
9994 transform:     deducing type to ("address" "buffer")
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "array" "character")
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {1: ("address" "array" "character"), "raw": ()} <- to-text {0: "literal"}
9993 transform: - compute address offsets for {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: to-text ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "array" "character"), "raw": ()} <- to-text {0: "literal"}
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 1000: 0 -> 1
9999 mem: storing 1000 in location 1
 103 run: {2: ("array" "character"), "raw": ()} <- copy {1: ("address" "array" "character"), "raw": (), "lookup": ()}
9999 mem: location 1 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1001 is 1
9999 mem: location 1002 is 48
9999 mem: storing 1 in location 2
9999 mem: storing 48 in location 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    2:array:character <- [0]\n  ": "literal-string"}
9999 run: checking string length at 2
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
