9991 parse: --- defining scenario_list-handling
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:list:number <- push 3, 0\n    1:address:list:number <- push 4, 1:address:list:number\n    1:address:list:number <- push 5, 1:address:list:number\n    2:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    3:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    4:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:list:number <- push 3, 0\n    1:address:list:number <- push 4, 1:address:list:number\n    1:address:list:number <- push 5, 1:address:list:number\n    2:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    3:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    4:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ": "literal-string"}
9999 parse: recipe scenario_list-handling has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_list-handling
9991 transform: --- rewrite 'stash' instructions in recipe scenario_list-handling
9991 transform: --- deduce types for recipe scenario_list-handling
9993 transform: run {"\n    1:address:list:number <- push 3, 0\n    1:address:list:number <- push 4, 1:address:list:number\n    1:address:list:number <- push 5, 1:address:list:number\n    2:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    3:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    4:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_list-handling
9991 transform: --- deduce types for recipe scenario_list-handling
9991 transform: --- check for invalid types in recipe scenario_list-handling
9991 transform: --- collect surrounding spaces for recipe scenario_list-handling
9991 transform: --- transform names for recipe scenario_list-handling
9991 transform: --- resolve ambiguous calls for recipe scenario_list-handling
9991 transform: --- compute instruction operations for recipe scenario_list-handling
9991 transform: --- transform braces for recipe scenario_list-handling
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_list-handling
9991 transform: --- type-check 'call' instructions inside recipe scenario_list-handling
9991 transform: --- type-check calls inside recipe scenario_list-handling
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_list-handling
9991 transform: --- check types of reply instructions in recipe scenario_list-handling
9991 transform: --- type-check merge instructions in recipe scenario_list-handling
9991 transform: --- checking reply instructions against header for scenario_list-handling
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_list-handling
 102 run: run {"\n    1:address:list:number <- push 3, 0\n    1:address:list:number <- push 4, 1:address:list:number\n    1:address:list:number <- push 5, 1:address:list:number\n    2:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    3:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    4:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {3: "literal"}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {1: ("address" "list" "number")}
9992 load: after rewriting: {1: ("address" "list" "number")} <- push {3: "literal"}, {0: "literal"}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {4: "literal"}
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {1: ("address" "list" "number")}
9992 load: after rewriting: {1: ("address" "list" "number")} <- push {4: "literal"}, {1: ("address" "list" "number")}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal"}
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {1: ("address" "list" "number")}
9992 load: after rewriting: {1: ("address" "list" "number")} <- push {5: "literal"}, {1: ("address" "list" "number")}
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {2: "number"}
9992 load: after rewriting: {2: "number"} <- first {1: ("address" "list" "number")}
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {1: ("address" "list" "number")}
9992 load: after rewriting: {1: ("address" "list" "number")} <- rest {1: ("address" "list" "number")}
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {3: "number"}
9992 load: after rewriting: {3: "number"} <- first {1: ("address" "list" "number")}
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {1: ("address" "list" "number")}
9992 load: after rewriting: {1: ("address" "list" "number")} <- rest {1: ("address" "list" "number")}
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- first {1: ("address" "list" "number")}
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "list" "number")}
9993 parse:   product: {1: ("address" "list" "number")}
9992 load: after rewriting: {1: ("address" "list" "number")} <- rest {1: ("address" "list" "number")}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "list" "number")} <- push {3: "literal"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 238 push
9993 transform: switching push to specialized recipe push_6 {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: compute type names: push_6
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of in is ("address" "list" "_elem")
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ("address" "list" "_elem")} <- new {(list _elem): "type"}
9994 transform:     checking {(list _elem): "type"}: "type"
9993 transform: type of (list _elem) is "type"
9994 transform:     checking {result: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of result is ("address" "list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: return {result: ()}
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem")} <- new {(list _elem): "type"}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "number"
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'return {result: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9992 transform: transforming new specialization: push_6
9991 transform: --- rewrite literal strings in recipe push_6
9991 transform: --- rewrite 'stash' instructions in recipe push_6
9991 transform: --- deduce types for recipe push_6
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: in => ("address" "list" "number")
9992 transform: result => ("address" "list" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "number"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "list" "number")} <- new {(list number): "type"}
9993 transform: {result: ("address" "list" "number"), "lookup": ()} <- merge {x: "number"}, {in: ("address" "list" "number")}
9993 transform: return {result: ("address" "list" "number")}
9991 transform: --- checking reply instructions against header for push_6
9991 transform: --- fill in reply ingredients from header for recipe push_6
9991 transform: --- deduce types for recipe push_6
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: in => ("address" "list" "number")
9992 transform: result => ("address" "list" "number")
9991 transform: --- deduce types from header for push_6
9993 transform: type of x is "number"
9993 transform: type of in is ("address" "list" "number")
9993 transform: type of in is ("address" "list" "number")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "number"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "number"}
9992 transform: instruction: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "number")}
9992 transform: instruction: {result: ("address" "list" "number")} <- new {(list number): "type"}
9993 transform:   product: {result: ("address" "list" "number")}
9992 transform: instruction: {result: ("address" "list" "number"), "lookup": ()} <- merge {x: "number"}, {in: ("address" "list" "number")}
9993 transform:   product: {result: ("address" "list" "number"), "lookup": ()}
9992 transform: instruction: return {result: ("address" "list" "number"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe push_6
9991 transform: --- collect surrounding spaces for recipe push_6
9991 transform: --- transform names for recipe push_6
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9991 transform: --- resolve ambiguous calls for recipe push_6
9991 transform: --- compute instruction operations for recipe push_6
9991 transform: --- transform braces for recipe push_6
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: return ...
9991 transform: --- perform checks for recipe push_6
9991 transform: --- type-check 'call' instructions inside recipe push_6
9991 transform: --- type-check calls inside recipe push_6
9991 transform: --- convert 'new' to 'allocate' for recipe push_6
9992 new: size of "location" is 1
9992 new: size of ("list" "number") is 2
9991 transform: --- check types of reply instructions in recipe push_6
9991 transform: --- type-check merge instructions in recipe push_6
9999 transform: 0 vs 2
9999 transform: checking container {result: ("list" "number")} || {value: "number"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {result: ("list" "number")} || {next: ("address" "list" "number")} vs ingredient 1
9991 transform: --- check that recipe push_6 sets default-space
9991 transform: --- checking reply instructions against header for push_6
9992 transform: new specialization: push_6
9992 transform: instruction {1: ("address" "list" "number")} <- push {4: "literal"}, {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "number"} {in: ("address" "list" "number")} -> {in: ("address" "list" "number")}
9992 transform: instruction {1: ("address" "list" "number")} <- push {5: "literal"}, {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "number"} {in: ("address" "list" "number")} -> {in: ("address" "list" "number")}
9992 transform: instruction {2: "number"} <- first {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe first {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {in: ("address" "duplex-list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {in: ("address" "list" "address" "operation")} -> {result: ("address" "operation")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 239 first
9993 transform: switching first to specialized recipe first_4 {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: compute type names: first_4
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of in is ("address" "list" "_elem")
9994 transform:     checking {result: "_elem"}: "_elem"
9993 transform: type of result is "_elem"
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ()} <- get {in: (), "lookup": ()}, {value: "offset"}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {value: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to "_elem"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: "_elem"} <- get {in: ("address" "list" "_elem"), "lookup": ()}, {value: "offset"}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in ingredient value:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9992 transform: transforming new specialization: first_4
9991 transform: --- rewrite literal strings in recipe first_4
9991 transform: --- rewrite 'stash' instructions in recipe first_4
9991 transform: --- deduce types for recipe first_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "number")
9992 transform: result => "number"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9993 transform: {result: "number"} <- get {in: ("address" "list" "number"), "lookup": ()}, {value: "offset"}
9991 transform: --- checking reply instructions against header for first_4
9991 transform: --- fill in reply ingredients from header for recipe first_4
9991 transform: --- deduce types for recipe first_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "number")
9992 transform: result => "number"
9991 transform: --- deduce types from header for first_4
9993 transform: type of in is ("address" "list" "number")
9993 transform: type of result is "number"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "number")}
9992 transform: instruction: {result: "number"} <- get {in: ("address" "list" "number"), "lookup": ()}, {value: "offset"}
9993 transform:   product: {result: "number"}
9992 transform: instruction: reply {result: "number"}
9991 transform: --- check for invalid types in recipe first_4
9991 transform: --- collect surrounding spaces for recipe first_4
9991 transform: --- transform names for recipe first_4
9993 name: assign in 1
9993 name: element value of type list is at offset 0
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe first_4
9991 transform: --- compute instruction operations for recipe first_4
9991 transform: --- transform braces for recipe first_4
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe first_4
9991 transform: --- type-check 'call' instructions inside recipe first_4
9991 transform: --- type-check calls inside recipe first_4
9991 transform: --- convert 'new' to 'allocate' for recipe first_4
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe first_4
9991 transform: --- type-check merge instructions in recipe first_4
9991 transform: --- check that recipe first_4 sets default-space
9991 transform: --- checking reply instructions against header for first_4
9992 transform: new specialization: first_4
9992 transform: instruction {1: ("address" "list" "number")} <- rest {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 240 rest
9993 transform: switching rest to specialized recipe rest_3 {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: compute type names: rest_3
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of in is ("address" "list" "_elem")
9994 transform:     checking {result: ("address" "list" "_elem"), "contained-in": "in"}: ("address" "list" "_elem")
9993 transform: type of result is ("address" "list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ()} <- get {in: (), "lookup": ()}, {next: "offset"}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {next: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem/contained-in:in
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem")} <- get {in: ("address" "list" "_elem"), "lookup": ()}, {next: "offset"}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9992 transform: transforming new specialization: rest_3
9991 transform: --- rewrite literal strings in recipe rest_3
9991 transform: --- rewrite 'stash' instructions in recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "number")
9992 transform: result => ("address" "list" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "list" "number")} <- get {in: ("address" "list" "number"), "lookup": ()}, {next: "offset"}
9991 transform: --- checking reply instructions against header for rest_3
9991 transform: --- fill in reply ingredients from header for recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "number")
9992 transform: result => ("address" "list" "number")
9991 transform: --- deduce types from header for rest_3
9993 transform: type of in is ("address" "list" "number")
9993 transform: type of result is ("address" "list" "number")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "number")}
9992 transform: instruction: {result: ("address" "list" "number")} <- get {in: ("address" "list" "number"), "lookup": ()}, {next: "offset"}
9993 transform:   product: {result: ("address" "list" "number")}
9992 transform: instruction: reply {result: ("address" "list" "number"), "contained-in": "in"}
9991 transform: --- check for invalid types in recipe rest_3
9991 transform: --- collect surrounding spaces for recipe rest_3
9991 transform: --- transform names for recipe rest_3
9993 name: assign in 1
9993 name: element next of type list is at offset 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe rest_3
9991 transform: --- compute instruction operations for recipe rest_3
9991 transform: --- transform braces for recipe rest_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe rest_3
9991 transform: --- type-check 'call' instructions inside recipe rest_3
9991 transform: --- type-check calls inside recipe rest_3
9991 transform: --- convert 'new' to 'allocate' for recipe rest_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe rest_3
9991 transform: --- type-check merge instructions in recipe rest_3
9991 transform: --- check that recipe rest_3 sets default-space
9991 transform: --- checking reply instructions against header for rest_3
9992 transform: new specialization: rest_3
9992 transform: instruction {3: "number"} <- first {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe first {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {in: ("address" "duplex-list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {in: ("address" "list" "address" "operation")} -> {result: ("address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe first_4 {in: ("address" "list" "number")} -> {result: "number"}
9992 transform: instruction {1: ("address" "list" "number")} <- rest {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe rest_3 {in: ("address" "list" "number")} -> {result: ("address" "list" "number"), "contained-in": "in"}
9992 transform: instruction {4: "number"} <- first {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe first {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {in: ("address" "duplex-list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {in: ("address" "list" "address" "operation")} -> {result: ("address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe first_4 {in: ("address" "list" "number")} -> {result: "number"}
9992 transform: instruction {1: ("address" "list" "number")} <- rest {1: ("address" "list" "number")}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe rest_3 {in: ("address" "list" "number")} -> {result: ("address" "list" "number"), "contained-in": "in"}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: first ...
9992 transform: rest ...
9992 transform: first ...
9992 transform: rest ...
9992 transform: first ...
9992 transform: rest ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "list" "number")} <- push_6 {3: "literal"}, {0: "literal"}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 4 in location 1001
 104 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
 104 run: {result: ("address" "list" "number")} <- new {(list number): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1006
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: incrementing refcount of 1006: 0 -> 1
9999 mem: storing 1006 in location 1005
 104 run: {result: ("address" "list" "number"), "lookup": ()} <- merge {x: "number"}, {in: ("address" "list" "number")}
9999 mem: location 1003 is 3
9999 mem: location 1004 is 0
9999 mem: location 1005 is 1006
9999 mem: skipping refcount at 1006
9999 mem: location 1005 is 1006
9999 mem: skipping refcount at 1006
9999 mem: storing 3 in location 1007
9999 mem: storing 0 in location 1008
 104 run: return {result: ("address" "list" "number"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1006
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1006
9999 mem: incrementing refcount of 1006: 1 -> 2
9999 mem: storing 1006 in location 1
 103 run: {1: ("address" "list" "number")} <- push_6 {4: "literal"}, {1: ("address" "list" "number")}
9999 mem: location 1 is 1006
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1000
 104 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1003
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1006: 2 -> 3
9999 mem: storing 1006 in location 1004
 104 run: {result: ("address" "list" "number")} <- new {(list number): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1009
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: incrementing refcount of 1009: 0 -> 1
9999 mem: storing 1009 in location 1005
 104 run: {result: ("address" "list" "number"), "lookup": ()} <- merge {x: "number"}, {in: ("address" "list" "number")}
9999 mem: location 1003 is 4
9999 mem: location 1004 is 1006
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 mem: storing 4 in location 1010
9999 mem: storing 1006 in location 1011
 104 run: return {result: ("address" "list" "number"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1009
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: decrementing refcount of 1006: 3 -> 2
9999 mem: incrementing refcount of 1009: 1 -> 2
9999 mem: storing 1009 in location 1
 103 run: {1: ("address" "list" "number")} <- push_6 {5: "literal"}, {1: ("address" "list" "number")}
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1000
 104 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1009: 2 -> 3
9999 mem: storing 1009 in location 1004
 104 run: {result: ("address" "list" "number")} <- new {(list number): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1012
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: incrementing refcount of 1012: 0 -> 1
9999 mem: storing 1012 in location 1005
 104 run: {result: ("address" "list" "number"), "lookup": ()} <- merge {x: "number"}, {in: ("address" "list" "number")}
9999 mem: location 1003 is 5
9999 mem: location 1004 is 1009
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 5 in location 1013
9999 mem: storing 1009 in location 1014
 104 run: return {result: ("address" "list" "number"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1012
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1009: 3 -> 2
9999 mem: incrementing refcount of 1012: 1 -> 2
9999 mem: storing 1012 in location 1
 103 run: {2: "number"} <- first_4 {1: ("address" "list" "number")}
9999 mem: location 1 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1015
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 3 in location 1016
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1012: 2 -> 3
9999 mem: storing 1012 in location 1018
 104 run: {result: "number"} <- get {in: ("address" "list" "number"), "lookup": ()}, {value: "offset"}
9999 mem: location 1018 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 1009
9999 mem: location 1018 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is "number"
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1019
 104 run: reply {result: "number"}
9999 mem: location 1019 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 2
 103 run: {1: ("address" "list" "number")} <- rest_3 {1: ("address" "list" "number")}
9999 mem: location 1 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1015
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1012: 3 -> 4
9999 mem: storing 1012 in location 1018
 104 run: {result: ("address" "list" "number")} <- get {in: ("address" "list" "number"), "lookup": ()}, {next: "offset"}
9999 mem: location 1018 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 5
9999 mem: location 1014 is 1009
9999 mem: location 1018 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is ("address" "list" "number")
9999 mem: location 1014 is 1009
9999 mem: incrementing refcount of 1009: 2 -> 3
9999 mem: storing 1009 in location 1019
 104 run: reply {result: ("address" "list" "number"), "contained-in": "in"}
9999 mem: location 1019 is 1009
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: decrementing refcount of 1012: 4 -> 3
9999 mem: incrementing refcount of 1009: 3 -> 4
9999 mem: storing 1009 in location 1
 103 run: {3: "number"} <- first_4 {1: ("address" "list" "number")}
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1015
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1009: 4 -> 5
9999 mem: storing 1009 in location 1018
 104 run: {result: "number"} <- get {in: ("address" "list" "number"), "lookup": ()}, {value: "offset"}
9999 mem: location 1018 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 4
9999 mem: location 1011 is 1006
9999 mem: location 1018 is 1009
9999 mem: skipping refcount at 1009
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 4
9999 mem: storing 4 in location 1019
 104 run: reply {result: "number"}
9999 mem: location 1019 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 3
 103 run: {1: ("address" "list" "number")} <- rest_3 {1: ("address" "list" "number")}
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1015
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1009: 5 -> 6
9999 mem: storing 1009 in location 1018
 104 run: {result: ("address" "list" "number")} <- get {in: ("address" "list" "number"), "lookup": ()}, {next: "offset"}
9999 mem: location 1018 is 1009
9999 mem: skipping refcount at 1009
9999 mem: location 1010 is 4
9999 mem: location 1011 is 1006
9999 mem: location 1018 is 1009
9999 mem: skipping refcount at 1009
9998 run: address to copy is 1011
9998 run: its type is ("address" "list" "number")
9999 mem: location 1011 is 1006
9999 mem: incrementing refcount of 1006: 2 -> 3
9999 mem: storing 1006 in location 1019
 104 run: reply {result: ("address" "list" "number"), "contained-in": "in"}
9999 mem: location 1019 is 1006
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1006
9999 mem: decrementing refcount of 1009: 6 -> 5
9999 mem: incrementing refcount of 1006: 3 -> 4
9999 mem: storing 1006 in location 1
 103 run: {4: "number"} <- first_4 {1: ("address" "list" "number")}
9999 mem: location 1 is 1006
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1015
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1006: 4 -> 5
9999 mem: storing 1006 in location 1018
 104 run: {result: "number"} <- get {in: ("address" "list" "number"), "lookup": ()}, {value: "offset"}
9999 mem: location 1018 is 1006
9999 mem: skipping refcount at 1006
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1018 is 1006
9999 mem: skipping refcount at 1006
9998 run: address to copy is 1007
9998 run: its type is "number"
9999 mem: location 1007 is 3
9999 mem: storing 3 in location 1019
 104 run: reply {result: "number"}
9999 mem: location 1019 is 3
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 4
 103 run: {1: ("address" "list" "number")} <- rest_3 {1: ("address" "list" "number")}
9999 mem: location 1 is 1006
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1015
 104 run: {in: ("address" "list" "number")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1006: 5 -> 6
9999 mem: storing 1006 in location 1018
 104 run: {result: ("address" "list" "number")} <- get {in: ("address" "list" "number"), "lookup": ()}, {next: "offset"}
9999 mem: location 1018 is 1006
9999 mem: skipping refcount at 1006
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1018 is 1006
9999 mem: skipping refcount at 1006
9998 run: address to copy is 1008
9998 run: its type is ("address" "list" "number")
9999 mem: location 1008 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1019
 104 run: reply {result: ("address" "list" "number"), "contained-in": "in"}
9999 mem: location 1019 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1006: 6 -> 5
9999 mem: storing 0 in location 1
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ": "literal-string"}
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
