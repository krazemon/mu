9991 parse: --- defining new-scope
9993 parse: instruction: new-default-space
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {x: ("address" "number")}
9992 load: after rewriting: {x: ("address" "number")} <- new {number: "type"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {x: ("address" "number"), "lookup": ()}
9992 load: after rewriting: {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {default-space: ("address" "array" "location")}
9992 load: after rewriting: return {default-space: ("address" "array" "location")}
9991 parse: --- defining use-scope
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: next-ingredient
9993 parse:   number of ingredients: 0
9993 parse:   product: {outer: ("address" "array" "location")}
9992 load: after rewriting: {outer: ("address" "array" "location")} <- next-ingredient 
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {outer: ("address" "array" "location")}
9993 parse:   product: {0: ("address" "array" "location"), "names": "new-scope"}
9992 load: after rewriting: {0: ("address" "array" "location"), "names": "new-scope"} <- copy {outer: ("address" "array" "location")}
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ("address" "number"), "space": "1", "lookup": ()}
9992 load: after rewriting: return {x: ("address" "number"), "space": "1", "lookup": ()}
9991 parse: --- defining main
9993 parse: instruction: new-scope
9993 parse:   number of ingredients: 0
9993 parse:   product: {1: ("address" "array" "location"), "raw": ()}
9992 load: after rewriting: {1: ("address" "array" "location"), "raw": ()} <- new-scope 
9993 parse: instruction: use-scope
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "array" "location"), "raw": ()}
9993 parse:   product: {2: "number", "raw": ()}
9992 load: after rewriting: {2: "number", "raw": ()} <- use-scope {1: ("address" "array" "location"), "raw": ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe new-scope
9991 transform: --- rewrite literal strings in recipe use-scope
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9993 transform: {1: ("address" "array" "location"), "raw": ()} <- new-scope 
9993 transform: {2: "number", "raw": ()} <- use-scope {1: ("address" "array" "location"), "raw": ()}
9991 transform: --- rewrite 'stash' instructions in recipe new-scope
9991 transform: --- deduce types for recipe new-scope
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "number")} <- new {number: "type"}
9993 transform: {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: return {default-space: ("address" "array" "location")}
9991 transform: --- rewrite 'stash' instructions in recipe use-scope
9991 transform: --- deduce types for recipe use-scope
9992 transform: default-space => ("address" "array" "location")
9992 transform: outer => ("address" "array" "location")
9992 transform: x => ("address" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {outer: ("address" "array" "location")} <- next-ingredient 
9993 transform: {0: ("address" "array" "location"), "names": "new-scope"} <- copy {outer: ("address" "array" "location")}
9993 transform: return {x: ("address" "number"), "space": "1", "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe new-scope
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9991 transform: --- deduce types for recipe use-scope
9992 transform: default-space => ("address" "array" "location")
9992 transform: outer => ("address" "array" "location")
9992 transform: x => ("address" "number")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe new-scope
9991 transform: --- check for invalid types in recipe use-scope
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe new-scope
9991 transform: --- collect surrounding spaces for recipe use-scope
9993 name: lexically surrounding space for recipe use-scope comes from new-scope
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe new-scope
9993 name: assign x 1
9991 transform: --- transform names for recipe use-scope
9993 name: assign outer 1
9991 transform: --- resolve ambiguous calls for recipe main
9991 transform: --- resolve ambiguous calls for recipe new-scope
9991 transform: --- resolve ambiguous calls for recipe use-scope
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: ("address" "array" "location"), "raw": ()} <- new-scope 
9993 transform: - compute address offsets for {2: "number", "raw": ()} <- use-scope {1: ("address" "array" "location"), "raw": ()}
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for new-scope
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "number")} <- new {number: "type"}
9993 transform: - compute address offsets for {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9993 transform: - compute address offsets for return {default-space: ("address" "array" "location")}
9992 transform: --- compute address offsets for use-scope
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {outer: ("address" "array" "location")} <- next-ingredient 
9993 transform: - compute address offsets for {0: ("address" "array" "location"), "names": "new-scope"} <- copy {outer: ("address" "array" "location")}
9993 transform: - compute address offsets for return {x: ("address" "number"), "space": "1", "lookup": ()}
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe new-scope
9991 transform: --- compute instruction operations for recipe use-scope
9991 transform: --- transform braces for recipe main
9992 transform: new-scope ...
9992 transform: use-scope ...
9992 transform:  ...
9991 transform: --- transform braces for recipe new-scope
9992 transform: new-default-space ...
9992 transform: new ...
9992 transform: copy ...
9992 transform: return ...
9991 transform: --- transform braces for recipe use-scope
9992 transform: local-scope ...
9992 transform: next-ingredient ...
9992 transform: copy ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- check mutability of ingredients in recipe new-scope
9991 transform: --- check mutability of ingredients in recipe use-scope
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe new-scope
9991 transform: --- perform checks for recipe use-scope
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe new-scope
9991 transform: --- type-check 'call' instructions inside recipe use-scope
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe new-scope
9991 transform: --- type-check calls inside recipe use-scope
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe new-scope
9992 new: size of "location" is 1
9992 new: size of "number" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe use-scope
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe new-scope
9991 transform: --- check types of reply instructions in recipe use-scope
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe new-scope
9991 transform: --- type-check merge instructions in recipe use-scope
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: ("address" "array" "location"), "raw": ()} <- new-scope 
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 2 in location 1001
 103 run: {x: ("address" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1004
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1004: 0 -> 1
9999 mem: storing 1004 in location 1003
 103 run: {x: ("address" "number"), "lookup": ()} <- copy {34: "literal"}
9999 mem: location 1003 is 1004
9999 mem: skipping refcount at 1004
9999 mem: storing 34 in location 1005
 103 run: return {default-space: ("address" "array" "location")}
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1000
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 1000: 0 -> 1
9999 mem: storing 1000 in location 1
 102 run: {2: "number", "raw": ()} <- use-scope {1: ("address" "array" "location"), "raw": ()}
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1006
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 2 in location 1007
 103 run: {outer: ("address" "array" "location")} <- next-ingredient 
9999 mem: location 1009 is 0
9999 mem: incrementing refcount of 1000: 1 -> 2
9999 mem: storing 1000 in location 1009
 103 run: {0: ("address" "array" "location"), "names": "new-scope"} <- copy {outer: ("address" "array" "location")}
9999 mem: location 1009 is 1000
9999 mem: location 1008 is 0
9999 mem: incrementing refcount of 1000: 2 -> 3
9999 mem: storing 1000 in location 1008
 103 run: return {x: ("address" "number"), "space": "1", "lookup": ()}
9999 mem: location 1003 is 1004
9999 mem: skipping refcount at 1004
9999 mem: location 1005 is 34
9999 mem: clearing outer:address:array:location
9999 mem: location 1009 is 1000
9999 mem: skipping refcount at 1000
9999 mem: decrementing refcount of 1000: 3 -> 2
9999 mem: storing 0 in location 1009
9999 mem: clearing 0:address:array:location/names:new-scope
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9999 mem: decrementing refcount of 1000: 2 -> 1
9999 mem: storing 0 in location 1008
9999 mem: automatically abandoning 1006
9999 abandon: updating refcounts inside 1006: (array number)
9999 abandon: saving 1006 in free-list of size 4
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 34
9999 mem: storing 34 in location 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
