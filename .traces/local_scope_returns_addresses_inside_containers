9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: ("address" "number")}
9991 parse: --- defining f
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {x: ("address" "number")}
9992 load: after rewriting: {x: ("address" "number")} <- new {number: "type"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {12: "literal"}
9993 parse:   product: {x: (), "lookup": ()}
9992 load: after rewriting: {x: (), "lookup": ()} <- copy {12: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {x: ()}
9993 parse:   product: {y: "foo"}
9992 load: after rewriting: {y: "foo"} <- merge {34: "literal"}, {x: ()}
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {y: ()}
9992 load: after rewriting: return {y: ()}
9991 parse: --- defining main
9993 parse: instruction: f
9993 parse:   number of ingredients: 0
9993 parse:   product: {1: "foo"}
9992 load: after rewriting: {1: "foo"} <- f 
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "foo"}
9993 parse:   ingredient: {x: "offset"}
9993 parse:   product: {3: "number"}
9992 load: after rewriting: {3: "number"} <- get {1: "foo"}, {x: "offset"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: "foo"}
9993 parse:   ingredient: {y: "offset"}
9993 parse:   product: {4: ("address" "number")}
9992 load: after rewriting: {4: ("address" "number")} <- get {1: "foo"}, {y: "offset"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {4: ("address" "number"), "lookup": ()}
9993 parse:   product: {5: "number"}
9992 load: after rewriting: {5: "number"} <- copy {4: ("address" "number"), "lookup": ()}
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {1: "foo"}
9993 parse:   ingredient: {y: "offset"}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {1: "foo"}
9992 load: after rewriting: {1: "foo"} <- put {1: "foo"}, {y: "offset"}, {0: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {4: ("address" "number")}
9992 load: after rewriting: {4: ("address" "number")} <- copy {0: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe f
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe f
9991 transform: --- deduce types for recipe f
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9992 transform: x <= ("address" "number")
9992 transform: x <= ("address" "number")
9992 transform: y => "foo"
9992 transform: y <= "foo"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "number")} <- new {number: "type"}
9993 transform: {x: ("address" "number"), "lookup": ()} <- copy {12: "literal"}
9993 transform: {y: "foo"} <- merge {34: "literal"}, {x: ("address" "number")}
9993 transform: return {y: "foo"}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe f
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9992 transform: y => "foo"
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe f
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe f
9991 transform: --- transform names for recipe main
9993 name: element x of type foo is at offset 0
9993 name: element y of type foo is at offset 1
9993 name: element y of type foo is at offset 1
9991 transform: --- transform names for recipe f
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {1: "foo"} <- put {1: "foo"}, {y: "offset"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- resolve ambiguous calls for recipe f
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: "foo"} <- f 
9994 transform: compute address offsets for container foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: address at offset 1
9993 transform: - compute address offsets for {3: "number"} <- get {1: "foo"}, {x: "offset"}
9993 transform: - compute address offsets for {4: ("address" "number")} <- get {1: "foo"}, {y: "offset"}
9993 transform: - compute address offsets for {5: "number"} <- copy {4: ("address" "number"), "lookup": ()}
9993 transform: - compute address offsets for {1: "foo"} <- put {1: "foo"}, {y: "offset"}, {0: "literal"}
9993 transform: - compute address offsets for {4: ("address" "number")} <- copy {0: "literal"}
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for f
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "number")} <- new {number: "type"}
9993 transform: - compute address offsets for {x: ("address" "number"), "lookup": ()} <- copy {12: "literal"}
9993 transform: - compute address offsets for {y: "foo"} <- merge {34: "literal"}, {x: ("address" "number")}
9993 transform: - compute address offsets for return {y: "foo"}
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe f
9991 transform: --- transform braces for recipe main
9992 transform: f ...
9992 transform: get ...
9992 transform: get ...
9992 transform: copy ...
9992 transform: put ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- transform braces for recipe f
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: copy ...
9992 transform: merge ...
9992 transform: return ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe f
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe f
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe f
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe f
9992 new: size of "location" is 1
9992 new: size of "number" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe f
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe f
9999 transform: 0 vs 2
9999 transform: checking container {y: "foo"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {y: "foo"} || {y: ("address" "number")} vs ingredient 1
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: "foo"} <- f 
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 4 in location 1001
 103 run: {x: ("address" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1006
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1006: 0 -> 1
9999 mem: storing 1006 in location 1003
 103 run: {x: ("address" "number"), "lookup": ()} <- copy {12: "literal"}
9999 mem: location 1003 is 1006
9999 mem: skipping refcount at 1006
9999 mem: storing 12 in location 1007
 103 run: {y: "foo"} <- merge {34: "literal"}, {x: ("address" "number")}
9999 mem: location 1003 is 1006
9999 mem: incrementing refcount of 1006: 1 -> 2
9999 mem: storing 34 in location 1004
9999 mem: storing 1006 in location 1005
 103 run: return {y: "foo"}
9999 mem: location 1004 is 34
9999 mem: location 1005 is 1006
9999 mem: clearing x:address:number
9999 mem: location 1003 is 1006
9999 mem: skipping refcount at 1006
9999 mem: decrementing refcount of 1006: 2 -> 1
9999 mem: storing 0 in location 1003
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is [34, 1006]
9999 mem: storing 34 in location 1
9999 mem: storing 1006 in location 2
 102 run: {3: "number"} <- get {1: "foo"}, {x: "offset"}
9999 mem: location 1 is 34
9999 mem: location 2 is 1006
9998 run: address to copy is 1
9998 run: its type is "number"
9999 mem: location 1 is 34
9999 mem: storing 34 in location 3
 102 run: {4: ("address" "number")} <- get {1: "foo"}, {y: "offset"}
9999 mem: location 1 is 34
9999 mem: location 2 is 1006
9998 run: address to copy is 2
9998 run: its type is ("address" "number")
9999 mem: location 2 is 1006
9999 mem: location 4 is 0
9999 mem: incrementing refcount of 1006: 1 -> 2
9999 mem: storing 1006 in location 4
 102 run: {5: "number"} <- copy {4: ("address" "number"), "lookup": ()}
9999 mem: location 4 is 1006
9999 mem: skipping refcount at 1006
9999 mem: location 1007 is 12
9999 mem: storing 12 in location 5
 102 run: {1: "foo"} <- put {1: "foo"}, {y: "offset"}, {0: "literal"}
9999 mem: location 1 is 34
9999 mem: location 2 is 1006
9998 run: address to copy to is 2
9999 mem: location 2 is 1006
9999 mem: skipping refcount at 1006
9999 mem: decrementing refcount of 1006: 2 -> 1
9999 mem: storing 0 in location 2
 102 run: {4: ("address" "number")} <- copy {0: "literal"}
9999 mem: location 4 is 1006
9999 mem: skipping refcount at 1006
9999 mem: decrementing refcount of 1006: 1 -> 0
9999 mem: automatically abandoning 1006
9999 abandon: updating refcounts inside 1006: number
9999 abandon: saving 1006 in free-list of size 2
9999 mem: storing 0 in location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
