9991 parse: --- defining main
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {2: "literal"}
9993 parse:   product: {2001: "number"}
9992 load: after rewriting: {2001: "number"} <- copy {2: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {2002: "number"}
9992 load: after rewriting: {2002: "number"} <- copy {34: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {35: "literal"}
9993 parse:   product: {2003: "number"}
9992 load: after rewriting: {2003: "number"} <- copy {35: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {1000: "number"}
9992 load: after rewriting: {1000: "number"} <- copy {0: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {5: "literal"}
9993 parse:   product: {1001: "number"}
9992 load: after rewriting: {1001: "number"} <- copy {5: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1000: "literal", "unsafe": ()}
9993 parse:   product: {default-space: ("address" "array" "location")}
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- copy {1000: "literal", "unsafe": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {2000: "literal", "unsafe": ()}
9993 parse:   product: {1: ("address" "array" "number")}
9992 load: after rewriting: {1: ("address" "array" "number")} <- copy {2000: "literal", "unsafe": ()}
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "array" "number"), "lookup": ()}
9993 parse:   ingredient: {1: "literal"}
9993 parse:   product: {9: "number", "raw": ()}
9992 load: after rewriting: {9: "number", "raw": ()} <- index {1: ("address" "array" "number"), "lookup": ()}, {1: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {9: "number", "raw": ()} <- index {1: ("address" "array" "number"), "lookup": ()}, {1: "literal"}
9992 transform: checking variant (strict) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: index ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {2001: "number"} <- copy {2: "literal"}
9999 mem: storing 2 in location 2001
 102 run: {2002: "number"} <- copy {34: "literal"}
9999 mem: storing 34 in location 2002
 102 run: {2003: "number"} <- copy {35: "literal"}
9999 mem: storing 35 in location 2003
 102 run: {1000: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1000
 102 run: {1001: "number"} <- copy {5: "literal"}
9999 mem: storing 5 in location 1001
 102 run: {default-space: ("address" "array" "location")} <- copy {1000: "literal", "unsafe": ()}
 102 run: {1: ("address" "array" "number")} <- copy {2000: "literal", "unsafe": ()}
9999 mem: incrementing refcount of 2000: 0 -> 1
9999 mem: storing 2000 in location 1003
 102 run: {9: "number", "raw": ()} <- index {1: ("address" "array" "number"), "lookup": ()}, {1: "literal"}
9999 mem: location 1003 is 2000
9999 mem: skipping refcount at 2000
9998 run: base address is 2001
9998 run: address to copy is 2003
9998 run: its type is number
9999 mem: location 2003 is 35
9999 mem: storing 35 in location 9
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
