9991 parse: --- defining main
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {0: "literal", "number": ()}
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {11: "number-or-point"}
9992 load: after rewriting: {11: "number-or-point"} <- merge {0: "literal", "number": ()}, {34: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {10: "literal", "unsafe": ()}
9993 parse:   product: {1: ("address" "number-or-point")}
9992 load: after rewriting: {1: ("address" "number-or-point")} <- copy {10: "literal", "unsafe": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {20: "literal", "unsafe": ()}
9993 parse:   product: {2: ("address" "number")}
9992 load: after rewriting: {2: ("address" "number")} <- copy {20: "literal", "unsafe": ()}
9993 parse: instruction: maybe-convert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "number-or-point"), "lookup": ()}
9993 parse:   ingredient: {i: "variant"}
9993 parse:   product: {2: ("address" "number"), "lookup": ()}
9993 parse:   product: {3: "boolean"}
9992 load: after rewriting: {2: ("address" "number"), "lookup": ()}, {3: "boolean"} <- maybe-convert {1: ("address" "number-or-point"), "lookup": ()}, {i: "variant"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: variant i of type number-or-point has tag 0
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {11: "number-or-point"} <- merge {0: "literal", "number": ()}, {34: "literal"}
9994 transform: compute address offsets for exclusive container number-or-point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for {1: ("address" "number-or-point")} <- copy {10: "literal", "unsafe": ()}
9993 transform: - compute address offsets for {2: ("address" "number")} <- copy {20: "literal", "unsafe": ()}
9993 transform: - compute address offsets for {2: ("address" "number"), "lookup": ()}, {3: "boolean"} <- maybe-convert {1: ("address" "number-or-point"), "lookup": ()}, {i: "variant"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: merge ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: maybe-convert ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 2
9999 transform: checking exclusive container {11: "number-or-point"} vs ingredient 0
9999 transform: tag: 0
9999 transform: 1 vs 2
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {11: "number-or-point"} <- merge {0: "literal", "number": ()}, {34: "literal"}
9999 mem: storing 0 in location 11
9999 mem: storing 34 in location 12
 102 run: {1: ("address" "number-or-point")} <- copy {10: "literal", "unsafe": ()}
9999 mem: incrementing refcount of 10: 0 -> 1
9999 mem: storing 10 in location 1
 102 run: {2: ("address" "number")} <- copy {20: "literal", "unsafe": ()}
9999 mem: incrementing refcount of 20: 0 -> 1
9999 mem: storing 20 in location 2
 102 run: {2: ("address" "number"), "lookup": ()}, {3: "boolean"} <- maybe-convert {1: ("address" "number-or-point"), "lookup": ()}, {i: "variant"}
9999 mem: location 1 is 10
9999 mem: skipping refcount at 10
9999 mem: location 11 is 0
9999 mem: location 12 is 34
9999 mem: location 13 is 0
9999 mem: location 1 is 10
9999 mem: skipping refcount at 10
9999 mem: location 2 is 20
9999 mem: skipping refcount at 20
9999 mem: storing 1 in location 3
9999 mem: storing 34 in location 21
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
