9991 parse: --- defining main
9993 parse: instruction: merge
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "literal"}
9993 parse:   product: {a: ("d1" "number")}
9992 load: after rewriting: {a: ("d1" "number")} <- merge {3: "literal"}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {a: ()}
9992 load: after rewriting: foo {a: ()}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:d1:_elem
9999 parse: header product: b:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {e: ()}
9993 parse:   ingredient: {x: "offset"}
9992 load: after rewriting: get {e: ()}, {x: "offset"}
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9992 load: after rewriting: return {34: "literal"}
9999 parse: recipe foo has a header
9999 parse: container has type ingredients; parsing
9991 parse: --- defining container d1
9999 parse: type number: 1000
9993 parse:   element: {x: "_elem"}
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: a => ("d1" "number")
9992 transform: a <= ("d1" "number")
9993 transform: {a: ("d1" "number")} <- merge {3: "literal"}
9993 transform: foo {a: ("d1" "number")}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: a => ("d1" "number")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign a 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo {a: ()}
9992 transform: checking variant (strict) 0: recipe foo {a: ("d1" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 1000 foo
9993 transform: switching foo to specialized recipe foo_2 {a: ("d1" "_elem")} -> {b: "number"}
9993 transform: compute type names: foo_2
9994 transform:     checking {a: ("d1" "_elem")}: ("d1" "_elem")
9993 transform: type of a is ("d1" "_elem")
9994 transform:     checking {b: "number"}: "number"
9993 transform: type of b is "number"
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {a: ("d1" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {a: ("d1" "_elem")}: ("d1" "_elem")
9993 transform:   instruction: get {e: ()}, {x: "offset"}
9994 transform:     checking {e: ()}: ()
   0 error: foo: unknown type for e (check the name for typos)

9994 transform:     checking {x: "offset"}: "offset"
9993 transform:   instruction: return {34: "literal"}
9994 transform:     checking {34: "literal"}: "literal"
9993 transform: type of 34 is "literal"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient a:d1:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient b:number
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{a: ("d1" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient a:d1:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'get {e: ()}, {x: "offset"}'
9993 transform: replacing in ingredient e
   0 error: specializing foo: missing type for e

9993 transform: replacing in ingredient x:offset
9993 transform: replacing in instruction 'return {34: "literal"}'
9993 transform: replacing in ingredient 34
   0 error: foo: failed to map a type to e

9992 transform: transforming new specialization: foo_2
9991 transform: --- rewrite literal strings in recipe foo_2
9991 transform: --- rewrite 'stash' instructions in recipe foo_2
9991 transform: --- deduce types for recipe foo_2
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: a => ("d1" "number")
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {a: ("d1" "number")} <- next-ingredient-without-typechecking 
9993 transform: get {e: ""}, {x: "offset"}
9993 transform: return {34: "literal"}
9991 transform: --- checking reply instructions against header for foo_2
9991 transform: --- fill in reply ingredients from header for recipe foo_2
9991 transform: --- deduce types for recipe foo_2
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: a => ("d1" "number")
9991 transform: --- deduce types from header for foo_2
9993 transform: type of a is ("d1" "number")
9993 transform: type of b is "number"
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {a: ("d1" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {a: ("d1" "number")}
9992 transform: instruction: get {e: ""}, {x: "offset"}
9992 transform: instruction: return {34: "literal"}
9991 transform: --- check for invalid types in recipe foo_2
9991 transform: --- collect surrounding spaces for recipe foo_2
9991 transform: --- transform names for recipe foo_2
9993 name: assign a 1
9991 transform: --- resolve ambiguous calls for recipe foo_2
9991 transform: --- compute instruction operations for recipe foo_2
9991 transform: --- transform braces for recipe foo_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform: return ...
9991 transform: --- perform checks for recipe foo_2
   0 error: foo_2: first ingredient of 'get' should be a container, but got e

9991 transform: --- type-check 'call' instructions inside recipe foo_2
9991 transform: --- type-check calls inside recipe foo_2
9991 transform: --- convert 'new' to 'allocate' for recipe foo_2
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe foo_2
9991 transform: --- type-check merge instructions in recipe foo_2
9991 transform: --- checking reply instructions against header for foo_2
9992 transform: new specialization: foo_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: merge ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 1
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
