9991 parse: --- defining main
9993 parse: instruction: merge
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "literal"}
9993 parse:   product: {e1: ("d1" "number")}
9992 load: after rewriting: {e1: ("d1" "number")} <- merge {3: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {(d2 number): "type"}
9993 parse:   product: {e2: ("address" "d2" "number")}
9992 load: after rewriting: {e2: ("address" "d2" "number")} <- new {(d2 number): "type"}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {e1: ()}
9993 parse:   product: {1: "number", "raw": ()}
9992 load: after rewriting: {1: "number", "raw": ()} <- foo {e1: ()}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {e2: (), "lookup": ()}
9993 parse:   product: {2: "number", "raw": ()}
9992 load: after rewriting: {2: "number", "raw": ()} <- foo {e2: (), "lookup": ()}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:d1:_elem
9999 parse: header product: b:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9992 load: after rewriting: return {34: "literal"}
9999 parse: recipe foo has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:d2:_elem
9999 parse: header product: b:number
9999 load: switching foo to foo_2
9991 parse: --- defining foo_2
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {35: "literal"}
9992 load: after rewriting: return {35: "literal"}
9999 parse: recipe foo_2 has a header
9999 parse: container has type ingredients; parsing
9991 parse: --- defining container d1
9999 parse: type number: 1000
9993 parse:   element: {x: "_elem"}
9999 parse: container has type ingredients; parsing
9991 parse: --- defining container d2
9999 parse: type number: 1001
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: "_elem"}
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: e1 => ("d1" "number")
9992 transform: e2 => ("address" "d2" "number")
9992 transform: e1 <= ("d1" "number")
9992 transform: e2 <= ("address" "d2" "number")
9993 transform: {e1: ("d1" "number")} <- merge {3: "literal"}
9993 transform: {e2: ("address" "d2" "number")} <- new {(d2 number): "type"}
9993 transform: {1: "number", "raw": ()} <- foo {e1: ("d1" "number")}
9993 transform: {2: "number", "raw": ()} <- foo {e2: ("address" "d2" "number"), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: e1 => ("d1" "number")
9992 transform: e2 => ("address" "d2" "number")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign e1 1
9993 name: assign e2 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {1: "number", "raw": ()} <- foo {e1: ()}
9992 transform: checking variant (strict) 0: recipe foo {a: ("d1" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe foo_2 {a: ("d2" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe foo {a: ("d1" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe foo_2 {a: ("d2" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 1000 foo
9993 transform: switching foo to specialized recipe foo_3 {a: ("d1" "_elem")} -> {b: "number"}
9993 transform: compute type names: foo_3
9994 transform:     checking {a: ("d1" "_elem")}: ("d1" "_elem")
9993 transform: type of a is ("d1" "_elem")
9994 transform:     checking {b: "number"}: "number"
9993 transform: type of b is "number"
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {a: ("d1" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {a: ("d1" "_elem")}: ("d1" "_elem")
9993 transform:   instruction: return {34: "literal"}
9994 transform:     checking {34: "literal"}: "literal"
9993 transform: type of 34 is "literal"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient a:d1:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient b:number
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{a: ("d1" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient a:d1:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'return {34: "literal"}'
9993 transform: replacing in ingredient 34
9992 transform: transforming new specialization: foo_3
9991 transform: --- rewrite literal strings in recipe foo_3
9991 transform: --- rewrite 'stash' instructions in recipe foo_3
9991 transform: --- deduce types for recipe foo_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => ("d1" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {a: ("d1" "number")} <- next-ingredient-without-typechecking 
9993 transform: return {34: "literal"}
9991 transform: --- checking reply instructions against header for foo_3
9991 transform: --- fill in reply ingredients from header for recipe foo_3
9991 transform: --- deduce types for recipe foo_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => ("d1" "number")
9991 transform: --- deduce types from header for foo_3
9993 transform: type of a is ("d1" "number")
9993 transform: type of b is "number"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {a: ("d1" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {a: ("d1" "number")}
9992 transform: instruction: return {34: "literal"}
9991 transform: --- check for invalid types in recipe foo_3
9991 transform: --- collect surrounding spaces for recipe foo_3
9991 transform: --- transform names for recipe foo_3
9993 name: assign a 1
9991 transform: --- resolve ambiguous calls for recipe foo_3
9992 transform: --- compute address offsets for foo_3
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {a: ("d1" "number")} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: - compute address offsets for return {34: "literal"}
9991 transform: --- compute instruction operations for recipe foo_3
9991 transform: --- transform braces for recipe foo_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe foo_3
9991 transform: --- perform checks for recipe foo_3
9991 transform: --- type-check 'call' instructions inside recipe foo_3
9991 transform: --- type-check calls inside recipe foo_3
9991 transform: --- convert 'new' to 'allocate' for recipe foo_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe foo_3
9991 transform: --- type-check merge instructions in recipe foo_3
9991 transform: --- checking reply instructions against header for foo_3
9992 transform: new specialization: foo_3
9992 transform: instruction {2: "number", "raw": ()} <- foo {e2: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe foo {a: ("d1" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe foo_2 {a: ("d2" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe foo_3 {a: ("d1" "number")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe foo {a: ("d1" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe foo_2 {a: ("d2" "_elem")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe foo_3 {a: ("d1" "number")} -> {b: "number"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 1001 foo_2
9993 transform: switching foo to specialized recipe foo_4 {a: ("d2" "_elem")} -> {b: "number"}
9993 transform: compute type names: foo_4
9994 transform:     checking {a: ("d2" "_elem")}: ("d2" "_elem")
9993 transform: type of a is ("d2" "_elem")
9994 transform:     checking {b: "number"}: "number"
9993 transform: type of b is "number"
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {a: ("d2" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {a: ("d2" "_elem")}: ("d2" "_elem")
9993 transform:   instruction: return {35: "literal"}
9994 transform:     checking {35: "literal"}: "literal"
9993 transform: type of 35 is "literal"
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient a:d2:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient b:number
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{a: ("d2" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient a:d2:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'return {35: "literal"}'
9993 transform: replacing in ingredient 35
9992 transform: transforming new specialization: foo_4
9991 transform: --- rewrite literal strings in recipe foo_4
9991 transform: --- rewrite 'stash' instructions in recipe foo_4
9991 transform: --- deduce types for recipe foo_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => ("d2" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {a: ("d2" "number")} <- next-ingredient-without-typechecking 
9993 transform: return {35: "literal"}
9991 transform: --- checking reply instructions against header for foo_4
9991 transform: --- fill in reply ingredients from header for recipe foo_4
9991 transform: --- deduce types for recipe foo_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => ("d2" "number")
9991 transform: --- deduce types from header for foo_4
9993 transform: type of a is ("d2" "number")
9993 transform: type of b is "number"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {a: ("d2" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {a: ("d2" "number")}
9992 transform: instruction: return {35: "literal"}
9991 transform: --- check for invalid types in recipe foo_4
9991 transform: --- collect surrounding spaces for recipe foo_4
9991 transform: --- transform names for recipe foo_4
9993 name: assign a 1
9991 transform: --- resolve ambiguous calls for recipe foo_4
9992 transform: --- compute address offsets for foo_4
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {a: ("d2" "number")} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container d2
9993 transform: checking container d2, element 0
9993 transform: checking container d2, element 1
9993 transform: - compute address offsets for return {35: "literal"}
9991 transform: --- compute instruction operations for recipe foo_4
9991 transform: --- transform braces for recipe foo_4
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe foo_4
9991 transform: --- perform checks for recipe foo_4
9991 transform: --- type-check 'call' instructions inside recipe foo_4
9991 transform: --- type-check calls inside recipe foo_4
9991 transform: --- convert 'new' to 'allocate' for recipe foo_4
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe foo_4
9991 transform: --- type-check merge instructions in recipe foo_4
9991 transform: --- checking reply instructions against header for foo_4
9992 transform: new specialization: foo_4
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {e1: ("d1" "number")} <- merge {3: "literal"}
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: - compute address offsets for {e2: ("address" "d2" "number")} <- new {(d2 number): "type"}
9994 transform: compute address offsets for container d2
9993 transform: checking container d2, element 0
9993 transform: checking container d2, element 1
9993 transform: - compute address offsets for {1: "number", "raw": ()} <- foo_3 {e1: ("d1" "number")}
9994 transform: compute address offsets for container d1
9993 transform: checking container d1, element 0
9993 transform: - compute address offsets for {2: "number", "raw": ()} <- foo_4 {e2: ("address" "d2" "number"), "lookup": ()}
9994 transform: compute address offsets for container d2
9993 transform: checking container d2, element 0
9993 transform: checking container d2, element 1
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: merge ...
9992 transform: new ...
9992 transform: foo ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of ("d2" "number") is 2
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 1
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {e1: ("d1" "number")} <- merge {3: "literal"}
9999 mem: storing 3 in location 1
 102 run: {e2: ("address" "d2" "number")} <- new {(d2 number): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: location 2 is 0
9999 mem: incrementing refcount of 1000: 0 -> 1
9999 mem: storing 1000 in location 2
 102 run: {1: "number", "raw": ()} <- foo_3 {e1: ("d1" "number")}
9999 mem: location 1 is 3
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1003
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 2 in location 1004
 103 run: {a: ("d1" "number")} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1006
 103 run: return {34: "literal"}
9999 mem: clearing a:d1:_elem
9999 mem: storing 0 in location 1006
9999 mem: automatically abandoning 1003
9999 abandon: updating refcounts inside 1003: (array number)
9999 abandon: saving 1003 in free-list of size 4
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 34
9999 mem: storing 34 in location 1
 102 run: {2: "number", "raw": ()} <- foo_4 {e2: ("address" "d2" "number"), "lookup": ()}
9999 mem: location 2 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1001 is 0
9999 mem: location 1002 is 0
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1007
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 3 in location 1008
 103 run: {a: ("d2" "number")} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
 103 run: return {35: "literal"}
9999 mem: clearing a:d2:_elem
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: automatically abandoning 1007
9999 abandon: updating refcounts inside 1007: (array number)
9999 abandon: saving 1007 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 35
9999 mem: storing 35 in location 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
