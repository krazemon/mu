9991 parse: --- defining main
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {1: "number", "raw": ()}
9992 load: after rewriting: {1: "number", "raw": ()} <- foo {"abc": "literal-string"}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:address:shared:array:character
9999 parse: header product: n:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: length
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: (), "lookup": ()}
9993 parse:   product: {n: ()}
9992 load: after rewriting: {n: ()} <- length {x: (), "lookup": ()}
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: foo_0_0 => ("address" "shared" "array" "character")
9993 transform: {foo_0_0: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9993 transform: {1: "number", "raw": ()} <- foo {foo_0_0: ("address" "shared" "array" "character")}
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => ("address" "shared" "array" "character")
9992 transform: x <= ("address" "shared" "array" "character")
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9993 transform: {n: ()} <- length {x: ("address" "shared" "array" "character"), "lookup": ()}
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: foo_0_0 => ("address" "shared" "array" "character")
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => ("address" "shared" "array" "character")
9992 transform: n => "number"
9991 transform: --- deduce types from header for foo
9993 transform: type of x is ("address" "shared" "array" "character")
9993 transform: type of n is "number"
9992 transform: instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "shared" "array" "location")}
9992 transform: instruction: {x: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: ("address" "shared" "array" "character")}
9992 transform: instruction: {n: ()} <- length {x: ("address" "shared" "array" "character"), "lookup": ()}
9993 transform:   product: {n: ()}
9993 transform: type of n is "number"
9992 transform: instruction: reply {n: "number"}
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign foo_0_0 1
9991 transform: --- transform names for recipe foo
9993 name: assign x 1
9993 name: assign n 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {1: "number", "raw": ()} <- foo {"abc": "literal-string"}
9992 transform: checking variant (strict) 0: recipe foo {x: ("address" "shared" "array" "character")} -> {n: "number"}
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform:  ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: length ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {foo_0_0: ("address" "shared" "array" "character")} <- new {"abc": "literal-string"}
9999 mem: new string alloc: 1000
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: {1: "number", "raw": ()} <- foo {foo_0_0: ("address" "shared" "array" "character")}
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1005
9999 mem: storing 3 in location 1006
 103 run: {x: ("address" "shared" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1008
9999 mem: incrementing refcount of 1000: 1 -> 2
 103 run: {n: "number"} <- length {x: ("address" "shared" "array" "character"), "lookup": ()}
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1009
 103 run: reply {n: "number"}
9999 mem: location 1009 is 3
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 3
9999 mem: storing 3 in location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
