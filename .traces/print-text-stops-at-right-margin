9991 parse: --- defining scenario_print-text-stops-at-right-margin
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    fake-screen:address:screen <- new-fake-screen 3/width, 2/height\n    s:address:array:character <- new [abcd]\n    fake-screen <- print fake-screen, s:address:array:character\n    cell:address:array:screen-cell <- get *fake-screen, data:offset\n    10:array:screen-cell/raw <- copy *cell\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    fake-screen:address:screen <- new-fake-screen 3/width, 2/height\n    s:address:array:character <- new [abcd]\n    fake-screen <- print fake-screen, s:address:array:character\n    cell:address:array:screen-cell <- get *fake-screen, data:offset\n    10:array:screen-cell/raw <- copy *cell\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10 <- 6  # width*height\n    11 <- 97  # 'a'\n    12 <- 7  # white\n    13 <- 98  # 'b'\n    14 <- 7  # white\n    15 <- 100  # 'd' overwrites 'c'\n    16 <- 7  # white\n    # rest of screen is empty\n    17 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    10 <- 6  # width*height\n    11 <- 97  # 'a'\n    12 <- 7  # white\n    13 <- 98  # 'b'\n    14 <- 7  # white\n    15 <- 100  # 'd' overwrites 'c'\n    16 <- 7  # white\n    # rest of screen is empty\n    17 <- 0\n  ": "literal-string"}
9999 parse: recipe scenario_print-text-stops-at-right-margin has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_print-text-stops-at-right-margin
9991 transform: --- rewrite 'stash' instructions in recipe scenario_print-text-stops-at-right-margin
9991 transform: --- deduce types for recipe scenario_print-text-stops-at-right-margin
9993 transform: run {"\n    local-scope\n    fake-screen:address:screen <- new-fake-screen 3/width, 2/height\n    s:address:array:character <- new [abcd]\n    fake-screen <- print fake-screen, s:address:array:character\n    cell:address:array:screen-cell <- get *fake-screen, data:offset\n    10:array:screen-cell/raw <- copy *cell\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    10 <- 6  # width*height\n    11 <- 97  # 'a'\n    12 <- 7  # white\n    13 <- 98  # 'b'\n    14 <- 7  # white\n    15 <- 100  # 'd' overwrites 'c'\n    16 <- 7  # white\n    # rest of screen is empty\n    17 <- 0\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_print-text-stops-at-right-margin
9991 transform: --- deduce types for recipe scenario_print-text-stops-at-right-margin
9991 transform: --- check for invalid types in recipe scenario_print-text-stops-at-right-margin
9991 transform: --- collect surrounding spaces for recipe scenario_print-text-stops-at-right-margin
9991 transform: --- transform names for recipe scenario_print-text-stops-at-right-margin
9991 transform: --- resolve ambiguous calls for recipe scenario_print-text-stops-at-right-margin
9992 transform: --- compute address offsets for scenario_print-text-stops-at-right-margin
9993 transform: - compute address offsets for run {"\n    local-scope\n    fake-screen:address:screen <- new-fake-screen 3/width, 2/height\n    s:address:array:character <- new [abcd]\n    fake-screen <- print fake-screen, s:address:array:character\n    cell:address:array:screen-cell <- get *fake-screen, data:offset\n    10:array:screen-cell/raw <- copy *cell\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    10 <- 6  # width*height\n    11 <- 97  # 'a'\n    12 <- 7  # white\n    13 <- 98  # 'b'\n    14 <- 7  # white\n    15 <- 100  # 'd' overwrites 'c'\n    16 <- 7  # white\n    # rest of screen is empty\n    17 <- 0\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_print-text-stops-at-right-margin
9991 transform: --- transform braces for recipe scenario_print-text-stops-at-right-margin
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_print-text-stops-at-right-margin
9991 transform: --- perform checks for recipe scenario_print-text-stops-at-right-margin
9991 transform: --- type-check 'call' instructions inside recipe scenario_print-text-stops-at-right-margin
9991 transform: --- type-check calls inside recipe scenario_print-text-stops-at-right-margin
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_print-text-stops-at-right-margin
9991 transform: --- check types of reply instructions in recipe scenario_print-text-stops-at-right-margin
9991 transform: --- type-check merge instructions in recipe scenario_print-text-stops-at-right-margin
9991 transform: --- checking reply instructions against header for scenario_print-text-stops-at-right-margin
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_print-text-stops-at-right-margin
 102 run: run {"\n    local-scope\n    fake-screen:address:screen <- new-fake-screen 3/width, 2/height\n    s:address:array:character <- new [abcd]\n    fake-screen <- print fake-screen, s:address:array:character\n    cell:address:array:screen-cell <- get *fake-screen, data:offset\n    10:array:screen-cell/raw <- copy *cell\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new-fake-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {3: "literal", "width": ()}
9993 parse:   ingredient: {2: "literal", "height": ()}
9993 parse:   product: {fake-screen: ("address" "screen")}
9992 load: after rewriting: {fake-screen: ("address" "screen")} <- new-fake-screen {3: "literal", "width": ()}, {2: "literal", "height": ()}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abcd": "literal-string"}
9993 parse:   product: {s: ("address" "array" "character")}
9992 load: after rewriting: {s: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9993 parse: instruction: print
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {fake-screen: ()}
9993 parse:   ingredient: {s: ("address" "array" "character")}
9993 parse:   product: {fake-screen: ()}
9992 load: after rewriting: {fake-screen: ()} <- print {fake-screen: ()}, {s: ("address" "array" "character")}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {fake-screen: (), "lookup": ()}
9993 parse:   ingredient: {data: "offset"}
9993 parse:   product: {cell: ("address" "array" "screen-cell")}
9992 load: after rewriting: {cell: ("address" "array" "screen-cell")} <- get {fake-screen: (), "lookup": ()}, {data: "offset"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {cell: (), "lookup": ()}
9993 parse:   product: {10: ("array" "screen-cell"), "raw": ()}
9992 load: after rewriting: {10: ("array" "screen-cell"), "raw": ()} <- copy {cell: (), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: fake-screen => ("address" "screen")
9992 transform: s => ("address" "array" "character")
9992 transform: fake-screen <= ("address" "screen")
9992 transform: fake-screen <= ("address" "screen")
9992 transform: fake-screen <= ("address" "screen")
9992 transform: cell => ("address" "array" "screen-cell")
9992 transform: cell <= ("address" "array" "screen-cell")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {fake-screen: ("address" "screen")} <- new-fake-screen {3: "literal", "width": ()}, {2: "literal", "height": ()}
9993 transform: {s: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9993 transform: {fake-screen: ("address" "screen")} <- print {fake-screen: ("address" "screen")}, {s: ("address" "array" "character")}
9993 transform: {cell: ("address" "array" "screen-cell")} <- get {fake-screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9993 transform: {10: ("array" "screen-cell"), "raw": ()} <- copy {cell: ("address" "array" "screen-cell"), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: fake-screen => ("address" "screen")
9992 transform: s => ("address" "array" "character")
9992 transform: cell => ("address" "array" "screen-cell")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign fake-screen 1
9993 name: assign s 2
9993 name: element data of type screen is at offset 4
9993 name: assign cell 3
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {fake-screen: ("address" "screen")} <- new-fake-screen {3: "literal", "width": ()}, {2: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "screen")}
9992 transform: instruction {fake-screen: ()} <- print {fake-screen: ()}, {s: ("address" "array" "character")}
9992 transform: checking variant (strict) 0: recipe print {screen: ("address" "screen")} {c: "character"} -> {screen: ("address" "screen")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 1: recipe print_2 {screen: ("address" "screen")} {s: ("address" "array" "character")} -> {screen: ("address" "screen")}
9992 transform: checking variant (strict) 2: recipe print_3 {screen: ("address" "screen")} {n: "number"} -> {screen: ("address" "screen")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 3: recipe print_4 {screen: ("address" "screen")} {n: ("address" "_elem")} -> {screen: ("address" "screen")}
9993 transform: strict match failed: ingredient 1
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {fake-screen: ("address" "screen")} <- new-fake-screen {3: "literal", "width": ()}, {2: "literal", "height": ()}
9993 transform: - compute address offsets for {s: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9993 transform: - compute address offsets for {fake-screen: ("address" "screen")} <- print_2 {fake-screen: ("address" "screen")}, {s: ("address" "array" "character")}
9993 transform: - compute address offsets for {cell: ("address" "array" "screen-cell")} <- get {fake-screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9994 transform: compute address offsets for container screen-cell
9993 transform: checking container screen-cell, element 0
9993 transform: checking container screen-cell, element 1
9993 transform: - compute address offsets for {10: ("array" "screen-cell"), "raw": ()} <- copy {cell: ("address" "array" "screen-cell"), "lookup": ()}
9994 transform: compute address offsets for container screen-cell
9993 transform: checking container screen-cell, element 0
9993 transform: checking container screen-cell, element 1
9994 transform: compute address offsets for container screen-cell
9993 transform: checking container screen-cell, element 0
9993 transform: checking container screen-cell, element 1
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new-fake-screen ...
9992 transform: new ...
9992 transform: print ...
9992 transform: get ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 4 in location 1001
 103 run: {fake-screen: ("address" "screen")} <- new-fake-screen {3: "literal", "width": ()}, {2: "literal", "height": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1006
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 6 in location 1007
 104 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1009
 104 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1010
 104 run: {result: ("address" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: location 1011 is 0
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1011
 104 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1009 is 3
9999 mem: location 1010 is 2
9999 mem: storing 6 in location 1012
 104 run: {data: ("address" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1012 is 6
9999 mem: array size is 6
9999 mem: allocating size 14
9999 mem: new alloc: 1020
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 6 in location 1021
9999 mem: location 1013 is 0
9999 mem: incrementing refcount of 1020: 0 -> 1
9999 mem: storing 1020 in location 1013
 104 run: {result: ("address" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "array" "screen-cell")}
9999 mem: location 1010 is 2
9999 mem: location 1009 is 3
9999 mem: location 1013 is 1020
9999 mem: location 1011 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1011 is 1014
9999 mem: skipping refcount at 1014
9999 mem: incrementing refcount of 1020: 1 -> 2
9999 mem: storing 2 in location 1015
9999 mem: storing 3 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 1020 in location 1019
 104 run: {result: ("address" "screen")} <- clear-screen {result: ("address" "screen")}
9999 mem: location 1011 is 1014
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1034
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 8 in location 1035
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1037 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1037
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1037 is 1014
9998 run: jump-unless fell through
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1037 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1037 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1019
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1019 is 1020
9999 mem: location 1038 is 0
9999 mem: incrementing refcount of 1020: 2 -> 3
9999 mem: storing 1020 in location 1038
 105 run: {max: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: storing 6 in location 1039
 105 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1040
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1040 is 0
9999 mem: location 1039 is 6
9999 mem: storing 0 in location 1041
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jump-if fell through
 105 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1040 is 0
9998 run: address to copy to is 1022
9999 mem: location 1042 is 0
9999 mem: location 1043 is 7
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1040 is 0
9999 mem: storing 1 in location 1040
 105 run: jump {: "offset"}
9998 run: jumping to instruction 8
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1040 is 1
9999 mem: location 1039 is 6
9999 mem: storing 0 in location 1041
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jump-if fell through
 105 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1040 is 1
9998 run: address to copy to is 1024
9999 mem: location 1042 is 0
9999 mem: location 1043 is 7
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1040 is 1
9999 mem: storing 2 in location 1040
 105 run: jump {: "offset"}
9998 run: jumping to instruction 8
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1040 is 2
9999 mem: location 1039 is 6
9999 mem: storing 0 in location 1041
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jump-if fell through
 105 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1040 is 2
9998 run: address to copy to is 1026
9999 mem: location 1042 is 0
9999 mem: location 1043 is 7
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1040 is 2
9999 mem: storing 3 in location 1040
 105 run: jump {: "offset"}
9998 run: jumping to instruction 8
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1040 is 3
9999 mem: location 1039 is 6
9999 mem: storing 0 in location 1041
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jump-if fell through
 105 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1040 is 3
9998 run: address to copy to is 1028
9999 mem: location 1042 is 0
9999 mem: location 1043 is 7
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1040 is 3
9999 mem: storing 4 in location 1040
 105 run: jump {: "offset"}
9998 run: jumping to instruction 8
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1040 is 4
9999 mem: location 1039 is 6
9999 mem: storing 0 in location 1041
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jump-if fell through
 105 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1040 is 4
9998 run: address to copy to is 1030
9999 mem: location 1042 is 0
9999 mem: location 1043 is 7
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1040 is 4
9999 mem: storing 5 in location 1040
 105 run: jump {: "offset"}
9998 run: jumping to instruction 8
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1040 is 5
9999 mem: location 1039 is 6
9999 mem: storing 0 in location 1041
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jump-if fell through
 105 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1040 is 5
9998 run: address to copy to is 1032
9999 mem: location 1042 is 0
9999 mem: location 1043 is 7
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 105 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1040 is 5
9999 mem: storing 6 in location 1040
 105 run: jump {: "offset"}
9998 run: jumping to instruction 8
 105 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1040 is 6
9999 mem: location 1039 is 6
9999 mem: storing 1 in location 1041
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 1
9998 run: jumping to instruction 14
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1037 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1037 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy to is 1017
9999 mem: storing 0 in location 1017
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1037 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1037 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy to is 1018
9999 mem: storing 0 in location 1018
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1037 is 1014
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1038 is 1020
9999 mem: skipping refcount at 1020
9999 mem: decrementing refcount of 1020: 3 -> 2
9999 mem: storing 0 in location 1038
9999 mem: clearing max:number
9999 mem: storing 0 in location 1039
9999 mem: clearing i:number
9999 mem: storing 0 in location 1040
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1041
9999 mem: clearing curr:screen-cell
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: clearing i
9999 mem: storing 0 in location 1040
9999 mem: automatically abandoning 1034
9999 abandon: updating refcounts inside 1034: (array number)
9999 abandon: saving 1034 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1011
 104 run: reply {result: ("address" "screen")}
9999 mem: location 1011 is 1014
9999 mem: clearing w:number
9999 mem: storing 0 in location 1009
9999 mem: clearing h:number
9999 mem: storing 0 in location 1010
9999 mem: clearing bufsize:number
9999 mem: storing 0 in location 1012
9999 mem: clearing data:address:array:screen-cell
9999 mem: location 1013 is 1020
9999 mem: skipping refcount at 1020
9999 mem: decrementing refcount of 1020: 2 -> 1
9999 mem: storing 0 in location 1013
9999 mem: automatically abandoning 1006
9999 abandon: updating refcounts inside 1006: (array number)
9999 abandon: saving 1006 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1003
 103 run: {s: ("address" "array" "character")} <- new {"abcd": "literal-string"}
9999 mem: new string alloc: 1044
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1044: 0 -> 1
9999 mem: storing 1044 in location 1004
 103 run: {fake-screen: ("address" "screen")} <- print_2 {fake-screen: ("address" "screen")}, {s: ("address" "array" "character")}
9999 mem: location 1003 is 1014
9999 mem: location 1004 is 1044
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1050
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
9999 mem: storing 0 in location 1059
9999 mem: storing 0 in location 1060
9999 mem: storing 0 in location 1061
9999 mem: storing 0 in location 1062
9999 mem: storing 11 in location 1051
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1053 is 0
9999 mem: incrementing refcount of 1014: 2 -> 3
9999 mem: storing 1014 in location 1053
 104 run: {s: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1054 is 0
9999 mem: incrementing refcount of 1044: 1 -> 2
9999 mem: storing 1044 in location 1054
 104 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
 104 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1056 is 0
9998 run: jump-if fell through
 104 run: {color: "number"} <- copy {7: "literal", "white": ()}
9999 mem: storing 7 in location 1055
 104 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
 104 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1058 is 0
9998 run: jump-if fell through
 104 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1057
 104 run: {len: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1054 is 1044
9999 mem: skipping refcount at 1044
9999 mem: storing 4 in location 1059
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1060
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1060 is 0
9999 mem: location 1059 is 4
9999 mem: storing 0 in location 1061
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1061 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1054 is 1044
9999 mem: skipping refcount at 1044
9998 run: base address is 1045
9999 mem: location 1060 is 0
9998 run: address to copy is 1046
9998 run: its type is character
9999 mem: location 1046 is 97
9999 mem: storing 97 in location 1062
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1053 is 1014
9999 mem: location 1062 is 97
9999 mem: location 1055 is 7
9999 mem: location 1057 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 mem: new alloc: 1063
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
9999 mem: storing 0 in location 1065
9999 mem: storing 0 in location 1066
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
9999 mem: storing 0 in location 1071
9999 mem: storing 0 in location 1072
9999 mem: storing 0 in location 1073
9999 mem: storing 0 in location 1074
9999 mem: storing 0 in location 1075
9999 mem: storing 0 in location 1076
9999 mem: storing 0 in location 1077
9999 mem: storing 0 in location 1078
9999 mem: storing 0 in location 1079
9999 mem: storing 0 in location 1080
9999 mem: storing 0 in location 1081
9999 mem: storing 0 in location 1082
9999 mem: storing 0 in location 1083
9999 mem: storing 0 in location 1084
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: storing 0 in location 1087
9999 mem: storing 0 in location 1088
9999 mem: storing 24 in location 1064
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1066 is 0
9999 mem: incrementing refcount of 1014: 3 -> 4
9999 mem: storing 1014 in location 1066
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1067
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1068
9999 mem: storing 1 in location 1069
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1069 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1070
9999 mem: storing 1 in location 1071
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1071 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1067 is 97
  90 print-character: 97
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1066 is 1014
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1016
9998 run: its type is "number"
9999 mem: location 1016 is 3
9999 mem: storing 3 in location 1072
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9998 run: its type is "number"
9999 mem: location 1015 is 2
9999 mem: storing 2 in location 1073
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1017
9998 run: its type is "number"
9999 mem: location 1017 is 0
9999 mem: storing 0 in location 1074
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1074 is 0
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1073 is 2
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1018
9998 run: its type is "number"
9999 mem: location 1018 is 0
9999 mem: storing 0 in location 1076
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1076 is 0
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1076 is 0
9999 mem: location 1072 is 3
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1067 is 97
9999 mem: storing 0 in location 1077
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1077 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1072 is 3
9999 mem: storing 0 in location 1080
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1080 is 0
9999 mem: location 1076 is 0
9999 mem: storing 0 in location 1080
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1019
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1019 is 1020
9999 mem: location 1081 is 0
9999 mem: incrementing refcount of 1020: 1 -> 2
9999 mem: storing 1020 in location 1081
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: storing 6 in location 1082
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1067 is 97
9999 mem: storing 0 in location 1083
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1083 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1067 is 97
9999 mem: location 1068 is 7
9999 mem: storing 97 in location 1085
9999 mem: storing 7 in location 1086
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1080 is 0
9998 run: address to copy to is 1022
9999 mem: location 1085 is 97
9999 mem: location 1086 is 7
9999 mem: storing 97 in location 1022
9999 mem: storing 7 in location 1023
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1072 is 3
9999 mem: storing 2 in location 1087
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1076 is 0
9999 mem: location 1087 is 2
9999 mem: storing 0 in location 1088
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1088 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1076 is 0
9999 mem: storing 1 in location 1076
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1020
9999 mem: location 1076 is 1
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy to is 1018
9999 mem: storing 1 in location 1018
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1066 is 1014
9999 mem: clearing screen:address:screen
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 4 -> 3
9999 mem: storing 0 in location 1066
9999 mem: clearing c:character
9999 mem: storing 0 in location 1067
9999 mem: clearing color:number
9999 mem: storing 0 in location 1068
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1069
9999 mem: clearing color
9999 mem: storing 0 in location 1068
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1070
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1071
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1070
9999 mem: clearing width:number
9999 mem: storing 0 in location 1072
9999 mem: clearing height:number
9999 mem: storing 0 in location 1073
9999 mem: clearing row:number
9999 mem: storing 0 in location 1074
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing column:number
9999 mem: storing 0 in location 1076
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1077
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1078
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1079
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing row
9999 mem: storing 0 in location 1074
9999 mem: clearing index:number
9999 mem: storing 0 in location 1080
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: decrementing refcount of 1020: 2 -> 1
9999 mem: storing 0 in location 1081
9999 mem: clearing len:number
9999 mem: storing 0 in location 1082
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1083
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1084
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing right:number
9999 mem: storing 0 in location 1087
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1088
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: automatically abandoning 1063
9999 abandon: updating refcounts inside 1063: (array number)
9999 abandon: saving 1063 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1060 is 0
9999 mem: storing 1 in location 1060
 104 run: jump {: "offset"}
9998 run: jumping to instruction 16
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1060 is 1
9999 mem: location 1059 is 4
9999 mem: storing 0 in location 1061
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1061 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1054 is 1044
9999 mem: skipping refcount at 1044
9998 run: base address is 1045
9999 mem: location 1060 is 1
9998 run: address to copy is 1047
9998 run: its type is character
9999 mem: location 1047 is 98
9999 mem: storing 98 in location 1062
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1053 is 1014
9999 mem: location 1062 is 98
9999 mem: location 1055 is 7
9999 mem: location 1057 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1063
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1066 is 0
9999 mem: incrementing refcount of 1014: 3 -> 4
9999 mem: storing 1014 in location 1066
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1067
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1068
9999 mem: storing 1 in location 1069
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1069 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1070
9999 mem: storing 1 in location 1071
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1071 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1067 is 98
  90 print-character: 98
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1066 is 1014
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 1
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1016
9998 run: its type is "number"
9999 mem: location 1016 is 3
9999 mem: storing 3 in location 1072
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 1
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9998 run: its type is "number"
9999 mem: location 1015 is 2
9999 mem: storing 2 in location 1073
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 1
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1017
9998 run: its type is "number"
9999 mem: location 1017 is 0
9999 mem: storing 0 in location 1074
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1074 is 0
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1073 is 2
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 1
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1018
9998 run: its type is "number"
9999 mem: location 1018 is 1
9999 mem: storing 1 in location 1076
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1076 is 1
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1076 is 1
9999 mem: location 1072 is 3
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1067 is 98
9999 mem: storing 0 in location 1077
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1077 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1072 is 3
9999 mem: storing 0 in location 1080
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1080 is 0
9999 mem: location 1076 is 1
9999 mem: storing 1 in location 1080
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 1
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1019
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1019 is 1020
9999 mem: location 1081 is 0
9999 mem: incrementing refcount of 1020: 1 -> 2
9999 mem: storing 1020 in location 1081
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: storing 6 in location 1082
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1067 is 98
9999 mem: storing 0 in location 1083
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1083 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1067 is 98
9999 mem: location 1068 is 7
9999 mem: storing 98 in location 1085
9999 mem: storing 7 in location 1086
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1080 is 1
9998 run: address to copy to is 1024
9999 mem: location 1085 is 98
9999 mem: location 1086 is 7
9999 mem: storing 98 in location 1024
9999 mem: storing 7 in location 1025
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1072 is 3
9999 mem: storing 2 in location 1087
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1076 is 1
9999 mem: location 1087 is 2
9999 mem: storing 0 in location 1088
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1088 is 0
9998 run: jump-if fell through
 105 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1076 is 1
9999 mem: storing 2 in location 1076
 105 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 1
9999 mem: location 1019 is 1020
9999 mem: location 1076 is 2
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy to is 1018
9999 mem: storing 2 in location 1018
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1066 is 1014
9999 mem: clearing screen:address:screen
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 4 -> 3
9999 mem: storing 0 in location 1066
9999 mem: clearing c:character
9999 mem: storing 0 in location 1067
9999 mem: clearing color:number
9999 mem: storing 0 in location 1068
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1069
9999 mem: clearing color
9999 mem: storing 0 in location 1068
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1070
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1071
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1070
9999 mem: clearing width:number
9999 mem: storing 0 in location 1072
9999 mem: clearing height:number
9999 mem: storing 0 in location 1073
9999 mem: clearing row:number
9999 mem: storing 0 in location 1074
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing column:number
9999 mem: storing 0 in location 1076
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1077
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1078
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1079
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing row
9999 mem: storing 0 in location 1074
9999 mem: clearing index:number
9999 mem: storing 0 in location 1080
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: decrementing refcount of 1020: 2 -> 1
9999 mem: storing 0 in location 1081
9999 mem: clearing len:number
9999 mem: storing 0 in location 1082
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1083
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1084
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing right:number
9999 mem: storing 0 in location 1087
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1088
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: automatically abandoning 1063
9999 abandon: updating refcounts inside 1063: (array number)
9999 abandon: saving 1063 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1060 is 1
9999 mem: storing 2 in location 1060
 104 run: jump {: "offset"}
9998 run: jumping to instruction 16
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1060 is 2
9999 mem: location 1059 is 4
9999 mem: storing 0 in location 1061
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1061 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1054 is 1044
9999 mem: skipping refcount at 1044
9998 run: base address is 1045
9999 mem: location 1060 is 2
9998 run: address to copy is 1048
9998 run: its type is character
9999 mem: location 1048 is 99
9999 mem: storing 99 in location 1062
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1053 is 1014
9999 mem: location 1062 is 99
9999 mem: location 1055 is 7
9999 mem: location 1057 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1063
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1066 is 0
9999 mem: incrementing refcount of 1014: 3 -> 4
9999 mem: storing 1014 in location 1066
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1067
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1068
9999 mem: storing 1 in location 1069
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1069 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1070
9999 mem: storing 1 in location 1071
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1071 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1067 is 99
  90 print-character: 99
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1066 is 1014
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1016
9998 run: its type is "number"
9999 mem: location 1016 is 3
9999 mem: storing 3 in location 1072
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9998 run: its type is "number"
9999 mem: location 1015 is 2
9999 mem: storing 2 in location 1073
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1017
9998 run: its type is "number"
9999 mem: location 1017 is 0
9999 mem: storing 0 in location 1074
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1074 is 0
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1073 is 2
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1018
9998 run: its type is "number"
9999 mem: location 1018 is 2
9999 mem: storing 2 in location 1076
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1076 is 2
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1076 is 2
9999 mem: location 1072 is 3
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1067 is 99
9999 mem: storing 0 in location 1077
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1077 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1072 is 3
9999 mem: storing 0 in location 1080
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1080 is 0
9999 mem: location 1076 is 2
9999 mem: storing 2 in location 1080
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1019
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1019 is 1020
9999 mem: location 1081 is 0
9999 mem: incrementing refcount of 1020: 1 -> 2
9999 mem: storing 1020 in location 1081
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: storing 6 in location 1082
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1067 is 99
9999 mem: storing 0 in location 1083
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1083 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1067 is 99
9999 mem: location 1068 is 7
9999 mem: storing 99 in location 1085
9999 mem: storing 7 in location 1086
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1080 is 2
9998 run: address to copy to is 1026
9999 mem: location 1085 is 99
9999 mem: location 1086 is 7
9999 mem: storing 99 in location 1026
9999 mem: storing 7 in location 1027
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1072 is 3
9999 mem: storing 2 in location 1087
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1076 is 2
9999 mem: location 1087 is 2
9999 mem: storing 1 in location 1088
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1088 is 1
9998 run: jumping to instruction 80
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1066 is 1014
9999 mem: clearing screen:address:screen
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 4 -> 3
9999 mem: storing 0 in location 1066
9999 mem: clearing c:character
9999 mem: storing 0 in location 1067
9999 mem: clearing color:number
9999 mem: storing 0 in location 1068
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1069
9999 mem: clearing color
9999 mem: storing 0 in location 1068
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1070
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1071
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1070
9999 mem: clearing width:number
9999 mem: storing 0 in location 1072
9999 mem: clearing height:number
9999 mem: storing 0 in location 1073
9999 mem: clearing row:number
9999 mem: storing 0 in location 1074
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing column:number
9999 mem: storing 0 in location 1076
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1077
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1078
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1079
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing row
9999 mem: storing 0 in location 1074
9999 mem: clearing index:number
9999 mem: storing 0 in location 1080
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: decrementing refcount of 1020: 2 -> 1
9999 mem: storing 0 in location 1081
9999 mem: clearing len:number
9999 mem: storing 0 in location 1082
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1083
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1084
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing right:number
9999 mem: storing 0 in location 1087
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1088
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: automatically abandoning 1063
9999 abandon: updating refcounts inside 1063: (array number)
9999 abandon: saving 1063 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1060 is 2
9999 mem: storing 3 in location 1060
 104 run: jump {: "offset"}
9998 run: jumping to instruction 16
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1060 is 3
9999 mem: location 1059 is 4
9999 mem: storing 0 in location 1061
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1061 is 0
9998 run: jump-if fell through
 104 run: {c: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1054 is 1044
9999 mem: skipping refcount at 1044
9998 run: base address is 1045
9999 mem: location 1060 is 3
9998 run: address to copy is 1049
9998 run: its type is character
9999 mem: location 1049 is 100
9999 mem: storing 100 in location 1062
 104 run: print {screen: ("address" "screen")}, {c: "character"}, {color: "number"}, {bg-color: "number"}
9999 mem: location 1053 is 1014
9999 mem: location 1062 is 100
9999 mem: location 1055 is 7
9999 mem: location 1057 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 abandon: picking up space from free-list of size 26
9999 mem: new alloc from free list: 1063
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1066 is 0
9999 mem: incrementing refcount of 1014: 3 -> 4
9999 mem: storing 1014 in location 1066
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 100 in location 1067
 105 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 7 in location 1068
9999 mem: storing 1 in location 1069
 105 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1069 is 1
9998 run: jumping to instruction 7
 105 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1070
9999 mem: storing 1 in location 1071
 105 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1071 is 1
9998 run: jumping to instruction 12
 105 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1067 is 100
  90 print-character: 100
 105 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1066 is 1014
9998 run: jump-unless fell through
 105 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1016
9998 run: its type is "number"
9999 mem: location 1016 is 3
9999 mem: storing 3 in location 1072
 105 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9998 run: its type is "number"
9999 mem: location 1015 is 2
9999 mem: storing 2 in location 1073
 105 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1017
9998 run: its type is "number"
9999 mem: location 1017 is 0
9999 mem: storing 0 in location 1074
 105 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1074 is 0
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 23
 105 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1073 is 2
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 28
 105 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1018
9998 run: its type is "number"
9999 mem: location 1018 is 2
9999 mem: storing 2 in location 1076
 105 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1076 is 2
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 34
 105 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1076 is 2
9999 mem: location 1072 is 3
9999 mem: storing 1 in location 1075
 105 run: jump-if {legal?: "boolean"}, {: "offset"}
9999 mem: location 1075 is 1
9998 run: jumping to instruction 39
 105 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1067 is 100
9999 mem: storing 0 in location 1077
 105 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1077 is 0
9998 run: jumping to instruction 53
 105 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1074 is 0
9999 mem: location 1072 is 3
9999 mem: storing 0 in location 1080
 105 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1080 is 0
9999 mem: location 1076 is 2
9999 mem: storing 2 in location 1080
 105 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1019
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1019 is 1020
9999 mem: location 1081 is 0
9999 mem: incrementing refcount of 1020: 1 -> 2
9999 mem: storing 1020 in location 1081
 105 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: storing 6 in location 1082
 105 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1067 is 100
9999 mem: storing 0 in location 1083
 105 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1083 is 0
9998 run: jumping to instruction 71
 105 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1067 is 100
9999 mem: location 1068 is 7
9999 mem: storing 100 in location 1085
9999 mem: storing 7 in location 1086
 105 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1080 is 2
9998 run: address to copy to is 1026
9999 mem: location 1085 is 100
9999 mem: location 1086 is 7
9999 mem: storing 100 in location 1026
9999 mem: storing 7 in location 1027
 105 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1072 is 3
9999 mem: storing 2 in location 1087
 105 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1076 is 2
9999 mem: location 1087 is 2
9999 mem: storing 1 in location 1088
 105 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1088 is 1
9998 run: jumping to instruction 80
 105 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1066 is 1014
9999 mem: clearing screen:address:screen
9999 mem: location 1066 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 4 -> 3
9999 mem: storing 0 in location 1066
9999 mem: clearing c:character
9999 mem: storing 0 in location 1067
9999 mem: clearing color:number
9999 mem: storing 0 in location 1068
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1069
9999 mem: clearing color
9999 mem: storing 0 in location 1068
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1070
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1071
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1070
9999 mem: clearing width:number
9999 mem: storing 0 in location 1072
9999 mem: clearing height:number
9999 mem: storing 0 in location 1073
9999 mem: clearing row:number
9999 mem: storing 0 in location 1074
9999 mem: clearing legal?:boolean
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing column:number
9999 mem: storing 0 in location 1076
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing legal?
9999 mem: storing 0 in location 1075
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 1077
9999 mem: clearing bottom:number
9999 mem: storing 0 in location 1078
9999 mem: clearing at-bottom?:boolean
9999 mem: storing 0 in location 1079
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing row
9999 mem: storing 0 in location 1074
9999 mem: clearing index:number
9999 mem: storing 0 in location 1080
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1081 is 1020
9999 mem: skipping refcount at 1020
9999 mem: decrementing refcount of 1020: 2 -> 1
9999 mem: storing 0 in location 1081
9999 mem: clearing len:number
9999 mem: storing 0 in location 1082
9999 mem: clearing backspace?:boolean
9999 mem: storing 0 in location 1083
9999 mem: clearing at-left?:boolean
9999 mem: storing 0 in location 1084
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: clearing index
9999 mem: storing 0 in location 1080
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing cursor:screen-cell
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: clearing right:number
9999 mem: storing 0 in location 1087
9999 mem: clearing at-right?:boolean
9999 mem: storing 0 in location 1088
9999 mem: clearing column
9999 mem: storing 0 in location 1076
9999 mem: automatically abandoning 1063
9999 abandon: updating refcounts inside 1063: (array number)
9999 abandon: saving 1063 in free-list of size 26
9999 trace: reply: decrementing callstack depth from 4
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1060 is 3
9999 mem: storing 4 in location 1060
 104 run: jump {: "offset"}
9998 run: jumping to instruction 16
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {len: "number"}
9999 mem: location 1060 is 4
9999 mem: location 1059 is 4
9999 mem: storing 1 in location 1061
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1061 is 1
9998 run: jumping to instruction 22
 104 run: reply {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1053 is 1014
9999 mem: clearing s:address:array:character
9999 mem: location 1054 is 1044
9999 mem: skipping refcount at 1044
9999 mem: decrementing refcount of 1044: 2 -> 1
9999 mem: storing 0 in location 1054
9999 mem: clearing color:number
9999 mem: storing 0 in location 1055
9999 mem: clearing color-found?:boolean
9999 mem: storing 0 in location 1056
9999 mem: clearing color
9999 mem: storing 0 in location 1055
9999 mem: clearing bg-color:number
9999 mem: storing 0 in location 1057
9999 mem: clearing bg-color-found?:boolean
9999 mem: storing 0 in location 1058
9999 mem: clearing bg-color
9999 mem: storing 0 in location 1057
9999 mem: clearing len:number
9999 mem: storing 0 in location 1059
9999 mem: clearing i:number
9999 mem: storing 0 in location 1060
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1061
9999 mem: clearing c:character
9999 mem: storing 0 in location 1062
9999 mem: clearing i
9999 mem: storing 0 in location 1060
9999 mem: automatically abandoning 1050
9999 abandon: updating refcounts inside 1050: (array number)
9999 abandon: saving 1050 in free-list of size 13
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1003
 103 run: {cell: ("address" "array" "screen-cell")} <- get {fake-screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1003 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 mem: location 1017 is 0
9999 mem: location 1018 is 2
9999 mem: location 1019 is 1020
9999 mem: location 1003 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1019
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1019 is 1020
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1020: 1 -> 2
9999 mem: storing 1020 in location 1005
 103 run: {10: ("array" "screen-cell"), "raw": ()} <- copy {cell: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1005 is 1020
9999 mem: skipping refcount at 1020
9999 mem: location 1021 is 6
9999 mem: location 1022 is 97
9999 mem: location 1023 is 7
9999 mem: location 1024 is 98
9999 mem: location 1025 is 7
9999 mem: location 1026 is 100
9999 mem: location 1027 is 7
9999 mem: location 1028 is 0
9999 mem: location 1029 is 7
9999 mem: location 1030 is 0
9999 mem: location 1031 is 7
9999 mem: location 1032 is 0
9999 mem: location 1033 is 7
9999 mem: storing 6 in location 10
9999 mem: storing 97 in location 11
9999 mem: storing 7 in location 12
9999 mem: storing 98 in location 13
9999 mem: storing 7 in location 14
9999 mem: storing 100 in location 15
9999 mem: storing 7 in location 16
9999 mem: storing 0 in location 17
9999 mem: storing 7 in location 18
9999 mem: storing 0 in location 19
9999 mem: storing 7 in location 20
9999 mem: storing 0 in location 21
9999 mem: storing 7 in location 22
 103 run: reply 
9999 mem: clearing fake-screen:address:screen
9999 mem: location 1003 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 3 -> 2
9999 mem: storing 0 in location 1003
9999 mem: clearing s:address:array:character
9999 mem: location 1004 is 1044
9999 mem: skipping refcount at 1044
9999 mem: decrementing refcount of 1044: 1 -> 0
9999 mem: automatically abandoning 1044
9999 abandon: updating refcounts inside 1044: (array character)
9999 abandon: saving 1044 in free-list of size 6
9999 mem: storing 0 in location 1004
9999 mem: clearing fake-screen
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: clearing cell:address:array:screen-cell
9999 mem: location 1005 is 1020
9999 mem: skipping refcount at 1020
9999 mem: decrementing refcount of 1020: 2 -> 1
9999 mem: storing 0 in location 1005
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    10 <- 6  # width*height\n    11 <- 97  # 'a'\n    12 <- 7  # white\n    13 <- 98  # 'b'\n    14 <- 7  # white\n    15 <- 100  # 'd' overwrites 'c'\n    16 <- 7  # white\n    # rest of screen is empty\n    17 <- 0\n  ": "literal-string"}
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
