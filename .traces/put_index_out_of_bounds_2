9991 parse: --- defining main
9993 parse: instruction: create-array
9993 parse:   number of ingredients: 0
9993 parse:   product: {1: ("array" "point" "3")}
9992 load: after rewriting: {1: ("array" "point" "3")} <- create-array 
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {14: "literal"}
9993 parse:   product: {2: "number"}
9992 load: after rewriting: {2: "number"} <- copy {14: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {15: "literal"}
9993 parse:   product: {3: "number"}
9992 load: after rewriting: {3: "number"} <- copy {15: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {16: "literal"}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- copy {16: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {14: "literal"}
9993 parse:   product: {5: "number"}
9992 load: after rewriting: {5: "number"} <- copy {14: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {15: "literal"}
9993 parse:   product: {6: "number"}
9992 load: after rewriting: {6: "number"} <- copy {15: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {16: "literal"}
9993 parse:   product: {7: "number"}
9992 load: after rewriting: {7: "number"} <- copy {16: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {35: "literal"}
9993 parse:   product: {8: "point"}
9992 load: after rewriting: {8: "point"} <- merge {34: "literal"}, {35: "literal"}
9993 parse: instruction: put-index
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {1: ("array" "point")}
9993 parse:   ingredient: {-1: "literal"}
9993 parse:   ingredient: {8: "point"}
9993 parse:   product: {1: ("array" "point")}
9992 load: after rewriting: {1: ("array" "point")} <- put-index {1: ("array" "point")}, {-1: "literal"}, {8: "point"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: ("array" "point" "3")} <- create-array 
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for {2: "number"} <- copy {14: "literal"}
9993 transform: - compute address offsets for {3: "number"} <- copy {15: "literal"}
9993 transform: - compute address offsets for {4: "number"} <- copy {16: "literal"}
9993 transform: - compute address offsets for {5: "number"} <- copy {14: "literal"}
9993 transform: - compute address offsets for {6: "number"} <- copy {15: "literal"}
9993 transform: - compute address offsets for {7: "number"} <- copy {16: "literal"}
9993 transform: - compute address offsets for {8: "point"} <- merge {34: "literal"}, {35: "literal"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for {1: ("array" "point")} <- put-index {1: ("array" "point")}, {-1: "literal"}, {8: "point"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: create-array ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: merge ...
9992 transform: put-index ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 2
9999 transform: checking container {8: "point"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {8: "point"} || {y: "number"} vs ingredient 1
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: ("array" "point" "3")} <- create-array 
9999 mem: storing 3 in location 1
9998 run: creating array of size 7
 102 run: {2: "number"} <- copy {14: "literal"}
9999 mem: storing 14 in location 2
 102 run: {3: "number"} <- copy {15: "literal"}
9999 mem: storing 15 in location 3
 102 run: {4: "number"} <- copy {16: "literal"}
9999 mem: storing 16 in location 4
 102 run: {5: "number"} <- copy {14: "literal"}
9999 mem: storing 14 in location 5
 102 run: {6: "number"} <- copy {15: "literal"}
9999 mem: storing 15 in location 6
 102 run: {7: "number"} <- copy {16: "literal"}
9999 mem: storing 16 in location 7
 102 run: {8: "point"} <- merge {34: "literal"}, {35: "literal"}
9999 mem: storing 34 in location 8
9999 mem: storing 35 in location 9
 102 run: {1: ("array" "point")} <- put-index {1: ("array" "point")}, {-1: "literal"}, {8: "point"}
   0 error: main: invalid index -1

   0 error: 0 vs 1: failed to write to all products! 1:array:point <- put-index 1:array:point, -1, 8:point

