9991 parse: --- defining scenario_read-move-quit
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {20: "literal", "width": ()}
9993 parse:   ingredient: {2: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "screen")} <- new-fake-screen {20: "literal", "width": ()}, {2: "literal", "height": ()}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:source:character, 2:address:sink:character <- new-channel 2/capacity\n    3:number/routine <- start-running read-move, 1:address:channel:character, screen:address:screen\n    # 'read-move' is waiting for input\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/waiting? <- equal 4:number/routine-state, 3/waiting\n    assert 5:boolean/waiting?, [ \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)]\n    # press 'q'\n    2:address:sink:character <- write 2:address:sink:character, 113/q\n    restart 3:number/routine\n    # 'read-move' completes\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/completed? <- equal 4:number/routine-state, 1/completed\n    assert 5:boolean/completed?, [ \nF read-move-quit: routine failed to terminate on 'q']\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:source:character, 2:address:sink:character <- new-channel 2/capacity\n    3:number/routine <- start-running read-move, 1:address:channel:character, screen:address:screen\n    # 'read-move' is waiting for input\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/waiting? <- equal 4:number/routine-state, 3/waiting\n    assert 5:boolean/waiting?, [ \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)]\n    # press 'q'\n    2:address:sink:character <- write 2:address:sink:character, 113/q\n    restart 3:number/routine\n    # 'read-move' completes\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/completed? <- equal 4:number/routine-state, 1/completed\n    assert 5:boolean/completed?, [ \nF read-move-quit: routine failed to terminate on 'q']\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    test: reached end\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
9999 parse: recipe scenario_read-move-quit has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_read-move-quit
9991 transform: --- rewrite 'stash' instructions in recipe scenario_read-move-quit
9991 transform: --- deduce types for recipe scenario_read-move-quit
9992 transform: screen => ("address" "screen")
9993 transform: {screen: ("address" "screen")} <- new-fake-screen {20: "literal", "width": ()}, {2: "literal", "height": ()}
9993 transform: run {"\n    1:address:source:character, 2:address:sink:character <- new-channel 2/capacity\n    3:number/routine <- start-running read-move, 1:address:channel:character, screen:address:screen\n    # 'read-move' is waiting for input\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/waiting? <- equal 4:number/routine-state, 3/waiting\n    assert 5:boolean/waiting?, [ \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)]\n    # press 'q'\n    2:address:sink:character <- write 2:address:sink:character, 113/q\n    restart 3:number/routine\n    # 'read-move' completes\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/completed? <- equal 4:number/routine-state, 1/completed\n    assert 5:boolean/completed?, [ \nF read-move-quit: routine failed to terminate on 'q']\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9993 transform: trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_read-move-quit
9991 transform: --- deduce types for recipe scenario_read-move-quit
9992 transform: screen => ("address" "screen")
9991 transform: --- check for invalid types in recipe scenario_read-move-quit
9991 transform: --- collect surrounding spaces for recipe scenario_read-move-quit
9991 transform: --- transform names for recipe scenario_read-move-quit
9991 transform: --- resolve ambiguous calls for recipe scenario_read-move-quit
9992 transform: instruction {screen: ("address" "screen")} <- new-fake-screen {20: "literal", "width": ()}, {2: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "screen")}
9992 transform: --- compute address offsets for scenario_read-move-quit
9993 transform: - compute address offsets for {screen: ("address" "screen")} <- new-fake-screen {20: "literal", "width": ()}, {2: "literal", "height": ()}
9993 transform: - compute address offsets for run {"\n    1:address:source:character, 2:address:sink:character <- new-channel 2/capacity\n    3:number/routine <- start-running read-move, 1:address:channel:character, screen:address:screen\n    # 'read-move' is waiting for input\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/waiting? <- equal 4:number/routine-state, 3/waiting\n    assert 5:boolean/waiting?, [ \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)]\n    # press 'q'\n    2:address:sink:character <- write 2:address:sink:character, 113/q\n    restart 3:number/routine\n    # 'read-move' completes\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/completed? <- equal 4:number/routine-state, 1/completed\n    assert 5:boolean/completed?, [ \nF read-move-quit: routine failed to terminate on 'q']\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9993 transform: - compute address offsets for trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_read-move-quit
9991 transform: --- transform braces for recipe scenario_read-move-quit
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: trace-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_read-move-quit
9991 transform: --- perform checks for recipe scenario_read-move-quit
9991 transform: --- type-check 'call' instructions inside recipe scenario_read-move-quit
9991 transform: --- type-check calls inside recipe scenario_read-move-quit
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_read-move-quit
9991 transform: --- check types of reply instructions in recipe scenario_read-move-quit
9991 transform: --- type-check merge instructions in recipe scenario_read-move-quit
9991 transform: --- checking reply instructions against header for scenario_read-move-quit
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_read-move-quit
 102 run: {screen: ("address" "screen")} <- new-fake-screen {20: "literal", "width": ()}, {2: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 20 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1004
 103 run: {result: ("address" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1008: 0 -> 1
9999 mem: storing 1008 in location 1005
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 20
9999 mem: location 1004 is 2
9999 mem: storing 40 in location 1006
 103 run: {data: ("address" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 40
9999 mem: array size is 40
9999 mem: allocating size 82
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
9999 mem: storing 0 in location 1059
9999 mem: storing 0 in location 1060
9999 mem: storing 0 in location 1061
9999 mem: storing 0 in location 1062
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
9999 mem: storing 0 in location 1065
9999 mem: storing 0 in location 1066
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
9999 mem: storing 0 in location 1071
9999 mem: storing 0 in location 1072
9999 mem: storing 0 in location 1073
9999 mem: storing 0 in location 1074
9999 mem: storing 0 in location 1075
9999 mem: storing 0 in location 1076
9999 mem: storing 0 in location 1077
9999 mem: storing 0 in location 1078
9999 mem: storing 0 in location 1079
9999 mem: storing 0 in location 1080
9999 mem: storing 0 in location 1081
9999 mem: storing 0 in location 1082
9999 mem: storing 0 in location 1083
9999 mem: storing 0 in location 1084
9999 mem: storing 0 in location 1085
9999 mem: storing 0 in location 1086
9999 mem: storing 0 in location 1087
9999 mem: storing 0 in location 1088
9999 mem: storing 0 in location 1089
9999 mem: storing 0 in location 1090
9999 mem: storing 0 in location 1091
9999 mem: storing 0 in location 1092
9999 mem: storing 0 in location 1093
9999 mem: storing 0 in location 1094
9999 mem: storing 0 in location 1095
9999 mem: storing 40 in location 1015
9999 mem: location 1007 is 0
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1007
 103 run: {result: ("address" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "array" "screen-cell")}
9999 mem: location 1004 is 2
9999 mem: location 1003 is 20
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 2 in location 1009
9999 mem: storing 20 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "screen")} <- clear-screen {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1096
9999 mem: storing 0 in location 1096
9999 mem: storing 0 in location 1097
9999 mem: storing 0 in location 1098
9999 mem: storing 0 in location 1099
9999 mem: storing 0 in location 1100
9999 mem: storing 0 in location 1101
9999 mem: storing 0 in location 1102
9999 mem: storing 0 in location 1103
9999 mem: storing 0 in location 1104
9999 mem: storing 0 in location 1105
9999 mem: storing 8 in location 1097
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 1099 is 0
9999 mem: incrementing refcount of 1008: 1 -> 2
9999 mem: storing 1008 in location 1099
 104 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1099 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: location 1100 is 0
9999 mem: incrementing refcount of 1014: 2 -> 3
9999 mem: storing 1014 in location 1100
 104 run: {max: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 40 in location 1101
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1102
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 0
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 0
9998 run: address to copy to is 1016
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 0
9999 mem: storing 1 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 1
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 1
9998 run: address to copy to is 1018
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 1
9999 mem: storing 2 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 2
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 2
9998 run: address to copy to is 1020
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 2
9999 mem: storing 3 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 3
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 3
9998 run: address to copy to is 1022
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 3
9999 mem: storing 4 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 4
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 4
9998 run: address to copy to is 1024
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 4
9999 mem: storing 5 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 5
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 5
9998 run: address to copy to is 1026
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 5
9999 mem: storing 6 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 6
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 6
9998 run: address to copy to is 1028
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 6
9999 mem: storing 7 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 7
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 7
9998 run: address to copy to is 1030
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 7
9999 mem: storing 8 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 8
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 8
9998 run: address to copy to is 1032
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 8
9999 mem: storing 9 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 9
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 9
9998 run: address to copy to is 1034
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 9
9999 mem: storing 10 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 10
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 10
9998 run: address to copy to is 1036
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 10
9999 mem: storing 11 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 11
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 11
9998 run: address to copy to is 1038
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 11
9999 mem: storing 12 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 12
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 12
9998 run: address to copy to is 1040
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 12
9999 mem: storing 13 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 13
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 13
9998 run: address to copy to is 1042
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 13
9999 mem: storing 14 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 14
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 14
9998 run: address to copy to is 1044
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 14
9999 mem: storing 15 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 15
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 15
9998 run: address to copy to is 1046
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1046
9999 mem: storing 7 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 15
9999 mem: storing 16 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 16
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 16
9998 run: address to copy to is 1048
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1048
9999 mem: storing 7 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 16
9999 mem: storing 17 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 17
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 17
9998 run: address to copy to is 1050
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1050
9999 mem: storing 7 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 17
9999 mem: storing 18 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 18
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 18
9998 run: address to copy to is 1052
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1052
9999 mem: storing 7 in location 1053
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 18
9999 mem: storing 19 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 19
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 19
9998 run: address to copy to is 1054
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 19
9999 mem: storing 20 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 20
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 20
9998 run: address to copy to is 1056
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1056
9999 mem: storing 7 in location 1057
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 20
9999 mem: storing 21 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 21
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 21
9998 run: address to copy to is 1058
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1058
9999 mem: storing 7 in location 1059
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 21
9999 mem: storing 22 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 22
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 22
9998 run: address to copy to is 1060
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1060
9999 mem: storing 7 in location 1061
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 22
9999 mem: storing 23 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 23
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 23
9998 run: address to copy to is 1062
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1062
9999 mem: storing 7 in location 1063
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 23
9999 mem: storing 24 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 24
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 24
9998 run: address to copy to is 1064
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1064
9999 mem: storing 7 in location 1065
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 24
9999 mem: storing 25 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 25
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 25
9998 run: address to copy to is 1066
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1066
9999 mem: storing 7 in location 1067
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 25
9999 mem: storing 26 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 26
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 26
9998 run: address to copy to is 1068
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1068
9999 mem: storing 7 in location 1069
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 26
9999 mem: storing 27 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 27
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 27
9998 run: address to copy to is 1070
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1070
9999 mem: storing 7 in location 1071
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 27
9999 mem: storing 28 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 28
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 28
9998 run: address to copy to is 1072
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1072
9999 mem: storing 7 in location 1073
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 28
9999 mem: storing 29 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 29
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 29
9998 run: address to copy to is 1074
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1074
9999 mem: storing 7 in location 1075
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 29
9999 mem: storing 30 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 30
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 30
9998 run: address to copy to is 1076
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1076
9999 mem: storing 7 in location 1077
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 30
9999 mem: storing 31 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 31
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 31
9998 run: address to copy to is 1078
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1078
9999 mem: storing 7 in location 1079
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 31
9999 mem: storing 32 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 32
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 32
9998 run: address to copy to is 1080
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1080
9999 mem: storing 7 in location 1081
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 32
9999 mem: storing 33 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 33
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 33
9998 run: address to copy to is 1082
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1082
9999 mem: storing 7 in location 1083
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 33
9999 mem: storing 34 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 34
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 34
9998 run: address to copy to is 1084
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1084
9999 mem: storing 7 in location 1085
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 34
9999 mem: storing 35 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 35
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 35
9998 run: address to copy to is 1086
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1086
9999 mem: storing 7 in location 1087
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 35
9999 mem: storing 36 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 36
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 36
9998 run: address to copy to is 1088
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1088
9999 mem: storing 7 in location 1089
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 36
9999 mem: storing 37 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 37
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 37
9998 run: address to copy to is 1090
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1090
9999 mem: storing 7 in location 1091
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 37
9999 mem: storing 38 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 38
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 38
9998 run: address to copy to is 1092
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1092
9999 mem: storing 7 in location 1093
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 38
9999 mem: storing 39 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 39
9999 mem: location 1101 is 40
9999 mem: storing 0 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1104
9999 mem: storing 7 in location 1105
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1102 is 39
9998 run: address to copy to is 1094
9999 mem: location 1104 is 0
9999 mem: location 1105 is 7
9999 mem: storing 0 in location 1094
9999 mem: storing 7 in location 1095
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1102 is 39
9999 mem: storing 40 in location 1102
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1102 is 40
9999 mem: location 1101 is 40
9999 mem: storing 1 in location 1103
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1103 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1099 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1099 is 1008
9999 mem: clearing buf:address:array:screen-cell
9999 mem: location 1100 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 3 -> 2
9999 mem: storing 0 in location 1100
9999 mem: clearing max:number
9999 mem: storing 0 in location 1101
9999 mem: clearing i:number
9999 mem: storing 0 in location 1102
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1103
9999 mem: clearing curr:screen-cell
9999 mem: storing 0 in location 1104
9999 mem: storing 0 in location 1105
9999 mem: clearing i
9999 mem: storing 0 in location 1102
9999 mem: automatically abandoning 1096
9999 abandon: updating refcounts inside 1096: (array number)
9999 abandon: saving 1096 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1005
 103 run: reply {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 mem: clearing w:number
9999 mem: storing 0 in location 1003
9999 mem: clearing h:number
9999 mem: storing 0 in location 1004
9999 mem: clearing bufsize:number
9999 mem: storing 0 in location 1006
9999 mem: clearing data:address:array:screen-cell
9999 mem: location 1007 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1007
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
 102 run: run {"\n    1:address:source:character, 2:address:sink:character <- new-channel 2/capacity\n    3:number/routine <- start-running read-move, 1:address:channel:character, screen:address:screen\n    # 'read-move' is waiting for input\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/waiting? <- equal 4:number/routine-state, 3/waiting\n    assert 5:boolean/waiting?, [ \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)]\n    # press 'q'\n    2:address:sink:character <- write 2:address:sink:character, 113/q\n    restart 3:number/routine\n    # 'read-move' completes\n    wait-for-routine 3:number\n    4:number <- routine-state 3:number/id\n    5:boolean/completed? <- equal 4:number/routine-state, 1/completed\n    assert 5:boolean/completed?, [ \nF read-move-quit: routine failed to terminate on 'q']\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {2: "literal", "capacity": ()}
9993 parse:   product: {1: ("address" "source" "character")}
9993 parse:   product: {2: ("address" "sink" "character")}
9992 load: after rewriting: {1: ("address" "source" "character")}, {2: ("address" "sink" "character")} <- new-channel {2: "literal", "capacity": ()}
9993 parse: instruction: start-running
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {read-move: ()}
9993 parse:   ingredient: {1: ("address" "channel" "character")}
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   product: {3: "number", "routine": ()}
9992 load: after rewriting: {3: "number", "routine": ()} <- start-running {read-move: ()}, {1: ("address" "channel" "character")}, {screen: ("address" "screen")}
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "number"}
9992 load: after rewriting: wait-for-routine {3: "number"}
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "number", "id": ()}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- routine-state {3: "number", "id": ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {4: "number", "routine-state": ()}
9993 parse:   ingredient: {3: "literal", "waiting": ()}
9993 parse:   product: {5: "boolean", "waiting?": ()}
9992 load: after rewriting: {5: "boolean", "waiting?": ()} <- equal {4: "number", "routine-state": ()}, {3: "literal", "waiting": ()}
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "boolean", "waiting?": ()}
9993 parse:   ingredient: {" \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)": "literal-string"}
9992 load: after rewriting: assert {5: "boolean", "waiting?": ()}, {" \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)": "literal-string"}
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "sink" "character")}
9993 parse:   ingredient: {113: "literal", "q": ()}
9993 parse:   product: {2: ("address" "sink" "character")}
9992 load: after rewriting: {2: ("address" "sink" "character")} <- write {2: ("address" "sink" "character")}, {113: "literal", "q": ()}
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "number", "routine": ()}
9992 load: after rewriting: restart {3: "number", "routine": ()}
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "number"}
9992 load: after rewriting: wait-for-routine {3: "number"}
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "number", "id": ()}
9993 parse:   product: {4: "number"}
9992 load: after rewriting: {4: "number"} <- routine-state {3: "number", "id": ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {4: "number", "routine-state": ()}
9993 parse:   ingredient: {1: "literal", "completed": ()}
9993 parse:   product: {5: "boolean", "completed?": ()}
9992 load: after rewriting: {5: "boolean", "completed?": ()} <- equal {4: "number", "routine-state": ()}, {1: "literal", "completed": ()}
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "boolean", "completed?": ()}
9993 parse:   ingredient: {" \nF read-move-quit: routine failed to terminate on 'q'": "literal-string"}
9992 load: after rewriting: assert {5: "boolean", "completed?": ()}, {" \nF read-move-quit: routine failed to terminate on 'q'": "literal-string"}
9993 parse: instruction: trace
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {1: "literal"}
9993 parse:   ingredient: {"test": "literal-string"}
9993 parse:   ingredient: {"reached end": "literal-string"}
9992 load: after rewriting: trace {1: "literal"}, {"test": "literal-string"}, {"reached end": "literal-string"}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {1: ("address" "source" "character")}, {2: ("address" "sink" "character")} <- new-channel {2: "literal", "capacity": ()}
9992 transform: checking variant (strict) 0: recipe new-channel {capacity: "number"} -> {in: ("address" "source" "_elem")} {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: product 0
9992 transform: checking variant (strict) 1: recipe new-channel_2 {capacity: "number"} -> {in: ("address" "source" "character")} {out: ("address" "sink" "character")}
9992 transform: instruction {5: "boolean", "waiting?": ()} <- equal {4: "number", "routine-state": ()}, {3: "literal", "waiting": ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {2: ("address" "sink" "character")} <- write {2: ("address" "sink" "character")}, {113: "literal", "q": ()}
9992 transform: checking variant (strict) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe write {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe write_2 {out: ("address" "sink" "character")} {val: "character"} -> {out: ("address" "sink" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: found variant to specialize: 222 write
9993 transform: switching write to specialized recipe write_3 {out: ("address" "sink" "_elem")} {val: "_elem"} -> {out: ("address" "sink" "_elem")}
9993 transform: compute type names: write_3
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform: type of 'out' is ("address" "sink" "_elem")
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform: type of 'val' is "_elem"
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {out: ("address" "sink" "_elem")}: ("address" "sink" "_elem")
9993 transform:   instruction: {val: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {val: "_elem"}: "_elem"
9993 transform:   instruction: {chan: ("address" "channel" "_elem")} <- get {out: (), "lookup": ()}, {chan: "offset"}
9994 transform:     checking {out: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "sink" "_elem")
9994 transform:     checking {chan: "offset"}: "offset"
9994 transform:     checking {chan: ("address" "channel" "_elem")}: ("address" "channel" "_elem")
9993 transform: type of 'chan' is ("address" "channel" "_elem")
9993 transform:   instruction: <channel-write-initial>
9993 transform:   instruction: {
9993 transform:   instruction: {full: "boolean"} <- channel-full? {chan: ()}
9994 transform:     checking {chan: ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {full: "boolean"}: "boolean"
9993 transform: type of 'full' is "boolean"
9993 transform:   instruction: break-unless {full: ()}
9994 transform:     checking {full: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {full-address: "location"} <- get-location {chan: (), "lookup": ()}, {first-full: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-full: "offset"}: "offset"
9994 transform:     checking {full-address: "location"}: "location"
9993 transform: type of 'full-address' is "location"
9993 transform:   instruction: wait-for-location {full-address: ()}
9994 transform:     checking {full-address: ()}: ()
9994 transform:     deducing type to "location"
9993 transform:   instruction: }
9993 transform:   instruction: {circular-buffer: ("address" "array" "_elem")} <- get {chan: (), "lookup": ()}, {data: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {data: "offset"}: "offset"
9994 transform:     checking {circular-buffer: ("address" "array" "_elem")}: ("address" "array" "_elem")
9993 transform: type of 'circular-buffer' is ("address" "array" "_elem")
9993 transform:   instruction: {free: "number"} <- get {chan: (), "lookup": ()}, {first-free: "offset"}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: "number"}: "number"
9993 transform: type of 'free' is "number"
9993 transform:   instruction: {circular-buffer: (), "lookup": ()} <- put-index {circular-buffer: (), "lookup": ()}, {free: ()}, {val: ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {val: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9993 transform:   instruction: {free: ()} <- add {free: ()}, {1: "literal"}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {1: "literal"}: "literal"
9993 transform: type of '1' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: {
9993 transform:   instruction: {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9994 transform:     checking {circular-buffer: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "array" "_elem")
9994 transform:     checking {len: "number"}: "number"
9993 transform: type of 'len' is "number"
9993 transform:   instruction: {at-end?: "boolean"} <- greater-or-equal {free: ()}, {len: ()}
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {len: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {at-end?: "boolean"}: "boolean"
9993 transform: type of 'at-end?' is "boolean"
9993 transform:   instruction: break-unless {at-end?: ()}
9994 transform:     checking {at-end?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {free: ()} <- copy {0: "literal"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of '0' is "literal"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9993 transform:   instruction: }
9993 transform:   instruction: {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-free: "offset"}, {free: ()}
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9994 transform:     checking {first-free: "offset"}: "offset"
9994 transform:     checking {free: ()}: ()
9994 transform:     deducing type to "number"
9994 transform:     checking {chan: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "channel" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{out: ("address" "sink" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient out:address:sink:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{val: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem")} <- get {out: ("address" "sink" "_elem"), "lookup": ()}, {chan: "offset"}'
9993 transform: replacing in ingredient *out
9993 transform: _elem => "character"
9993 transform: replacing in ingredient chan:offset
9993 transform: replacing in ingredient chan:address:channel:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '<channel-write-initial>'
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{full: "boolean"} <- channel-full? {chan: ("address" "channel" "_elem")}'
9993 transform: replacing in ingredient chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient full:boolean
9993 transform: replacing in instruction 'break-unless {full: "boolean"}'
9993 transform: replacing in ingredient full
9993 transform: replacing in instruction '{full-address: "location"} <- get-location {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-full: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-full:offset
9993 transform: replacing in ingredient full-address:location
9993 transform: replacing in instruction 'wait-for-location {full-address: "location"}'
9993 transform: replacing in ingredient full-address
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem")} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {data: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient data:offset
9993 transform: replacing in ingredient circular-buffer:address:array:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- get {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free:number
9993 transform: replacing in instruction '{circular-buffer: ("address" "array" "_elem"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "_elem"), "lookup": ()}, {free: "number"}, {val: "_elem"}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient val
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{free: "number"} <- add {free: "number"}, {1: "literal"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient 1
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{len: "number"} <- length {circular-buffer: ("address" "array" "_elem"), "lookup": ()}'
9993 transform: replacing in ingredient *circular-buffer
9993 transform: _elem => "character"
9993 transform: replacing in ingredient len:number
9993 transform: replacing in instruction '{at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}'
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient len
9993 transform: replacing in ingredient at-end?:boolean
9993 transform: replacing in instruction 'break-unless {at-end?: "boolean"}'
9993 transform: replacing in ingredient at-end?
9993 transform: replacing in instruction '{free: "number"} <- copy {0: "literal"}'
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient free
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{chan: ("address" "channel" "_elem"), "lookup": ()} <- put {chan: ("address" "channel" "_elem"), "lookup": ()}, {first-free: "offset"}, {free: "number"}'
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9993 transform: replacing in ingredient first-free:offset
9993 transform: replacing in ingredient free
9993 transform: replacing in ingredient *chan
9993 transform: _elem => "character"
9992 transform: transforming new specialization: write_3
9991 transform: --- rewrite literal strings in recipe write_3
9991 transform: --- rewrite 'stash' instructions in recipe write_3
9991 transform: --- deduce types for recipe write_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: <channel-write-initial>
9993 transform: {
9993 transform: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform: break-unless {full: "boolean"}
9993 transform: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: wait-for-location {full-address: "location"}
9993 transform: }
9993 transform: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: {
9993 transform: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: break-unless {at-end?: "boolean"}
9993 transform: {free: "number"} <- copy {0: "literal"}
9993 transform: }
9993 transform: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9991 transform: --- checking reply instructions against header for write_3
9991 transform: --- fill in reply ingredients from header for recipe write_3
9991 transform: --- deduce types for recipe write_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: out => ("address" "sink" "character")
9992 transform: val => "character"
9992 transform: chan => ("address" "channel" "character")
9992 transform: full => "boolean"
9992 transform: full-address => "location"
9992 transform: circular-buffer => ("address" "array" "character")
9992 transform: free => "number"
9992 transform: len => "number"
9992 transform: at-end? => "boolean"
9991 transform: --- deduce types from header for write_3
9993 transform: type of out is ("address" "sink" "character")
9993 transform: type of val is "character"
9993 transform: type of out is ("address" "sink" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {out: ("address" "sink" "character")}
9992 transform: instruction: {val: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {val: "character"}
9992 transform: instruction: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform:   product: {chan: ("address" "channel" "character")}
9992 transform: instruction: <channel-write-initial>
9992 transform: instruction: {
9992 transform: instruction: {full: "boolean"} <- channel-full? {chan: ("address" "channel" "character")}
9993 transform:   product: {full: "boolean"}
9992 transform: instruction: break-unless {full: "boolean"}
9992 transform: instruction: {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform:   product: {full-address: "location"}
9992 transform: instruction: wait-for-location {full-address: "location"}
9992 transform: instruction: }
9992 transform: instruction: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform:   product: {circular-buffer: ("address" "array" "character")}
9992 transform: instruction: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform:   product: {circular-buffer: ("address" "array" "character"), "lookup": ()}
9992 transform: instruction: {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: {
9992 transform: instruction: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform:   product: {len: "number"}
9992 transform: instruction: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform:   product: {at-end?: "boolean"}
9992 transform: instruction: break-unless {at-end?: "boolean"}
9992 transform: instruction: {free: "number"} <- copy {0: "literal"}
9993 transform:   product: {free: "number"}
9992 transform: instruction: }
9992 transform: instruction: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform:   product: {chan: ("address" "channel" "character"), "lookup": ()}
9992 transform: instruction: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- check for invalid types in recipe write_3
9991 transform: --- collect surrounding spaces for recipe write_3
9991 transform: --- transform names for recipe write_3
9993 name: assign out 1
9993 name: assign val 2
9993 name: element chan of type sink is at offset 0
9993 name: assign chan 3
9993 name: assign full 4
9993 name: element first-full of type channel is at offset 0
9993 name: assign full-address 5
9993 name: element data of type channel is at offset 2
9993 name: assign circular-buffer 6
9993 name: element first-free of type channel is at offset 1
9993 name: assign free 7
9993 name: assign len 8
9993 name: assign at-end? 9
9993 name: element first-free of type channel is at offset 1
9991 transform: --- resolve ambiguous calls for recipe write_3
9992 transform: instruction {full: "boolean"} <- channel-full? {chan: ()}
9992 transform: checking variant (strict) 0: recipe channel-full? {chan: ("address" "channel" "_elem")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe channel-full?_2 {chan: ("address" "channel" "character")} -> {result: "boolean"}
9992 transform: instruction {len: "number"} <- length {circular-buffer: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {chan: (), "lookup": ()} <- put {chan: (), "lookup": ()}, {first-free: "offset"}, {free: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for write_3
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {val: "character"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9993 transform: - compute address offsets for <channel-write-initial>
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9993 transform: - compute address offsets for break-unless {full: "boolean"}
9993 transform: - compute address offsets for {full-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9993 transform: - compute address offsets for wait-for-location {full-address: "location"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9993 transform: - compute address offsets for {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9993 transform: - compute address offsets for {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9993 transform: - compute address offsets for {free: "number"} <- add {free: "number"}, {1: "literal"}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9993 transform: - compute address offsets for break-unless {at-end?: "boolean"}
9993 transform: - compute address offsets for {free: "number"} <- copy {0: "literal"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9993 transform: - compute address offsets for reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9991 transform: --- compute instruction operations for recipe write_3
9991 transform: --- transform braces for recipe write_3
9993 transform: write_3: push (open, 5)
9993 transform: push (close, 10)
9993 transform: write_3: push (open, 15)
9993 transform: push (close, 20)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: get ...
9992 transform: channel-full? ...
9992 transform: jump-unless full, 2:offset
9992 transform: get-location ...
9992 transform: wait-for-location ...
9992 transform: get ...
9992 transform: get ...
9992 transform: put-index ...
9992 transform: add ...
9992 transform: length ...
9992 transform: greater-or-equal ...
9992 transform: jump-unless at-end?, 1:offset
9992 transform: copy ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe write_3
9991 transform: --- perform checks for recipe write_3
9991 transform: --- type-check 'call' instructions inside recipe write_3
9991 transform: --- type-check calls inside recipe write_3
9991 transform: --- convert 'new' to 'allocate' for recipe write_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe write_3
9991 transform: --- type-check merge instructions in recipe write_3
9991 transform: --- check that recipe write_3 sets default-space
9991 transform: --- checking reply instructions against header for write_3
9992 transform: new specialization: write_3
9992 transform: instruction {5: "boolean", "completed?": ()} <- equal {4: "number", "routine-state": ()}, {1: "literal", "completed": ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {1: ("address" "source" "character")}, {2: ("address" "sink" "character")} <- new-channel_2 {2: "literal", "capacity": ()}
9993 transform: - compute address offsets for {3: "number", "routine": ()} <- start-running {read-move: "recipe-literal"}, {1: ("address" "channel" "character")}, {screen: ("address" "screen")}
9993 transform: - compute address offsets for wait-for-routine {3: "number"}
9993 transform: - compute address offsets for {4: "number"} <- routine-state {3: "number", "id": ()}
9993 transform: - compute address offsets for {5: "boolean", "waiting?": ()} <- equal {4: "number", "routine-state": ()}, {3: "literal", "waiting": ()}
9993 transform: - compute address offsets for assert {5: "boolean", "waiting?": ()}, {" \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)": "literal-string"}
9993 transform: - compute address offsets for {2: ("address" "sink" "character")} <- write_3 {2: ("address" "sink" "character")}, {113: "literal", "q": ()}
9993 transform: - compute address offsets for restart {3: "number", "routine": ()}
9993 transform: - compute address offsets for wait-for-routine {3: "number"}
9993 transform: - compute address offsets for {4: "number"} <- routine-state {3: "number", "id": ()}
9993 transform: - compute address offsets for {5: "boolean", "completed?": ()} <- equal {4: "number", "routine-state": ()}, {1: "literal", "completed": ()}
9993 transform: - compute address offsets for assert {5: "boolean", "completed?": ()}, {" \nF read-move-quit: routine failed to terminate on 'q'": "literal-string"}
9993 transform: - compute address offsets for trace {1: "literal"}, {"test": "literal-string"}, {"reached end": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: start-running ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: trace ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "source" "character")}, {2: ("address" "sink" "character")} <- new-channel_2 {2: "literal", "capacity": ()}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
9999 mem: new alloc from free list: 1000
 104 run: {capacity: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1003
 104 run: {result: ("address" "channel" "character")} <- new {(channel character): "type"}
9999 mem: allocating size 5
9999 mem: new alloc: 1106
9999 mem: storing 0 in location 1106
9999 mem: storing 0 in location 1107
9999 mem: storing 0 in location 1108
9999 mem: storing 0 in location 1109
9999 mem: storing 0 in location 1110
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1106: 0 -> 1
9999 mem: storing 1106 in location 1004
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}, {0: "literal"}
9999 mem: location 1004 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 0
9999 mem: location 1110 is 0
9999 mem: location 1004 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy to is 1107
9999 mem: storing 0 in location 1107
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {0: "literal"}
9999 mem: location 1004 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 0
9999 mem: location 1110 is 0
9999 mem: location 1004 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy to is 1108
9999 mem: storing 0 in location 1108
 104 run: {capacity: "number"} <- add {capacity: "number"}, {1: "literal"}
9999 mem: location 1003 is 2
9999 mem: storing 3 in location 1003
 104 run: {data: ("address" "array" "character")} <- new {character: "type"}, {capacity: "number"}
9999 mem: location 1003 is 3
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1111
9999 mem: storing 0 in location 1111
9999 mem: storing 0 in location 1112
9999 mem: storing 0 in location 1113
9999 mem: storing 0 in location 1114
9999 mem: storing 0 in location 1115
9999 mem: storing 3 in location 1112
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1111: 0 -> 1
9999 mem: storing 1111 in location 1005
 104 run: {result: ("address" "channel" "character"), "lookup": ()} <- put {result: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}, {data: ("address" "array" "character")}
9999 mem: location 1004 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 0
9999 mem: location 1110 is 0
9999 mem: location 1005 is 1111
9999 mem: location 1004 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy to is 1109
9999 mem: location 1109 is 0
9999 mem: incrementing refcount of 1111: 1 -> 2
9999 mem: storing 1111 in location 1109
 104 run: {in: ("address" "source" "character")} <- new {(source character): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1116
9999 mem: storing 0 in location 1116
9999 mem: storing 0 in location 1117
9999 mem: location 1006 is 0
9999 mem: incrementing refcount of 1116: 0 -> 1
9999 mem: storing 1116 in location 1006
 104 run: {in: ("address" "source" "character"), "lookup": ()} <- put {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "character")}
9999 mem: location 1006 is 1116
9999 mem: skipping refcount at 1116
9999 mem: location 1117 is 0
9999 mem: location 1004 is 1106
9999 mem: location 1006 is 1116
9999 mem: skipping refcount at 1116
9998 run: address to copy to is 1117
9999 mem: location 1117 is 0
9999 mem: incrementing refcount of 1106: 1 -> 2
9999 mem: storing 1106 in location 1117
 104 run: {out: ("address" "sink" "character")} <- new {(sink character): "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1118
9999 mem: storing 0 in location 1118
9999 mem: storing 0 in location 1119
9999 mem: location 1007 is 0
9999 mem: incrementing refcount of 1118: 0 -> 1
9999 mem: storing 1118 in location 1007
 104 run: {out: ("address" "sink" "character"), "lookup": ()} <- put {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}, {result: ("address" "channel" "character")}
9999 mem: location 1007 is 1118
9999 mem: skipping refcount at 1118
9999 mem: location 1119 is 0
9999 mem: location 1004 is 1106
9999 mem: location 1007 is 1118
9999 mem: skipping refcount at 1118
9998 run: address to copy to is 1119
9999 mem: location 1119 is 0
9999 mem: incrementing refcount of 1106: 2 -> 3
9999 mem: storing 1106 in location 1119
 104 run: reply {in: ("address" "source" "character")}, {out: ("address" "sink" "character")}
9999 mem: location 1006 is 1116
9999 mem: location 1007 is 1118
9999 mem: clearing capacity:number
9999 mem: storing 0 in location 1003
9999 mem: clearing result:address:channel:_elem
9999 mem: location 1004 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 3 -> 2
9999 mem: storing 0 in location 1004
9999 mem: clearing capacity
9999 mem: storing 0 in location 1003
9999 mem: clearing data:address:array:_elem
9999 mem: location 1005 is 1111
9999 mem: skipping refcount at 1111
9999 mem: decrementing refcount of 1111: 2 -> 1
9999 mem: storing 0 in location 1005
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1116
9998 run: result 1 is 1118
9999 mem: storing 1116 in location 1
9999 mem: storing 1118 in location 2
 103 run: {3: "number", "routine": ()} <- start-running {read-move: "recipe-literal"}, {1: ("address" "channel" "character")}, {screen: ("address" "screen")}
9999 mem: location 1 is 1116
9999 mem: location 900 is 1008
9999 trace: new routine; incrementing callstack depth to 3
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 3
 104 run: wait-for-routine {3: "number"}
9999 mem: location 3 is 2
9998 run: waiting for routine 2
9990 schedule: read-move
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 101000
9999 mem: storing 0 in location 101000
9999 mem: storing 0 in location 101001
9999 mem: storing 0 in location 101002
9999 mem: storing 0 in location 101003
9999 mem: storing 0 in location 101004
9999 mem: storing 0 in location 101005
9999 mem: storing 0 in location 101006
9999 mem: storing 0 in location 101007
9999 mem: storing 0 in location 101008
9999 mem: storing 0 in location 101009
9999 mem: storing 0 in location 101010
9999 mem: storing 0 in location 101011
9999 mem: storing 10 in location 101001
 104 run: {stdin: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101003 is 0
9999 mem: incrementing refcount of 1116: 1 -> 2
9999 mem: storing 1116 in location 101003
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 101004 is 0
9999 mem: incrementing refcount of 1008: 2 -> 3
9999 mem: storing 1008 in location 101004
 104 run: {from-file: "number"}, {quit?: "boolean"}, {error?: "boolean"} <- read-file {stdin: ("address" "source" "character")}, {screen: ("address" "screen")}
9999 mem: location 101003 is 1116
9999 mem: location 101004 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 101012
9999 mem: storing 0 in location 101012
9999 mem: storing 0 in location 101013
9999 mem: storing 0 in location 101014
9999 mem: storing 0 in location 101015
9999 mem: storing 0 in location 101016
9999 mem: storing 0 in location 101017
9999 mem: storing 0 in location 101018
9999 mem: storing 0 in location 101019
9999 mem: storing 0 in location 101020
9999 mem: storing 0 in location 101021
9999 mem: storing 0 in location 101022
9999 mem: storing 0 in location 101023
9999 mem: storing 0 in location 101024
9999 mem: storing 0 in location 101025
9999 mem: storing 0 in location 101026
9999 mem: storing 0 in location 101027
9999 mem: storing 14 in location 101013
 105 run: {stdin: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101015 is 0
9999 mem: incrementing refcount of 1116: 2 -> 3
9999 mem: storing 1116 in location 101015
 105 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: location 101016 is 0
9999 mem: incrementing refcount of 1008: 3 -> 4
9999 mem: storing 1008 in location 101016
 105 run: {c: "character"}, {eof?: "boolean"}, {stdin: ("address" "source" "character")} <- read_2 {stdin: ("address" "source" "character")}
9999 mem: location 101015 is 1116
9999 trace: incrementing callstack depth to 5
 106 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 101028
9999 mem: storing 0 in location 101028
9999 mem: storing 0 in location 101029
9999 mem: storing 0 in location 101030
9999 mem: storing 0 in location 101031
9999 mem: storing 0 in location 101032
9999 mem: storing 0 in location 101033
9999 mem: storing 0 in location 101034
9999 mem: storing 0 in location 101035
9999 mem: storing 0 in location 101036
9999 mem: storing 0 in location 101037
9999 mem: storing 0 in location 101038
9999 mem: storing 0 in location 101039
9999 mem: storing 0 in location 101040
9999 mem: storing 0 in location 101041
9999 mem: storing 0 in location 101042
9999 mem: storing 0 in location 101043
9999 mem: storing 14 in location 101029
 106 run: {in: ("address" "source" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101031 is 0
9999 mem: incrementing refcount of 1116: 3 -> 4
9999 mem: storing 1116 in location 101031
 106 run: {fail?: "boolean"} <- copy {0: "literal", "false": ()}
9999 mem: storing 0 in location 101032
 106 run: {chan: ("address" "channel" "character")} <- get {in: ("address" "source" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 101031 is 1116
9999 mem: skipping refcount at 1116
9999 mem: location 1117 is 1106
9999 mem: location 101031 is 1116
9999 mem: skipping refcount at 1116
9998 run: address to copy is 1117
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1117 is 1106
9999 mem: location 101033 is 0
9999 mem: incrementing refcount of 1106: 2 -> 3
9999 mem: storing 1106 in location 101033
 106 run: {empty?: "boolean"} <- channel-empty?_2 {chan: ("address" "channel" "character")}
9999 mem: location 101033 is 1106
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 101044
9999 mem: storing 0 in location 101044
9999 mem: storing 0 in location 101045
9999 mem: storing 0 in location 101046
9999 mem: storing 0 in location 101047
9999 mem: storing 0 in location 101048
9999 mem: storing 0 in location 101049
9999 mem: storing 0 in location 101050
9999 mem: storing 5 in location 101045
 107 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 101047 is 0
9999 mem: incrementing refcount of 1106: 3 -> 4
9999 mem: storing 1106 in location 101047
 107 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101047 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 101047 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1107
9998 run: its type is "number"
9999 mem: location 1107 is 0
9999 mem: storing 0 in location 101048
 107 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101047 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 101047 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1108
9998 run: its type is "number"
9999 mem: location 1108 is 0
9999 mem: storing 0 in location 101049
 107 run: {result: "boolean"} <- equal {full: "number"}, {free: "number"}
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: storing 1 in location 101050
 107 run: reply {result: "boolean"}
9999 mem: location 101050 is 1
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101047 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 4 -> 3
9999 mem: storing 0 in location 101047
9999 mem: clearing full:number
9999 mem: storing 0 in location 101048
9999 mem: clearing free:number
9999 mem: storing 0 in location 101049
9999 mem: automatically abandoning 101044
9999 abandon: updating refcounts inside 101044: (array number)
9999 abandon: saving 101044 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1
9999 mem: storing 1 in location 101034
 106 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 101034 is 1
9998 run: jump-unless fell through
 106 run: {closed?: "boolean"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {closed?: "offset"}
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1110
9998 run: its type is "boolean"
9999 mem: location 1110 is 0
9999 mem: storing 0 in location 101035
 106 run: jump-unless {closed?: "boolean"}, {: "offset"}
9999 mem: location 101035 is 0
9998 run: jumping to instruction 13
 106 run: {free-address: "location"} <- get-location {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1108
9999 mem: storing 1108 in location 101037
 106 run: wait-for-location {free-address: "location"}
9999 mem: location 101037 is 1108
9998 run: waiting for location 1108 to change from 0
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_read-move-quit
 106 run: {4: "number"} <- routine-state {3: "number", "id": ()}
9999 mem: location 3 is 2
9999 mem: storing 3 in location 4
 106 run: {5: "boolean", "waiting?": ()} <- equal {4: "number", "routine-state": ()}, {3: "literal", "waiting": ()}
9999 mem: location 4 is 3
9999 mem: storing 1 in location 5
 106 run: assert {5: "boolean", "waiting?": ()}, {" \nF read-move-quit: routine failed to pause after coming up (before any keys were pressed)": "literal-string"}
9999 mem: location 5 is 1
 106 run: {2: ("address" "sink" "character")} <- write_3 {2: ("address" "sink" "character")}, {113: "literal", "q": ()}
9999 mem: location 2 is 1118
9999 trace: incrementing callstack depth to 6
 107 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1120
9999 mem: storing 0 in location 1120
9999 mem: storing 0 in location 1121
9999 mem: storing 0 in location 1122
9999 mem: storing 0 in location 1123
9999 mem: storing 0 in location 1124
9999 mem: storing 0 in location 1125
9999 mem: storing 0 in location 1126
9999 mem: storing 0 in location 1127
9999 mem: storing 0 in location 1128
9999 mem: storing 0 in location 1129
9999 mem: storing 0 in location 1130
9999 mem: storing 0 in location 1131
9999 mem: storing 10 in location 1121
 107 run: {out: ("address" "sink" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1123 is 0
9999 mem: incrementing refcount of 1118: 1 -> 2
9999 mem: storing 1118 in location 1123
 107 run: {val: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 113 in location 1124
 107 run: {chan: ("address" "channel" "character")} <- get {out: ("address" "sink" "character"), "lookup": ()}, {chan: "offset"}
9999 mem: location 1123 is 1118
9999 mem: skipping refcount at 1118
9999 mem: location 1119 is 1106
9999 mem: location 1123 is 1118
9999 mem: skipping refcount at 1118
9998 run: address to copy is 1119
9998 run: its type is ("address" "channel" "character")
9999 mem: location 1119 is 1106
9999 mem: location 1125 is 0
9999 mem: incrementing refcount of 1106: 3 -> 4
9999 mem: storing 1106 in location 1125
 107 run: {full: "boolean"} <- channel-full?_2 {chan: ("address" "channel" "character")}
9999 mem: location 1125 is 1106
9999 trace: incrementing callstack depth to 7
 108 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1132
9999 mem: storing 0 in location 1132
9999 mem: storing 0 in location 1133
9999 mem: storing 0 in location 1134
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
9999 mem: storing 0 in location 1139
9999 mem: storing 0 in location 1140
9999 mem: storing 7 in location 1133
 108 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1135 is 0
9999 mem: incrementing refcount of 1106: 4 -> 5
9999 mem: storing 1106 in location 1135
 108 run: {tmp: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1135 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 1135 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1108
9998 run: its type is "number"
9999 mem: location 1108 is 0
9999 mem: storing 0 in location 1136
 108 run: {tmp: "number"} <- add {tmp: "number"}, {1: "literal"}
9999 mem: location 1136 is 0
9999 mem: storing 1 in location 1136
 108 run: {len: "number"} <- capacity_2 {chan: ("address" "channel" "character")}
9999 mem: location 1135 is 1106
9999 trace: incrementing callstack depth to 8
 109 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1141
9999 mem: storing 0 in location 1141
9999 mem: storing 0 in location 1142
9999 mem: storing 0 in location 1143
9999 mem: storing 0 in location 1144
9999 mem: storing 0 in location 1145
9999 mem: storing 0 in location 1146
9999 mem: storing 4 in location 1142
 109 run: {chan: ("address" "channel" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1144 is 0
9999 mem: incrementing refcount of 1106: 5 -> 6
9999 mem: storing 1106 in location 1144
 109 run: {q: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1144 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 1144 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1109
9998 run: its type is ("address" "array" "character")
9999 mem: location 1109 is 1111
9999 mem: location 1145 is 0
9999 mem: incrementing refcount of 1111: 1 -> 2
9999 mem: storing 1111 in location 1145
 109 run: {result: "number"} <- length {q: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1145 is 1111
9999 mem: skipping refcount at 1111
9999 mem: storing 3 in location 1146
 109 run: reply {result: "number"}
9999 mem: location 1146 is 3
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1144 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 6 -> 5
9999 mem: storing 0 in location 1144
9999 mem: clearing q:address:array:_elem
9999 mem: location 1145 is 1111
9999 mem: skipping refcount at 1111
9999 mem: decrementing refcount of 1111: 2 -> 1
9999 mem: storing 0 in location 1145
9999 mem: automatically abandoning 1141
9999 abandon: updating refcounts inside 1141: (array number)
9999 abandon: saving 1141 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 3
9999 mem: storing 3 in location 1137
 108 run: {at-end?: "boolean"} <- greater-or-equal {tmp: "number"}, {len: "number"}
9999 mem: location 1136 is 1
9999 mem: location 1137 is 3
9999 mem: storing 0 in location 1138
 108 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1138 is 0
9998 run: jumping to instruction 9
 108 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 1135 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 1135 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1107
9998 run: its type is "number"
9999 mem: location 1107 is 0
9999 mem: storing 0 in location 1139
 108 run: {result: "boolean"} <- equal {full: "number"}, {tmp: "number"}
9999 mem: location 1139 is 0
9999 mem: location 1136 is 1
9999 mem: storing 0 in location 1140
 108 run: reply {result: "boolean"}
9999 mem: location 1140 is 0
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1135 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 5 -> 4
9999 mem: storing 0 in location 1135
9999 mem: clearing tmp:number
9999 mem: storing 0 in location 1136
9999 mem: clearing tmp
9999 mem: storing 0 in location 1136
9999 mem: clearing len:number
9999 mem: storing 0 in location 1137
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1138
9999 mem: clearing tmp
9999 mem: storing 0 in location 1136
9999 mem: clearing full:number
9999 mem: storing 0 in location 1139
9999 mem: automatically abandoning 1132
9999 abandon: updating refcounts inside 1132: (array number)
9999 abandon: saving 1132 in free-list of size 9
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1126
 107 run: jump-unless {full: "boolean"}, {: "offset"}
9999 mem: location 1126 is 0
9998 run: jumping to instruction 10
 107 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 1125 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 1125 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1109
9998 run: its type is ("address" "array" "character")
9999 mem: location 1109 is 1111
9999 mem: location 1128 is 0
9999 mem: incrementing refcount of 1111: 1 -> 2
9999 mem: storing 1111 in location 1128
 107 run: {free: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}
9999 mem: location 1125 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 1125 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1108
9998 run: its type is "number"
9999 mem: location 1108 is 0
9999 mem: storing 0 in location 1129
 107 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {free: "number"}, {val: "character"}
9999 mem: location 1128 is 1111
9999 mem: skipping refcount at 1111
9999 mem: location 1129 is 0
9998 run: address to copy to is 1113
9999 mem: location 1124 is 113
9999 mem: storing 113 in location 1113
 107 run: {free: "number"} <- add {free: "number"}, {1: "literal"}
9999 mem: location 1129 is 0
9999 mem: storing 1 in location 1129
 107 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1128 is 1111
9999 mem: skipping refcount at 1111
9999 mem: storing 3 in location 1130
 107 run: {at-end?: "boolean"} <- greater-or-equal {free: "number"}, {len: "number"}
9999 mem: location 1129 is 1
9999 mem: location 1130 is 3
9999 mem: storing 0 in location 1131
 107 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1131 is 0
9998 run: jumping to instruction 20
 107 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-free: "offset"}, {free: "number"}
9999 mem: location 1125 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 0
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 1129 is 1
9999 mem: location 1125 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy to is 1108
9999 mem: storing 1 in location 1108
 107 run: reply {out: ("address" "sink" "character"), "same-as-ingredient": "0"}
9999 mem: location 1123 is 1118
9999 mem: clearing val:_elem
9999 mem: storing 0 in location 1124
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 1125 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 4 -> 3
9999 mem: storing 0 in location 1125
9999 mem: clearing full:boolean
9999 mem: storing 0 in location 1126
9999 mem: clearing full-address:location
9999 mem: storing 0 in location 1127
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 1128 is 1111
9999 mem: skipping refcount at 1111
9999 mem: decrementing refcount of 1111: 2 -> 1
9999 mem: storing 0 in location 1128
9999 mem: clearing free:number
9999 mem: storing 0 in location 1129
9999 mem: clearing free
9999 mem: storing 0 in location 1129
9999 mem: clearing len:number
9999 mem: storing 0 in location 1130
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 1131
9999 mem: clearing free
9999 mem: storing 0 in location 1129
9999 mem: automatically abandoning 1120
9999 abandon: updating refcounts inside 1120: (array number)
9999 abandon: saving 1120 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1118
9999 mem: storing 1118 in location 2
 106 run: restart {3: "number", "routine": ()}
9999 mem: location 3 is 2
 106 run: wait-for-routine {3: "number"}
9999 mem: location 3 is 2
9998 run: waiting for routine 2
9990 schedule: read_2/read-file/read-move
 106 run: {full: "number"} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 1
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1107
9998 run: its type is "number"
9999 mem: location 1107 is 0
9999 mem: storing 0 in location 101038
 106 run: {circular-buffer: ("address" "array" "character")} <- get {chan: ("address" "channel" "character"), "lookup": ()}, {data: "offset"}
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 1
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy is 1109
9998 run: its type is ("address" "array" "character")
9999 mem: location 1109 is 1111
9999 mem: location 101039 is 0
9999 mem: incrementing refcount of 1111: 1 -> 2
9999 mem: storing 1111 in location 101039
 106 run: {result: "character"} <- index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}
9999 mem: location 101039 is 1111
9999 mem: skipping refcount at 1111
9998 run: base address is 1112
9999 mem: location 101038 is 0
9998 run: address to copy is 1113
9998 run: its type is character
9999 mem: location 1113 is 113
9999 mem: storing 113 in location 101040
 106 run: {empty: ("address" "character")} <- new {character: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 101051
9999 mem: storing 0 in location 101051
9999 mem: storing 0 in location 101052
9999 mem: location 101041 is 0
9999 mem: incrementing refcount of 101051: 0 -> 1
9999 mem: storing 101051 in location 101041
 106 run: {circular-buffer: ("address" "array" "character"), "lookup": ()} <- put-index {circular-buffer: ("address" "array" "character"), "lookup": ()}, {full: "number"}, {empty: ("address" "character"), "lookup": ()}
9999 mem: location 101039 is 1111
9999 mem: skipping refcount at 1111
9999 mem: location 101038 is 0
9998 run: address to copy to is 1113
9999 mem: location 101041 is 101051
9999 mem: skipping refcount at 101051
9999 mem: location 101052 is 0
9999 mem: storing 0 in location 1113
 106 run: {full: "number"} <- add {full: "number"}, {1: "literal"}
9999 mem: location 101038 is 0
9999 mem: storing 1 in location 101038
 106 run: {len: "number"} <- length {circular-buffer: ("address" "array" "character"), "lookup": ()}
9999 mem: location 101039 is 1111
9999 mem: skipping refcount at 1111
9999 mem: storing 3 in location 101042
 106 run: {at-end?: "boolean"} <- greater-or-equal {full: "number"}, {len: "number"}
9999 mem: location 101038 is 1
9999 mem: location 101042 is 3
9999 mem: storing 0 in location 101043
 106 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 101043 is 0
9998 run: jumping to instruction 28
 106 run: {chan: ("address" "channel" "character"), "lookup": ()} <- put {chan: ("address" "channel" "character"), "lookup": ()}, {first-full: "offset"}, {full: "number"}
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9999 mem: location 1107 is 0
9999 mem: location 1108 is 1
9999 mem: location 1109 is 1111
9999 mem: location 1110 is 0
9999 mem: location 101038 is 1
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9998 run: address to copy to is 1107
9999 mem: storing 1 in location 1107
 106 run: reply {result: "character"}, {fail?: "boolean"}, {in: ("address" "source" "character"), "same-as-ingredient": "0"}
9999 mem: location 101040 is 113
9999 mem: location 101032 is 0
9999 mem: location 101031 is 1116
9999 mem: clearing chan:address:channel:_elem
9999 mem: location 101033 is 1106
9999 mem: skipping refcount at 1106
9999 mem: decrementing refcount of 1106: 3 -> 2
9999 mem: storing 0 in location 101033
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 101034
9999 mem: clearing closed?:boolean
9999 mem: storing 0 in location 101035
9999 mem: clearing empty-result:address:_elem
9999 mem: location 101036 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101036
9999 mem: clearing free-address:location
9999 mem: storing 0 in location 101037
9999 mem: clearing full:number
9999 mem: storing 0 in location 101038
9999 mem: clearing circular-buffer:address:array:_elem
9999 mem: location 101039 is 1111
9999 mem: skipping refcount at 1111
9999 mem: decrementing refcount of 1111: 2 -> 1
9999 mem: storing 0 in location 101039
9999 mem: clearing empty:address:_elem
9999 mem: location 101041 is 101051
9999 mem: skipping refcount at 101051
9999 mem: decrementing refcount of 101051: 1 -> 0
9999 mem: automatically abandoning 101051
9999 abandon: updating refcounts inside 101051: character
9999 abandon: saving 101051 in free-list of size 2
9999 mem: storing 0 in location 101041
9999 mem: clearing full
9999 mem: storing 0 in location 101038
9999 mem: clearing len:number
9999 mem: storing 0 in location 101042
9999 mem: clearing at-end?:boolean
9999 mem: storing 0 in location 101043
9999 mem: clearing full
9999 mem: storing 0 in location 101038
9999 mem: automatically abandoning 101028
9999 abandon: updating refcounts inside 101028: (array number)
9999 abandon: saving 101028 in free-list of size 16
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 113
9998 run: result 1 is 0
9998 run: result 2 is 1116
9999 mem: storing 113 in location 101017
9999 mem: storing 0 in location 101018
9999 mem: storing 1116 in location 101015
 105 run: jump-unless {eof?: "boolean"}, {: "offset"}
9999 mem: location 101018 is 0
9998 run: jumping to instruction 7
 105 run: {q-pressed?: "boolean"} <- equal {c: "character"}, {81: "literal", "Q": ()}
9999 mem: location 101017 is 113
9999 mem: storing 0 in location 101019
 105 run: jump-unless {q-pressed?: "boolean"}, {: "offset"}
9999 mem: location 101019 is 0
9998 run: jumping to instruction 12
 105 run: {q-pressed?: "boolean"} <- equal {c: "character"}, {113: "literal", "q": ()}
9999 mem: location 101017 is 113
9999 mem: storing 1 in location 101019
 105 run: jump-unless {q-pressed?: "boolean"}, {: "offset"}
9999 mem: location 101019 is 1
9998 run: jump-unless fell through
 105 run: return {0: "literal", "dummy": ()}, {1: "literal", "quit": ()}, {0: "literal", "error": ()}, {stdin: ("address" "source" "character"), "same-as-ingredient": "0"}, {screen: ("address" "screen"), "same-as-ingredient": "1"}
9999 mem: location 101015 is 1116
9999 mem: location 101016 is 1008
9999 mem: clearing stdin:address:source:character
9999 mem: location 101015 is 1116
9999 mem: skipping refcount at 1116
9999 mem: decrementing refcount of 1116: 4 -> 3
9999 mem: storing 0 in location 101015
9999 mem: clearing screen:address:screen
9999 mem: location 101016 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 4 -> 3
9999 mem: storing 0 in location 101016
9999 mem: clearing c:character
9999 mem: storing 0 in location 101017
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 101018
9999 mem: clearing stdin
9999 mem: location 101015 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101015
9999 mem: clearing q-pressed?:boolean
9999 mem: storing 0 in location 101019
9999 mem: clearing q-pressed?
9999 mem: storing 0 in location 101019
9999 mem: clearing empty-fake-keyboard?:boolean
9999 mem: storing 0 in location 101020
9999 mem: clearing newline?:boolean
9999 mem: storing 0 in location 101021
9999 mem: clearing print_26_1:address:array:character
9999 mem: location 101022 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101022
9999 mem: clearing file:number
9999 mem: storing 0 in location 101023
9999 mem: clearing above-min:boolean
9999 mem: storing 0 in location 101024
9999 mem: clearing print_33_1:address:array:character
9999 mem: location 101025 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101025
9999 mem: clearing below-max:boolean
9999 mem: storing 0 in location 101026
9999 mem: clearing print_41_1:address:array:character
9999 mem: location 101027 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101027
9999 mem: automatically abandoning 101012
9999 abandon: updating refcounts inside 101012: (array number)
9999 abandon: saving 101012 in free-list of size 16
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9998 run: result 1 is 1
9998 run: result 2 is 0
9999 mem: storing 0 in location 101005
9999 mem: storing 1 in location 101006
9999 mem: storing 0 in location 101007
 104 run: jump-unless {quit?: "boolean"}, {: "offset"}
9999 mem: location 101006 is 1
9998 run: jump-unless fell through
 104 run: return {0: "literal", "dummy": ()}, {quit?: "boolean"}, {error?: "boolean"}, {stdin: ("address" "source" "character"), "same-as-ingredient": "0"}, {screen: ("address" "screen"), "same-as-ingredient": "1"}
9999 mem: location 101006 is 1
9999 mem: location 101007 is 0
9999 mem: location 101003 is 1116
9999 mem: location 101004 is 1008
9999 mem: clearing stdin:address:source:character
9999 mem: location 101003 is 1116
9999 mem: skipping refcount at 1116
9999 mem: decrementing refcount of 1116: 3 -> 2
9999 mem: storing 0 in location 101003
9999 mem: clearing screen:address:screen
9999 mem: location 101004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: decrementing refcount of 1008: 3 -> 2
9999 mem: storing 0 in location 101004
9999 mem: clearing from-file:number
9999 mem: storing 0 in location 101005
9999 mem: clearing quit?:boolean
9999 mem: storing 0 in location 101006
9999 mem: clearing error?:boolean
9999 mem: storing 0 in location 101007
9999 mem: clearing result:address:move
9999 mem: location 101008 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 101008
9999 mem: clearing from-rank:number
9999 mem: storing 0 in location 101009
9999 mem: clearing quit?
9999 mem: storing 0 in location 101006
9999 mem: clearing error?
9999 mem: storing 0 in location 101007
9999 mem: clearing error?
9999 mem: storing 0 in location 101007
9999 mem: clearing to-file:number
9999 mem: storing 0 in location 101010
9999 mem: clearing quit?
9999 mem: storing 0 in location 101006
9999 mem: clearing error?
9999 mem: storing 0 in location 101007
9999 mem: clearing to-rank:number
9999 mem: storing 0 in location 101011
9999 mem: clearing quit?
9999 mem: storing 0 in location 101006
9999 mem: clearing error?
9999 mem: storing 0 in location 101007
9999 mem: clearing error?
9999 mem: storing 0 in location 101007
9999 mem: automatically abandoning 101000
9999 abandon: updating refcounts inside 101000: (array number)
9999 abandon: saving 101000 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 3
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_read-move-quit
 103 run: {4: "number"} <- routine-state {3: "number", "id": ()}
9999 mem: location 3 is 2
9999 mem: storing 1 in location 4
 103 run: {5: "boolean", "completed?": ()} <- equal {4: "number", "routine-state": ()}, {1: "literal", "completed": ()}
9999 mem: location 4 is 1
9999 mem: storing 1 in location 5
 103 run: assert {5: "boolean", "completed?": ()}, {" \nF read-move-quit: routine failed to terminate on 'q'": "literal-string"}
9999 mem: location 5 is 1
 103 run: trace {1: "literal"}, {"test": "literal-string"}, {"reached end": "literal-string"}
   1 test: reached end
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: trace-should-contain {"\n    test: reached end\n  ": "literal-string"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
