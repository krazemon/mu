9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {1: ("address" "number")}
9992 load: after rewriting: {1: ("address" "number")} <- new {number: "type"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {(address number): "type"}
9993 parse:   ingredient: {3: "literal"}
9993 parse:   product: {2: ("address" "array" "address" "number")}
9992 load: after rewriting: {2: ("address" "array" "address" "number")} <- new {(address number): "type"}, {3: "literal"}
9993 parse: instruction: put-index
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {2: ("address" "array" "address" "number"), "lookup": ()}
9993 parse:   ingredient: {1: "literal"}
9993 parse:   ingredient: {1: ("address" "number")}
9993 parse:   product: {2: ("address" "array" "address" "number"), "lookup": ()}
9992 load: after rewriting: {2: ("address" "array" "address" "number"), "lookup": ()} <- put-index {2: ("address" "array" "address" "number"), "lookup": ()}, {1: "literal"}, {1: ("address" "number")}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {1: ("address" "number")}
9992 load: after rewriting: {1: ("address" "number")} <- copy {0: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {2: ("address" "array" "address" "number")}
9992 load: after rewriting: {2: ("address" "array" "address" "number")} <- copy {0: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: ("address" "number")} <- new {number: "type"}
9993 transform: - compute address offsets for {2: ("address" "array" "address" "number")} <- new {(address number): "type"}, {3: "literal"}
9993 transform: - compute address offsets for {2: ("address" "array" "address" "number"), "lookup": ()} <- put-index {2: ("address" "array" "address" "number"), "lookup": ()}, {1: "literal"}, {1: ("address" "number")}
9993 transform: - compute address offsets for {1: ("address" "number")} <- copy {0: "literal"}
9993 transform: - compute address offsets for {2: ("address" "array" "address" "number")} <- copy {0: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: new ...
9992 transform: put-index ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "number" is 1
9992 new: size of ("address" "number") is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: ("address" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: location 1 is 0
9999 mem: incrementing refcount of 1000: 0 -> 1
9999 mem: storing 1000 in location 1
 102 run: {2: ("address" "array" "address" "number")} <- new {(address number): "type"}, {3: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1002
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 3 in location 1003
9999 mem: location 2 is 0
9999 mem: incrementing refcount of 1002: 0 -> 1
9999 mem: storing 1002 in location 2
 102 run: {2: ("address" "array" "address" "number"), "lookup": ()} <- put-index {2: ("address" "array" "address" "number"), "lookup": ()}, {1: "literal"}, {1: ("address" "number")}
9999 mem: location 2 is 1002
9999 mem: skipping refcount at 1002
9998 run: address to copy to is 1005
9999 mem: location 1 is 1000
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1000: 1 -> 2
9999 mem: storing 1000 in location 1005
 102 run: {1: ("address" "number")} <- copy {0: "literal"}
9999 mem: location 1 is 1000
9999 mem: skipping refcount at 1000
9999 mem: decrementing refcount of 1000: 2 -> 1
9999 mem: storing 0 in location 1
 102 run: {2: ("address" "array" "address" "number")} <- copy {0: "literal"}
9999 mem: location 2 is 1002
9999 mem: skipping refcount at 1002
9999 mem: decrementing refcount of 1002: 1 -> 0
9999 mem: automatically abandoning 1002
9999 abandon: updating refcounts inside 1002: (array address number)
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: location 1005 is 1000
9999 mem: skipping refcount at 1000
9999 mem: decrementing refcount of 1000: 1 -> 0
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: number
9999 abandon: saving 1000 in free-list of size 2
9999 mem: location 1006 is 0
9999 mem: copying address to itself; refcount unchanged
9999 abandon: saving 1002 in free-list of size 5
9999 mem: storing 0 in location 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
