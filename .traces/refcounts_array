9991 parse: --- defining main
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {30: "literal"}
9993 parse:   product: {1: "number"}
9992 load: after rewriting: {1: "number"} <- copy {30: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {number: "type"}
9993 parse:   ingredient: {20: "literal"}
9993 parse:   product: {10: ("address" "shared" "array" "number")}
9992 load: after rewriting: {10: ("address" "shared" "array" "number")} <- new {number: "type"}, {20: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {10: ("address" "shared" "array" "number")}
9993 parse:   product: {11: "number"}
9992 load: after rewriting: {11: "number"} <- copy {10: ("address" "shared" "array" "number")}
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {number: "type"}
9993 parse:   ingredient: {25: "literal"}
9993 parse:   product: {10: ("address" "shared" "array" "number")}
9992 load: after rewriting: {10: ("address" "shared" "array" "number")} <- new {number: "type"}, {25: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: copy ...
9992 transform: new ...
9992 transform: copy ...
9992 transform: new ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "number" is 1
9992 new: size of "number" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: "number"} <- copy {30: "literal"}
9999 mem: storing 30 in location 1
 102 run: {10: ("address" "shared" "array" "number")} <- new {number: "type"}, {20: "literal"}
9999 mem: array size is 20
9999 mem: allocating size 22
9999 mem: new alloc: 1000
9999 mem: storing 20 in location 1001
9999 mem: storing 1000 in location 10
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: {11: "number"} <- copy {10: ("address" "shared" "array" "number")}
9999 mem: location 10 is 1000
9999 mem: storing 1000 in location 11
 102 run: {10: ("address" "shared" "array" "number")} <- new {number: "type"}, {25: "literal"}
9999 mem: array size is 25
9999 mem: allocating size 27
9999 mem: new alloc: 1022
9999 mem: storing 25 in location 1023
9999 mem: decrementing refcount of 1000: 1 -> 0
9999 mem: storing 1022 in location 10
9999 mem: incrementing refcount of 1022: 0 -> 1
9999 mem: automatically abandoning 1000
9999 mem: computing size to abandon at 10
9999 abandon: saving in free-list of size 22
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
