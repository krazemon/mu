9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {a: "bar"}
9993 parse:   element: {b: "curr"}
9991 parse: --- defining container bar
9999 parse: type number: 1001
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: "number"}
9991 parse: --- defining container curr
9999 parse: type number: 1002
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: ("address" "number")}
9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {number: "type"}
9993 parse:   product: {1: ("address" "number")}
9992 load: after rewriting: {1: ("address" "number")} <- new {number: "type"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {curr: "type"}
9993 parse:   product: {2: ("address" "curr")}
9992 load: after rewriting: {2: ("address" "curr")} <- new {curr: "type"}
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {2: ("address" "curr"), "lookup": ()}
9993 parse:   ingredient: {y: "offset"}
9993 parse:   ingredient: {1: ("address" "number")}
9993 parse:   product: {2: ("address" "curr"), "lookup": ()}
9992 load: after rewriting: {2: ("address" "curr"), "lookup": ()} <- put {2: ("address" "curr"), "lookup": ()}, {y: "offset"}, {1: ("address" "number")}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {foo: "type"}
9993 parse:   product: {3: ("address" "foo")}
9992 load: after rewriting: {3: ("address" "foo")} <- new {foo: "type"}
9993 parse: instruction: put
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {3: ("address" "foo"), "lookup": ()}
9993 parse:   ingredient: {b: "offset"}
9993 parse:   ingredient: {2: ("address" "curr"), "lookup": ()}
9993 parse:   product: {3: ("address" "foo"), "lookup": ()}
9992 load: after rewriting: {3: ("address" "foo"), "lookup": ()} <- put {3: ("address" "foo"), "lookup": ()}, {b: "offset"}, {2: ("address" "curr"), "lookup": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: ("address" "foo"), "lookup": ()}
9993 parse:   product: {4: "foo"}
9992 load: after rewriting: {4: "foo"} <- copy {3: ("address" "foo"), "lookup": ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: element y of type curr is at offset 1
9993 name: element b of type foo is at offset 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {2: ("address" "curr"), "lookup": ()} <- put {2: ("address" "curr"), "lookup": ()}, {y: "offset"}, {1: ("address" "number")}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {3: ("address" "foo"), "lookup": ()} <- put {3: ("address" "foo"), "lookup": ()}, {b: "offset"}, {2: ("address" "curr"), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for curr
9993 transform: checking container curr, element 0
9993 transform: checking container curr, element 1
9993 transform: container curr contains an address at offset 1
9992 transform: --- compute address offsets for foo
9993 transform: checking container foo, element 0
9993 transform: checking container bar, element 0
9993 transform: checking container bar, element 1
9993 transform: checking container foo, element 1
9993 transform: checking container curr, element 0
9993 transform: checking container curr, element 1
9993 transform: container foo contains an address at offset 3
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: new ...
9992 transform: put ...
9992 transform: new ...
9992 transform: put ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "number" is 1
9992 new: size of "curr" is 2
9992 new: size of "foo" is 4
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: ("address" "number")} <- new {number: "type"}
9999 mem: allocating size 2
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: incrementing refcount of 1000: 0 -> 1
9999 mem: storing 1000 in location 1
 102 run: {2: ("address" "curr")} <- new {curr: "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1002
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: incrementing refcount of 1002: 0 -> 1
9999 mem: storing 1002 in location 2
 102 run: {2: ("address" "curr"), "lookup": ()} <- put {2: ("address" "curr"), "lookup": ()}, {y: "offset"}, {1: ("address" "number")}
9999 mem: location 2 is 1002
9999 mem: skipping refcount at 1002
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1 is 1000
9999 mem: location 2 is 1002
9999 mem: skipping refcount at 1002
9998 run: address to copy to is 1004
9999 mem: incrementing refcount of 1000: 1 -> 2
9999 mem: storing 1000 in location 1004
 102 run: {3: ("address" "foo")} <- new {foo: "type"}
9999 mem: allocating size 5
9999 mem: new alloc: 1005
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: incrementing refcount of 1005: 0 -> 1
9999 mem: storing 1005 in location 3
 102 run: {3: ("address" "foo"), "lookup": ()} <- put {3: ("address" "foo"), "lookup": ()}, {b: "offset"}, {2: ("address" "curr"), "lookup": ()}
9999 mem: location 3 is 1005
9999 mem: skipping refcount at 1005
9999 mem: location 1006 is 0
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 2 is 1002
9999 mem: skipping refcount at 1002
9999 mem: location 1003 is 0
9999 mem: location 1004 is 1000
9999 mem: location 3 is 1005
9999 mem: skipping refcount at 1005
9998 run: address to copy to is 1008
9999 mem: incrementing refcount of 1000: 2 -> 3
9999 mem: storing 0 in location 1008
9999 mem: storing 1000 in location 1009
 102 run: {4: "foo"} <- copy {3: ("address" "foo"), "lookup": ()}
9999 mem: location 3 is 1005
9999 mem: skipping refcount at 1005
9999 mem: location 1006 is 0
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1000
9999 mem: incrementing refcount of 1000: 3 -> 4
9999 mem: storing 0 in location 4
9999 mem: storing 0 in location 5
9999 mem: storing 0 in location 6
9999 mem: storing 1000 in location 7
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
