9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    container foo [\n      x:number\n      y:number\n    ]\n    recipe bar [\n      local-scope\n      x:foo <- merge 34, 35\n    ]\n  ": "literal-string"}
9993 parse:   product: {x: ("address" "array" "character")}
9992 load: after rewriting: {x: ("address" "array" "character")} <- new {"\n    container foo [\n      x:number\n      y:number\n    ]\n    recipe bar [\n      local-scope\n      x:foo <- merge 34, 35\n    ]\n  ": "literal-string"}
9993 parse: instruction: reload
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ()}
9993 parse:   product: {1: "number", "raw": ()}
9992 load: after rewriting: {1: "number", "raw": ()} <- reload {x: ()}
9993 parse: instruction: reload
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ()}
9993 parse:   product: {2: "number", "raw": ()}
9992 load: after rewriting: {2: "number", "raw": ()} <- reload {x: ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "array" "character")} <- new {"\n    container foo [\n      x:number\n      y:number\n    ]\n    recipe bar [\n      local-scope\n      x:foo <- merge 34, 35\n    ]\n  ": "literal-string"}
9993 transform: {1: "number", "raw": ()} <- reload {x: ("address" "array" "character")}
9993 transform: {2: "number", "raw": ()} <- reload {x: ("address" "array" "character")}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "character")} <- new {"\n    container foo [\n      x:number\n      y:number\n    ]\n    recipe bar [\n      local-scope\n      x:foo <- merge 34, 35\n    ]\n  ": "literal-string"}
9993 transform: - compute address offsets for {1: "number", "raw": ()} <- reload {x: ("address" "array" "character")}
9993 transform: - compute address offsets for {2: "number", "raw": ()} <- reload {x: ("address" "array" "character")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: reload ...
9992 transform: reload ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 2 in location 1001
 102 run: {x: ("address" "array" "character")} <- new {"\n    container foo [\n      x:number\n      y:number\n    ]\n    recipe bar [\n      local-scope\n      x:foo <- merge 34, 35\n    ]\n  ": "literal-string"}
9999 mem: new string alloc: 1004
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1004: 0 -> 1
9999 mem: storing 1004 in location 1003
 102 run: {1: "number", "raw": ()} <- reload {x: ("address" "array" "character")}
9999 mem: location 1003 is 1004
9999 mem: storing 0 in location 1
 102 run: {2: "number", "raw": ()} <- reload {x: ("address" "array" "character")}
9999 mem: location 1003 is 1004
9999 mem: storing 0 in location 2
 102 run: reply 
9999 abandon: saving in free-list of size 2
9999 trace: reply: decrementing callstack depth from 1
