9991 parse: --- defining scenario_remove-range-to-end
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {18: "literal"}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {1: ("address" "duplex-list" "character")}
9992 load: after rewriting: {1: ("address" "duplex-list" "character")} <- push {18: "literal"}, {0: "literal"}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {17: "literal"}
9993 parse:   ingredient: {1: ("address" "duplex-list" "character")}
9993 parse:   product: {1: ("address" "duplex-list" "character")}
9992 load: after rewriting: {1: ("address" "duplex-list" "character")} <- push {17: "literal"}, {1: ("address" "duplex-list" "character")}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {16: "literal"}
9993 parse:   ingredient: {1: ("address" "duplex-list" "character")}
9993 parse:   product: {1: ("address" "duplex-list" "character")}
9992 load: after rewriting: {1: ("address" "duplex-list" "character")} <- push {16: "literal"}, {1: ("address" "duplex-list" "character")}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {15: "literal"}
9993 parse:   ingredient: {1: ("address" "duplex-list" "character")}
9993 parse:   product: {1: ("address" "duplex-list" "character")}
9992 load: after rewriting: {1: ("address" "duplex-list" "character")} <- push {15: "literal"}, {1: ("address" "duplex-list" "character")}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {14: "literal"}
9993 parse:   ingredient: {1: ("address" "duplex-list" "character")}
9993 parse:   product: {1: ("address" "duplex-list" "character")}
9992 load: after rewriting: {1: ("address" "duplex-list" "character")} <- push {14: "literal"}, {1: ("address" "duplex-list" "character")}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {13: "literal"}
9993 parse:   ingredient: {1: ("address" "duplex-list" "character")}
9993 parse:   product: {1: ("address" "duplex-list" "character")}
9992 load: after rewriting: {1: ("address" "duplex-list" "character")} <- push {13: "literal"}, {1: ("address" "duplex-list" "character")}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # remove the third element and beyond\n    2:address:duplex-list:character <- next 1:address:duplex-list:character\n    remove-between 2:address:duplex-list:character, 0\n    # now check the list\n    4:character <- get *1:address:duplex-list:character, value:offset\n    5:address:duplex-list:character <- next 1:address:duplex-list:character\n    6:character <- get *5:address:duplex-list:character, value:offset\n    7:address:duplex-list:character <- next 5:address:duplex-list:character\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    # remove the third element and beyond\n    2:address:duplex-list:character <- next 1:address:duplex-list:character\n    remove-between 2:address:duplex-list:character, 0\n    # now check the list\n    4:character <- get *1:address:duplex-list:character, value:offset\n    5:address:duplex-list:character <- next 1:address:duplex-list:character\n    6:character <- get *5:address:duplex-list:character, value:offset\n    7:address:duplex-list:character <- next 5:address:duplex-list:character\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    4 <- 13\n    6 <- 14\n    7 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    4 <- 13\n    6 <- 14\n    7 <- 0\n  ": "literal-string"}
9999 parse: recipe scenario_remove-range-to-end has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_remove-range-to-end
9991 transform: --- rewrite 'stash' instructions in recipe scenario_remove-range-to-end
9991 transform: --- fill in reply ingredients from header for recipe scenario_remove-range-to-end
9991 transform: --- deduce types for recipe scenario_remove-range-to-end
9991 transform: --- check for invalid types in recipe scenario_remove-range-to-end
9991 transform: --- collect surrounding spaces for recipe scenario_remove-range-to-end
9991 transform: --- transform names for recipe scenario_remove-range-to-end
9991 transform: --- resolve ambiguous calls for recipe scenario_remove-range-to-end
9992 transform: instruction {1: ("address" "duplex-list" "character")} <- push {18: "literal"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 244 push_2
9993 transform: switching push to specialized recipe push_6 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: compute type names: push_6
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of in is ("address" "duplex-list" "_elem")
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}
9994 transform:     checking {(duplex-list _elem): "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {result: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of result is ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}, {0: "literal"}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless {in: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {prev: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return {result: ()}
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "duplex-list" "_elem")}, {0: "literal"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless {in: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem"), "lookup": ()} <- put {in: ("address" "duplex-list" "_elem"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_6
9991 transform: --- rewrite literal strings in recipe push_6
9991 transform: --- rewrite 'stash' instructions in recipe push_6
9991 transform: --- deduce types for recipe push_6
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform: {
9993 transform: break-unless {in: ("address" "duplex-list" "character")}
9993 transform: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform: }
9993 transform: return {result: ("address" "duplex-list" "character")}
9991 transform: --- checking reply instructions against header for push_6
9991 transform: --- fill in reply ingredients from header for recipe push_6
9991 transform: --- deduce types for recipe push_6
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9991 transform: --- deduce types from header for push_6
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "duplex-list" "character")
9993 transform: type of in is ("address" "duplex-list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform:   product: {result: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform:   product: {result: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform:   product: {in: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe push_6
9991 transform: --- collect surrounding spaces for recipe push_6
9991 transform: --- transform names for recipe push_6
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element prev of type duplex-list is at offset 2
9991 transform: --- resolve ambiguous calls for recipe push_6
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe push_6
9991 transform: --- transform braces for recipe push_6
9993 transform: push_6: push (open, 5)
9993 transform: push (close, 8)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: jump-unless in, 1:offset
9992 transform: put ...
9992 transform: return ...
9991 transform: --- perform checks for recipe push_6
9991 transform: --- type-check 'call' instructions inside recipe push_6
9991 transform: --- type-check calls inside recipe push_6
9991 transform: --- convert 'new' to 'allocate' for recipe push_6
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- check types of reply instructions in recipe push_6
9991 transform: --- type-check merge instructions in recipe push_6
9999 transform: 0 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {next: ("address" "duplex-list" "character")} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {prev: ("address" "duplex-list" "character")} vs ingredient 2
9991 transform: --- check that recipe push_6 sets default-space
9991 transform: --- checking reply instructions against header for push_6
9992 transform: new specialization: push_6
9992 transform: instruction {1: ("address" "duplex-list" "character")} <- push {17: "literal"}, {1: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 244 push_2
9993 transform: switching push to specialized recipe push_7 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: compute type names: push_7
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of in is ("address" "duplex-list" "_elem")
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}
9994 transform:     checking {(duplex-list _elem): "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {result: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of result is ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}, {0: "literal"}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless {in: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {prev: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return {result: ()}
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "duplex-list" "_elem")}, {0: "literal"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless {in: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem"), "lookup": ()} <- put {in: ("address" "duplex-list" "_elem"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_7
9991 transform: --- rewrite literal strings in recipe push_7
9991 transform: --- rewrite 'stash' instructions in recipe push_7
9991 transform: --- deduce types for recipe push_7
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform: {
9993 transform: break-unless {in: ("address" "duplex-list" "character")}
9993 transform: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform: }
9993 transform: return {result: ("address" "duplex-list" "character")}
9991 transform: --- checking reply instructions against header for push_7
9991 transform: --- fill in reply ingredients from header for recipe push_7
9991 transform: --- deduce types for recipe push_7
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9991 transform: --- deduce types from header for push_7
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "duplex-list" "character")
9993 transform: type of in is ("address" "duplex-list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform:   product: {result: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform:   product: {result: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform:   product: {in: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe push_7
9991 transform: --- collect surrounding spaces for recipe push_7
9991 transform: --- transform names for recipe push_7
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element prev of type duplex-list is at offset 2
9991 transform: --- resolve ambiguous calls for recipe push_7
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe push_7
9991 transform: --- transform braces for recipe push_7
9993 transform: push_7: push (open, 5)
9993 transform: push (close, 8)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: jump-unless in, 1:offset
9992 transform: put ...
9992 transform: return ...
9991 transform: --- perform checks for recipe push_7
9991 transform: --- type-check 'call' instructions inside recipe push_7
9991 transform: --- type-check calls inside recipe push_7
9991 transform: --- convert 'new' to 'allocate' for recipe push_7
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- check types of reply instructions in recipe push_7
9991 transform: --- type-check merge instructions in recipe push_7
9999 transform: 0 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {next: ("address" "duplex-list" "character")} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {prev: ("address" "duplex-list" "character")} vs ingredient 2
9991 transform: --- check that recipe push_7 sets default-space
9991 transform: --- checking reply instructions against header for push_7
9992 transform: new specialization: push_7
9992 transform: instruction {1: ("address" "duplex-list" "character")} <- push {16: "literal"}, {1: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 244 push_2
9993 transform: switching push to specialized recipe push_8 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: compute type names: push_8
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of in is ("address" "duplex-list" "_elem")
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}
9994 transform:     checking {(duplex-list _elem): "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {result: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of result is ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}, {0: "literal"}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless {in: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {prev: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return {result: ()}
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "duplex-list" "_elem")}, {0: "literal"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless {in: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem"), "lookup": ()} <- put {in: ("address" "duplex-list" "_elem"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_8
9991 transform: --- rewrite literal strings in recipe push_8
9991 transform: --- rewrite 'stash' instructions in recipe push_8
9991 transform: --- deduce types for recipe push_8
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform: {
9993 transform: break-unless {in: ("address" "duplex-list" "character")}
9993 transform: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform: }
9993 transform: return {result: ("address" "duplex-list" "character")}
9991 transform: --- checking reply instructions against header for push_8
9991 transform: --- fill in reply ingredients from header for recipe push_8
9991 transform: --- deduce types for recipe push_8
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9991 transform: --- deduce types from header for push_8
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "duplex-list" "character")
9993 transform: type of in is ("address" "duplex-list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform:   product: {result: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform:   product: {result: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform:   product: {in: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe push_8
9991 transform: --- collect surrounding spaces for recipe push_8
9991 transform: --- transform names for recipe push_8
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element prev of type duplex-list is at offset 2
9991 transform: --- resolve ambiguous calls for recipe push_8
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe push_8
9991 transform: --- transform braces for recipe push_8
9993 transform: push_8: push (open, 5)
9993 transform: push (close, 8)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: jump-unless in, 1:offset
9992 transform: put ...
9992 transform: return ...
9991 transform: --- perform checks for recipe push_8
9991 transform: --- type-check 'call' instructions inside recipe push_8
9991 transform: --- type-check calls inside recipe push_8
9991 transform: --- convert 'new' to 'allocate' for recipe push_8
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- check types of reply instructions in recipe push_8
9991 transform: --- type-check merge instructions in recipe push_8
9999 transform: 0 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {next: ("address" "duplex-list" "character")} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {prev: ("address" "duplex-list" "character")} vs ingredient 2
9991 transform: --- check that recipe push_8 sets default-space
9991 transform: --- checking reply instructions against header for push_8
9992 transform: new specialization: push_8
9992 transform: instruction {1: ("address" "duplex-list" "character")} <- push {15: "literal"}, {1: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 7: recipe push_8 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 7: recipe push_8 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 244 push_2
9993 transform: switching push to specialized recipe push_9 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: compute type names: push_9
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of in is ("address" "duplex-list" "_elem")
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}
9994 transform:     checking {(duplex-list _elem): "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {result: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of result is ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}, {0: "literal"}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless {in: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {prev: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return {result: ()}
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "duplex-list" "_elem")}, {0: "literal"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless {in: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem"), "lookup": ()} <- put {in: ("address" "duplex-list" "_elem"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_9
9991 transform: --- rewrite literal strings in recipe push_9
9991 transform: --- rewrite 'stash' instructions in recipe push_9
9991 transform: --- deduce types for recipe push_9
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform: {
9993 transform: break-unless {in: ("address" "duplex-list" "character")}
9993 transform: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform: }
9993 transform: return {result: ("address" "duplex-list" "character")}
9991 transform: --- checking reply instructions against header for push_9
9991 transform: --- fill in reply ingredients from header for recipe push_9
9991 transform: --- deduce types for recipe push_9
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9991 transform: --- deduce types from header for push_9
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "duplex-list" "character")
9993 transform: type of in is ("address" "duplex-list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform:   product: {result: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform:   product: {result: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform:   product: {in: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe push_9
9991 transform: --- collect surrounding spaces for recipe push_9
9991 transform: --- transform names for recipe push_9
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element prev of type duplex-list is at offset 2
9991 transform: --- resolve ambiguous calls for recipe push_9
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe push_9
9991 transform: --- transform braces for recipe push_9
9993 transform: push_9: push (open, 5)
9993 transform: push (close, 8)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: jump-unless in, 1:offset
9992 transform: put ...
9992 transform: return ...
9991 transform: --- perform checks for recipe push_9
9991 transform: --- type-check 'call' instructions inside recipe push_9
9991 transform: --- type-check calls inside recipe push_9
9991 transform: --- convert 'new' to 'allocate' for recipe push_9
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- check types of reply instructions in recipe push_9
9991 transform: --- type-check merge instructions in recipe push_9
9999 transform: 0 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {next: ("address" "duplex-list" "character")} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {prev: ("address" "duplex-list" "character")} vs ingredient 2
9991 transform: --- check that recipe push_9 sets default-space
9991 transform: --- checking reply instructions against header for push_9
9992 transform: new specialization: push_9
9992 transform: instruction {1: ("address" "duplex-list" "character")} <- push {14: "literal"}, {1: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 7: recipe push_8 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 8: recipe push_9 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 7: recipe push_8 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 8: recipe push_9 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 244 push_2
9993 transform: switching push to specialized recipe push_10 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: compute type names: push_10
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of in is ("address" "duplex-list" "_elem")
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}
9994 transform:     checking {(duplex-list _elem): "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {result: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of result is ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}, {0: "literal"}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless {in: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {prev: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return {result: ()}
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "duplex-list" "_elem")}, {0: "literal"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless {in: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem"), "lookup": ()} <- put {in: ("address" "duplex-list" "_elem"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_10
9991 transform: --- rewrite literal strings in recipe push_10
9991 transform: --- rewrite 'stash' instructions in recipe push_10
9991 transform: --- deduce types for recipe push_10
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform: {
9993 transform: break-unless {in: ("address" "duplex-list" "character")}
9993 transform: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform: }
9993 transform: return {result: ("address" "duplex-list" "character")}
9991 transform: --- checking reply instructions against header for push_10
9991 transform: --- fill in reply ingredients from header for recipe push_10
9991 transform: --- deduce types for recipe push_10
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9991 transform: --- deduce types from header for push_10
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "duplex-list" "character")
9993 transform: type of in is ("address" "duplex-list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform:   product: {result: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform:   product: {result: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform:   product: {in: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe push_10
9991 transform: --- collect surrounding spaces for recipe push_10
9991 transform: --- transform names for recipe push_10
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element prev of type duplex-list is at offset 2
9991 transform: --- resolve ambiguous calls for recipe push_10
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe push_10
9991 transform: --- transform braces for recipe push_10
9993 transform: push_10: push (open, 5)
9993 transform: push (close, 8)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: jump-unless in, 1:offset
9992 transform: put ...
9992 transform: return ...
9991 transform: --- perform checks for recipe push_10
9991 transform: --- type-check 'call' instructions inside recipe push_10
9991 transform: --- type-check calls inside recipe push_10
9991 transform: --- convert 'new' to 'allocate' for recipe push_10
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- check types of reply instructions in recipe push_10
9991 transform: --- type-check merge instructions in recipe push_10
9999 transform: 0 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {next: ("address" "duplex-list" "character")} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {prev: ("address" "duplex-list" "character")} vs ingredient 2
9991 transform: --- check that recipe push_10 sets default-space
9991 transform: --- checking reply instructions against header for push_10
9992 transform: new specialization: push_10
9992 transform: instruction {1: ("address" "duplex-list" "character")} <- push {13: "literal"}, {1: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 7: recipe push_8 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 8: recipe push_9 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 9: recipe push_10 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {in: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 7: recipe push_8 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 8: recipe push_9 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 9: recipe push_10 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 244 push_2
9993 transform: switching push to specialized recipe push_11 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: compute type names: push_11
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of in is ("address" "duplex-list" "_elem")
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}
9994 transform:     checking {(duplex-list _elem): "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {result: ("address" "duplex-list" "_elem")}: ("address" "duplex-list" "_elem")
9993 transform: type of result is ("address" "duplex-list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}, {0: "literal"}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-unless {in: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {prev: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: return {result: ()}
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "duplex-list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem")} <- new {(duplex-list _elem): "type"}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "duplex-list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "duplex-list" "_elem")}, {0: "literal"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless {in: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "duplex-list" "_elem"), "lookup": ()} <- put {in: ("address" "duplex-list" "_elem"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'return {result: ("address" "duplex-list" "_elem")}'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_11
9991 transform: --- rewrite literal strings in recipe push_11
9991 transform: --- rewrite 'stash' instructions in recipe push_11
9991 transform: --- deduce types for recipe push_11
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform: {
9993 transform: break-unless {in: ("address" "duplex-list" "character")}
9993 transform: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform: }
9993 transform: return {result: ("address" "duplex-list" "character")}
9991 transform: --- checking reply instructions against header for push_11
9991 transform: --- fill in reply ingredients from header for recipe push_11
9991 transform: --- deduce types for recipe push_11
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "duplex-list" "character")
9992 transform: result => ("address" "duplex-list" "character")
9991 transform: --- deduce types from header for push_11
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "duplex-list" "character")
9993 transform: type of in is ("address" "duplex-list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9993 transform:   product: {result: ("address" "duplex-list" "character")}
9992 transform: instruction: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9993 transform:   product: {result: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: {
9992 transform: instruction: break-unless {in: ("address" "duplex-list" "character")}
9992 transform: instruction: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9993 transform:   product: {in: ("address" "duplex-list" "character"), "lookup": ()}
9992 transform: instruction: }
9992 transform: instruction: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe push_11
9991 transform: --- collect surrounding spaces for recipe push_11
9991 transform: --- transform names for recipe push_11
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element prev of type duplex-list is at offset 2
9991 transform: --- resolve ambiguous calls for recipe push_11
9992 transform: instruction {in: (), "lookup": ()} <- put {in: (), "lookup": ()}, {prev: "offset"}, {result: ()}
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe put_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} {value: "_value"} -> {table: ("address" "table" "_key" "_value")}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe push_11
9991 transform: --- transform braces for recipe push_11
9993 transform: push_11: push (open, 5)
9993 transform: push (close, 8)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform: jump-unless in, 1:offset
9992 transform: put ...
9992 transform: return ...
9991 transform: --- perform checks for recipe push_11
9991 transform: --- type-check 'call' instructions inside recipe push_11
9991 transform: --- type-check calls inside recipe push_11
9991 transform: --- convert 'new' to 'allocate' for recipe push_11
9992 new: size of "location" is 1
9992 new: size of ("duplex-list" "character") is 3
9991 transform: --- check types of reply instructions in recipe push_11
9991 transform: --- type-check merge instructions in recipe push_11
9999 transform: 0 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {next: ("address" "duplex-list" "character")} vs ingredient 1
9999 transform: 2 vs 3
9999 transform: checking container {result: ("duplex-list" "character")} || {prev: ("address" "duplex-list" "character")} vs ingredient 2
9991 transform: --- check that recipe push_11 sets default-space
9991 transform: --- checking reply instructions against header for push_11
9992 transform: new specialization: push_11
9991 transform: --- compute instruction operations for recipe scenario_remove-range-to-end
9991 transform: --- transform braces for recipe scenario_remove-range-to-end
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_remove-range-to-end
9991 transform: --- type-check 'call' instructions inside recipe scenario_remove-range-to-end
9991 transform: --- type-check calls inside recipe scenario_remove-range-to-end
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_remove-range-to-end
9991 transform: --- check types of reply instructions in recipe scenario_remove-range-to-end
9991 transform: --- type-check merge instructions in recipe scenario_remove-range-to-end
9991 transform: --- checking reply instructions against header for scenario_remove-range-to-end
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_remove-range-to-end
 102 run: {1: ("address" "duplex-list" "character")} <- push_6 {18: "literal"}, {0: "literal"}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 4 in location 1001
 103 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 18 in location 1003
 103 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
 103 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1006
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: incrementing refcount of 1006: 0 -> 1
9999 mem: storing 1006 in location 1005
 103 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1003 is 18
9999 mem: location 1004 is 0
9999 mem: location 1005 is 1006
9999 mem: skipping refcount at 1006
9999 mem: location 1005 is 1006
9999 mem: skipping refcount at 1006
9999 mem: storing 18 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
 103 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 0
9998 run: jumping to instruction 8
 103 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1006
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1006
9999 mem: incrementing refcount of 1006: 1 -> 2
9999 mem: storing 1006 in location 1
 102 run: {1: ("address" "duplex-list" "character")} <- push_7 {17: "literal"}, {1: ("address" "duplex-list" "character")}
9999 mem: location 1 is 1006
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1000
 103 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 17 in location 1003
 103 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1006: 2 -> 3
9999 mem: storing 1006 in location 1004
 103 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1010
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: incrementing refcount of 1010: 0 -> 1
9999 mem: storing 1010 in location 1005
 103 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1003 is 17
9999 mem: location 1004 is 1006
9999 mem: location 1005 is 1010
9999 mem: skipping refcount at 1010
9999 mem: location 1005 is 1010
9999 mem: skipping refcount at 1010
9999 mem: storing 17 in location 1011
9999 mem: storing 1006 in location 1012
9999 mem: storing 0 in location 1013
 103 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 1006
9998 run: jump-unless fell through
 103 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9999 mem: location 1004 is 1006
9999 mem: skipping refcount at 1006
9999 mem: location 1007 is 18
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1005 is 1010
9999 mem: location 1004 is 1006
9999 mem: skipping refcount at 1006
9998 run: address to copy to is 1009
9999 mem: incrementing refcount of 1010: 1 -> 2
9999 mem: storing 1010 in location 1009
 103 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1010
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1010
9999 mem: decrementing refcount of 1006: 3 -> 2
9999 mem: incrementing refcount of 1010: 2 -> 3
9999 mem: storing 1010 in location 1
 102 run: {1: ("address" "duplex-list" "character")} <- push_8 {16: "literal"}, {1: ("address" "duplex-list" "character")}
9999 mem: location 1 is 1010
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1000
 103 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 16 in location 1003
 103 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1010: 3 -> 4
9999 mem: storing 1010 in location 1004
 103 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1005
 103 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1003 is 16
9999 mem: location 1004 is 1010
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 16 in location 1015
9999 mem: storing 1010 in location 1016
9999 mem: storing 0 in location 1017
 103 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 1010
9998 run: jump-unless fell through
 103 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9999 mem: location 1004 is 1010
9999 mem: skipping refcount at 1010
9999 mem: location 1011 is 17
9999 mem: location 1012 is 1006
9999 mem: location 1013 is 0
9999 mem: location 1005 is 1014
9999 mem: location 1004 is 1010
9999 mem: skipping refcount at 1010
9998 run: address to copy to is 1013
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1013
 103 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1014
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1014
9999 mem: decrementing refcount of 1010: 4 -> 3
9999 mem: incrementing refcount of 1014: 2 -> 3
9999 mem: storing 1014 in location 1
 102 run: {1: ("address" "duplex-list" "character")} <- push_9 {15: "literal"}, {1: ("address" "duplex-list" "character")}
9999 mem: location 1 is 1014
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1000
 103 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 15 in location 1003
 103 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1014: 3 -> 4
9999 mem: storing 1014 in location 1004
 103 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1018
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: incrementing refcount of 1018: 0 -> 1
9999 mem: storing 1018 in location 1005
 103 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1003 is 15
9999 mem: location 1004 is 1014
9999 mem: location 1005 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1005 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 15 in location 1019
9999 mem: storing 1014 in location 1020
9999 mem: storing 0 in location 1021
 103 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 1014
9998 run: jump-unless fell through
 103 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9999 mem: location 1004 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 16
9999 mem: location 1016 is 1010
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1018
9999 mem: location 1004 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy to is 1017
9999 mem: incrementing refcount of 1018: 1 -> 2
9999 mem: storing 1018 in location 1017
 103 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1018
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1018
9999 mem: decrementing refcount of 1014: 4 -> 3
9999 mem: incrementing refcount of 1018: 2 -> 3
9999 mem: storing 1018 in location 1
 102 run: {1: ("address" "duplex-list" "character")} <- push_10 {14: "literal"}, {1: ("address" "duplex-list" "character")}
9999 mem: location 1 is 1018
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1000
 103 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 14 in location 1003
 103 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 1004
 103 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1022
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: incrementing refcount of 1022: 0 -> 1
9999 mem: storing 1022 in location 1005
 103 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1003 is 14
9999 mem: location 1004 is 1018
9999 mem: location 1005 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1005 is 1022
9999 mem: skipping refcount at 1022
9999 mem: storing 14 in location 1023
9999 mem: storing 1018 in location 1024
9999 mem: storing 0 in location 1025
 103 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 1018
9998 run: jump-unless fell through
 103 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9999 mem: location 1004 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 15
9999 mem: location 1020 is 1014
9999 mem: location 1021 is 0
9999 mem: location 1005 is 1022
9999 mem: location 1004 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1021
9999 mem: incrementing refcount of 1022: 1 -> 2
9999 mem: storing 1022 in location 1021
 103 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1022
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1022
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: incrementing refcount of 1022: 2 -> 3
9999 mem: storing 1022 in location 1
 102 run: {1: ("address" "duplex-list" "character")} <- push_11 {13: "literal"}, {1: ("address" "duplex-list" "character")}
9999 mem: location 1 is 1022
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1000
 103 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 13 in location 1003
 103 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1022: 3 -> 4
9999 mem: storing 1022 in location 1004
 103 run: {result: ("address" "duplex-list" "character")} <- new {(duplex-list character): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1026
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: incrementing refcount of 1026: 0 -> 1
9999 mem: storing 1026 in location 1005
 103 run: {result: ("address" "duplex-list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 1003 is 13
9999 mem: location 1004 is 1022
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1005 is 1026
9999 mem: skipping refcount at 1026
9999 mem: storing 13 in location 1027
9999 mem: storing 1022 in location 1028
9999 mem: storing 0 in location 1029
 103 run: jump-unless {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1004 is 1022
9998 run: jump-unless fell through
 103 run: {in: ("address" "duplex-list" "character"), "lookup": ()} <- put {in: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {result: ("address" "duplex-list" "character")}
9999 mem: location 1004 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1023 is 14
9999 mem: location 1024 is 1018
9999 mem: location 1025 is 0
9999 mem: location 1005 is 1026
9999 mem: location 1004 is 1022
9999 mem: skipping refcount at 1022
9998 run: address to copy to is 1025
9999 mem: incrementing refcount of 1026: 1 -> 2
9999 mem: storing 1026 in location 1025
 103 run: return {result: ("address" "duplex-list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1005 is 1026
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1026
9999 mem: decrementing refcount of 1022: 4 -> 3
9999 mem: incrementing refcount of 1026: 2 -> 3
9999 mem: storing 1026 in location 1
 102 run: run {"\n    # remove the third element and beyond\n    2:address:duplex-list:character <- next 1:address:duplex-list:character\n    remove-between 2:address:duplex-list:character, 0\n    # now check the list\n    4:character <- get *1:address:duplex-list:character, value:offset\n    5:address:duplex-list:character <- next 1:address:duplex-list:character\n    6:character <- get *5:address:duplex-list:character, value:offset\n    7:address:duplex-list:character <- next 5:address:duplex-list:character\n  ": "literal-string"}
9991 parse: --- defining run_1007
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "duplex-list" "character")}
9993 parse:   product: {2: ("address" "duplex-list" "character")}
9992 load: after rewriting: {2: ("address" "duplex-list" "character")} <- next {1: ("address" "duplex-list" "character")}
9993 parse: instruction: remove-between
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: ("address" "duplex-list" "character")}
9993 parse:   ingredient: {0: "literal"}
9992 load: after rewriting: remove-between {2: ("address" "duplex-list" "character")}, {0: "literal"}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {1: ("address" "duplex-list" "character"), "lookup": ()}
9993 parse:   ingredient: {value: "offset"}
9993 parse:   product: {4: "character"}
9992 load: after rewriting: {4: "character"} <- get {1: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "duplex-list" "character")}
9993 parse:   product: {5: ("address" "duplex-list" "character")}
9992 load: after rewriting: {5: ("address" "duplex-list" "character")} <- next {1: ("address" "duplex-list" "character")}
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: ("address" "duplex-list" "character"), "lookup": ()}
9993 parse:   ingredient: {value: "offset"}
9993 parse:   product: {6: "character"}
9992 load: after rewriting: {6: "character"} <- get {5: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {5: ("address" "duplex-list" "character")}
9993 parse:   product: {7: ("address" "duplex-list" "character")}
9992 load: after rewriting: {7: ("address" "duplex-list" "character")} <- next {5: ("address" "duplex-list" "character")}
9999 parse: recipe run_1007 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1007
9991 transform: --- rewrite 'stash' instructions in recipe run_1007
9991 transform: --- fill in reply ingredients from header for recipe run_1007
9991 transform: --- deduce types for recipe run_1007
9991 transform: --- check for invalid types in recipe run_1007
9991 transform: --- collect surrounding spaces for recipe run_1007
9991 transform: --- transform names for recipe run_1007
9993 name: element value of type duplex-list is at offset 0
9993 name: element value of type duplex-list is at offset 0
9991 transform: --- resolve ambiguous calls for recipe run_1007
9992 transform: instruction {2: ("address" "duplex-list" "character")} <- next {1: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe next {in: ("address" "duplex-list" "_elem")} -> {result: ("address" "duplex-list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe next_2 {in: ("address" "duplex-list" "character")} -> {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9992 transform: instruction remove-between {2: ("address" "duplex-list" "character")}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe remove-between {start: ("address" "duplex-list" "_elem")} {end: ("address" "duplex-list" "_elem"), "contained-in": "start"} -> {start: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe remove-between_2 {start: ("address" "duplex-list" "character")} {end: ("address" "duplex-list" "character"), "contained-in": "start"} -> {start: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 0: recipe remove-between {start: ("address" "duplex-list" "_elem")} {end: ("address" "duplex-list" "_elem"), "contained-in": "start"} -> {start: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe remove-between_2 {start: ("address" "duplex-list" "character")} {end: ("address" "duplex-list" "character"), "contained-in": "start"} -> {start: ("address" "duplex-list" "character")}
9992 transform: instruction {5: ("address" "duplex-list" "character")} <- next {1: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe next {in: ("address" "duplex-list" "_elem")} -> {result: ("address" "duplex-list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe next_2 {in: ("address" "duplex-list" "character")} -> {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9992 transform: instruction {7: ("address" "duplex-list" "character")} <- next {5: ("address" "duplex-list" "character")}
9992 transform: checking variant (strict) 0: recipe next {in: ("address" "duplex-list" "_elem")} -> {result: ("address" "duplex-list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe next_2 {in: ("address" "duplex-list" "character")} -> {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9991 transform: --- compute instruction operations for recipe run_1007
9991 transform: --- transform braces for recipe run_1007
9992 transform: next ...
9992 transform: remove-between ...
9992 transform: get ...
9992 transform: next ...
9992 transform: get ...
9992 transform: next ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1007
9991 transform: --- type-check 'call' instructions inside recipe run_1007
9991 transform: --- type-check calls inside recipe run_1007
9991 transform: --- convert 'new' to 'allocate' for recipe run_1007
9991 transform: --- check types of reply instructions in recipe run_1007
9991 transform: --- type-check merge instructions in recipe run_1007
9991 transform: --- checking reply instructions against header for run_1007
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {2: ("address" "duplex-list" "character")} <- next_2 {1: ("address" "duplex-list" "character")}
9999 mem: location 1 is 1026
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1030
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 3 in location 1031
 104 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1026: 3 -> 4
9999 mem: storing 1026 in location 1033
 104 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1033 is 1026
9998 run: jumping to instruction 5
 104 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1033 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 13
9999 mem: location 1028 is 1022
9999 mem: location 1029 is 0
9999 mem: location 1033 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1028 is 1022
9999 mem: incrementing refcount of 1022: 3 -> 4
9999 mem: storing 1022 in location 1034
 104 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1034 is 1022
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1022
9999 mem: incrementing refcount of 1022: 4 -> 5
9999 mem: storing 1022 in location 2
 103 run: remove-between_2 {2: ("address" "duplex-list" "character")}, {0: "literal"}
9999 mem: location 2 is 1022
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1035
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 6 in location 1036
 104 run: {start: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1022: 5 -> 6
9999 mem: storing 1022 in location 1038
 104 run: {end: ("address" "duplex-list" "character"), "contained-in": "start"} <- next-ingredient-without-typechecking 
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1039
 104 run: {next: ("address" "duplex-list" "character")} <- get {start: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1038 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1023 is 14
9999 mem: location 1024 is 1018
9999 mem: location 1025 is 1026
9999 mem: location 1038 is 1022
9999 mem: skipping refcount at 1022
9998 run: address to copy is 1024
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1024 is 1018
9999 mem: incrementing refcount of 1018: 3 -> 4
9999 mem: storing 1018 in location 1040
 104 run: {nothing-to-delete?: "boolean"} <- equal {next: ("address" "duplex-list" "character")}, {end: ("address" "duplex-list" "character")}
9999 mem: location 1040 is 1018
9999 mem: location 1039 is 0
9999 mem: storing 0 in location 1041
 104 run: jump-unless {nothing-to-delete?: "boolean"}, {: "offset"}
9999 mem: location 1041 is 0
9998 run: jumping to instruction 8
 104 run: assert {next: ("address" "duplex-list" "character")}, {"malformed duplex list": "literal-string"}
9999 mem: location 1040 is 1018
 104 run: {next: ("address" "duplex-list" "character"), "lookup": ()} <- put {next: ("address" "duplex-list" "character"), "lookup": ()}, {prev: "offset"}, {0: "literal"}
9999 mem: location 1040 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 15
9999 mem: location 1020 is 1014
9999 mem: location 1021 is 1022
9999 mem: location 1040 is 1018
9999 mem: skipping refcount at 1018
9998 run: address to copy to is 1021
9999 mem: decrementing refcount of 1022: 6 -> 5
9999 mem: storing 0 in location 1021
 104 run: {start: ("address" "duplex-list" "character"), "lookup": ()} <- put {start: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}, {end: ("address" "duplex-list" "character")}
9999 mem: location 1038 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1023 is 14
9999 mem: location 1024 is 1018
9999 mem: location 1025 is 1026
9999 mem: location 1039 is 0
9999 mem: location 1038 is 1022
9999 mem: skipping refcount at 1022
9998 run: address to copy to is 1024
9999 mem: decrementing refcount of 1018: 4 -> 3
9999 mem: storing 0 in location 1024
 104 run: jump-if {end: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1039 is 0
9998 run: jump-if fell through
 104 run: return {start: ("address" "duplex-list" "character"), "same-as-ingredient": "0"}
9999 mem: location 1038 is 1022
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
 103 run: {4: "character"} <- get {1: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 13
9999 mem: location 1028 is 1022
9999 mem: location 1029 is 0
9999 mem: location 1 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9998 run: its type is "character"
9999 mem: location 1027 is 13
9999 mem: storing 13 in location 4
 103 run: {5: ("address" "duplex-list" "character")} <- next_2 {1: ("address" "duplex-list" "character")}
9999 mem: location 1 is 1026
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1030
 104 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1026: 4 -> 5
9999 mem: storing 1026 in location 1033
 104 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1033 is 1026
9998 run: jumping to instruction 5
 104 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1033 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 13
9999 mem: location 1028 is 1022
9999 mem: location 1029 is 0
9999 mem: location 1033 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1028 is 1022
9999 mem: incrementing refcount of 1022: 5 -> 6
9999 mem: storing 1022 in location 1034
 104 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1034 is 1022
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1022
9999 mem: incrementing refcount of 1022: 6 -> 7
9999 mem: storing 1022 in location 5
 103 run: {6: "character"} <- get {5: ("address" "duplex-list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 5 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1023 is 14
9999 mem: location 1024 is 0
9999 mem: location 1025 is 1026
9999 mem: location 5 is 1022
9999 mem: skipping refcount at 1022
9998 run: address to copy is 1023
9998 run: its type is "character"
9999 mem: location 1023 is 14
9999 mem: storing 14 in location 6
 103 run: {7: ("address" "duplex-list" "character")} <- next_2 {5: ("address" "duplex-list" "character")}
9999 mem: location 5 is 1022
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1030
 104 run: {in: ("address" "duplex-list" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1022: 7 -> 8
9999 mem: storing 1022 in location 1033
 104 run: jump-if {in: ("address" "duplex-list" "character")}, {: "offset"}
9999 mem: location 1033 is 1022
9998 run: jumping to instruction 5
 104 run: {result: ("address" "duplex-list" "character")} <- get {in: ("address" "duplex-list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1033 is 1022
9999 mem: skipping refcount at 1022
9999 mem: location 1023 is 14
9999 mem: location 1024 is 0
9999 mem: location 1025 is 1026
9999 mem: location 1033 is 1022
9999 mem: skipping refcount at 1022
9998 run: address to copy is 1024
9998 run: its type is ("address" "duplex-list" "character")
9999 mem: location 1024 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1034
 104 run: reply {result: ("address" "duplex-list" "character"), "contained-in": "in"}
9999 mem: location 1034 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 7
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    4 <- 13\n    6 <- 14\n    7 <- 0\n  ": "literal-string"}
9999 run: checking location 4
9999 run: checking location 6
9999 run: checking location 7
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
