9991 parse: --- defining scenario_removing-from-list
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    list:address:list:character <- push 3, 0\n    list <- push 4, list\n    list <- push 5, list\n    list2:address:list:character <- rest list  # second element\n    list <- remove list2, list\n    10:boolean/raw <- equal list2, 0\n    # check structure like before\n    list2 <- copy list\n    11:character/raw <- first list2\n    list2 <- rest list2\n    12:character/raw <- first list2\n    20:address:list:character/raw <- rest list2\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    list:address:list:character <- push 3, 0\n    list <- push 4, list\n    list <- push 5, list\n    list2:address:list:character <- rest list  # second element\n    list <- remove list2, list\n    10:boolean/raw <- equal list2, 0\n    # check structure like before\n    list2 <- copy list\n    11:character/raw <- first list2\n    list2 <- rest list2\n    12:character/raw <- first list2\n    20:address:list:character/raw <- rest list2\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10 <- 0  # remove returned non-null\n    11 <- 5  # scanning next, skipping deleted element\n    12 <- 3\n    20 <- 0  # no more elements\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    10 <- 0  # remove returned non-null\n    11 <- 5  # scanning next, skipping deleted element\n    12 <- 3\n    20 <- 0  # no more elements\n  ": "literal-string"}
9999 parse: recipe scenario_removing-from-list has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_removing-from-list
9991 transform: --- rewrite 'stash' instructions in recipe scenario_removing-from-list
9991 transform: --- deduce types for recipe scenario_removing-from-list
9993 transform: run {"\n    local-scope\n    list:address:list:character <- push 3, 0\n    list <- push 4, list\n    list <- push 5, list\n    list2:address:list:character <- rest list  # second element\n    list <- remove list2, list\n    10:boolean/raw <- equal list2, 0\n    # check structure like before\n    list2 <- copy list\n    11:character/raw <- first list2\n    list2 <- rest list2\n    12:character/raw <- first list2\n    20:address:list:character/raw <- rest list2\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    10 <- 0  # remove returned non-null\n    11 <- 5  # scanning next, skipping deleted element\n    12 <- 3\n    20 <- 0  # no more elements\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_removing-from-list
9991 transform: --- deduce types for recipe scenario_removing-from-list
9991 transform: --- check for invalid types in recipe scenario_removing-from-list
9991 transform: --- collect surrounding spaces for recipe scenario_removing-from-list
9991 transform: --- transform names for recipe scenario_removing-from-list
9991 transform: --- resolve ambiguous calls for recipe scenario_removing-from-list
9992 transform: --- compute address offsets for scenario_removing-from-list
9993 transform: - compute address offsets for run {"\n    local-scope\n    list:address:list:character <- push 3, 0\n    list <- push 4, list\n    list <- push 5, list\n    list2:address:list:character <- rest list  # second element\n    list <- remove list2, list\n    10:boolean/raw <- equal list2, 0\n    # check structure like before\n    list2 <- copy list\n    11:character/raw <- first list2\n    list2 <- rest list2\n    12:character/raw <- first list2\n    20:address:list:character/raw <- rest list2\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    10 <- 0  # remove returned non-null\n    11 <- 5  # scanning next, skipping deleted element\n    12 <- 3\n    20 <- 0  # no more elements\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_removing-from-list
9991 transform: --- transform braces for recipe scenario_removing-from-list
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_removing-from-list
9991 transform: --- perform checks for recipe scenario_removing-from-list
9991 transform: --- type-check 'call' instructions inside recipe scenario_removing-from-list
9991 transform: --- type-check calls inside recipe scenario_removing-from-list
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_removing-from-list
9991 transform: --- check types of reply instructions in recipe scenario_removing-from-list
9991 transform: --- type-check merge instructions in recipe scenario_removing-from-list
9991 transform: --- checking reply instructions against header for scenario_removing-from-list
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_removing-from-list
 102 run: run {"\n    local-scope\n    list:address:list:character <- push 3, 0\n    list <- push 4, list\n    list <- push 5, list\n    list2:address:list:character <- rest list  # second element\n    list <- remove list2, list\n    10:boolean/raw <- equal list2, 0\n    # check structure like before\n    list2 <- copy list\n    11:character/raw <- first list2\n    list2 <- rest list2\n    12:character/raw <- first list2\n    20:address:list:character/raw <- rest list2\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {3: "literal"}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {list: ("address" "list" "character")}
9992 load: after rewriting: {list: ("address" "list" "character")} <- push {3: "literal"}, {0: "literal"}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {4: "literal"}
9993 parse:   ingredient: {list: ()}
9993 parse:   product: {list: ()}
9992 load: after rewriting: {list: ()} <- push {4: "literal"}, {list: ()}
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal"}
9993 parse:   ingredient: {list: ()}
9993 parse:   product: {list: ()}
9992 load: after rewriting: {list: ()} <- push {5: "literal"}, {list: ()}
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {list: ()}
9993 parse:   product: {list2: ("address" "list" "character")}
9992 load: after rewriting: {list2: ("address" "list" "character")} <- rest {list: ()}
9993 parse: instruction: remove
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {list2: ()}
9993 parse:   ingredient: {list: ()}
9993 parse:   product: {list: ()}
9992 load: after rewriting: {list: ()} <- remove {list2: ()}, {list: ()}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {list2: ()}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {10: "boolean", "raw": ()}
9992 load: after rewriting: {10: "boolean", "raw": ()} <- equal {list2: ()}, {0: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {list: ()}
9993 parse:   product: {list2: ()}
9992 load: after rewriting: {list2: ()} <- copy {list: ()}
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {list2: ()}
9993 parse:   product: {11: "character", "raw": ()}
9992 load: after rewriting: {11: "character", "raw": ()} <- first {list2: ()}
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {list2: ()}
9993 parse:   product: {list2: ()}
9992 load: after rewriting: {list2: ()} <- rest {list2: ()}
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {list2: ()}
9993 parse:   product: {12: "character", "raw": ()}
9992 load: after rewriting: {12: "character", "raw": ()} <- first {list2: ()}
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {list2: ()}
9993 parse:   product: {20: ("address" "list" "character"), "raw": ()}
9992 load: after rewriting: {20: ("address" "list" "character"), "raw": ()} <- rest {list2: ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: list => ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list2 => ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9992 transform: list <= ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9992 transform: list2 <= ("address" "list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {list: ("address" "list" "character")} <- push {3: "literal"}, {0: "literal"}
9993 transform: {list: ("address" "list" "character")} <- push {4: "literal"}, {list: ("address" "list" "character")}
9993 transform: {list: ("address" "list" "character")} <- push {5: "literal"}, {list: ("address" "list" "character")}
9993 transform: {list2: ("address" "list" "character")} <- rest {list: ("address" "list" "character")}
9993 transform: {list: ("address" "list" "character")} <- remove {list2: ("address" "list" "character")}, {list: ("address" "list" "character")}
9993 transform: {10: "boolean", "raw": ()} <- equal {list2: ("address" "list" "character")}, {0: "literal"}
9993 transform: {list2: ("address" "list" "character")} <- copy {list: ("address" "list" "character")}
9993 transform: {11: "character", "raw": ()} <- first {list2: ("address" "list" "character")}
9993 transform: {list2: ("address" "list" "character")} <- rest {list2: ("address" "list" "character")}
9993 transform: {12: "character", "raw": ()} <- first {list2: ("address" "list" "character")}
9993 transform: {20: ("address" "list" "character"), "raw": ()} <- rest {list2: ("address" "list" "character")}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: list => ("address" "list" "character")
9992 transform: list2 => ("address" "list" "character")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign list 1
9993 name: assign list2 2
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {list: ("address" "list" "character")} <- push {3: "literal"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: match failed: ingredient 0
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 222 push
9993 transform: switching push to specialized recipe push_6 {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: compute type names: push_6
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of 'x' is "_elem"
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'in' is ("address" "list" "_elem")
9994 transform:     checking {result: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'result' is ("address" "list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ()} <- new {(list _elem): "type"}
9994 transform:     checking {(list _elem): "type"}: "type"
9993 transform: type of '(list _elem)' is "type"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem")} <- new {(list _elem): "type"}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_6
9991 transform: --- rewrite literal strings in recipe push_6
9991 transform: --- rewrite 'stash' instructions in recipe push_6
9991 transform: --- deduce types for recipe push_6
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9991 transform: --- checking reply instructions against header for push_6
9991 transform: --- fill in reply ingredients from header for recipe push_6
9991 transform: --- deduce types for recipe push_6
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9991 transform: --- deduce types from header for push_6
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "list" "character")
9993 transform: type of result is ("address" "list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "character")}
9992 transform: instruction: {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform:   product: {result: ("address" "list" "character")}
9992 transform: instruction: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9993 transform:   product: {result: ("address" "list" "character"), "lookup": ()}
9992 transform: instruction: reply {result: ("address" "list" "character")}
9991 transform: --- check for invalid types in recipe push_6
9991 transform: --- collect surrounding spaces for recipe push_6
9991 transform: --- transform names for recipe push_6
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9991 transform: --- resolve ambiguous calls for recipe push_6
9992 transform: --- compute address offsets for push_6
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container list
9993 transform: checking container list, element 0
9993 transform: checking container list, element 1
9993 transform: address at offset 1
9993 transform: - compute address offsets for {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform: - compute address offsets for {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9993 transform: - compute address offsets for reply {result: ("address" "list" "character")}
9991 transform: --- compute instruction operations for recipe push_6
9991 transform: --- transform braces for recipe push_6
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe push_6
9991 transform: --- perform checks for recipe push_6
9991 transform: --- type-check 'call' instructions inside recipe push_6
9991 transform: --- type-check calls inside recipe push_6
9991 transform: --- convert 'new' to 'allocate' for recipe push_6
9992 new: size of "location" is 1
9992 new: size of ("list" "character") is 2
9991 transform: --- check types of reply instructions in recipe push_6
9991 transform: --- type-check merge instructions in recipe push_6
9999 transform: 0 vs 2
9999 transform: checking container {result: ("list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {result: ("list" "character")} || {next: ("address" "list" "character")} vs ingredient 1
9991 transform: --- check that recipe push_6 sets default-space
9991 transform: --- checking reply instructions against header for push_6
9992 transform: new specialization: push_6
9992 transform: instruction {list: ()} <- push {4: "literal"}, {list: ()}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "list" "character")} -> {result: ("address" "list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 5: recipe push_6 {x: "character"} {in: ("address" "list" "character")} -> {result: ("address" "list" "character")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 222 push
9993 transform: switching push to specialized recipe push_7 {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: compute type names: push_7
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of 'x' is "_elem"
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'in' is ("address" "list" "_elem")
9994 transform:     checking {result: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'result' is ("address" "list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ()} <- new {(list _elem): "type"}
9994 transform:     checking {(list _elem): "type"}: "type"
9993 transform: type of '(list _elem)' is "type"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem")} <- new {(list _elem): "type"}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_7
9991 transform: --- rewrite literal strings in recipe push_7
9991 transform: --- rewrite 'stash' instructions in recipe push_7
9991 transform: --- deduce types for recipe push_7
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9991 transform: --- checking reply instructions against header for push_7
9991 transform: --- fill in reply ingredients from header for recipe push_7
9991 transform: --- deduce types for recipe push_7
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9991 transform: --- deduce types from header for push_7
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "list" "character")
9993 transform: type of result is ("address" "list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "character")}
9992 transform: instruction: {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform:   product: {result: ("address" "list" "character")}
9992 transform: instruction: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9993 transform:   product: {result: ("address" "list" "character"), "lookup": ()}
9992 transform: instruction: reply {result: ("address" "list" "character")}
9991 transform: --- check for invalid types in recipe push_7
9991 transform: --- collect surrounding spaces for recipe push_7
9991 transform: --- transform names for recipe push_7
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9991 transform: --- resolve ambiguous calls for recipe push_7
9992 transform: --- compute address offsets for push_7
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform: - compute address offsets for {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9993 transform: - compute address offsets for reply {result: ("address" "list" "character")}
9991 transform: --- compute instruction operations for recipe push_7
9991 transform: --- transform braces for recipe push_7
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe push_7
9991 transform: --- perform checks for recipe push_7
9991 transform: --- type-check 'call' instructions inside recipe push_7
9991 transform: --- type-check calls inside recipe push_7
9991 transform: --- convert 'new' to 'allocate' for recipe push_7
9992 new: size of "location" is 1
9992 new: size of ("list" "character") is 2
9991 transform: --- check types of reply instructions in recipe push_7
9991 transform: --- type-check merge instructions in recipe push_7
9999 transform: 0 vs 2
9999 transform: checking container {result: ("list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {result: ("list" "character")} || {next: ("address" "list" "character")} vs ingredient 1
9991 transform: --- check that recipe push_7 sets default-space
9991 transform: --- checking reply instructions against header for push_7
9992 transform: new specialization: push_7
9992 transform: instruction {list: ()} <- push {5: "literal"}, {list: ()}
9992 transform: checking variant (strict) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 5: recipe push_6 {x: "character"} {in: ("address" "list" "character")} -> {result: ("address" "list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 6: recipe push_7 {x: "character"} {in: ("address" "list" "character")} -> {result: ("address" "list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe push {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe push_2 {x: "_elem"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 2: recipe push_3 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 3: recipe push_4 {x: ("address" "operation")} {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 4: recipe push_5 {x: "character"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 5: recipe push_6 {x: "character"} {in: ("address" "list" "character")} -> {result: ("address" "list" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 6: recipe push_7 {x: "character"} {in: ("address" "list" "character")} -> {result: ("address" "list" "character")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 222 push
9993 transform: switching push to specialized recipe push_8 {x: "_elem"} {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem")}
9993 transform: compute type names: push_8
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of 'x' is "_elem"
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'in' is ("address" "list" "_elem")
9994 transform:     checking {result: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'result' is ("address" "list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ()} <- new {(list _elem): "type"}
9994 transform:     checking {(list _elem): "type"}: "type"
9993 transform: type of '(list _elem)' is "type"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: {result: (), "lookup": ()} <- merge {x: ()}, {in: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {result: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem")} <- new {(list _elem): "type"}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem"), "lookup": ()} <- merge {x: "_elem"}, {in: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: push_8
9991 transform: --- rewrite literal strings in recipe push_8
9991 transform: --- rewrite 'stash' instructions in recipe push_8
9991 transform: --- deduce types for recipe push_8
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9991 transform: --- checking reply instructions against header for push_8
9991 transform: --- fill in reply ingredients from header for recipe push_8
9991 transform: --- deduce types for recipe push_8
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "character"
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9991 transform: --- deduce types from header for push_8
9993 transform: type of x is "character"
9993 transform: type of in is ("address" "list" "character")
9993 transform: type of result is ("address" "list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "character"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "character"}
9992 transform: instruction: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "character")}
9992 transform: instruction: {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform:   product: {result: ("address" "list" "character")}
9992 transform: instruction: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9993 transform:   product: {result: ("address" "list" "character"), "lookup": ()}
9992 transform: instruction: reply {result: ("address" "list" "character")}
9991 transform: --- check for invalid types in recipe push_8
9991 transform: --- collect surrounding spaces for recipe push_8
9991 transform: --- transform names for recipe push_8
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9991 transform: --- resolve ambiguous calls for recipe push_8
9992 transform: --- compute address offsets for push_8
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "character"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {result: ("address" "list" "character")} <- new {(list character): "type"}
9993 transform: - compute address offsets for {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9993 transform: - compute address offsets for reply {result: ("address" "list" "character")}
9991 transform: --- compute instruction operations for recipe push_8
9991 transform: --- transform braces for recipe push_8
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: merge ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe push_8
9991 transform: --- perform checks for recipe push_8
9991 transform: --- type-check 'call' instructions inside recipe push_8
9991 transform: --- type-check calls inside recipe push_8
9991 transform: --- convert 'new' to 'allocate' for recipe push_8
9992 new: size of "location" is 1
9992 new: size of ("list" "character") is 2
9991 transform: --- check types of reply instructions in recipe push_8
9991 transform: --- type-check merge instructions in recipe push_8
9999 transform: 0 vs 2
9999 transform: checking container {result: ("list" "character")} || {value: "character"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {result: ("list" "character")} || {next: ("address" "list" "character")} vs ingredient 1
9991 transform: --- check that recipe push_8 sets default-space
9991 transform: --- checking reply instructions against header for push_8
9992 transform: new specialization: push_8
9992 transform: instruction {list2: ("address" "list" "character")} <- rest {list: ()}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: match failed: ingredient 0
9992 transform: found variant to specialize: 224 rest
9993 transform: switching rest to specialized recipe rest_3 {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: compute type names: rest_3
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'in' is ("address" "list" "_elem")
9994 transform:     checking {result: ("address" "list" "_elem"), "contained-in": "in"}: ("address" "list" "_elem")
9993 transform: type of 'result' is ("address" "list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ()} <- get {in: (), "lookup": ()}, {next: "offset"}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {next: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem/contained-in:in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: ("address" "list" "_elem")} <- get {in: ("address" "list" "_elem"), "lookup": ()}, {next: "offset"}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: rest_3
9991 transform: --- rewrite literal strings in recipe rest_3
9991 transform: --- rewrite 'stash' instructions in recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9991 transform: --- checking reply instructions against header for rest_3
9991 transform: --- fill in reply ingredients from header for recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "character")
9992 transform: result => ("address" "list" "character")
9991 transform: --- deduce types from header for rest_3
9993 transform: type of in is ("address" "list" "character")
9993 transform: type of result is ("address" "list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "character")}
9992 transform: instruction: {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9993 transform:   product: {result: ("address" "list" "character")}
9992 transform: instruction: reply {result: ("address" "list" "character"), "contained-in": "in"}
9991 transform: --- check for invalid types in recipe rest_3
9991 transform: --- collect surrounding spaces for recipe rest_3
9991 transform: --- transform names for recipe rest_3
9993 name: assign in 1
9993 name: element next of type list is at offset 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe rest_3
9992 transform: --- compute address offsets for rest_3
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9993 transform: - compute address offsets for reply {result: ("address" "list" "character"), "contained-in": "in"}
9991 transform: --- compute instruction operations for recipe rest_3
9991 transform: --- transform braces for recipe rest_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe rest_3
9991 transform: --- perform checks for recipe rest_3
9991 transform: --- type-check 'call' instructions inside recipe rest_3
9991 transform: --- type-check calls inside recipe rest_3
9991 transform: --- convert 'new' to 'allocate' for recipe rest_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe rest_3
9991 transform: --- type-check merge instructions in recipe rest_3
9991 transform: --- check that recipe rest_3 sets default-space
9991 transform: --- checking reply instructions against header for rest_3
9992 transform: new specialization: rest_3
9992 transform: instruction {list: ()} <- remove {list2: ()}, {list: ()}
9992 transform: checking variant (strict) 0: recipe remove {x: ("address" "list" "_elem"), "contained-in": "in"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe remove_2 {x: ("address" "duplex-list" "_elem"), "contained-in": "in"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe remove_3 {x: ("address" "duplex-list" "character"), "contained-in": "in"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe remove {x: ("address" "list" "_elem"), "contained-in": "in"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe remove_2 {x: ("address" "duplex-list" "_elem"), "contained-in": "in"} {in: ("address" "duplex-list" "_elem")} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 2: recipe remove_3 {x: ("address" "duplex-list" "character"), "contained-in": "in"} {in: ("address" "duplex-list" "character")} -> {in: ("address" "duplex-list" "character")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 227 remove
9993 transform: switching remove to specialized recipe remove_4 {x: ("address" "list" "_elem"), "contained-in": "in"} {in: ("address" "list" "_elem")} -> {in: ("address" "list" "_elem")}
9993 transform: compute type names: remove_4
9994 transform:     checking {x: ("address" "list" "_elem"), "contained-in": "in"}: ("address" "list" "_elem")
9993 transform: type of 'x' is ("address" "list" "_elem")
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'in' is ("address" "list" "_elem")
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {x: ("address" "list" "_elem"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: ("address" "list" "_elem"), "contained-in": "in"}: ("address" "list" "_elem")
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: break-if {x: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: return 
9993 transform:   instruction: }
9993 transform:   instruction: {next-node: ("address" "list" "_elem")} <- rest {x: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {next-node: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'next-node' is ("address" "list" "_elem")
9993 transform:   instruction: {x: (), "lookup": ()} <- put {x: (), "lookup": ()}, {next: "offset"}, {0: "literal"}
9994 transform:     checking {x: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {next: "offset"}: "offset"
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of '0' is "literal"
9994 transform:     checking {x: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: {at-head?: "boolean"} <- equal {x: ()}, {in: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {at-head?: "boolean"}: "boolean"
9993 transform: type of 'at-head?' is "boolean"
9993 transform:   instruction: {
9993 transform:   instruction: break-unless {at-head?: ()}
9994 transform:     checking {at-head?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: return {next-node: ()}
9994 transform:     checking {next-node: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: {prev-node: ("address" "list" "_elem")} <- copy {in: ()}
9994 transform:     checking {in: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {prev-node: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'prev-node' is ("address" "list" "_elem")
9993 transform:   instruction: {curr: ("address" "list" "_elem")} <- rest {prev-node: ()}
9994 transform:     checking {prev-node: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {curr: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'curr' is ("address" "list" "_elem")
9993 transform:   instruction: {
9993 transform:   instruction: {
9993 transform:   instruction: break-if {curr: ()}
9994 transform:     checking {curr: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: return 
9993 transform:   instruction: }
9993 transform:   instruction: {found?: "boolean"} <- equal {curr: ()}, {x: ()}
9994 transform:     checking {curr: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {found?: "boolean"}: "boolean"
9993 transform: type of 'found?' is "boolean"
9993 transform:   instruction: break-if {found?: ()}
9994 transform:     checking {found?: ()}: ()
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: {prev-node: ()} <- copy {curr: ()}
9994 transform:     checking {curr: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {prev-node: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: {curr: ()} <- rest {curr: ()}
9994 transform:     checking {curr: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {curr: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform:   instruction: }
9993 transform:   instruction: {prev-node: (), "lookup": ()} <- put {prev-node: (), "lookup": ()}, {next: "offset"}, {next-node: ()}
9994 transform:     checking {prev-node: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {next: "offset"}: "offset"
9994 transform:     checking {next-node: ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {prev-node: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:address:list:_elem/contained-in:in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: ("address" "list" "_elem"), "contained-in": "in"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:address:list:_elem/contained-in:in
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-if {x: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'return '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{next-node: ("address" "list" "_elem")} <- rest {x: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next-node:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{x: ("address" "list" "_elem"), "lookup": ()} <- put {x: ("address" "list" "_elem"), "lookup": ()}, {next: "offset"}, {0: "literal"}'
9993 transform: replacing in ingredient *x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient 0
9993 transform: replacing in ingredient *x
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{at-head?: "boolean"} <- equal {x: ("address" "list" "_elem")}, {in: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient at-head?:boolean
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless {at-head?: "boolean"}'
9993 transform: replacing in ingredient at-head?
9993 transform: replacing in instruction 'return {next-node: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient next-node
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{prev-node: ("address" "list" "_elem")} <- copy {in: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev-node:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{curr: ("address" "list" "_elem")} <- rest {prev-node: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient prev-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient curr:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-if {curr: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient curr
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'return '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{found?: "boolean"} <- equal {curr: ("address" "list" "_elem")}, {x: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient curr
9993 transform: _elem => "character"
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform: replacing in ingredient found?:boolean
9993 transform: replacing in instruction 'break-if {found?: "boolean"}'
9993 transform: replacing in ingredient found?
9993 transform: replacing in instruction '{prev-node: ("address" "list" "_elem")} <- copy {curr: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient curr
9993 transform: _elem => "character"
9993 transform: replacing in ingredient prev-node
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{curr: ("address" "list" "_elem")} <- rest {curr: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient curr
9993 transform: _elem => "character"
9993 transform: replacing in ingredient curr
9993 transform: _elem => "character"
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{prev-node: ("address" "list" "_elem"), "lookup": ()} <- put {prev-node: ("address" "list" "_elem"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "list" "_elem")}'
9993 transform: replacing in ingredient *prev-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient next:offset
9993 transform: replacing in ingredient next-node
9993 transform: _elem => "character"
9993 transform: replacing in ingredient *prev-node
9993 transform: _elem => "character"
9992 transform: transforming new specialization: remove_4
9991 transform: --- rewrite literal strings in recipe remove_4
9991 transform: --- rewrite 'stash' instructions in recipe remove_4
9991 transform: --- deduce types for recipe remove_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "list" "character")
9992 transform: in => ("address" "list" "character")
9992 transform: next-node => ("address" "list" "character")
9992 transform: at-head? => "boolean"
9992 transform: prev-node => ("address" "list" "character")
9992 transform: curr => ("address" "list" "character")
9992 transform: found? => "boolean"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9993 transform: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {
9993 transform: break-if {x: ("address" "list" "character")}
9993 transform: return 
9993 transform: }
9993 transform: {next-node: ("address" "list" "character")} <- rest {x: ("address" "list" "character")}
9993 transform: {x: ("address" "list" "character"), "lookup": ()} <- put {x: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9993 transform: {at-head?: "boolean"} <- equal {x: ("address" "list" "character")}, {in: ("address" "list" "character")}
9993 transform: {
9993 transform: break-unless {at-head?: "boolean"}
9993 transform: return {next-node: ("address" "list" "character")}
9993 transform: }
9993 transform: {prev-node: ("address" "list" "character")} <- copy {in: ("address" "list" "character")}
9993 transform: {curr: ("address" "list" "character")} <- rest {prev-node: ("address" "list" "character")}
9993 transform: {
9993 transform: {
9993 transform: break-if {curr: ("address" "list" "character")}
9993 transform: return 
9993 transform: }
9993 transform: {found?: "boolean"} <- equal {curr: ("address" "list" "character")}, {x: ("address" "list" "character")}
9993 transform: break-if {found?: "boolean"}
9993 transform: {prev-node: ("address" "list" "character")} <- copy {curr: ("address" "list" "character")}
9993 transform: {curr: ("address" "list" "character")} <- rest {curr: ("address" "list" "character")}
9993 transform: }
9993 transform: {prev-node: ("address" "list" "character"), "lookup": ()} <- put {prev-node: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "list" "character")}
9991 transform: --- checking reply instructions against header for remove_4
9991 transform: --- fill in reply ingredients from header for recipe remove_4
9991 transform: --- deduce types for recipe remove_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "list" "character")
9992 transform: in => ("address" "list" "character")
9992 transform: next-node => ("address" "list" "character")
9992 transform: at-head? => "boolean"
9992 transform: prev-node => ("address" "list" "character")
9992 transform: curr => ("address" "list" "character")
9992 transform: found? => "boolean"
9991 transform: --- deduce types from header for remove_4
9993 transform: type of x is ("address" "list" "character")
9993 transform: type of in is ("address" "list" "character")
9993 transform: type of in is ("address" "list" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: ("address" "list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: ("address" "list" "character"), "contained-in": "in"}
9992 transform: instruction: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "character")}
9992 transform: instruction: {
9992 transform: instruction: break-if {x: ("address" "list" "character")}
9992 transform: instruction: return {in: ("address" "list" "character"), "same-as-ingredient": "1"}
9992 transform: instruction: }
9992 transform: instruction: {next-node: ("address" "list" "character")} <- rest {x: ("address" "list" "character")}
9993 transform:   product: {next-node: ("address" "list" "character")}
9992 transform: instruction: {x: ("address" "list" "character"), "lookup": ()} <- put {x: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9993 transform:   product: {x: ("address" "list" "character"), "lookup": ()}
9992 transform: instruction: {at-head?: "boolean"} <- equal {x: ("address" "list" "character")}, {in: ("address" "list" "character")}
9993 transform:   product: {at-head?: "boolean"}
9992 transform: instruction: {
9992 transform: instruction: break-unless {at-head?: "boolean"}
9992 transform: instruction: return {next-node: ("address" "list" "character"), "same-as-ingredient": "1"}
9992 transform: instruction: }
9992 transform: instruction: {prev-node: ("address" "list" "character")} <- copy {in: ("address" "list" "character")}
9993 transform:   product: {prev-node: ("address" "list" "character")}
9992 transform: instruction: {curr: ("address" "list" "character")} <- rest {prev-node: ("address" "list" "character")}
9993 transform:   product: {curr: ("address" "list" "character")}
9992 transform: instruction: {
9992 transform: instruction: {
9992 transform: instruction: break-if {curr: ("address" "list" "character")}
9992 transform: instruction: return {in: ("address" "list" "character"), "same-as-ingredient": "1"}
9992 transform: instruction: }
9992 transform: instruction: {found?: "boolean"} <- equal {curr: ("address" "list" "character")}, {x: ("address" "list" "character")}
9993 transform:   product: {found?: "boolean"}
9992 transform: instruction: break-if {found?: "boolean"}
9992 transform: instruction: {prev-node: ("address" "list" "character")} <- copy {curr: ("address" "list" "character")}
9993 transform:   product: {prev-node: ("address" "list" "character")}
9992 transform: instruction: {curr: ("address" "list" "character")} <- rest {curr: ("address" "list" "character")}
9993 transform:   product: {curr: ("address" "list" "character")}
9992 transform: instruction: }
9992 transform: instruction: {prev-node: ("address" "list" "character"), "lookup": ()} <- put {prev-node: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "list" "character")}
9993 transform:   product: {prev-node: ("address" "list" "character"), "lookup": ()}
9992 transform: instruction: reply {in: ("address" "list" "character"), "same-as-ingredient": "1"}
9991 transform: --- check for invalid types in recipe remove_4
9991 transform: --- collect surrounding spaces for recipe remove_4
9991 transform: --- transform names for recipe remove_4
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign next-node 3
9993 name: element next of type list is at offset 1
9993 name: assign at-head? 4
9993 name: assign prev-node 5
9993 name: assign curr 6
9993 name: assign found? 7
9993 name: element next of type list is at offset 1
9991 transform: --- resolve ambiguous calls for recipe remove_4
9992 transform: instruction {next-node: ("address" "list" "_elem")} <- rest {x: ()}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe rest_3 {in: ("address" "list" "character")} -> {result: ("address" "list" "character"), "contained-in": "in"}
9992 transform: instruction {at-head?: "boolean"} <- equal {x: ()}, {in: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {curr: ("address" "list" "_elem")} <- rest {prev-node: ()}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe rest_3 {in: ("address" "list" "character")} -> {result: ("address" "list" "character"), "contained-in": "in"}
9992 transform: instruction {found?: "boolean"} <- equal {curr: ()}, {x: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {curr: ()} <- rest {curr: ()}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe rest_3 {in: ("address" "list" "character")} -> {result: ("address" "list" "character"), "contained-in": "in"}
9992 transform: --- compute address offsets for remove_4
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for break-if {x: ("address" "list" "character")}
9993 transform: - compute address offsets for return {in: ("address" "list" "character"), "same-as-ingredient": "1"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {next-node: ("address" "list" "character")} <- rest_3 {x: ("address" "list" "character")}
9993 transform: - compute address offsets for {x: ("address" "list" "character"), "lookup": ()} <- put {x: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9993 transform: - compute address offsets for {at-head?: "boolean"} <- equal {x: ("address" "list" "character")}, {in: ("address" "list" "character")}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for break-unless {at-head?: "boolean"}
9993 transform: - compute address offsets for return {next-node: ("address" "list" "character"), "same-as-ingredient": "1"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {prev-node: ("address" "list" "character")} <- copy {in: ("address" "list" "character")}
9993 transform: - compute address offsets for {curr: ("address" "list" "character")} <- rest_3 {prev-node: ("address" "list" "character")}
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for {
9993 transform: - compute address offsets for break-if {curr: ("address" "list" "character")}
9993 transform: - compute address offsets for return {in: ("address" "list" "character"), "same-as-ingredient": "1"}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {found?: "boolean"} <- equal {curr: ("address" "list" "character")}, {x: ("address" "list" "character")}
9993 transform: - compute address offsets for break-if {found?: "boolean"}
9993 transform: - compute address offsets for {prev-node: ("address" "list" "character")} <- copy {curr: ("address" "list" "character")}
9993 transform: - compute address offsets for {curr: ("address" "list" "character")} <- rest_3 {curr: ("address" "list" "character")}
9993 transform: - compute address offsets for }
9993 transform: - compute address offsets for {prev-node: ("address" "list" "character"), "lookup": ()} <- put {prev-node: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "list" "character")}
9993 transform: - compute address offsets for reply {in: ("address" "list" "character"), "same-as-ingredient": "1"}
9991 transform: --- compute instruction operations for recipe remove_4
9991 transform: --- transform braces for recipe remove_4
9993 transform: remove_4: push (open, 3)
9993 transform: push (close, 6)
9993 transform: remove_4: push (open, 10)
9993 transform: push (close, 13)
9993 transform: remove_4: push (open, 16)
9993 transform: remove_4: push (open, 17)
9993 transform: push (close, 20)
9993 transform: push (close, 25)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: jump-if x, 1:offset
9992 transform:  ...
9992 transform: rest ...
9992 transform: put ...
9992 transform: equal ...
9992 transform: jump-unless at-head?, 1:offset
9992 transform:  ...
9992 transform: copy ...
9992 transform: rest ...
9992 transform: jump-if curr, 1:offset
9992 transform:  ...
9992 transform: equal ...
9992 transform: jump-if found?, 2:offset
9992 transform: copy ...
9992 transform: rest ...
9992 transform: put ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe remove_4
9991 transform: --- perform checks for recipe remove_4
9991 transform: --- type-check 'call' instructions inside recipe remove_4
9991 transform: --- type-check calls inside recipe remove_4
9991 transform: --- convert 'new' to 'allocate' for recipe remove_4
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe remove_4
9991 transform: --- type-check merge instructions in recipe remove_4
9991 transform: --- check that recipe remove_4 sets default-space
9991 transform: --- checking reply instructions against header for remove_4
9992 transform: new specialization: remove_4
9992 transform: instruction {10: "boolean", "raw": ()} <- equal {list2: ()}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9993 transform: match failed: ingredient 0
9992 transform: instruction {11: "character", "raw": ()} <- first {list2: ()}
9992 transform: checking variant (strict) 0: recipe first {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {in: ("address" "duplex-list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {in: ("address" "list" "address" "operation")} -> {result: ("address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe first {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe first_2 {in: ("address" "duplex-list" "_elem")} -> {result: "_elem"}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 2: recipe first_3 {in: ("address" "list" "address" "operation")} -> {result: ("address" "operation")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 223 first
9993 transform: switching first to specialized recipe first_4 {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: compute type names: first_4
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform: type of 'in' is ("address" "list" "_elem")
9994 transform:     checking {result: "_elem"}: "_elem"
9993 transform: type of 'result' is "_elem"
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking 
9994 transform:     checking {in: ("address" "list" "_elem")}: ("address" "list" "_elem")
9993 transform:   instruction: {result: ()} <- get {in: (), "lookup": ()}, {value: "offset"}
9994 transform:     checking {in: (), "lookup": ()}: ()
9994 transform:     deducing type to ("address" "list" "_elem")
9994 transform:     checking {value: "offset"}: "offset"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to "_elem"
9993 transform: adding mapping from _elem to character
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{in: ("address" "list" "_elem")} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "character"
9993 transform: replacing in instruction '{result: "_elem"} <- get {in: ("address" "list" "_elem"), "lookup": ()}, {value: "offset"}'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform: replacing in ingredient value:offset
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9992 transform: transforming new specialization: first_4
9991 transform: --- rewrite literal strings in recipe first_4
9991 transform: --- rewrite 'stash' instructions in recipe first_4
9991 transform: --- deduce types for recipe first_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "character")
9992 transform: result => "character"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: {result: "character"} <- get {in: ("address" "list" "character"), "lookup": ()}, {value: "offset"}
9991 transform: --- checking reply instructions against header for first_4
9991 transform: --- fill in reply ingredients from header for recipe first_4
9991 transform: --- deduce types for recipe first_4
9992 transform: default-space => ("address" "array" "location")
9992 transform: in => ("address" "list" "character")
9992 transform: result => "character"
9991 transform: --- deduce types from header for first_4
9993 transform: type of in is ("address" "list" "character")
9993 transform: type of result is "character"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform:   product: {in: ("address" "list" "character")}
9992 transform: instruction: {result: "character"} <- get {in: ("address" "list" "character"), "lookup": ()}, {value: "offset"}
9993 transform:   product: {result: "character"}
9992 transform: instruction: reply {result: "character"}
9991 transform: --- check for invalid types in recipe first_4
9991 transform: --- collect surrounding spaces for recipe first_4
9991 transform: --- transform names for recipe first_4
9993 name: assign in 1
9993 name: element value of type list is at offset 0
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe first_4
9992 transform: --- compute address offsets for first_4
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {result: "character"} <- get {in: ("address" "list" "character"), "lookup": ()}, {value: "offset"}
9993 transform: - compute address offsets for reply {result: "character"}
9991 transform: --- compute instruction operations for recipe first_4
9991 transform: --- transform braces for recipe first_4
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe first_4
9991 transform: --- perform checks for recipe first_4
9991 transform: --- type-check 'call' instructions inside recipe first_4
9991 transform: --- type-check calls inside recipe first_4
9991 transform: --- convert 'new' to 'allocate' for recipe first_4
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe first_4
9991 transform: --- type-check merge instructions in recipe first_4
9991 transform: --- check that recipe first_4 sets default-space
9991 transform: --- checking reply instructions against header for first_4
9992 transform: new specialization: first_4
9992 transform: instruction {list2: ()} <- rest {list2: ()}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe rest_3 {in: ("address" "list" "character")} -> {result: ("address" "list" "character"), "contained-in": "in"}
9992 transform: instruction {12: "character", "raw": ()} <- first {list2: ()}
9992 transform: checking variant (strict) 0: recipe first {in: ("address" "list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {in: ("address" "duplex-list" "_elem")} -> {result: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {in: ("address" "list" "address" "operation")} -> {result: ("address" "operation")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe first_4 {in: ("address" "list" "character")} -> {result: "character"}
9992 transform: instruction {20: ("address" "list" "character"), "raw": ()} <- rest {list2: ()}
9992 transform: checking variant (strict) 0: recipe rest {in: ("address" "list" "_elem")} -> {result: ("address" "list" "_elem"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe rest_2 {in: ("address" "list" "address" "operation")} -> {result: ("address" "list" "address" "operation"), "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe rest_3 {in: ("address" "list" "character")} -> {result: ("address" "list" "character"), "contained-in": "in"}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {list: ("address" "list" "character")} <- push_6 {3: "literal"}, {0: "literal"}
9993 transform: - compute address offsets for {list: ("address" "list" "character")} <- push_7 {4: "literal"}, {list: ("address" "list" "character")}
9993 transform: - compute address offsets for {list: ("address" "list" "character")} <- push_8 {5: "literal"}, {list: ("address" "list" "character")}
9993 transform: - compute address offsets for {list2: ("address" "list" "character")} <- rest_3 {list: ("address" "list" "character")}
9993 transform: - compute address offsets for {list: ("address" "list" "character")} <- remove_4 {list2: ("address" "list" "character")}, {list: ("address" "list" "character")}
9993 transform: - compute address offsets for {10: "boolean", "raw": ()} <- equal {list2: ("address" "list" "character")}, {0: "literal"}
9993 transform: - compute address offsets for {list2: ("address" "list" "character")} <- copy {list: ("address" "list" "character")}
9993 transform: - compute address offsets for {11: "character", "raw": ()} <- first_4 {list2: ("address" "list" "character")}
9993 transform: - compute address offsets for {list2: ("address" "list" "character")} <- rest_3 {list2: ("address" "list" "character")}
9993 transform: - compute address offsets for {12: "character", "raw": ()} <- first_4 {list2: ("address" "list" "character")}
9993 transform: - compute address offsets for {20: ("address" "list" "character"), "raw": ()} <- rest_3 {list2: ("address" "list" "character")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: rest ...
9992 transform: remove ...
9992 transform: equal ...
9992 transform: copy ...
9992 transform: first ...
9992 transform: rest ...
9992 transform: first ...
9992 transform: rest ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 3 in location 1001
 103 run: {list: ("address" "list" "character")} <- push_6 {3: "literal"}, {0: "literal"}
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1005
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 4 in location 1006
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1008
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1009 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1009
 104 run: {result: ("address" "list" "character")} <- new {(list character): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1011
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: location 1010 is 0
9999 mem: incrementing refcount of 1011: 0 -> 1
9999 mem: storing 1011 in location 1010
 104 run: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1010 is 1011
9999 mem: skipping refcount at 1011
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 3 in location 1012
9999 mem: storing 0 in location 1013
 104 run: reply {result: ("address" "list" "character")}
9999 mem: location 1010 is 1011
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1008
9999 mem: clearing in:address:list:_elem
9999 mem: location 1009 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1009
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: (array number)
9999 abandon: saving 1005 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1003
 103 run: {list: ("address" "list" "character")} <- push_7 {4: "literal"}, {list: ("address" "list" "character")}
9999 mem: location 1003 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1005
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1008
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1009 is 0
9999 mem: incrementing refcount of 1011: 1 -> 2
9999 mem: storing 1011 in location 1009
 104 run: {result: ("address" "list" "character")} <- new {(list character): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1014
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: location 1010 is 0
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1010
 104 run: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9999 mem: location 1008 is 4
9999 mem: location 1009 is 1011
9999 mem: location 1010 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1010 is 1014
9999 mem: skipping refcount at 1014
9999 mem: incrementing refcount of 1011: 2 -> 3
9999 mem: storing 4 in location 1015
9999 mem: storing 1011 in location 1016
 104 run: reply {result: ("address" "list" "character")}
9999 mem: location 1010 is 1014
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1008
9999 mem: clearing in:address:list:_elem
9999 mem: location 1009 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 1009
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: (array number)
9999 abandon: saving 1005 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1003
 103 run: {list: ("address" "list" "character")} <- push_8 {5: "literal"}, {list: ("address" "list" "character")}
9999 mem: location 1003 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
9999 mem: new alloc from free list: 1005
 104 run: {x: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1008
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1009 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1009
 104 run: {result: ("address" "list" "character")} <- new {(list character): "type"}
9999 mem: allocating size 3
9999 mem: new alloc: 1017
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: location 1010 is 0
9999 mem: incrementing refcount of 1017: 0 -> 1
9999 mem: storing 1017 in location 1010
 104 run: {result: ("address" "list" "character"), "lookup": ()} <- merge {x: "character"}, {in: ("address" "list" "character")}
9999 mem: location 1008 is 5
9999 mem: location 1009 is 1014
9999 mem: location 1010 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1010 is 1017
9999 mem: skipping refcount at 1017
9999 mem: incrementing refcount of 1014: 2 -> 3
9999 mem: storing 5 in location 1018
9999 mem: storing 1014 in location 1019
 104 run: reply {result: ("address" "list" "character")}
9999 mem: location 1010 is 1017
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1008
9999 mem: clearing in:address:list:_elem
9999 mem: location 1009 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 3 -> 2
9999 mem: storing 0 in location 1009
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: (array number)
9999 abandon: saving 1005 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 1003
 103 run: {list2: ("address" "list" "character")} <- rest_3 {list: ("address" "list" "character")}
9999 mem: location 1003 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1020
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 3 in location 1021
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1023 is 0
9999 mem: incrementing refcount of 1017: 1 -> 2
9999 mem: storing 1017 in location 1023
 104 run: {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1014
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1019
9998 run: its type is ("address" "list" "character")
9999 mem: location 1019 is 1014
9999 mem: location 1024 is 0
9999 mem: incrementing refcount of 1014: 2 -> 3
9999 mem: storing 1014 in location 1024
 104 run: reply {result: ("address" "list" "character"), "contained-in": "in"}
9999 mem: location 1024 is 1014
9999 mem: clearing in:address:list:_elem
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: decrementing refcount of 1017: 2 -> 1
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1020
9999 abandon: updating refcounts inside 1020: (array number)
9999 abandon: saving 1020 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1004
 103 run: {list: ("address" "list" "character")} <- remove_4 {list2: ("address" "list" "character")}, {list: ("address" "list" "character")}
9999 mem: location 1004 is 1014
9999 mem: location 1003 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1025
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 8 in location 1026
 104 run: {x: ("address" "list" "character"), "contained-in": "in"} <- next-ingredient-without-typechecking 
9999 mem: location 1028 is 0
9999 mem: incrementing refcount of 1014: 3 -> 4
9999 mem: storing 1014 in location 1028
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1029 is 0
9999 mem: incrementing refcount of 1017: 1 -> 2
9999 mem: storing 1017 in location 1029
 104 run: jump-if {x: ("address" "list" "character")}, {: "offset"}
9999 mem: location 1028 is 1014
9998 run: jumping to instruction 6
 104 run: {next-node: ("address" "list" "character")} <- rest_3 {x: ("address" "list" "character")}
9999 mem: location 1028 is 1014
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1020
 105 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1023 is 0
9999 mem: incrementing refcount of 1014: 4 -> 5
9999 mem: storing 1014 in location 1023
 105 run: {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1023 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 4
9999 mem: location 1016 is 1011
9999 mem: location 1023 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1016
9998 run: its type is ("address" "list" "character")
9999 mem: location 1016 is 1011
9999 mem: location 1024 is 0
9999 mem: incrementing refcount of 1011: 2 -> 3
9999 mem: storing 1011 in location 1024
 105 run: reply {result: ("address" "list" "character"), "contained-in": "in"}
9999 mem: location 1024 is 1011
9999 mem: clearing in:address:list:_elem
9999 mem: location 1023 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 5 -> 4
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1020
9999 abandon: updating refcounts inside 1020: (array number)
9999 abandon: saving 1020 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1030
 104 run: {x: ("address" "list" "character"), "lookup": ()} <- put {x: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {0: "literal"}
9999 mem: location 1028 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1015 is 4
9999 mem: location 1016 is 1011
9999 mem: location 1028 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy to is 1016
9999 mem: location 1016 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 1016
 104 run: {at-head?: "boolean"} <- equal {x: ("address" "list" "character")}, {in: ("address" "list" "character")}
9999 mem: location 1028 is 1014
9999 mem: location 1029 is 1017
9999 mem: storing 0 in location 1031
 104 run: jump-unless {at-head?: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 13
 104 run: {prev-node: ("address" "list" "character")} <- copy {in: ("address" "list" "character")}
9999 mem: location 1029 is 1017
9999 mem: location 1032 is 0
9999 mem: incrementing refcount of 1017: 2 -> 3
9999 mem: storing 1017 in location 1032
 104 run: {curr: ("address" "list" "character")} <- rest_3 {prev-node: ("address" "list" "character")}
9999 mem: location 1032 is 1017
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1020
 105 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1023 is 0
9999 mem: incrementing refcount of 1017: 3 -> 4
9999 mem: storing 1017 in location 1023
 105 run: {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1014
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1019
9998 run: its type is ("address" "list" "character")
9999 mem: location 1019 is 1014
9999 mem: location 1024 is 0
9999 mem: incrementing refcount of 1014: 4 -> 5
9999 mem: storing 1014 in location 1024
 105 run: reply {result: ("address" "list" "character"), "contained-in": "in"}
9999 mem: location 1024 is 1014
9999 mem: clearing in:address:list:_elem
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: decrementing refcount of 1017: 4 -> 3
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1020
9999 abandon: updating refcounts inside 1020: (array number)
9999 abandon: saving 1020 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1033
 104 run: jump-if {curr: ("address" "list" "character")}, {: "offset"}
9999 mem: location 1033 is 1014
9998 run: jumping to instruction 20
 104 run: {found?: "boolean"} <- equal {curr: ("address" "list" "character")}, {x: ("address" "list" "character")}
9999 mem: location 1033 is 1014
9999 mem: location 1028 is 1014
9999 mem: storing 1 in location 1034
 104 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 1
9998 run: jumping to instruction 25
 104 run: {prev-node: ("address" "list" "character"), "lookup": ()} <- put {prev-node: ("address" "list" "character"), "lookup": ()}, {next: "offset"}, {next-node: ("address" "list" "character")}
9999 mem: location 1032 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1014
9999 mem: location 1030 is 1011
9999 mem: location 1032 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy to is 1019
9999 mem: location 1019 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 5 -> 4
9999 mem: incrementing refcount of 1011: 2 -> 3
9999 mem: storing 1011 in location 1019
 104 run: reply {in: ("address" "list" "character"), "same-as-ingredient": "1"}
9999 mem: location 1029 is 1017
9999 mem: clearing x:address:list:_elem/contained-in:in
9999 mem: location 1028 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 4 -> 3
9999 mem: storing 0 in location 1028
9999 mem: clearing next-node:address:list:_elem
9999 mem: location 1030 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 1030
9999 mem: clearing at-head?:boolean
9999 mem: storing 0 in location 1031
9999 mem: clearing prev-node:address:list:_elem
9999 mem: location 1032 is 1017
9999 mem: skipping refcount at 1017
9999 mem: decrementing refcount of 1017: 3 -> 2
9999 mem: storing 0 in location 1032
9999 mem: clearing curr:address:list:_elem
9999 mem: location 1033 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 3 -> 2
9999 mem: storing 0 in location 1033
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing prev-node
9999 mem: location 1032 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1032
9999 mem: clearing curr
9999 mem: location 1033 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1033
9999 mem: automatically abandoning 1025
9999 abandon: updating refcounts inside 1025: (array number)
9999 abandon: saving 1025 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 1003
 103 run: {10: "boolean", "raw": ()} <- equal {list2: ("address" "list" "character")}, {0: "literal"}
9999 mem: location 1004 is 1014
9999 mem: storing 0 in location 10
 103 run: {list2: ("address" "list" "character")} <- copy {list: ("address" "list" "character")}
9999 mem: location 1003 is 1017
9999 mem: location 1004 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: incrementing refcount of 1017: 2 -> 3
9999 mem: storing 1017 in location 1004
 103 run: {11: "character", "raw": ()} <- first_4 {list2: ("address" "list" "character")}
9999 mem: location 1004 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1020
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1023 is 0
9999 mem: incrementing refcount of 1017: 3 -> 4
9999 mem: storing 1017 in location 1023
 104 run: {result: "character"} <- get {in: ("address" "list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1011
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9998 run: its type is "character"
9999 mem: location 1018 is 5
9999 mem: storing 5 in location 1024
 104 run: reply {result: "character"}
9999 mem: location 1024 is 5
9999 mem: clearing in:address:list:_elem
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: decrementing refcount of 1017: 4 -> 3
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1020
9999 abandon: updating refcounts inside 1020: (array number)
9999 abandon: saving 1020 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 11
 103 run: {list2: ("address" "list" "character")} <- rest_3 {list2: ("address" "list" "character")}
9999 mem: location 1004 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1020
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1023 is 0
9999 mem: incrementing refcount of 1017: 3 -> 4
9999 mem: storing 1017 in location 1023
 104 run: {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1011
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1019
9998 run: its type is ("address" "list" "character")
9999 mem: location 1019 is 1011
9999 mem: location 1024 is 0
9999 mem: incrementing refcount of 1011: 2 -> 3
9999 mem: storing 1011 in location 1024
 104 run: reply {result: ("address" "list" "character"), "contained-in": "in"}
9999 mem: location 1024 is 1011
9999 mem: clearing in:address:list:_elem
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 mem: decrementing refcount of 1017: 4 -> 3
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1020
9999 abandon: updating refcounts inside 1020: (array number)
9999 abandon: saving 1020 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1004
 103 run: {12: "character", "raw": ()} <- first_4 {list2: ("address" "list" "character")}
9999 mem: location 1004 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1020
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1023 is 0
9999 mem: incrementing refcount of 1011: 3 -> 4
9999 mem: storing 1011 in location 1023
 104 run: {result: "character"} <- get {in: ("address" "list" "character"), "lookup": ()}, {value: "offset"}
9999 mem: location 1023 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 3
9999 mem: location 1013 is 0
9999 mem: location 1023 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is "character"
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1024
 104 run: reply {result: "character"}
9999 mem: location 1024 is 3
9999 mem: clearing in:address:list:_elem
9999 mem: location 1023 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1020
9999 abandon: updating refcounts inside 1020: (array number)
9999 abandon: saving 1020 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 12
 103 run: {20: ("address" "list" "character"), "raw": ()} <- rest_3 {list2: ("address" "list" "character")}
9999 mem: location 1004 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1020
 104 run: {in: ("address" "list" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1023 is 0
9999 mem: incrementing refcount of 1011: 3 -> 4
9999 mem: storing 1011 in location 1023
 104 run: {result: ("address" "list" "character")} <- get {in: ("address" "list" "character"), "lookup": ()}, {next: "offset"}
9999 mem: location 1023 is 1011
9999 mem: skipping refcount at 1011
9999 mem: location 1012 is 3
9999 mem: location 1013 is 0
9999 mem: location 1023 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1013
9998 run: its type is ("address" "list" "character")
9999 mem: location 1013 is 0
9999 mem: location 1024 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1024
 104 run: reply {result: ("address" "list" "character"), "contained-in": "in"}
9999 mem: location 1024 is 0
9999 mem: clearing in:address:list:_elem
9999 mem: location 1023 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1020
9999 abandon: updating refcounts inside 1020: (array number)
9999 abandon: saving 1020 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 20
 103 run: reply 
9999 mem: clearing list:address:list:character
9999 mem: location 1003 is 1017
9999 mem: skipping refcount at 1017
9999 mem: decrementing refcount of 1017: 3 -> 2
9999 mem: storing 0 in location 1003
9999 mem: clearing list
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: clearing list
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: clearing list2:address:list:character
9999 mem: location 1004 is 1011
9999 mem: skipping refcount at 1011
9999 mem: decrementing refcount of 1011: 3 -> 2
9999 mem: storing 0 in location 1004
9999 mem: clearing list
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: clearing list2
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
9999 mem: clearing list2
9999 mem: location 1004 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1004
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    10 <- 0  # remove returned non-null\n    11 <- 5  # scanning next, skipping deleted element\n    12 <- 3\n    20 <- 0  # no more elements\n  ": "literal-string"}
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 20
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
