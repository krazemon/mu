9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "number"}
9993 parse:   element: {y: "number"}
9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {34: "literal"}
9993 parse:   ingredient: {35: "literal"}
9993 parse:   product: {x: "foo"}
9992 load: after rewriting: {x: "foo"} <- merge {34: "literal"}, {35: "literal"}
9993 parse: instruction: stash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {x: ()}
9992 load: after rewriting: stash {x: ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "foo"
9992 transform: x <= "foo"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "foo"} <- merge {34: "literal"}, {35: "literal"}
9993 transform: {stash_2_0: ("address" "array" "character")} <- to-text-line {x: "foo"}
9993 transform: stash {stash_2_0: ("address" "array" "character")}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "foo"
9992 transform: stash_2_0 => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign x 1
9993 name: assign stash_2_0 3
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction 
9992 transform: checking variant (strict) 0: recipe to-text-line {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text-line_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe to-text-line {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text-line_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 201 to-text-line
9993 transform: switching to-text-line to specialized recipe to-text-line_3 {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: compute type names: to-text-line_3
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {y: ("address" "array" "character")}: ("address" "array" "character")
9993 transform: type of y is ("address" "array" "character")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {y: ()} <- to-text {x: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {y: ()}: ()
9994 transform:     deducing type to ("address" "array" "character")
9993 transform: adding mapping from _elem to foo
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "foo"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient y:address:array:character
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "foo"
9993 transform: replacing in instruction '{y: ("address" "array" "character")} <- to-text {x: "_elem"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "foo"
9993 transform: replacing in ingredient y
9992 transform: transforming new specialization: to-text-line_3
9991 transform: --- rewrite literal strings in recipe to-text-line_3
9991 transform: --- rewrite 'stash' instructions in recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "foo"
9992 transform: y => ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "foo"} <- next-ingredient-without-typechecking 
9993 transform: {y: ("address" "array" "character")} <- to-text {x: "foo"}
9991 transform: --- checking reply instructions against header for to-text-line_3
9991 transform: --- fill in reply ingredients from header for recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "foo"
9992 transform: y => ("address" "array" "character")
9991 transform: --- deduce types from header for to-text-line_3
9993 transform: type of x is "foo"
9993 transform: type of y is ("address" "array" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "foo"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "foo"}
9992 transform: instruction: {y: ("address" "array" "character")} <- to-text {x: "foo"}
9993 transform:   product: {y: ("address" "array" "character")}
9992 transform: instruction: reply {y: ("address" "array" "character")}
9991 transform: --- check for invalid types in recipe to-text-line_3
9991 transform: --- collect surrounding spaces for recipe to-text-line_3
9991 transform: --- transform names for recipe to-text-line_3
9993 name: assign x 1
9993 name: assign y 3
9991 transform: --- resolve ambiguous calls for recipe to-text-line_3
9992 transform: instruction {y: ()} <- to-text {x: ()}
9992 transform: checking variant (strict) 0: recipe to-text_2 {x: ("address" "array" "character")} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text_3 {n: "number"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe to-text_4 {x: "boolean"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe to-text_5 {x: ("address" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe to-text_6 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe to-text_2 {x: ("address" "array" "character")} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text_3 {n: "number"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe to-text_4 {x: "boolean"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe to-text_5 {x: ("address" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe to-text_6 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe to-text_2 {x: ("address" "array" "character")} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 1: recipe to-text_3 {n: "number"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 2: recipe to-text_4 {x: "boolean"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 3: recipe to-text_5 {x: ("address" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 4: recipe to-text_6 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe to-text_2 {x: ("address" "array" "character")} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 1: recipe to-text_3 {n: "number"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 2: recipe to-text_4 {x: "boolean"} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 3: recipe to-text_5 {x: ("address" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 4: recipe to-text_6 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for to-text-line_3
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "foo"} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: - compute address offsets for {y: ("address" "array" "character")} <- to-text {x: "foo"}
9994 transform: compute address offsets for container foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: - compute address offsets for reply {y: ("address" "array" "character")}
9991 transform: --- compute instruction operations for recipe to-text-line_3
9991 transform: --- transform braces for recipe to-text-line_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe to-text-line_3
9991 transform: --- perform checks for recipe to-text-line_3
9991 transform: --- type-check 'call' instructions inside recipe to-text-line_3
9991 transform: --- type-check calls inside recipe to-text-line_3
9991 transform: --- convert 'new' to 'allocate' for recipe to-text-line_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe to-text-line_3
9991 transform: --- type-check merge instructions in recipe to-text-line_3
9991 transform: --- checking reply instructions against header for to-text-line_3
9992 transform: new specialization: to-text-line_3
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "foo"} <- merge {34: "literal"}, {35: "literal"}
9994 transform: compute address offsets for container foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: - compute address offsets for {stash_2_0: ("address" "array" "character")} <- to-text-line_3 {x: "foo"}
9994 transform: compute address offsets for container foo
9993 transform: checking container foo, element 0
9993 transform: checking container foo, element 1
9993 transform: - compute address offsets for stash {stash_2_0: ("address" "array" "character")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: merge ...
9992 transform:  ...
9992 transform: stash ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 2
9999 transform: checking container {x: "foo"} || {x: "number"} vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container {x: "foo"} || {y: "number"} vs ingredient 1
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 4 in location 1001
 102 run: {x: "foo"} <- merge {34: "literal"}, {35: "literal"}
9999 mem: storing 34 in location 1003
9999 mem: storing 35 in location 1004
 102 run: {stash_2_0: ("address" "array" "character")} <- to-text-line_3 {x: "foo"}
9999 mem: location 1003 is 34
9999 mem: location 1004 is 35
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1006
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 4 in location 1007
 103 run: {x: "foo"} <- next-ingredient-without-typechecking 
9999 mem: storing 34 in location 1009
9999 mem: storing 35 in location 1010
 103 run: {y: ("address" "array" "character")} <- to-text {x: "foo"}
9999 mem: location 1009 is 34
9999 mem: location 1010 is 35
9999 mem: location 1011 is 0
9999 mem: incrementing refcount of 1012: 0 -> 1
9999 mem: storing 1012 in location 1011
 103 run: reply {y: ("address" "array" "character")}
9999 mem: location 1011 is 1012
9999 mem: clearing x:_elem
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: automatically abandoning 1006
9999 abandon: updating refcounts inside 1006: (array number)
9999 abandon: saving 1006 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1005
 102 run: stash {stash_2_0: ("address" "array" "character")}
9999 mem: location 1005 is 1012
   2 app: 34 35  
 102 run: reply 
9999 mem: clearing x:foo
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: clearing stash_2_0:address:array:character
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: decrementing refcount of 1012: 1 -> 0
9999 mem: automatically abandoning 1012
9999 abandon: updating refcounts inside 1012: (array character)
9999 abandon: saving 1012 in free-list of size 8
9999 mem: storing 0 in location 1005
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 1
