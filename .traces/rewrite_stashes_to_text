9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {n: "number"}
9992 load: after rewriting: {n: "number"} <- copy {34: "literal"}
9993 parse: instruction: stash
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {n: ()}
9992 load: after rewriting: stash {n: ()}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: n => "number"
9992 transform: n <= "number"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {n: "number"} <- copy {34: "literal"}
9993 transform: {stash_2_0: ("address" "array" "character")} <- to-text-line {n: "number"}
9993 transform: stash {stash_2_0: ("address" "array" "character")}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: n => "number"
9992 transform: stash_2_0 => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign n 1
9993 name: assign stash_2_0 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction 
9992 transform: checking variant (strict) 0: recipe to-text-line {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text-line_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe to-text-line {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe to-text-line_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 201 to-text-line
9993 transform: switching to-text-line to specialized recipe to-text-line_3 {x: "_elem"} -> {y: ("address" "array" "character")}
9993 transform: compute type names: to-text-line_3
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of 'x' is "_elem"
9994 transform:     checking {y: ("address" "array" "character")}: ("address" "array" "character")
9993 transform: type of 'y' is ("address" "array" "character")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of 'location' is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of 'number-of-locals' is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of 'default-space' is ("address" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {y: ()} <- to-text {x: ()}
9994 transform:     checking {x: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {y: ()}: ()
9994 transform:     deducing type to ("address" "array" "character")
9993 transform: adding mapping from _elem to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient y:address:array:character
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform: replacing in instruction '{y: ("address" "array" "character")} <- to-text {x: "_elem"}'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform: replacing in ingredient y
9992 transform: transforming new specialization: to-text-line_3
9991 transform: --- rewrite literal strings in recipe to-text-line_3
9991 transform: --- rewrite 'stash' instructions in recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: y => ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "number"} <- next-ingredient-without-typechecking 
9993 transform: {y: ("address" "array" "character")} <- to-text {x: "number"}
9991 transform: --- checking reply instructions against header for to-text-line_3
9991 transform: --- fill in reply ingredients from header for recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: y => ("address" "array" "character")
9991 transform: --- deduce types from header for to-text-line_3
9993 transform: type of x is "number"
9993 transform: type of y is ("address" "array" "character")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "number"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "number"}
9992 transform: instruction: {y: ("address" "array" "character")} <- to-text {x: "number"}
9993 transform:   product: {y: ("address" "array" "character")}
9992 transform: instruction: reply {y: ("address" "array" "character")}
9991 transform: --- check for invalid types in recipe to-text-line_3
9991 transform: --- collect surrounding spaces for recipe to-text-line_3
9991 transform: --- transform names for recipe to-text-line_3
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe to-text-line_3
9992 transform: instruction {y: ()} <- to-text {x: ()}
9992 transform: checking variant (strict) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe to-text_2 {in: ("address" "list" "_elem")} -> {result: ("address" "array" "character")}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for to-text-line_3
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "number"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for {y: ("address" "array" "character")} <- to-text {x: "number"}
9993 transform: - compute address offsets for reply {y: ("address" "array" "character")}
9991 transform: --- compute instruction operations for recipe to-text-line_3
9991 transform: --- transform braces for recipe to-text-line_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe to-text-line_3
9991 transform: --- perform checks for recipe to-text-line_3
9991 transform: --- type-check 'call' instructions inside recipe to-text-line_3
9991 transform: --- type-check calls inside recipe to-text-line_3
9991 transform: --- convert 'new' to 'allocate' for recipe to-text-line_3
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe to-text-line_3
9991 transform: --- type-check merge instructions in recipe to-text-line_3
9991 transform: --- checking reply instructions against header for to-text-line_3
9992 transform: new specialization: to-text-line_3
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {n: "number"} <- copy {34: "literal"}
9993 transform: - compute address offsets for {stash_2_0: ("address" "array" "character")} <- to-text-line_3 {n: "number"}
9993 transform: - compute address offsets for stash {stash_2_0: ("address" "array" "character")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: copy ...
9992 transform:  ...
9992 transform: stash ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
