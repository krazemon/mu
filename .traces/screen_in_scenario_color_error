9991 parse: --- defining scenario_screen-in-scenario-color
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {5: "literal", "width": ()}
9993 parse:   ingredient: {3: "literal", "height": ()}
9992 load: after rewriting: {screen: ("address" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:character <- copy 97/a\n    screen:address:screen <- print screen:address:screen, 1:character/a, 1/red\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:character <- copy 97/a\n    screen:address:screen <- print screen:address:screen, 1:character/a, 1/red\n  ": "literal-string"}
9993 parse: instruction: screen-should-contain-in-color
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {2: "literal", "green": ()}
9993 parse:   ingredient: {"\n  #  01234\n    .a    .\n    .     .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain-in-color {2: "literal", "green": ()}, {"\n  #  01234\n    .a    .\n    .     .\n    .     .\n  ": "literal-string"}
9999 parse: recipe scenario_screen-in-scenario-color has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_screen-in-scenario-color
9991 transform: --- rewrite 'stash' instructions in recipe scenario_screen-in-scenario-color
9991 transform: --- deduce types for recipe scenario_screen-in-scenario-color
9992 transform: screen => ("address" "screen")
9993 transform: {screen: ("address" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9993 transform: run {"\n    1:character <- copy 97/a\n    screen:address:screen <- print screen:address:screen, 1:character/a, 1/red\n  ": "literal-string"}
9993 transform: screen-should-contain-in-color {2: "literal", "green": ()}, {"\n  #  01234\n    .a    .\n    .     .\n    .     .\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_screen-in-scenario-color
9991 transform: --- deduce types for recipe scenario_screen-in-scenario-color
9992 transform: screen => ("address" "screen")
9991 transform: --- check for invalid types in recipe scenario_screen-in-scenario-color
9991 transform: --- collect surrounding spaces for recipe scenario_screen-in-scenario-color
9991 transform: --- transform names for recipe scenario_screen-in-scenario-color
9991 transform: --- resolve ambiguous calls for recipe scenario_screen-in-scenario-color
9992 transform: instruction {screen: ("address" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9992 transform: checking variant (strict) 0: recipe new-fake-screen {w: "number"} {h: "number"} -> {result: ("address" "screen")}
9991 transform: --- compute instruction operations for recipe scenario_screen-in-scenario-color
9991 transform: --- transform braces for recipe scenario_screen-in-scenario-color
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: screen-should-contain-in-color ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_screen-in-scenario-color
9991 transform: --- type-check 'call' instructions inside recipe scenario_screen-in-scenario-color
9991 transform: --- type-check calls inside recipe scenario_screen-in-scenario-color
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_screen-in-scenario-color
9991 transform: --- check types of reply instructions in recipe scenario_screen-in-scenario-color
9991 transform: --- type-check merge instructions in recipe scenario_screen-in-scenario-color
9991 transform: --- checking reply instructions against header for scenario_screen-in-scenario-color
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_screen-in-scenario-color
 102 run: {screen: ("address" "screen")} <- new-fake-screen {5: "literal", "width": ()}, {3: "literal", "height": ()}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 103 run: {w: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: {h: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1004
 103 run: {result: ("address" "screen")} <- new {screen: "type"}
9999 mem: allocating size 6
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 0 -> 1
 103 run: {bufsize: "number"} <- multiply {w: "number"}, {h: "number"}
9999 mem: location 1003 is 5
9999 mem: location 1004 is 3
9999 mem: storing 15 in location 1006
 103 run: {data: ("address" "array" "screen-cell")} <- new {screen-cell: "type"}, {bufsize: "number"}
9999 mem: location 1006 is 15
9999 mem: array size is 15
9999 mem: allocating size 32
9999 mem: new alloc: 1014
9999 mem: storing 15 in location 1015
9999 mem: storing 1014 in location 1007
9999 mem: incrementing refcount of 1014: 0 -> 1
 103 run: {result: ("address" "screen"), "lookup": ()} <- merge {h: "number", "num-rows": ()}, {w: "number", "num-columns": ()}, {0: "literal", "cursor-row": ()}, {0: "literal", "cursor-column": ()}, {data: ("address" "array" "screen-cell")}
9999 mem: location 1004 is 3
9999 mem: location 1003 is 5
9999 mem: location 1007 is 1014
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 mem: storing 3 in location 1009
9999 mem: storing 5 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 1014 in location 1013
 103 run: {result: ("address" "screen")} <- clear-screen {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1046
9999 mem: storing 8 in location 1047
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1049
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1049 is 1008
9998 run: jump-unless fell through
 104 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1050
9999 mem: incrementing refcount of 1014: 1 -> 2
 104 run: {max: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 15 in location 1051
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1052
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 0
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 0
9998 run: address to copy to is 1016
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1016
9999 mem: storing 7 in location 1017
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 0
9999 mem: storing 1 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 1
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 1
9998 run: address to copy to is 1018
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1018
9999 mem: storing 7 in location 1019
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 1
9999 mem: storing 2 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 2
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 2
9998 run: address to copy to is 1020
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1020
9999 mem: storing 7 in location 1021
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 2
9999 mem: storing 3 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 3
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 3
9998 run: address to copy to is 1022
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1022
9999 mem: storing 7 in location 1023
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 3
9999 mem: storing 4 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 4
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 4
9998 run: address to copy to is 1024
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1024
9999 mem: storing 7 in location 1025
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 4
9999 mem: storing 5 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 5
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 5
9998 run: address to copy to is 1026
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1026
9999 mem: storing 7 in location 1027
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 5
9999 mem: storing 6 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 6
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 6
9998 run: address to copy to is 1028
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1028
9999 mem: storing 7 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 6
9999 mem: storing 7 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 7
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 7
9998 run: address to copy to is 1030
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1030
9999 mem: storing 7 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 7
9999 mem: storing 8 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 8
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 8
9998 run: address to copy to is 1032
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1032
9999 mem: storing 7 in location 1033
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 8
9999 mem: storing 9 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 9
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 9
9998 run: address to copy to is 1034
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1034
9999 mem: storing 7 in location 1035
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 9
9999 mem: storing 10 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 10
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 10
9998 run: address to copy to is 1036
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1036
9999 mem: storing 7 in location 1037
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 10
9999 mem: storing 11 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 11
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 11
9998 run: address to copy to is 1038
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1038
9999 mem: storing 7 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 11
9999 mem: storing 12 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 12
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 12
9998 run: address to copy to is 1040
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1040
9999 mem: storing 7 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 12
9999 mem: storing 13 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 13
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 13
9998 run: address to copy to is 1042
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1042
9999 mem: storing 7 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 13
9999 mem: storing 14 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 14
9999 mem: location 1051 is 15
9999 mem: storing 0 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 0
9998 run: jump-if fell through
 104 run: {curr: "screen-cell"} <- merge {0: "literal", "empty": ()}, {7: "literal", "white": ()}
9999 mem: storing 0 in location 1054
9999 mem: storing 7 in location 1055
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {i: "number"}, {curr: "screen-cell"}
9999 mem: location 1050 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1052 is 14
9998 run: address to copy to is 1044
9999 mem: location 1054 is 0
9999 mem: location 1055 is 7
9999 mem: storing 0 in location 1044
9999 mem: storing 7 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1052 is 14
9999 mem: storing 15 in location 1052
 104 run: jump {: "offset"}
9998 run: jumping to instruction 8
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {max: "number"}
9999 mem: location 1052 is 15
9999 mem: location 1051 is 15
9999 mem: storing 1 in location 1053
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1053 is 1
9998 run: jumping to instruction 14
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}, {0: "literal"}
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1011
9999 mem: storing 0 in location 1011
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {0: "literal"}
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1049 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 0 in location 1012
 104 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1049 is 1008
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 2 -> 1
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: reply {result: ("address" "screen")}
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 900
9999 mem: incrementing refcount of 1008: 2 -> 3
 102 run: run {"\n    1:character <- copy 97/a\n    screen:address:screen <- print screen:address:screen, 1:character/a, 1/red\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {97: "literal", "a": ()}
9993 parse:   product: {1: "character"}
9992 load: after rewriting: {1: "character"} <- copy {97: "literal", "a": ()}
9993 parse: instruction: print
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {screen: ("address" "screen")}
9993 parse:   ingredient: {1: "character", "a": ()}
9993 parse:   ingredient: {1: "literal", "red": ()}
9993 parse:   product: {screen: ("address" "screen")}
9992 load: after rewriting: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {1: "character", "a": ()}, {1: "literal", "red": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => ("address" "screen")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {1: "character", "a": ()}, {1: "literal", "red": ()}
9992 transform: checking variant (strict) 0: recipe print {screen: ("address" "screen")} {c: "character"} -> {screen: ("address" "screen")}
9992 transform: checking variant (strict) 1: recipe print_2 {screen: ("address" "screen")} {s: ("address" "array" "character")} -> {screen: ("address" "screen")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 2: recipe print_3 {screen: ("address" "screen")} {n: "number"} -> {screen: ("address" "screen")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 3: recipe print_4 {screen: ("address" "screen")} {n: ("address" "_elem")} -> {screen: ("address" "screen")}
9993 transform: strict match failed: ingredient 1
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: copy ...
9992 transform: print ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: "character"} <- copy {97: "literal", "a": ()}
9999 mem: storing 97 in location 1
 103 run: {screen: ("address" "screen")} <- print {screen: ("address" "screen")}, {1: "character", "a": ()}, {1: "literal", "red": ()}
9999 mem: location 900 is 1008
9999 mem: location 1 is 97
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 24
9999 mem: allocating size 26
9999 mem: new alloc: 1056
9999 mem: storing 24 in location 1057
 104 run: {screen: ("address" "screen")} <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 3 -> 4
 104 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1060
 104 run: {color: "number"}, {color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 1 in location 1061
9999 mem: storing 1 in location 1062
 104 run: jump-if {color-found?: "boolean"}, {: "offset"}
9999 mem: location 1062 is 1
9998 run: jumping to instruction 7
 104 run: {bg-color: "number"}, {bg-color-found?: "boolean"} <- next-ingredient 
9999 mem: storing 0 in location 1063
9999 mem: storing 0 in location 1064
 104 run: jump-if {bg-color-found?: "boolean"}, {: "offset"}
9999 mem: location 1064 is 0
9998 run: jump-if fell through
 104 run: {bg-color: "number"} <- copy {0: "literal", "black": ()}
9999 mem: storing 0 in location 1063
 104 run: trace {90: "literal"}, {"print-character": "literal-string"}, {c: "character"}
9999 mem: location 1060 is 97
  90 print-character: 97 
 104 run: jump-unless {screen: ("address" "screen")}, {: "offset"}
9999 mem: location 1059 is 1008
9998 run: jump-unless fell through
 104 run: {width: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-columns: "offset"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is "number"
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1065
 104 run: {height: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {num-rows: "offset"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is "number"
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1066
 104 run: {row: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-row: "offset"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is "number"
9999 mem: location 1011 is 0
9999 mem: storing 0 in location 1067
 104 run: {legal?: "boolean"} <- greater-or-equal {row: "number"}, {0: "literal"}
9999 mem: location 1067 is 0
9999 mem: storing 1 in location 1068
 104 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1068 is 1
9998 run: jumping to instruction 22
 104 run: {legal?: "boolean"} <- lesser-than {row: "number"}, {height: "number"}
9999 mem: location 1067 is 0
9999 mem: location 1066 is 3
9999 mem: storing 1 in location 1068
 104 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1068 is 1
9998 run: jumping to instruction 25
 104 run: {column: "number"} <- get {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1012
9998 run: its type is "number"
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1069
 104 run: {legal?: "boolean"} <- greater-or-equal {column: "number"}, {0: "literal"}
9999 mem: location 1069 is 0
9999 mem: storing 1 in location 1068
 104 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1068 is 1
9998 run: jumping to instruction 29
 104 run: {legal?: "boolean"} <- lesser-than {column: "number"}, {width: "number"}
9999 mem: location 1069 is 0
9999 mem: location 1065 is 5
9999 mem: storing 1 in location 1068
 104 run: jump-if {legal?: "boolean"}, {1: "offset"}
9999 mem: location 1068 is 1
9998 run: jumping to instruction 32
 104 run: {newline?: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1060 is 97
9999 mem: storing 0 in location 1070
 104 run: jump-unless {newline?: "boolean"}, {: "offset"}
9999 mem: location 1070 is 0
9998 run: jumping to instruction 45
 104 run: {index: "number"} <- multiply {row: "number"}, {width: "number"}
9999 mem: location 1067 is 0
9999 mem: location 1065 is 5
9999 mem: storing 0 in location 1073
 104 run: {index: "number"} <- add {index: "number"}, {column: "number"}
9999 mem: location 1073 is 0
9999 mem: location 1069 is 0
9999 mem: storing 0 in location 1073
 104 run: {buf: ("address" "array" "screen-cell")} <- get {screen: ("address" "screen"), "lookup": ()}, {data: "offset"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1013
9998 run: its type is ("address" "array" "screen-cell")
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1074
9999 mem: incrementing refcount of 1014: 2 -> 3
 104 run: {len: "number"} <- length {buf: ("address" "array" "screen-cell"), "lookup": ()}
9999 mem: location 1074 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 15 in location 1075
 104 run: {backspace?: "boolean"} <- equal {c: "character"}, {8: "literal"}
9999 mem: location 1060 is 97
9999 mem: storing 0 in location 1076
 104 run: jump-unless {backspace?: "boolean"}, {: "offset"}
9999 mem: location 1076 is 0
9998 run: jumping to instruction 63
 104 run: {cursor: "screen-cell"} <- merge {c: "character"}, {color: "number"}
9999 mem: location 1060 is 97
9999 mem: location 1061 is 1
9999 mem: storing 97 in location 1078
9999 mem: storing 1 in location 1079
 104 run: {buf: ("address" "array" "screen-cell"), "lookup": ()} <- put-index {buf: ("address" "array" "screen-cell"), "lookup": ()}, {index: "number"}, {cursor: "screen-cell"}
9999 mem: location 1074 is 1014
9999 mem: skipping refcount at 1014
9999 mem: location 1073 is 0
9998 run: address to copy to is 1016
9999 mem: location 1078 is 97
9999 mem: location 1079 is 1
9999 mem: storing 97 in location 1016
9999 mem: storing 1 in location 1017
 104 run: {right: "number"} <- subtract {width: "number"}, {1: "literal"}
9999 mem: location 1065 is 5
9999 mem: storing 4 in location 1080
 104 run: {at-right?: "boolean"} <- greater-or-equal {column: "number"}, {right: "number"}
9999 mem: location 1069 is 0
9999 mem: location 1080 is 4
9999 mem: storing 0 in location 1081
 104 run: jump-if {at-right?: "boolean"}, {: "offset"}
9999 mem: location 1081 is 0
9998 run: jump-if fell through
 104 run: {column: "number"} <- add {column: "number"}, {1: "literal"}
9999 mem: location 1069 is 0
9999 mem: storing 1 in location 1069
 104 run: {screen: ("address" "screen"), "lookup": ()} <- put {screen: ("address" "screen"), "lookup": ()}, {cursor-column: "offset"}, {column: "number"}
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1069 is 1
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy to is 1012
9999 mem: storing 1 in location 1012
 104 run: return {screen: ("address" "screen"), "same-as-ingredient": "0"}
9999 mem: location 1059 is 1008
9999 abandon: saving in free-list of size 26
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 4 -> 3
9999 mem: storing 1008 in location 900
9999 mem: incrementing refcount of 1008: 3 -> 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain-in-color {2: "literal", "green": ()}, {"\n  #  01234\n    .a    .\n    .     .\n    .     .\n  ": "literal-string"}
   0 error: expected screen location (0, 0) to be in color 2 instead of 1

