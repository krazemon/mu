9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:_elem
9991 parse: --- defining barz
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {_elem: "type"}
9993 parse:   product: {y: ("address" "shared" "number")}
9992 load: after rewriting: {y: ("address" "shared" "number")} <- new {_elem: "type"}
9999 parse: recipe barz has a header
9991 parse: --- defining fooz
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: barz
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9992 load: after rewriting: barz {34: "literal"}
9999 parse: recipe fooz has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe fooz
9991 transform: --- rewrite 'stash' instructions in recipe fooz
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: barz {34: "literal"}
9991 transform: --- fill in reply ingredients from header for recipe fooz
9991 transform: --- deduce types for recipe fooz
9992 transform: default-space => ("address" "shared" "array" "location")
9991 transform: --- check for invalid types in recipe fooz
9991 transform: --- collect surrounding spaces for recipe fooz
9991 transform: --- transform names for recipe fooz
9991 transform: --- resolve ambiguous calls for recipe fooz
9992 transform: instruction barz {34: "literal"}
9992 transform: checking variant (strict) 0: recipe barz {x: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 1000 barz
9993 transform: switching barz to specialized recipe barz_2 {x: "_elem"}
9993 transform: compute type names: barz_2
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9993 transform:   instruction: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "shared" "array" "location")}: ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: {x: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "_elem"}: "_elem"
9993 transform:   instruction: {y: ("address" "shared" "number")} <- new {_elem: "type"}
9994 transform:     checking {_elem: "type"}: "type"
9993 transform: type of _elem is "type"
9994 transform:     checking {y: ("address" "shared" "number")}: ("address" "shared" "number")
9993 transform: type of y is ("address" "shared" "number")
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "literal"
9993 transform: replacing in recipe header products
9993 transform: replacing in instruction '{default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction '{x: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "literal"
9993 transform: replacing in instruction '{y: ("address" "shared" "number")} <- new {_elem: "type"}'
9993 transform: replacing in ingredient _elem:type
9993 transform: replacing in ingredient y:address:shared:number
9993 transform: _elem => "literal"
9992 transform: transforming new specialization: barz_2
9991 transform: --- rewrite literal strings in recipe barz_2
9991 transform: --- rewrite 'stash' instructions in recipe barz_2
9993 transform: {default-space: ("address" "shared" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "number"} <- next-ingredient-without-typechecking 
9993 transform: {y: ("address" "shared" "number")} <- new {number: "type"}
9991 transform: --- fill in reply ingredients from header for recipe barz_2
9991 transform: --- deduce types for recipe barz_2
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => "number"
9992 transform: y => ("address" "shared" "number")
9991 transform: --- check for invalid types in recipe barz_2
9991 transform: --- collect surrounding spaces for recipe barz_2
9991 transform: --- transform names for recipe barz_2
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe barz_2
9991 transform: --- compute instruction operations for recipe barz_2
9991 transform: --- transform braces for recipe barz_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe barz_2
9991 transform: --- perform checks for recipe barz_2
9991 transform: --- type-check 'call' instructions inside recipe barz_2
9991 transform: --- type-check calls inside recipe barz_2
9991 transform: --- convert 'new' to 'allocate' for recipe barz_2
9992 new: size of "location" is 1
9992 new: size of "number" is 1
9991 transform: --- type-check merge instructions in recipe barz_2
9991 transform: --- check types of reply instructions in recipe barz_2
9991 transform: --- checking reply instructions against header for barz_2
9992 transform: new specialization: barz_2
9991 transform: --- compute instruction operations for recipe fooz
9991 transform: --- transform braces for recipe fooz
9992 transform: local-scope ...
9992 transform: barz ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe fooz
9991 transform: --- perform checks for recipe fooz
9991 transform: --- type-check 'call' instructions inside recipe fooz
9991 transform: --- type-check calls inside recipe fooz
9991 transform: --- convert 'new' to 'allocate' for recipe fooz
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe fooz
9991 transform: --- check types of reply instructions in recipe fooz
9991 transform: --- checking reply instructions against header for fooz
9991 transform: --- parsing any uninitialized reagents as integers
9999 parse: container has type ingredients; parsing
9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "_elem"}
9993 parse:   element: {y: "number"}
9990 transform: === transform_all()
9991 transform: --- parsing any uninitialized reagents as integers
