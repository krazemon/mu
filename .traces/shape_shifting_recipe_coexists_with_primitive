9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:address:foo:_elem
9999 load: switching add to add_2
9991 parse: --- defining add_2
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {0: "literal"}
9993 parse:   ingredient: {"should not get here": "literal-string"}
9992 load: after rewriting: assert {0: "literal"}, {"should not get here": "literal-string"}
9999 parse: recipe add_2 has a header
9991 parse: --- defining main
9993 parse: instruction: add
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {0: "literal"}
9993 parse:   ingredient: {0: "literal"}
9992 load: after rewriting: add {0: "literal"}, {0: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9993 transform: add {0: "literal"}, {0: "literal"}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction add {0: "literal"}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe add_2 {a: ("address" "foo" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe add_2 {a: ("address" "foo" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: found variant to specialize: 1000 add_2
9993 transform: switching add to specialized recipe add_3 {a: ("address" "foo" "_elem")}
9993 transform: compute type names: add_3
9994 transform:     checking {a: ("address" "foo" "_elem")}: ("address" "foo" "_elem")
9993 transform: type of 'a' is ("address" "foo" "_elem")
9993 transform:   instruction: assert {0: "literal"}, {"should not get here": "literal-string"}
9994 transform:     checking {0: "literal"}: "literal"
9993 transform: type of '0' is "literal"
9994 transform:     checking {"should not get here": "literal-string"}: "literal-string"
9993 transform: type of 'should not get here' is "literal-string"
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe add_2 {a: ("address" "foo" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: checking variant 0: recipe add_2 {a: ("address" "foo" "_elem")}
9993 transform: match failed: ingredient 0
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for add {0: "literal"}, {0: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: add ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: add {0: "literal"}, {0: "literal"}
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
