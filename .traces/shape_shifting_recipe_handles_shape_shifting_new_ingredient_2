9991 parse: --- defining main
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {3: "literal"}
9993 parse:   product: {1: ("address" "foo" "point")}
9992 load: after rewriting: {1: ("address" "foo" "point")} <- bar {3: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "foo" "point"), "lookup": ()}
9993 parse:   product: {11: ("foo" "point")}
9992 load: after rewriting: {11: ("foo" "point")} <- copy {1: ("address" "foo" "point"), "lookup": ()}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:number
9999 parse: header product: result:address:foo:_t
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {(foo _t): "type"}
9993 parse:   product: {result: ()}
9992 load: after rewriting: {result: ()} <- new {(foo _t): "type"}
9999 parse: recipe bar has a header
9999 parse: container has type ingredients; parsing
9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element: {x: "_t"}
9993 parse:   element: {y: "number"}
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {1: ("address" "foo" "point")} <- bar {3: "literal"}
9992 transform: checking variant (strict) 0: recipe bar {x: "number"} -> {result: ("address" "foo" "_t")}
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 1000 bar
9993 transform: switching bar to specialized recipe bar_2 {x: "number"} -> {result: ("address" "foo" "_t")}
9993 transform: compute type names: bar_2
9994 transform:     checking {x: "number"}: "number"
9993 transform: type of x is "number"
9994 transform:     checking {result: ("address" "foo" "_t")}: ("address" "foo" "_t")
9993 transform: type of result is ("address" "foo" "_t")
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {x: "number"} <- next-ingredient-without-typechecking 
9994 transform:     checking {x: "number"}: "number"
9993 transform:   instruction: {result: ()} <- new {(foo _t): "type"}
9994 transform:     checking {(foo _t): "type"}: "type"
9993 transform: type of (foo _t) is "type"
9994 transform:     checking {result: ()}: ()
9994 transform:     deducing type to ("address" "foo" "_t")
9993 transform: adding mapping from _t to point
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:foo:_t
9993 transform: _t => "point"
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{x: "number"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:number
9993 transform: replacing in instruction '{result: ("address" "foo" "_t")} <- new {(foo _t): "type"}'
9993 transform: replacing in ingredient {(foo _t) : type}
9993 transform: replacing in ingredient result
9993 transform: _t => "point"
9993 transform: _t => "point"
9992 transform: transforming new specialization: bar_2
9991 transform: --- rewrite literal strings in recipe bar_2
9991 transform: --- rewrite 'stash' instructions in recipe bar_2
9991 transform: --- deduce types for recipe bar_2
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: result => ("address" "foo" "point")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "number"} <- next-ingredient-without-typechecking 
9993 transform: {result: ("address" "foo" "point")} <- new {(foo point): "type"}
9991 transform: --- checking reply instructions against header for bar_2
9991 transform: --- fill in reply ingredients from header for recipe bar_2
9991 transform: --- deduce types for recipe bar_2
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "number"
9992 transform: result => ("address" "foo" "point")
9991 transform: --- deduce types from header for bar_2
9993 transform: type of x is "number"
9993 transform: type of result is ("address" "foo" "point")
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "number"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "number"}
9992 transform: instruction: {result: ("address" "foo" "point")} <- new {(foo point): "type"}
9993 transform:   product: {result: ("address" "foo" "point")}
9992 transform: instruction: reply {result: ("address" "foo" "point")}
9991 transform: --- check for invalid types in recipe bar_2
9991 transform: --- collect surrounding spaces for recipe bar_2
9991 transform: --- transform names for recipe bar_2
9993 name: assign x 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe bar_2
9991 transform: --- compute instruction operations for recipe bar_2
9991 transform: --- transform braces for recipe bar_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform:  ...
9991 transform: --- perform checks for recipe bar_2
9991 transform: --- type-check 'call' instructions inside recipe bar_2
9991 transform: --- type-check calls inside recipe bar_2
9991 transform: --- convert 'new' to 'allocate' for recipe bar_2
9992 new: size of "location" is 1
9992 new: size of ("foo" "point") is 3
9991 transform: --- check types of reply instructions in recipe bar_2
9991 transform: --- type-check merge instructions in recipe bar_2
9991 transform: --- checking reply instructions against header for bar_2
9992 transform: new specialization: bar_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: bar ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: ("address" "foo" "point")} <- bar_2 {3: "literal"}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 3 in location 1001
 103 run: {x: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 103 run: {result: ("address" "foo" "point")} <- new {(foo point): "type"}
9999 mem: allocating size 4
9999 mem: new alloc: 1005
9999 mem: storing 1005 in location 1004
9999 mem: incrementing refcount of 1005: 0 -> 1
 103 run: reply {result: ("address" "foo" "point")}
9999 mem: location 1004 is 1005
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1005
9999 mem: storing 1005 in location 1
9999 mem: incrementing refcount of 1005: 1 -> 2
 102 run: {11: ("foo" "point")} <- copy {1: ("address" "foo" "point"), "lookup": ()}
9999 mem: location 1 is 1005
9999 mem: skipping refcount at 1005
9999 mem: location 1006 is 0
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 11
9999 mem: storing 0 in location 12
9999 mem: storing 0 in location 13
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
