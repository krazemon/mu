9999 parse: container has type ingredients; parsing
9991 parse: --- defining container c
9999 parse: type number: 1000
9993 parse:   element: a: "_a"
9993 parse:   element: b: "_b"
9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: "abc": "literal-string"
9993 parse:   product: s: ("address" "shared" "array" "character")
9992 load: after rewriting: s:address:shared:array:character <- new [abc]
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: s: ()
9993 parse:   ingredient: 34: "literal"
9993 parse:   product: x: ("c" ("address" "shared" "array" "character") "number")
9992 load: after rewriting: {x: (c (address shared array character) number)} <- merge s, 34
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: x: ()
9992 load: after rewriting: foo x
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:c:_bar:_baz
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: s => ("address" "shared" "array" "character")
9992 transform: s <= ("address" "shared" "array" "character")
9992 transform: x => ("c" ("address" "shared" "array" "character") "number")
9992 transform: x <= ("c" ("address" "shared" "array" "character") "number")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: assign s 1
9993 name: assign x 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo x
9992 transform: checking variant (strict) 23: recipe foo x: ("c" "_bar" "_baz")
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 1001 foo
9993 transform: switching foo to specialized recipe foo_2 x: ("c" "_bar" "_baz")
9993 transform: compute type names: foo_2
9994 transform:     checking x: ("c" "_bar" "_baz"): ("c" "_bar" "_baz")
9993 transform: type of x is ("c" "_bar" "_baz")
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking location: "type": "type"
9993 transform: type of location is "type"
9994 transform:     checking number-of-locals: "literal": "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking default-space: ("address" "shared" "array" "location"): ("address" "shared" "array" "location")
9993 transform: type of default-space is ("address" "shared" "array" "location")
9993 transform:   instruction: x:c:_bar:_baz <- next-ingredient-without-typechecking 
9994 transform:     checking x: ("c" "_bar" "_baz"): ("c" "_bar" "_baz")
9993 transform: adding mapping from _bar to (address shared array character)
9993 transform: adding mapping from _baz to number
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:c:_bar:_baz
9993 transform: _bar => ("address" "shared" "array" "character")
9993 transform: _baz => "number"
9993 transform: replacing in recipe header products
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform: replacing in instruction 'x:c:_bar:_baz <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:c:_bar:_baz
9993 transform: _bar => ("address" "shared" "array" "character")
9993 transform: _baz => "number"
9992 transform: transforming new specialization: foo_2
9991 transform: --- rewrite 'stash' instructions in recipe foo_2
9991 transform: --- fill in reply ingredients from header for recipe foo_2
9991 transform: --- deduce types for recipe foo_2
9992 transform: default-space => ("address" "shared" "array" "location")
9992 transform: x => ("c" ("address" "shared" "array" "character") "number")
9991 transform: --- check for invalid types in recipe foo_2
9991 transform: --- collect surrounding spaces for recipe foo_2
9991 transform: --- transform names for recipe foo_2
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe foo_2
9991 transform: --- compute instruction operations for recipe foo_2
9991 transform: --- transform braces for recipe foo_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe foo_2
9991 transform: --- perform checks for recipe foo_2
9991 transform: --- type-check 'call' instructions inside recipe foo_2
9991 transform: --- type-check calls inside recipe foo_2
9991 transform: --- convert 'new' to 'allocate' for recipe foo_2
9992 new: size of "location" is 1
9991 transform: --- type-check merge instructions in recipe foo_2
9991 transform: --- check types of reply instructions in recipe foo_2
9991 transform: --- checking reply instructions against header for foo_2
9992 transform: new specialization: foo_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: merge ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- type-check merge instructions in recipe main
9999 transform: 0 vs 2
9999 transform: checking container x: ("c" ("address" "shared" "array" "character") "number") || a: ("address" "shared" "array" "character") vs ingredient 0
9999 transform: 1 vs 2
9999 transform: checking container x: ("c" ("address" "shared" "array" "character") "number") || b: "number" vs ingredient 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: s:address:shared:array:character <- new [abc]
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: {x: (c (address shared array character) number)} <- merge s, 34
9999 mem: location 1 is 1000
9999 mem: storing 1000 in location 2
9999 mem: storing 34 in location 3
 102 run: foo_2 x
9999 mem: location 2 is 1000
9999 mem: location 3 is 34
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1005
9999 mem: storing 3 in location 1006
 103 run: x:c:_bar:_baz <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1008
9999 mem: storing 34 in location 1009
 103 run: reply 
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
