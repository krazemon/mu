9991 parse: --- defining main
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9993 parse:   product: {1: "number"}
9992 load: after rewriting: {1: "number"} <- foo {34: "literal"}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:point
9999 parse: header product: y:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {35: "literal"}
9992 load: after rewriting: return {35: "literal"}
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "point"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: "point"} <- next-ingredient-without-typechecking 
9993 transform: return {35: "literal"}
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => "point"
9991 transform: --- deduce types from header for foo
9993 transform: type of x is "point"
9993 transform: type of y is "number"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: "point"} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: "point"}
9992 transform: instruction: return {35: "literal"}
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe foo
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {1: "number"} <- foo {34: "literal"}
9992 transform: checking variant (strict) 0: recipe foo {x: "point"} -> {y: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe foo {x: "point"} -> {y: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe foo {x: "point"} -> {y: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe foo {x: "point"} -> {y: "number"}
9993 transform: strict match failed: ingredient 0
   0 error: main: failed to find a matching call for '1:number <- foo 34'

9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: "number"} <- foo {34: "literal"}
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for foo
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: "point"} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for return {35: "literal"}
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: return ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
   0 error: main: ingredient 0 has the wrong type at '1:number <- foo 34'

9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
