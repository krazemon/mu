9991 parse: --- defining main
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {1: "number"}
9992 load: after rewriting: {1: "number"} <- foo {0: "literal"}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:address:number
9999 parse: header product: y:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9992 load: after rewriting: return {34: "literal"}
9999 parse: recipe foo has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:address:_elem
9999 parse: header product: y:number
9999 load: switching foo to foo_2
9991 parse: --- defining foo_2
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: return
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {35: "literal"}
9992 load: after rewriting: return {35: "literal"}
9999 parse: recipe foo_2 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "number")} <- next-ingredient-without-typechecking 
9993 transform: return {34: "literal"}
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "number")
9991 transform: --- deduce types from header for foo
9993 transform: type of x is ("address" "number")
9993 transform: type of y is "number"
9992 transform: instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform:   product: {default-space: ("address" "array" "location")}
9992 transform: instruction: {x: ("address" "number")} <- next-ingredient-without-typechecking 
9993 transform:   product: {x: ("address" "number")}
9992 transform: instruction: return {34: "literal"}
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe foo
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction {1: "number"} <- foo {0: "literal"}
9992 transform: checking variant (strict) 0: recipe foo {x: ("address" "number")} -> {y: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe foo_2 {x: ("address" "_elem")} -> {y: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe foo {x: ("address" "number")} -> {y: "number"}
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe foo_2 {x: ("address" "_elem")} -> {y: "number"}
9993 transform: strict match failed: ingredient 0
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {1: "number"} <- foo {0: "literal"}
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for foo
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "number")} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for return {34: "literal"}
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: return ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- check mutability of ingredients in recipe foo
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {1: "number"} <- foo {0: "literal"}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 2 in location 1001
 103 run: {x: ("address" "number")} <- next-ingredient-without-typechecking 
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
 103 run: return {34: "literal"}
9999 mem: clearing x:address:number
9999 mem: location 1003 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1003
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 4
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 34
9999 mem: storing 34 in location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
