9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:_elem
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: label: <label1>
9992 load: after rewriting: <label1>
9999 parse: recipe foo has a header
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {a: ()}
9993 parse:   product: {b: "_elem"}
9992 load: after rewriting: {b: "_elem"} <- copy {a: ()}
9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {34: "literal"}
9992 load: after rewriting: foo {34: "literal"}
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: foo {34: "literal"}
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo {34: "literal"}
9992 transform: checking variant (strict) 0: recipe foo {a: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 0: recipe foo {a: "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: found variant to specialize: 1000 foo
9993 transform: switching foo to specialized recipe foo_2 {a: "_elem"}
9993 transform: compute type names: foo_2
9994 transform:     checking {a: "_elem"}: "_elem"
9993 transform: type of a is "_elem"
9993 transform:   instruction: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9994 transform:     checking {location: "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {number-of-locals: "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {default-space: ("address" "array" "location")}: ("address" "array" "location")
9993 transform: type of default-space is ("address" "array" "location")
9993 transform:   instruction: {a: "_elem"} <- next-ingredient-without-typechecking 
9994 transform:     checking {a: "_elem"}: "_elem"
9993 transform:   instruction: <label1>
9993 transform:   instruction: {b: "_elem"} <- copy {a: ()}
9994 transform:     checking {a: ()}: ()
9994 transform:     deducing type to "_elem"
9994 transform:     checking {b: "_elem"}: "_elem"
9993 transform: type of b is "_elem"
9993 transform: adding mapping from _elem to ?0
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient a:_elem
9993 transform: _elem => "literal"
9993 transform: replacing in recipe header products
9993 transform: replacing in instruction '{default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}'
9993 transform: replacing in ingredient location:type
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform: replacing in instruction '{a: "_elem"} <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient a:_elem
9993 transform: _elem => "literal"
9993 transform: replacing in instruction '<label1>'
9993 transform: replacing in instruction '{b: "_elem"} <- copy {a: "_elem"}'
9993 transform: replacing in ingredient a
9993 transform: _elem => "literal"
9993 transform: replacing in ingredient b:_elem
9993 transform: _elem => "literal"
9992 transform: transforming new specialization: foo_2
9991 transform: --- rewrite literal strings in recipe foo_2
9991 transform: --- rewrite 'stash' instructions in recipe foo_2
9991 transform: --- deduce types for recipe foo_2
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => "number"
9992 transform: b => "number"
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {a: "number"} <- next-ingredient-without-typechecking 
9993 transform: <label1>
9993 transform: {b: "number"} <- copy {a: "number"}
9991 transform: --- fill in reply ingredients from header for recipe foo_2
9991 transform: --- deduce types for recipe foo_2
9992 transform: default-space => ("address" "array" "location")
9992 transform: a => "number"
9992 transform: b => "number"
9991 transform: --- check for invalid types in recipe foo_2
9991 transform: --- collect surrounding spaces for recipe foo_2
9991 transform: --- transform names for recipe foo_2
9993 name: assign a 1
9993 name: assign b 2
9991 transform: --- resolve ambiguous calls for recipe foo_2
9992 transform: --- compute address offsets for foo_2
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {a: "number"} <- next-ingredient-without-typechecking 
9993 transform: - compute address offsets for <label1>
9993 transform: - compute address offsets for {b: "number"} <- copy {a: "number"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe foo_2
9991 transform: --- transform braces for recipe foo_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe foo_2
9991 transform: --- type-check 'call' instructions inside recipe foo_2
9991 transform: --- type-check calls inside recipe foo_2
9991 transform: --- convert 'new' to 'allocate' for recipe foo_2
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe foo_2
9991 transform: --- type-check merge instructions in recipe foo_2
9991 transform: --- checking reply instructions against header for foo_2
9992 transform: new specialization: foo_2
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for foo_2 {34: "literal"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- checking reply instructions against header for main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 1 in location 1001
 102 run: foo_2 {34: "literal"}
9999 trace: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1003
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 3 in location 1004
 103 run: {a: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 34 in location 1006
 103 run: {b: "number"} <- copy {a: "number"}
9999 mem: location 1006 is 34
9999 mem: storing 34 in location 1007
 103 run: reply 
9999 abandon: updating refcounts inside 1003: (array number)
9999 abandon: saving 1003 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: reply 
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 3
9999 trace: reply: decrementing callstack depth from 1
