9991 parse: --- defining scenario_text-append-1
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:array:character <- new [hello,]\n    y:address:array:character <- new [ world!]\n    z:address:array:character <- append x, y\n    10:array:character/raw <- copy *z\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    x:address:array:character <- new [hello,]\n    y:address:array:character <- new [ world!]\n    z:address:array:character <- append x, y\n    10:array:character/raw <- copy *z\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10:array:character <- [hello, world!]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    10:array:character <- [hello, world!]\n  ": "literal-string"}
9999 parse: recipe scenario_text-append-1 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_text-append-1
9991 transform: --- rewrite 'stash' instructions in recipe scenario_text-append-1
9991 transform: --- deduce types for recipe scenario_text-append-1
9993 transform: run {"\n    local-scope\n    x:address:array:character <- new [hello,]\n    y:address:array:character <- new [ world!]\n    z:address:array:character <- append x, y\n    10:array:character/raw <- copy *z\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    10:array:character <- [hello, world!]\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-append-1
9991 transform: --- deduce types for recipe scenario_text-append-1
9991 transform: --- check for invalid types in recipe scenario_text-append-1
9991 transform: --- collect surrounding spaces for recipe scenario_text-append-1
9991 transform: --- transform names for recipe scenario_text-append-1
9991 transform: --- resolve ambiguous calls for recipe scenario_text-append-1
9992 transform: --- compute address offsets for scenario_text-append-1
9993 transform: - compute address offsets for run {"\n    local-scope\n    x:address:array:character <- new [hello,]\n    y:address:array:character <- new [ world!]\n    z:address:array:character <- append x, y\n    10:array:character/raw <- copy *z\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    10:array:character <- [hello, world!]\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_text-append-1
9991 transform: --- transform braces for recipe scenario_text-append-1
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_text-append-1
9991 transform: --- perform checks for recipe scenario_text-append-1
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-append-1
9991 transform: --- type-check calls inside recipe scenario_text-append-1
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-append-1
9991 transform: --- check types of reply instructions in recipe scenario_text-append-1
9991 transform: --- type-check merge instructions in recipe scenario_text-append-1
9991 transform: --- checking reply instructions against header for scenario_text-append-1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-append-1
 102 run: run {"\n    local-scope\n    x:address:array:character <- new [hello,]\n    y:address:array:character <- new [ world!]\n    z:address:array:character <- append x, y\n    10:array:character/raw <- copy *z\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"hello,": "literal-string"}
9993 parse:   product: {x: ("address" "array" "character")}
9992 load: after rewriting: {x: ("address" "array" "character")} <- new {"hello,": "literal-string"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {" world!": "literal-string"}
9993 parse:   product: {y: ("address" "array" "character")}
9992 load: after rewriting: {y: ("address" "array" "character")} <- new {" world!": "literal-string"}
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {y: ()}
9993 parse:   product: {z: ("address" "array" "character")}
9992 load: after rewriting: {z: ("address" "array" "character")} <- append {x: ()}, {y: ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {z: (), "lookup": ()}
9993 parse:   product: {10: ("array" "character"), "raw": ()}
9992 load: after rewriting: {10: ("array" "character"), "raw": ()} <- copy {z: (), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9992 transform: y <= ("address" "array" "character")
9992 transform: z => ("address" "array" "character")
9992 transform: z <= ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "array" "character")} <- new {"hello,": "literal-string"}
9993 transform: {y: ("address" "array" "character")} <- new {" world!": "literal-string"}
9993 transform: {z: ("address" "array" "character")} <- append {x: ("address" "array" "character")}, {y: ("address" "array" "character")}
9993 transform: {10: ("array" "character"), "raw": ()} <- copy {z: ("address" "array" "character"), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "character")
9992 transform: z => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign x 1
9993 name: assign y 2
9993 name: assign z 3
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {z: ("address" "array" "character")} <- append {x: ()}, {y: ()}
9992 transform: checking variant (strict) 0: recipe append {buf: ("address" "buffer")} {x: "_elem"} -> {buf: ("address" "buffer")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe append_2 {in: ("address" "buffer")} {c: "character"} -> {in: ("address" "buffer")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe append_3 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: ("address" "array" "character")}
9992 transform: checking variant (strict) 3: recipe append_4 {in: ("address" "duplex-list" "_elem")} {new: ("address" "duplex-list" "_elem"), "contained-in": "in"} -> {in: ("address" "duplex-list" "_elem")}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe append_5 {in: ("address" "duplex-list" "character")} {new: ("address" "duplex-list" "character"), "contained-in": "in"} -> {in: ("address" "duplex-list" "character")}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "character")} <- new {"hello,": "literal-string"}
9993 transform: - compute address offsets for {y: ("address" "array" "character")} <- new {" world!": "literal-string"}
9993 transform: - compute address offsets for {z: ("address" "array" "character")} <- append_3 {x: ("address" "array" "character")}, {y: ("address" "array" "character")}
9993 transform: - compute address offsets for {10: ("array" "character"), "raw": ()} <- copy {z: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: new ...
9992 transform: append ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 4 in location 1001
 103 run: {x: ("address" "array" "character")} <- new {"hello,": "literal-string"}
9999 mem: new string alloc: 1006
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1006: 0 -> 1
9999 mem: storing 1006 in location 1003
 103 run: {y: ("address" "array" "character")} <- new {" world!": "literal-string"}
9999 mem: new string alloc: 1014
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1014: 0 -> 1
9999 mem: storing 1014 in location 1004
 103 run: {z: ("address" "array" "character")} <- append_3 {x: ("address" "array" "character")}, {y: ("address" "array" "character")}
9999 mem: location 1003 is 1006
9999 mem: location 1004 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1023
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 12 in location 1024
 104 run: {a: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1026 is 0
9999 mem: incrementing refcount of 1006: 1 -> 2
9999 mem: storing 1006 in location 1026
 104 run: {b: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1027 is 0
9999 mem: incrementing refcount of 1014: 1 -> 2
9999 mem: storing 1014 in location 1027
 104 run: jump-if {a: ("address" "array" "character")}, {: "offset"}
9999 mem: location 1026 is 1006
9998 run: jumping to instruction 6
 104 run: jump-if {b: ("address" "array" "character")}, {: "offset"}
9999 mem: location 1027 is 1014
9998 run: jumping to instruction 10
 104 run: {a-len: "number"} <- length {a: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9999 mem: storing 6 in location 1028
 104 run: {b-len: "number"} <- length {b: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9999 mem: storing 7 in location 1029
 104 run: {result-len: "number"} <- add {a-len: "number"}, {b-len: "number"}
9999 mem: location 1028 is 6
9999 mem: location 1029 is 7
9999 mem: storing 13 in location 1030
 104 run: {result: ("address" "array" "character")} <- new {character: "type"}, {result-len: "number"}
9999 mem: location 1030 is 13
9999 mem: array size is 13
9999 mem: allocating size 15
9999 mem: new alloc: 1037
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 13 in location 1038
9999 mem: location 1031 is 0
9999 mem: incrementing refcount of 1037: 0 -> 1
9999 mem: storing 1037 in location 1031
 104 run: {result-idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1032
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1033
 104 run: {a-done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1033 is 0
9999 mem: location 1028 is 6
9999 mem: storing 0 in location 1034
 104 run: jump-if {a-done?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9998 run: base address is 1007
9999 mem: location 1033 is 0
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 104
9999 mem: storing 104 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 0
9998 run: address to copy to is 1039
9999 mem: location 1035 is 104
9999 mem: storing 104 in location 1039
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 0
9999 mem: storing 1 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 0
9999 mem: storing 1 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 18
 104 run: {a-done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1033 is 1
9999 mem: location 1028 is 6
9999 mem: storing 0 in location 1034
 104 run: jump-if {a-done?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9998 run: base address is 1007
9999 mem: location 1033 is 1
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 101
9999 mem: storing 101 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 1
9998 run: address to copy to is 1040
9999 mem: location 1035 is 101
9999 mem: storing 101 in location 1040
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 1
9999 mem: storing 2 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 1
9999 mem: storing 2 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 18
 104 run: {a-done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1033 is 2
9999 mem: location 1028 is 6
9999 mem: storing 0 in location 1034
 104 run: jump-if {a-done?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9998 run: base address is 1007
9999 mem: location 1033 is 2
9998 run: address to copy is 1010
9998 run: its type is character
9999 mem: location 1010 is 108
9999 mem: storing 108 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 2
9998 run: address to copy to is 1041
9999 mem: location 1035 is 108
9999 mem: storing 108 in location 1041
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 2
9999 mem: storing 3 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 2
9999 mem: storing 3 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 18
 104 run: {a-done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1033 is 3
9999 mem: location 1028 is 6
9999 mem: storing 0 in location 1034
 104 run: jump-if {a-done?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9998 run: base address is 1007
9999 mem: location 1033 is 3
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 108
9999 mem: storing 108 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 3
9998 run: address to copy to is 1042
9999 mem: location 1035 is 108
9999 mem: storing 108 in location 1042
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 3
9999 mem: storing 4 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 3
9999 mem: storing 4 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 18
 104 run: {a-done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1033 is 4
9999 mem: location 1028 is 6
9999 mem: storing 0 in location 1034
 104 run: jump-if {a-done?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9998 run: base address is 1007
9999 mem: location 1033 is 4
9998 run: address to copy is 1012
9998 run: its type is character
9999 mem: location 1012 is 111
9999 mem: storing 111 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 4
9998 run: address to copy to is 1043
9999 mem: location 1035 is 111
9999 mem: storing 111 in location 1043
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 4
9999 mem: storing 5 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 4
9999 mem: storing 5 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 18
 104 run: {a-done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1033 is 5
9999 mem: location 1028 is 6
9999 mem: storing 0 in location 1034
 104 run: jump-if {a-done?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9998 run: base address is 1007
9999 mem: location 1033 is 5
9998 run: address to copy is 1013
9998 run: its type is character
9999 mem: location 1013 is 44
9999 mem: storing 44 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 5
9998 run: address to copy to is 1044
9999 mem: location 1035 is 44
9999 mem: storing 44 in location 1044
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 5
9999 mem: storing 6 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 5
9999 mem: storing 6 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 18
 104 run: {a-done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1033 is 6
9999 mem: location 1028 is 6
9999 mem: storing 1 in location 1034
 104 run: jump-if {a-done?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 1
9998 run: jumping to instruction 25
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1033
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 0
9999 mem: location 1029 is 7
9999 mem: storing 0 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9998 run: base address is 1015
9999 mem: location 1033 is 0
9998 run: address to copy is 1016
9998 run: its type is character
9999 mem: location 1016 is 32
9999 mem: storing 32 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 6
9998 run: address to copy to is 1045
9999 mem: location 1035 is 32
9999 mem: storing 32 in location 1045
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 0
9999 mem: storing 1 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 6
9999 mem: storing 7 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 28
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 1
9999 mem: location 1029 is 7
9999 mem: storing 0 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9998 run: base address is 1015
9999 mem: location 1033 is 1
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 119
9999 mem: storing 119 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 7
9998 run: address to copy to is 1046
9999 mem: location 1035 is 119
9999 mem: storing 119 in location 1046
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 1
9999 mem: storing 2 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 7
9999 mem: storing 8 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 28
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 2
9999 mem: location 1029 is 7
9999 mem: storing 0 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9998 run: base address is 1015
9999 mem: location 1033 is 2
9998 run: address to copy is 1018
9998 run: its type is character
9999 mem: location 1018 is 111
9999 mem: storing 111 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 8
9998 run: address to copy to is 1047
9999 mem: location 1035 is 111
9999 mem: storing 111 in location 1047
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 2
9999 mem: storing 3 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 8
9999 mem: storing 9 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 28
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 3
9999 mem: location 1029 is 7
9999 mem: storing 0 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9998 run: base address is 1015
9999 mem: location 1033 is 3
9998 run: address to copy is 1019
9998 run: its type is character
9999 mem: location 1019 is 114
9999 mem: storing 114 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 9
9998 run: address to copy to is 1048
9999 mem: location 1035 is 114
9999 mem: storing 114 in location 1048
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 3
9999 mem: storing 4 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 9
9999 mem: storing 10 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 28
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 4
9999 mem: location 1029 is 7
9999 mem: storing 0 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9998 run: base address is 1015
9999 mem: location 1033 is 4
9998 run: address to copy is 1020
9998 run: its type is character
9999 mem: location 1020 is 108
9999 mem: storing 108 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 10
9998 run: address to copy to is 1049
9999 mem: location 1035 is 108
9999 mem: storing 108 in location 1049
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 4
9999 mem: storing 5 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 10
9999 mem: storing 11 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 28
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 5
9999 mem: location 1029 is 7
9999 mem: storing 0 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9998 run: base address is 1015
9999 mem: location 1033 is 5
9998 run: address to copy is 1021
9998 run: its type is character
9999 mem: location 1021 is 100
9999 mem: storing 100 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 11
9998 run: address to copy to is 1050
9999 mem: location 1035 is 100
9999 mem: storing 100 in location 1050
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 5
9999 mem: storing 6 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 11
9999 mem: storing 12 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 28
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 6
9999 mem: location 1029 is 7
9999 mem: storing 0 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 104 run: {in: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9998 run: base address is 1015
9999 mem: location 1033 is 6
9998 run: address to copy is 1022
9998 run: its type is character
9999 mem: location 1022 is 33
9999 mem: storing 33 in location 1035
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {result-idx: "number"}, {in: "character"}
9999 mem: location 1031 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1032 is 12
9998 run: address to copy to is 1051
9999 mem: location 1035 is 33
9999 mem: storing 33 in location 1051
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1033 is 6
9999 mem: storing 7 in location 1033
 104 run: {result-idx: "number"} <- add {result-idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 12
9999 mem: storing 13 in location 1032
 104 run: jump {: "offset"}
9998 run: jumping to instruction 28
 104 run: {b-done?: "boolean"} <- greater-or-equal {i: "number"}, {b-len: "number"}
9999 mem: location 1033 is 7
9999 mem: location 1029 is 7
9999 mem: storing 1 in location 1036
 104 run: jump-if {b-done?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 1
9998 run: jumping to instruction 35
 104 run: reply {result: ("address" "array" "character")}
9999 mem: location 1031 is 1037
9999 mem: clearing a:address:array:character
9999 mem: location 1026 is 1006
9999 mem: skipping refcount at 1006
9999 mem: decrementing refcount of 1006: 2 -> 1
9999 mem: storing 0 in location 1026
9999 mem: clearing b:address:array:character
9999 mem: location 1027 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 2 -> 1
9999 mem: storing 0 in location 1027
9999 mem: clearing a-len:number
9999 mem: storing 0 in location 1028
9999 mem: clearing b-len:number
9999 mem: storing 0 in location 1029
9999 mem: clearing result-len:number
9999 mem: storing 0 in location 1030
9999 mem: clearing result-idx:number
9999 mem: storing 0 in location 1032
9999 mem: clearing i:number
9999 mem: storing 0 in location 1033
9999 mem: clearing a-done?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing in:character
9999 mem: storing 0 in location 1035
9999 mem: clearing i
9999 mem: storing 0 in location 1033
9999 mem: clearing result-idx
9999 mem: storing 0 in location 1032
9999 mem: clearing i
9999 mem: storing 0 in location 1033
9999 mem: clearing b-done?:boolean
9999 mem: storing 0 in location 1036
9999 mem: clearing in:character
9999 mem: storing 0 in location 1035
9999 mem: clearing i
9999 mem: storing 0 in location 1033
9999 mem: clearing result-idx
9999 mem: storing 0 in location 1032
9999 mem: automatically abandoning 1023
9999 abandon: updating refcounts inside 1023: (array number)
9999 abandon: saving 1023 in free-list of size 14
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1037
9999 mem: storing 1037 in location 1005
 103 run: {10: ("array" "character"), "raw": ()} <- copy {z: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1005 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1038 is 13
9999 mem: location 1039 is 104
9999 mem: location 1040 is 101
9999 mem: location 1041 is 108
9999 mem: location 1042 is 108
9999 mem: location 1043 is 111
9999 mem: location 1044 is 44
9999 mem: location 1045 is 32
9999 mem: location 1046 is 119
9999 mem: location 1047 is 111
9999 mem: location 1048 is 114
9999 mem: location 1049 is 108
9999 mem: location 1050 is 100
9999 mem: location 1051 is 33
9999 mem: storing 13 in location 10
9999 mem: storing 104 in location 11
9999 mem: storing 101 in location 12
9999 mem: storing 108 in location 13
9999 mem: storing 108 in location 14
9999 mem: storing 111 in location 15
9999 mem: storing 44 in location 16
9999 mem: storing 32 in location 17
9999 mem: storing 119 in location 18
9999 mem: storing 111 in location 19
9999 mem: storing 114 in location 20
9999 mem: storing 108 in location 21
9999 mem: storing 100 in location 22
9999 mem: storing 33 in location 23
 103 run: reply 
9999 mem: clearing x:address:array:character
9999 mem: location 1003 is 1006
9999 mem: skipping refcount at 1006
9999 mem: decrementing refcount of 1006: 1 -> 0
9999 mem: automatically abandoning 1006
9999 abandon: updating refcounts inside 1006: (array character)
9999 abandon: saving 1006 in free-list of size 8
9999 mem: storing 0 in location 1003
9999 mem: clearing y:address:array:character
9999 mem: location 1004 is 1014
9999 mem: skipping refcount at 1014
9999 mem: decrementing refcount of 1014: 1 -> 0
9999 mem: automatically abandoning 1014
9999 abandon: updating refcounts inside 1014: (array character)
9999 abandon: saving 1014 in free-list of size 9
9999 mem: storing 0 in location 1004
9999 mem: clearing z:address:array:character
9999 mem: location 1005 is 1037
9999 mem: skipping refcount at 1037
9999 mem: decrementing refcount of 1037: 1 -> 0
9999 mem: automatically abandoning 1037
9999 abandon: updating refcounts inside 1037: (array character)
9999 abandon: saving 1037 in free-list of size 15
9999 mem: storing 0 in location 1005
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 6
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    10:array:character <- [hello, world!]\n  ": "literal-string"}
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
9999 run: checking location 18
9999 run: checking location 19
9999 run: checking location 20
9999 run: checking location 21
9999 run: checking location 22
9999 run: checking location 23
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
