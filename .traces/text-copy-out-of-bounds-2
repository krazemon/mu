9991 parse: --- defining scenario_text-copy-out-of-bounds-2
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character <- new [abc]\n    2:address:array:character <- copy-range 1:address:array:character, 3, 3\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:array:character <- new [abc]\n    2:address:array:character <- copy-range 1:address:array:character, 3, 3\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3:array:character <- []\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    3:array:character <- []\n  ": "literal-string"}
9999 parse: recipe scenario_text-copy-out-of-bounds-2 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- rewrite 'stash' instructions in recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- deduce types for recipe scenario_text-copy-out-of-bounds-2
9993 transform: run {"\n    1:address:array:character <- new [abc]\n    2:address:array:character <- copy-range 1:address:array:character, 3, 3\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    3:array:character <- []\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- deduce types for recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- check for invalid types in recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- collect surrounding spaces for recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- transform names for recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- resolve ambiguous calls for recipe scenario_text-copy-out-of-bounds-2
9992 transform: --- compute address offsets for scenario_text-copy-out-of-bounds-2
9993 transform: - compute address offsets for run {"\n    1:address:array:character <- new [abc]\n    2:address:array:character <- copy-range 1:address:array:character, 3, 3\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    3:array:character <- []\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- transform braces for recipe scenario_text-copy-out-of-bounds-2
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- type-check calls inside recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- check types of reply instructions in recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- type-check merge instructions in recipe scenario_text-copy-out-of-bounds-2
9991 transform: --- checking reply instructions against header for scenario_text-copy-out-of-bounds-2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-copy-out-of-bounds-2
 102 run: run {"\n    1:address:array:character <- new [abc]\n    2:address:array:character <- copy-range 1:address:array:character, 3, 3\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {1: ("address" "array" "character")}
9992 load: after rewriting: {1: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 parse: instruction: copy-range
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {1: ("address" "array" "character")}
9993 parse:   ingredient: {3: "literal"}
9993 parse:   ingredient: {3: "literal"}
9993 parse:   product: {2: ("address" "array" "character")}
9992 load: after rewriting: {2: ("address" "array" "character")} <- copy-range {1: ("address" "array" "character")}, {3: "literal"}, {3: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {2: ("address" "array" "character"), "lookup": ()}
9993 parse:   product: {3: ("array" "character")}
9992 load: after rewriting: {3: ("array" "character")} <- copy {2: ("address" "array" "character"), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {2: ("address" "array" "character")} <- copy-range {1: ("address" "array" "character")}, {3: "literal"}, {3: "literal"}
9992 transform: checking variant (strict) 0: recipe copy-range {buf: ("address" "array" "character")} {start: "number"} {end: "number"} -> {result: ("address" "array" "character")}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {1: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 transform: - compute address offsets for {2: ("address" "array" "character")} <- copy-range {1: ("address" "array" "character")}, {3: "literal"}, {3: "literal"}
9993 transform: - compute address offsets for {3: ("array" "character")} <- copy {2: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: copy-range ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "array" "character")} <- new {"abc": "literal-string"}
9999 mem: new string alloc: 1000
9999 mem: incrementing refcount of 1000: 0 -> 1
9999 mem: storing 1000 in location 1
 103 run: {2: ("address" "array" "character")} <- copy-range {1: ("address" "array" "character")}, {3: "literal"}, {3: "literal"}
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1005
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 10 in location 1006
 104 run: {buf: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: incrementing refcount of 1000: 1 -> 2
9999 mem: storing 1000 in location 1008
 104 run: {start: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1009
 104 run: {end: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1010
 104 run: {len: "number"} <- length {buf: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1011
 104 run: {end: "number"} <- min {len: "number"}, {end: "number"}
9999 mem: location 1011 is 3
9999 mem: location 1010 is 3
9999 mem: storing 3 in location 1010
 104 run: {len: "number"} <- subtract {end: "number"}, {start: "number"}
9999 mem: location 1010 is 3
9999 mem: location 1009 is 3
9999 mem: storing 0 in location 1011
 104 run: {result: ("address" "array" "character")} <- new {character: "type"}, {len: "number"}
9999 mem: location 1011 is 0
9999 mem: array size is 0
9999 mem: allocating size 2
9999 mem: new alloc: 1017
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1018
9999 mem: incrementing refcount of 1017: 0 -> 1
9999 mem: storing 1017 in location 1012
 104 run: {src-idx: "number"} <- copy {start: "number"}
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1013
 104 run: {dest-idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1014
 104 run: {done?: "boolean"} <- greater-or-equal {src-idx: "number"}, {end: "number"}
9999 mem: location 1013 is 3
9999 mem: location 1010 is 3
9999 mem: storing 1 in location 1015
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1015 is 1
9998 run: jumping to instruction 18
 104 run: reply {result: ("address" "array" "character")}
9999 mem: location 1012 is 1017
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: incrementing refcount of 1017: 1 -> 2
9999 mem: storing 1017 in location 2
 103 run: {3: ("array" "character")} <- copy {2: ("address" "array" "character"), "lookup": ()}
9999 mem: location 2 is 1017
9999 mem: skipping refcount at 1017
9999 mem: location 1018 is 0
9999 mem: storing 0 in location 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    3:array:character <- []\n  ": "literal-string"}
9999 run: checking string length at 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
