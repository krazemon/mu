9991 parse: --- defining scenario_text-equal-identical
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:array:character <- new [abc]\n    y:address:array:character <- new [abc]\n    3:boolean/raw <- equal x, y\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    x:address:array:character <- new [abc]\n    y:address:array:character <- new [abc]\n    3:boolean/raw <- equal x, y\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 1  # abc == abc\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    3 <- 1  # abc == abc\n  ": "literal-string"}
9999 parse: recipe scenario_text-equal-identical has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_text-equal-identical
9991 transform: --- rewrite 'stash' instructions in recipe scenario_text-equal-identical
9991 transform: --- deduce types for recipe scenario_text-equal-identical
9993 transform: run {"\n    local-scope\n    x:address:array:character <- new [abc]\n    y:address:array:character <- new [abc]\n    3:boolean/raw <- equal x, y\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    3 <- 1  # abc == abc\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-equal-identical
9991 transform: --- deduce types for recipe scenario_text-equal-identical
9991 transform: --- check for invalid types in recipe scenario_text-equal-identical
9991 transform: --- collect surrounding spaces for recipe scenario_text-equal-identical
9991 transform: --- transform names for recipe scenario_text-equal-identical
9991 transform: --- resolve ambiguous calls for recipe scenario_text-equal-identical
9992 transform: --- compute address offsets for scenario_text-equal-identical
9993 transform: - compute address offsets for run {"\n    local-scope\n    x:address:array:character <- new [abc]\n    y:address:array:character <- new [abc]\n    3:boolean/raw <- equal x, y\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    3 <- 1  # abc == abc\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_text-equal-identical
9991 transform: --- transform braces for recipe scenario_text-equal-identical
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_text-equal-identical
9991 transform: --- perform checks for recipe scenario_text-equal-identical
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-equal-identical
9991 transform: --- type-check calls inside recipe scenario_text-equal-identical
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-equal-identical
9991 transform: --- check types of reply instructions in recipe scenario_text-equal-identical
9991 transform: --- type-check merge instructions in recipe scenario_text-equal-identical
9991 transform: --- checking reply instructions against header for scenario_text-equal-identical
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-equal-identical
 102 run: run {"\n    local-scope\n    x:address:array:character <- new [abc]\n    y:address:array:character <- new [abc]\n    3:boolean/raw <- equal x, y\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {x: ("address" "array" "character")}
9992 load: after rewriting: {x: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {y: ("address" "array" "character")}
9992 load: after rewriting: {y: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {y: ()}
9993 parse:   product: {3: "boolean", "raw": ()}
9992 load: after rewriting: {3: "boolean", "raw": ()} <- equal {x: ()}, {y: ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9992 transform: y <= ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 transform: {y: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 transform: {3: "boolean", "raw": ()} <- equal {x: ("address" "array" "character")}, {y: ("address" "array" "character")}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {3: "boolean", "raw": ()} <- equal {x: ()}, {y: ()}
9992 transform: checking variant (strict) 0: recipe equal_2 {a: ("address" "array" "character")} {b: ("address" "array" "character")} -> {result: "boolean"}
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 transform: - compute address offsets for {y: ("address" "array" "character")} <- new {"abc": "literal-string"}
9993 transform: - compute address offsets for {3: "boolean", "raw": ()} <- equal_2 {x: ("address" "array" "character")}, {y: ("address" "array" "character")}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: new ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 3 in location 1001
 103 run: {x: ("address" "array" "character")} <- new {"abc": "literal-string"}
9999 mem: new string alloc: 1005
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1005: 0 -> 1
9999 mem: storing 1005 in location 1003
 103 run: {y: ("address" "array" "character")} <- new {"abc": "literal-string"}
9999 mem: new string alloc: 1010
9999 mem: location 1004 is 0
9999 mem: incrementing refcount of 1010: 0 -> 1
9999 mem: storing 1010 in location 1004
 103 run: {3: "boolean", "raw": ()} <- equal_2 {x: ("address" "array" "character")}, {y: ("address" "array" "character")}
9999 mem: location 1003 is 1005
9999 mem: location 1004 is 1010
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1015
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 0 in location 1027
9999 mem: storing 11 in location 1016
 104 run: {a: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1018 is 0
9999 mem: incrementing refcount of 1005: 1 -> 2
9999 mem: storing 1005 in location 1018
 104 run: {b: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1019 is 0
9999 mem: incrementing refcount of 1010: 1 -> 2
9999 mem: storing 1010 in location 1019
 104 run: {a-len: "number"} <- length {a: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1018 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 3 in location 1020
 104 run: {b-len: "number"} <- length {b: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1019 is 1010
9999 mem: skipping refcount at 1010
9999 mem: storing 3 in location 1021
 104 run: trace {99: "literal"}, {"text-equal": "literal-string"}, {"comparing lengths": "literal-string"}
  99 text-equal: comparing lengths
 104 run: {length-equal?: "boolean"} <- equal {a-len: "number"}, {b-len: "number"}
9999 mem: location 1020 is 3
9999 mem: location 1021 is 3
9999 mem: storing 1 in location 1022
 104 run: jump-if {length-equal?: "boolean"}, {: "offset"}
9999 mem: location 1022 is 1
9998 run: jumping to instruction 10
 104 run: trace {99: "literal"}, {"text-equal": "literal-string"}, {"comparing characters": "literal-string"}
  99 text-equal: comparing characters
 104 run: {i: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1023
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1023 is 0
9999 mem: location 1020 is 3
9999 mem: storing 0 in location 1024
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 104 run: {a2: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1018 is 1005
9999 mem: skipping refcount at 1005
9998 run: base address is 1006
9999 mem: location 1023 is 0
9998 run: address to copy is 1007
9998 run: its type is character
9999 mem: location 1007 is 97
9999 mem: storing 97 in location 1025
 104 run: {b2: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1019 is 1010
9999 mem: skipping refcount at 1010
9998 run: base address is 1011
9999 mem: location 1023 is 0
9998 run: address to copy is 1012
9998 run: its type is character
9999 mem: location 1012 is 97
9999 mem: storing 97 in location 1026
 104 run: {chars-match?: "boolean"} <- equal {a2: "character"}, {b2: "character"}
9999 mem: location 1025 is 97
9999 mem: location 1026 is 97
9999 mem: storing 1 in location 1027
 104 run: jump-if {chars-match?: "boolean"}, {: "offset"}
9999 mem: location 1027 is 1
9998 run: jumping to instruction 22
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1023 is 0
9999 mem: storing 1 in location 1023
 104 run: jump {: "offset"}
9998 run: jumping to instruction 14
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1023 is 1
9999 mem: location 1020 is 3
9999 mem: storing 0 in location 1024
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 104 run: {a2: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1018 is 1005
9999 mem: skipping refcount at 1005
9998 run: base address is 1006
9999 mem: location 1023 is 1
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 98
9999 mem: storing 98 in location 1025
 104 run: {b2: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1019 is 1010
9999 mem: skipping refcount at 1010
9998 run: base address is 1011
9999 mem: location 1023 is 1
9998 run: address to copy is 1013
9998 run: its type is character
9999 mem: location 1013 is 98
9999 mem: storing 98 in location 1026
 104 run: {chars-match?: "boolean"} <- equal {a2: "character"}, {b2: "character"}
9999 mem: location 1025 is 98
9999 mem: location 1026 is 98
9999 mem: storing 1 in location 1027
 104 run: jump-if {chars-match?: "boolean"}, {: "offset"}
9999 mem: location 1027 is 1
9998 run: jumping to instruction 22
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1023 is 1
9999 mem: storing 2 in location 1023
 104 run: jump {: "offset"}
9998 run: jumping to instruction 14
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1023 is 2
9999 mem: location 1020 is 3
9999 mem: storing 0 in location 1024
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 104 run: {a2: "character"} <- index {a: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1018 is 1005
9999 mem: skipping refcount at 1005
9998 run: base address is 1006
9999 mem: location 1023 is 2
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 99
9999 mem: storing 99 in location 1025
 104 run: {b2: "character"} <- index {b: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1019 is 1010
9999 mem: skipping refcount at 1010
9998 run: base address is 1011
9999 mem: location 1023 is 2
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 99
9999 mem: storing 99 in location 1026
 104 run: {chars-match?: "boolean"} <- equal {a2: "character"}, {b2: "character"}
9999 mem: location 1025 is 99
9999 mem: location 1026 is 99
9999 mem: storing 1 in location 1027
 104 run: jump-if {chars-match?: "boolean"}, {: "offset"}
9999 mem: location 1027 is 1
9998 run: jumping to instruction 22
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1023 is 2
9999 mem: storing 3 in location 1023
 104 run: jump {: "offset"}
9998 run: jumping to instruction 14
 104 run: {done?: "boolean"} <- greater-or-equal {i: "number"}, {a-len: "number"}
9999 mem: location 1023 is 3
9999 mem: location 1020 is 3
9999 mem: storing 1 in location 1024
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1024 is 1
9998 run: jumping to instruction 25
 104 run: return {1: "literal"}
9999 mem: clearing a:address:array:character
9999 mem: location 1018 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 2 -> 1
9999 mem: storing 0 in location 1018
9999 mem: clearing b:address:array:character
9999 mem: location 1019 is 1010
9999 mem: skipping refcount at 1010
9999 mem: decrementing refcount of 1010: 2 -> 1
9999 mem: storing 0 in location 1019
9999 mem: clearing a-len:number
9999 mem: storing 0 in location 1020
9999 mem: clearing b-len:number
9999 mem: storing 0 in location 1021
9999 mem: clearing length-equal?:boolean
9999 mem: storing 0 in location 1022
9999 mem: clearing i:number
9999 mem: storing 0 in location 1023
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1024
9999 mem: clearing a2:character
9999 mem: storing 0 in location 1025
9999 mem: clearing b2:character
9999 mem: storing 0 in location 1026
9999 mem: clearing chars-match?:boolean
9999 mem: storing 0 in location 1027
9999 mem: clearing i
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1015
9999 abandon: updating refcounts inside 1015: (array number)
9999 abandon: saving 1015 in free-list of size 13
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9999 mem: storing 1 in location 3
 103 run: reply 
9999 mem: clearing x:address:array:character
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 1 -> 0
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: (array character)
9999 abandon: saving 1005 in free-list of size 5
9999 mem: storing 0 in location 1003
9999 mem: clearing y:address:array:character
9999 mem: location 1004 is 1010
9999 mem: skipping refcount at 1010
9999 mem: decrementing refcount of 1010: 1 -> 0
9999 mem: automatically abandoning 1010
9999 abandon: updating refcounts inside 1010: (array character)
9999 abandon: saving 1010 in free-list of size 5
9999 mem: storing 0 in location 1004
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    3 <- 1  # abc == abc\n  ": "literal-string"}
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
