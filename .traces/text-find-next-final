9991 parse: --- defining scenario_text-find-next-final
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:array:character <- new [abc/]\n    10:number/raw <- find-next x, 47/slash, 0/start-index\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    x:address:array:character <- new [abc/]\n    10:number/raw <- find-next x, 47/slash, 0/start-index\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10 <- 3  # suffix match\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    10 <- 3  # suffix match\n  ": "literal-string"}
9999 parse: recipe scenario_text-find-next-final has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_text-find-next-final
9991 transform: --- rewrite 'stash' instructions in recipe scenario_text-find-next-final
9991 transform: --- deduce types for recipe scenario_text-find-next-final
9993 transform: run {"\n    local-scope\n    x:address:array:character <- new [abc/]\n    10:number/raw <- find-next x, 47/slash, 0/start-index\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    10 <- 3  # suffix match\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-find-next-final
9991 transform: --- deduce types for recipe scenario_text-find-next-final
9991 transform: --- check for invalid types in recipe scenario_text-find-next-final
9991 transform: --- collect surrounding spaces for recipe scenario_text-find-next-final
9991 transform: --- transform names for recipe scenario_text-find-next-final
9991 transform: --- resolve ambiguous calls for recipe scenario_text-find-next-final
9992 transform: --- compute address offsets for scenario_text-find-next-final
9993 transform: - compute address offsets for run {"\n    local-scope\n    x:address:array:character <- new [abc/]\n    10:number/raw <- find-next x, 47/slash, 0/start-index\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    10 <- 3  # suffix match\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_text-find-next-final
9991 transform: --- transform braces for recipe scenario_text-find-next-final
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_text-find-next-final
9991 transform: --- perform checks for recipe scenario_text-find-next-final
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-find-next-final
9991 transform: --- type-check calls inside recipe scenario_text-find-next-final
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-find-next-final
9991 transform: --- check types of reply instructions in recipe scenario_text-find-next-final
9991 transform: --- type-check merge instructions in recipe scenario_text-find-next-final
9991 transform: --- checking reply instructions against header for scenario_text-find-next-final
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-find-next-final
 102 run: run {"\n    local-scope\n    x:address:array:character <- new [abc/]\n    10:number/raw <- find-next x, 47/slash, 0/start-index\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc/": "literal-string"}
9993 parse:   product: {x: ("address" "array" "character")}
9992 load: after rewriting: {x: ("address" "array" "character")} <- new {"abc/": "literal-string"}
9993 parse: instruction: find-next
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {47: "literal", "slash": ()}
9993 parse:   ingredient: {0: "literal", "start-index": ()}
9993 parse:   product: {10: "number", "raw": ()}
9992 load: after rewriting: {10: "number", "raw": ()} <- find-next {x: ()}, {47: "literal", "slash": ()}, {0: "literal", "start-index": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "array" "character")} <- new {"abc/": "literal-string"}
9993 transform: {10: "number", "raw": ()} <- find-next {x: ("address" "array" "character")}, {47: "literal", "slash": ()}, {0: "literal", "start-index": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {10: "number", "raw": ()} <- find-next {x: ()}, {47: "literal", "slash": ()}, {0: "literal", "start-index": ()}
9992 transform: checking variant (strict) 0: recipe find-next {text: ("address" "array" "character")} {pattern: "character"} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 1: recipe find-next_2 {text: ("address" "array" "character")} {pattern: ("address" "array" "character")} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe find-next {text: ("address" "array" "character")} {pattern: "character"} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 1: recipe find-next_2 {text: ("address" "array" "character")} {pattern: ("address" "array" "character")} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe find-next {text: ("address" "array" "character")} {pattern: "character"} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-against-boolean) 1: recipe find-next_2 {text: ("address" "array" "character")} {pattern: ("address" "array" "character")} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant 0: recipe find-next {text: ("address" "array" "character")} {pattern: "character"} {idx: "number"} -> {next-index: "number"}
9992 transform: checking variant 1: recipe find-next_2 {text: ("address" "array" "character")} {pattern: ("address" "array" "character")} {idx: "number"} -> {next-index: "number"}
9993 transform: strict match failed: ingredient 1
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "character")} <- new {"abc/": "literal-string"}
9993 transform: - compute address offsets for {10: "number", "raw": ()} <- find-next {x: ("address" "array" "character")}, {47: "literal", "slash": ()}, {0: "literal", "start-index": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: find-next ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 2 in location 1001
 103 run: {x: ("address" "array" "character")} <- new {"abc/": "literal-string"}
9999 mem: new string alloc: 1004
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1004: 0 -> 1
9999 mem: storing 1004 in location 1003
 103 run: {10: "number", "raw": ()} <- find-next {x: ("address" "array" "character")}, {47: "literal", "slash": ()}, {0: "literal", "start-index": ()}
9999 mem: location 1003 is 1004
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1010
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 8 in location 1011
 104 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1013 is 0
9999 mem: incrementing refcount of 1004: 1 -> 2
9999 mem: storing 1004 in location 1013
 104 run: {pattern: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1014
 104 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1015
 104 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1013 is 1004
9999 mem: skipping refcount at 1004
9999 mem: storing 4 in location 1016
 104 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1015 is 0
9999 mem: location 1016 is 4
9999 mem: storing 0 in location 1017
 104 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1013 is 1004
9999 mem: skipping refcount at 1004
9998 run: base address is 1005
9999 mem: location 1015 is 0
9998 run: address to copy is 1006
9998 run: its type is character
9999 mem: location 1006 is 97
9999 mem: storing 97 in location 1018
 104 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1018 is 97
9999 mem: location 1014 is 47
9999 mem: storing 0 in location 1019
 104 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1015 is 0
9999 mem: storing 1 in location 1015
 104 run: jump {: "offset"}
9998 run: jumping to instruction 6
 104 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1015 is 1
9999 mem: location 1016 is 4
9999 mem: storing 0 in location 1017
 104 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1013 is 1004
9999 mem: skipping refcount at 1004
9998 run: base address is 1005
9999 mem: location 1015 is 1
9998 run: address to copy is 1007
9998 run: its type is character
9999 mem: location 1007 is 98
9999 mem: storing 98 in location 1018
 104 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1018 is 98
9999 mem: location 1014 is 47
9999 mem: storing 0 in location 1019
 104 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1015 is 1
9999 mem: storing 2 in location 1015
 104 run: jump {: "offset"}
9998 run: jumping to instruction 6
 104 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1015 is 2
9999 mem: location 1016 is 4
9999 mem: storing 0 in location 1017
 104 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1013 is 1004
9999 mem: skipping refcount at 1004
9998 run: base address is 1005
9999 mem: location 1015 is 2
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 99
9999 mem: storing 99 in location 1018
 104 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1018 is 99
9999 mem: location 1014 is 47
9999 mem: storing 0 in location 1019
 104 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1015 is 2
9999 mem: storing 3 in location 1015
 104 run: jump {: "offset"}
9998 run: jumping to instruction 6
 104 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1015 is 3
9999 mem: location 1016 is 4
9999 mem: storing 0 in location 1017
 104 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1013 is 1004
9999 mem: skipping refcount at 1004
9998 run: base address is 1005
9999 mem: location 1015 is 3
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 47
9999 mem: storing 47 in location 1018
 104 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1018 is 47
9999 mem: location 1014 is 47
9999 mem: storing 1 in location 1019
 104 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 1
9998 run: jumping to instruction 13
 104 run: return {idx: "number"}
9999 mem: location 1015 is 3
9999 mem: clearing text:address:array:character
9999 mem: location 1013 is 1004
9999 mem: skipping refcount at 1004
9999 mem: decrementing refcount of 1004: 2 -> 1
9999 mem: storing 0 in location 1013
9999 mem: clearing pattern:character
9999 mem: storing 0 in location 1014
9999 mem: clearing len:number
9999 mem: storing 0 in location 1016
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 1017
9999 mem: clearing curr:character
9999 mem: storing 0 in location 1018
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1019
9999 mem: automatically abandoning 1010
9999 abandon: updating refcounts inside 1010: (array number)
9999 abandon: saving 1010 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 10
 103 run: reply 
9999 mem: clearing x:address:array:character
9999 mem: location 1003 is 1004
9999 mem: skipping refcount at 1004
9999 mem: decrementing refcount of 1004: 1 -> 0
9999 mem: automatically abandoning 1004
9999 abandon: updating refcounts inside 1004: (array character)
9999 abandon: saving 1004 in free-list of size 6
9999 mem: storing 0 in location 1003
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 4
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    10 <- 3  # suffix match\n  ": "literal-string"}
9999 run: checking location 10
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
