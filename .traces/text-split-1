9991 parse: --- defining scenario_text-split-1
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:array:character <- new [a/b]\n    y:address:array:address:array:character <- split x, 47/slash\n    10:number/raw <- length *y\n    a:address:array:character <- index *y, 0\n    b:address:array:character <- index *y, 1\n    20:array:character/raw <- copy *a\n    30:array:character/raw <- copy *b\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    x:address:array:character <- new [a/b]\n    y:address:array:address:array:character <- split x, 47/slash\n    10:number/raw <- length *y\n    a:address:array:character <- index *y, 0\n    b:address:array:character <- index *y, 1\n    20:array:character/raw <- copy *a\n    30:array:character/raw <- copy *b\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10 <- 2  # length of result\n    20:array:character <- [a]\n    30:array:character <- [b]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    10 <- 2  # length of result\n    20:array:character <- [a]\n    30:array:character <- [b]\n  ": "literal-string"}
9999 parse: recipe scenario_text-split-1 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_text-split-1
9991 transform: --- rewrite 'stash' instructions in recipe scenario_text-split-1
9991 transform: --- deduce types for recipe scenario_text-split-1
9993 transform: run {"\n    local-scope\n    x:address:array:character <- new [a/b]\n    y:address:array:address:array:character <- split x, 47/slash\n    10:number/raw <- length *y\n    a:address:array:character <- index *y, 0\n    b:address:array:character <- index *y, 1\n    20:array:character/raw <- copy *a\n    30:array:character/raw <- copy *b\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    10 <- 2  # length of result\n    20:array:character <- [a]\n    30:array:character <- [b]\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-split-1
9991 transform: --- deduce types for recipe scenario_text-split-1
9991 transform: --- check for invalid types in recipe scenario_text-split-1
9991 transform: --- collect surrounding spaces for recipe scenario_text-split-1
9991 transform: --- transform names for recipe scenario_text-split-1
9991 transform: --- resolve ambiguous calls for recipe scenario_text-split-1
9992 transform: --- compute address offsets for scenario_text-split-1
9993 transform: - compute address offsets for run {"\n    local-scope\n    x:address:array:character <- new [a/b]\n    y:address:array:address:array:character <- split x, 47/slash\n    10:number/raw <- length *y\n    a:address:array:character <- index *y, 0\n    b:address:array:character <- index *y, 1\n    20:array:character/raw <- copy *a\n    30:array:character/raw <- copy *b\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    10 <- 2  # length of result\n    20:array:character <- [a]\n    30:array:character <- [b]\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_text-split-1
9991 transform: --- transform braces for recipe scenario_text-split-1
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_text-split-1
9991 transform: --- perform checks for recipe scenario_text-split-1
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-split-1
9991 transform: --- type-check calls inside recipe scenario_text-split-1
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-split-1
9991 transform: --- check types of reply instructions in recipe scenario_text-split-1
9991 transform: --- type-check merge instructions in recipe scenario_text-split-1
9991 transform: --- checking reply instructions against header for scenario_text-split-1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-split-1
 102 run: run {"\n    local-scope\n    x:address:array:character <- new [a/b]\n    y:address:array:address:array:character <- split x, 47/slash\n    10:number/raw <- length *y\n    a:address:array:character <- index *y, 0\n    b:address:array:character <- index *y, 1\n    20:array:character/raw <- copy *a\n    30:array:character/raw <- copy *b\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"a/b": "literal-string"}
9993 parse:   product: {x: ("address" "array" "character")}
9992 load: after rewriting: {x: ("address" "array" "character")} <- new {"a/b": "literal-string"}
9993 parse: instruction: split
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {47: "literal", "slash": ()}
9993 parse:   product: {y: ("address" "array" "address" "array" "character")}
9992 load: after rewriting: {y: ("address" "array" "address" "array" "character")} <- split {x: ()}, {47: "literal", "slash": ()}
9993 parse: instruction: length
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {y: (), "lookup": ()}
9993 parse:   product: {10: "number", "raw": ()}
9992 load: after rewriting: {10: "number", "raw": ()} <- length {y: (), "lookup": ()}
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {y: (), "lookup": ()}
9993 parse:   ingredient: {0: "literal"}
9993 parse:   product: {a: ("address" "array" "character")}
9992 load: after rewriting: {a: ("address" "array" "character")} <- index {y: (), "lookup": ()}, {0: "literal"}
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {y: (), "lookup": ()}
9993 parse:   ingredient: {1: "literal"}
9993 parse:   product: {b: ("address" "array" "character")}
9992 load: after rewriting: {b: ("address" "array" "character")} <- index {y: (), "lookup": ()}, {1: "literal"}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {a: (), "lookup": ()}
9993 parse:   product: {20: ("array" "character"), "raw": ()}
9992 load: after rewriting: {20: ("array" "character"), "raw": ()} <- copy {a: (), "lookup": ()}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {b: (), "lookup": ()}
9993 parse:   product: {30: ("array" "character"), "raw": ()}
9992 load: after rewriting: {30: ("array" "character"), "raw": ()} <- copy {b: (), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9992 transform: y => ("address" "array" "address" "array" "character")
9992 transform: y <= ("address" "array" "address" "array" "character")
9992 transform: y <= ("address" "array" "address" "array" "character")
9992 transform: a => ("address" "array" "character")
9992 transform: y <= ("address" "array" "address" "array" "character")
9992 transform: b => ("address" "array" "character")
9992 transform: a <= ("address" "array" "character")
9992 transform: b <= ("address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "array" "character")} <- new {"a/b": "literal-string"}
9993 transform: {y: ("address" "array" "address" "array" "character")} <- split {x: ("address" "array" "character")}, {47: "literal", "slash": ()}
9993 transform: {10: "number", "raw": ()} <- length {y: ("address" "array" "address" "array" "character"), "lookup": ()}
9993 transform: {a: ("address" "array" "character")} <- index {y: ("address" "array" "address" "array" "character"), "lookup": ()}, {0: "literal"}
9993 transform: {b: ("address" "array" "character")} <- index {y: ("address" "array" "address" "array" "character"), "lookup": ()}, {1: "literal"}
9993 transform: {20: ("array" "character"), "raw": ()} <- copy {a: ("address" "array" "character"), "lookup": ()}
9993 transform: {30: ("array" "character"), "raw": ()} <- copy {b: ("address" "array" "character"), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "address" "array" "character")
9992 transform: a => ("address" "array" "character")
9992 transform: b => ("address" "array" "character")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign x 1
9993 name: assign y 2
9993 name: assign a 3
9993 name: assign b 4
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {y: ("address" "array" "address" "array" "character")} <- split {x: ()}, {47: "literal", "slash": ()}
9992 transform: checking variant (strict) 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9992 transform: instruction {10: "number", "raw": ()} <- length {y: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {a: ("address" "array" "character")} <- index {y: (), "lookup": ()}, {0: "literal"}
9992 transform: checking variant (strict) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction {b: ("address" "array" "character")} <- index {y: (), "lookup": ()}, {1: "literal"}
9992 transform: checking variant (strict) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe index_2 {table: ("address" "table" "_key" "_value")} {key: "_key"} -> {result: "_value"}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "character")} <- new {"a/b": "literal-string"}
9993 transform: - compute address offsets for {y: ("address" "array" "address" "array" "character")} <- split {x: ("address" "array" "character")}, {47: "literal", "slash": ()}
9993 transform: - compute address offsets for {10: "number", "raw": ()} <- length {y: ("address" "array" "address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for {a: ("address" "array" "character")} <- index {y: ("address" "array" "address" "array" "character"), "lookup": ()}, {0: "literal"}
9993 transform: - compute address offsets for {b: ("address" "array" "character")} <- index {y: ("address" "array" "address" "array" "character"), "lookup": ()}, {1: "literal"}
9993 transform: - compute address offsets for {20: ("array" "character"), "raw": ()} <- copy {a: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for {30: ("array" "character"), "raw": ()} <- copy {b: ("address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: split ...
9992 transform: length ...
9992 transform: index ...
9992 transform: index ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
9999 mem: storing 5 in location 1001
 103 run: {x: ("address" "array" "character")} <- new {"a/b": "literal-string"}
9999 mem: new string alloc: 1007
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1007: 0 -> 1
9999 mem: storing 1007 in location 1003
 103 run: {y: ("address" "array" "address" "array" "character")} <- split {x: ("address" "array" "character")}, {47: "literal", "slash": ()}
9999 mem: location 1003 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 13
9999 mem: allocating size 15
9999 mem: new alloc: 1012
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1024
9999 mem: storing 0 in location 1025
9999 mem: storing 0 in location 1026
9999 mem: storing 13 in location 1013
 104 run: {s: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1015 is 0
9999 mem: incrementing refcount of 1007: 1 -> 2
9999 mem: storing 1007 in location 1015
 104 run: {delim: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1016
 104 run: {len: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1015 is 1007
9999 mem: skipping refcount at 1007
9999 mem: storing 3 in location 1017
 104 run: {empty?: "boolean"} <- equal {len: "number"}, {0: "literal"}
9999 mem: location 1017 is 3
9999 mem: storing 0 in location 1018
 104 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 1018 is 0
9998 run: jumping to instruction 9
 104 run: {count: "number"} <- copy {1: "literal"}
9999 mem: storing 1 in location 1020
 104 run: {idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1021
 104 run: {idx: "number"} <- find-next {s: ("address" "array" "character")}, {delim: "character"}, {idx: "number"}
9999 mem: location 1015 is 1007
9999 mem: location 1016 is 47
9999 mem: location 1021 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1027
9999 mem: storing 0 in location 1027
9999 mem: storing 0 in location 1028
9999 mem: storing 0 in location 1029
9999 mem: storing 0 in location 1030
9999 mem: storing 0 in location 1031
9999 mem: storing 0 in location 1032
9999 mem: storing 0 in location 1033
9999 mem: storing 0 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
9999 mem: storing 8 in location 1028
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1030 is 0
9999 mem: incrementing refcount of 1007: 2 -> 3
9999 mem: storing 1007 in location 1030
 105 run: {pattern: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1031
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1032
 105 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: storing 3 in location 1033
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 0
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1032 is 0
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 97
9999 mem: storing 97 in location 1035
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1035 is 97
9999 mem: location 1031 is 47
9999 mem: storing 0 in location 1036
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 0
9999 mem: storing 1 in location 1032
 105 run: jump {: "offset"}
9998 run: jumping to instruction 6
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 1
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1032 is 1
9998 run: address to copy is 1010
9998 run: its type is character
9999 mem: location 1010 is 47
9999 mem: storing 47 in location 1035
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1035 is 47
9999 mem: location 1031 is 47
9999 mem: storing 1 in location 1036
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 1
9998 run: jumping to instruction 13
 105 run: return {idx: "number"}
9999 mem: location 1032 is 1
9999 mem: clearing text:address:array:character
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 3 -> 2
9999 mem: storing 0 in location 1030
9999 mem: clearing pattern:character
9999 mem: storing 0 in location 1031
9999 mem: clearing len:number
9999 mem: storing 0 in location 1033
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing curr:character
9999 mem: storing 0 in location 1035
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1036
9999 mem: automatically abandoning 1027
9999 abandon: updating refcounts inside 1027: (array number)
9999 abandon: saving 1027 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1021
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1021 is 1
9999 mem: location 1017 is 3
9999 mem: storing 0 in location 1022
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1022 is 0
9998 run: jump-if fell through
 104 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1021 is 1
9999 mem: storing 2 in location 1021
 104 run: {count: "number"} <- add {count: "number"}, {1: "literal"}
9999 mem: location 1020 is 1
9999 mem: storing 2 in location 1020
 104 run: jump {: "offset"}
9998 run: jumping to instruction 13
 104 run: {idx: "number"} <- find-next {s: ("address" "array" "character")}, {delim: "character"}, {idx: "number"}
9999 mem: location 1015 is 1007
9999 mem: location 1016 is 47
9999 mem: location 1021 is 2
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1027
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1030 is 0
9999 mem: incrementing refcount of 1007: 2 -> 3
9999 mem: storing 1007 in location 1030
 105 run: {pattern: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1031
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1032
 105 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: storing 3 in location 1033
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 2
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1032 is 2
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 98
9999 mem: storing 98 in location 1035
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1035 is 98
9999 mem: location 1031 is 47
9999 mem: storing 0 in location 1036
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 2
9999 mem: storing 3 in location 1032
 105 run: jump {: "offset"}
9998 run: jumping to instruction 6
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 3
9999 mem: location 1033 is 3
9999 mem: storing 1 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 1
9998 run: jumping to instruction 13
 105 run: return {idx: "number"}
9999 mem: location 1032 is 3
9999 mem: clearing text:address:array:character
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 3 -> 2
9999 mem: storing 0 in location 1030
9999 mem: clearing pattern:character
9999 mem: storing 0 in location 1031
9999 mem: clearing len:number
9999 mem: storing 0 in location 1033
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing curr:character
9999 mem: storing 0 in location 1035
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1036
9999 mem: automatically abandoning 1027
9999 abandon: updating refcounts inside 1027: (array number)
9999 abandon: saving 1027 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9999 mem: storing 3 in location 1021
 104 run: {done?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1021 is 3
9999 mem: location 1017 is 3
9999 mem: storing 1 in location 1022
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1022 is 1
9998 run: jumping to instruction 19
 104 run: {result: ("address" "array" "address" "array" "character")} <- new {(address array character): "type"}, {count: "number"}
9999 mem: location 1020 is 2
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1037
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
9999 mem: storing 0 in location 1039
9999 mem: storing 0 in location 1040
9999 mem: storing 2 in location 1038
9999 mem: location 1019 is 0
9999 mem: incrementing refcount of 1037: 0 -> 1
9999 mem: storing 1037 in location 1019
 104 run: {curr-result: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1023
 104 run: {start: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1024
 104 run: {done?: "boolean"} <- greater-or-equal {start: "number"}, {len: "number"}
9999 mem: location 1024 is 0
9999 mem: location 1017 is 3
9999 mem: storing 0 in location 1022
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1022 is 0
9998 run: jump-if fell through
 104 run: {end: "number"} <- find-next {s: ("address" "array" "character")}, {delim: "character"}, {start: "number"}
9999 mem: location 1015 is 1007
9999 mem: location 1016 is 47
9999 mem: location 1024 is 0
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1027
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1030 is 0
9999 mem: incrementing refcount of 1007: 2 -> 3
9999 mem: storing 1007 in location 1030
 105 run: {pattern: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1031
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1032
 105 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: storing 3 in location 1033
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 0
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1032 is 0
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 97
9999 mem: storing 97 in location 1035
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1035 is 97
9999 mem: location 1031 is 47
9999 mem: storing 0 in location 1036
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 0
9999 mem: storing 1 in location 1032
 105 run: jump {: "offset"}
9998 run: jumping to instruction 6
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 1
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1032 is 1
9998 run: address to copy is 1010
9998 run: its type is character
9999 mem: location 1010 is 47
9999 mem: storing 47 in location 1035
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1035 is 47
9999 mem: location 1031 is 47
9999 mem: storing 1 in location 1036
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 1
9998 run: jumping to instruction 13
 105 run: return {idx: "number"}
9999 mem: location 1032 is 1
9999 mem: clearing text:address:array:character
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 3 -> 2
9999 mem: storing 0 in location 1030
9999 mem: clearing pattern:character
9999 mem: storing 0 in location 1031
9999 mem: clearing len:number
9999 mem: storing 0 in location 1033
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing curr:character
9999 mem: storing 0 in location 1035
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1036
9999 mem: automatically abandoning 1027
9999 abandon: updating refcounts inside 1027: (array number)
9999 abandon: saving 1027 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1025
 104 run: {dest: ("address" "array" "character")} <- copy-range {s: ("address" "array" "character")}, {start: "number"}, {end: "number"}
9999 mem: location 1015 is 1007
9999 mem: location 1024 is 0
9999 mem: location 1025 is 1
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1041
9999 mem: storing 0 in location 1041
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
9999 mem: storing 0 in location 1046
9999 mem: storing 0 in location 1047
9999 mem: storing 0 in location 1048
9999 mem: storing 0 in location 1049
9999 mem: storing 0 in location 1050
9999 mem: storing 0 in location 1051
9999 mem: storing 0 in location 1052
9999 mem: storing 10 in location 1042
 105 run: {buf: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1044 is 0
9999 mem: incrementing refcount of 1007: 2 -> 3
9999 mem: storing 1007 in location 1044
 105 run: {start: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1045
 105 run: {end: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1046
 105 run: {len: "number"} <- length {buf: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1044 is 1007
9999 mem: skipping refcount at 1007
9999 mem: storing 3 in location 1047
 105 run: {end: "number"} <- min {len: "number"}, {end: "number"}
9999 mem: location 1047 is 3
9999 mem: location 1046 is 1
9999 mem: storing 1 in location 1046
 105 run: {len: "number"} <- subtract {end: "number"}, {start: "number"}
9999 mem: location 1046 is 1
9999 mem: location 1045 is 0
9999 mem: storing 1 in location 1047
 105 run: {result: ("address" "array" "character")} <- new {character: "type"}, {len: "number"}
9999 mem: location 1047 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1053
9999 mem: storing 0 in location 1053
9999 mem: storing 0 in location 1054
9999 mem: storing 0 in location 1055
9999 mem: storing 1 in location 1054
9999 mem: location 1048 is 0
9999 mem: incrementing refcount of 1053: 0 -> 1
9999 mem: storing 1053 in location 1048
 105 run: {src-idx: "number"} <- copy {start: "number"}
9999 mem: location 1045 is 0
9999 mem: storing 0 in location 1049
 105 run: {dest-idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1050
 105 run: {done?: "boolean"} <- greater-or-equal {src-idx: "number"}, {end: "number"}
9999 mem: location 1049 is 0
9999 mem: location 1046 is 1
9999 mem: storing 0 in location 1051
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1051 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {buf: ("address" "array" "character"), "lookup": ()}, {src-idx: "number"}
9999 mem: location 1044 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1049 is 0
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 97
9999 mem: storing 97 in location 1052
 105 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {dest-idx: "number"}, {src: "character"}
9999 mem: location 1048 is 1053
9999 mem: skipping refcount at 1053
9999 mem: location 1050 is 0
9998 run: address to copy to is 1055
9999 mem: location 1052 is 97
9999 mem: storing 97 in location 1055
 105 run: {src-idx: "number"} <- add {src-idx: "number"}, {1: "literal"}
9999 mem: location 1049 is 0
9999 mem: storing 1 in location 1049
 105 run: {dest-idx: "number"} <- add {dest-idx: "number"}, {1: "literal"}
9999 mem: location 1050 is 0
9999 mem: storing 1 in location 1050
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {src-idx: "number"}, {end: "number"}
9999 mem: location 1049 is 1
9999 mem: location 1046 is 1
9999 mem: storing 1 in location 1051
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1051 is 1
9998 run: jumping to instruction 18
 105 run: reply {result: ("address" "array" "character")}
9999 mem: location 1048 is 1053
9999 mem: clearing buf:address:array:character
9999 mem: location 1044 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 3 -> 2
9999 mem: storing 0 in location 1044
9999 mem: clearing start:number
9999 mem: storing 0 in location 1045
9999 mem: clearing end:number
9999 mem: storing 0 in location 1046
9999 mem: clearing len:number
9999 mem: storing 0 in location 1047
9999 mem: clearing end:number
9999 mem: storing 0 in location 1046
9999 mem: clearing len
9999 mem: storing 0 in location 1047
9999 mem: clearing src-idx:number
9999 mem: storing 0 in location 1049
9999 mem: clearing dest-idx:number
9999 mem: storing 0 in location 1050
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1051
9999 mem: clearing src:character
9999 mem: storing 0 in location 1052
9999 mem: clearing src-idx
9999 mem: storing 0 in location 1049
9999 mem: clearing dest-idx
9999 mem: storing 0 in location 1050
9999 mem: automatically abandoning 1041
9999 abandon: updating refcounts inside 1041: (array number)
9999 abandon: saving 1041 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1053
9999 mem: storing 1053 in location 1026
 104 run: {result: ("address" "array" "address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "address" "array" "character"), "lookup": ()}, {curr-result: "number"}, {dest: ("address" "array" "character")}
9999 mem: location 1019 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1023 is 0
9998 run: address to copy to is 1039
9999 mem: location 1026 is 1053
9999 mem: location 1039 is 0
9999 mem: incrementing refcount of 1053: 1 -> 2
9999 mem: storing 1053 in location 1039
 104 run: {start: "number"} <- add {end: "number"}, {1: "literal"}
9999 mem: location 1025 is 1
9999 mem: storing 2 in location 1024
 104 run: {curr-result: "number"} <- add {curr-result: "number"}, {1: "literal"}
9999 mem: location 1023 is 0
9999 mem: storing 1 in location 1023
 104 run: jump {: "offset"}
9998 run: jumping to instruction 24
 104 run: {done?: "boolean"} <- greater-or-equal {start: "number"}, {len: "number"}
9999 mem: location 1024 is 2
9999 mem: location 1017 is 3
9999 mem: storing 0 in location 1022
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1022 is 0
9998 run: jump-if fell through
 104 run: {end: "number"} <- find-next {s: ("address" "array" "character")}, {delim: "character"}, {start: "number"}
9999 mem: location 1015 is 1007
9999 mem: location 1016 is 47
9999 mem: location 1024 is 2
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
9999 mem: new alloc from free list: 1027
 105 run: {text: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1030 is 0
9999 mem: incrementing refcount of 1007: 2 -> 3
9999 mem: storing 1007 in location 1030
 105 run: {pattern: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1031
 105 run: {idx: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1032
 105 run: {len: "number"} <- length {text: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: storing 3 in location 1033
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 2
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 0
9998 run: jump-if fell through
 105 run: {curr: "character"} <- index {text: ("address" "array" "character"), "lookup": ()}, {idx: "number"}
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1032 is 2
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 98
9999 mem: storing 98 in location 1035
 105 run: {found?: "boolean"} <- equal {curr: "character"}, {pattern: "character"}
9999 mem: location 1035 is 98
9999 mem: location 1031 is 47
9999 mem: storing 0 in location 1036
 105 run: jump-if {found?: "boolean"}, {: "offset"}
9999 mem: location 1036 is 0
9998 run: jump-if fell through
 105 run: {idx: "number"} <- add {idx: "number"}, {1: "literal"}
9999 mem: location 1032 is 2
9999 mem: storing 3 in location 1032
 105 run: jump {: "offset"}
9998 run: jumping to instruction 6
 105 run: {eof?: "boolean"} <- greater-or-equal {idx: "number"}, {len: "number"}
9999 mem: location 1032 is 3
9999 mem: location 1033 is 3
9999 mem: storing 1 in location 1034
 105 run: jump-if {eof?: "boolean"}, {: "offset"}
9999 mem: location 1034 is 1
9998 run: jumping to instruction 13
 105 run: return {idx: "number"}
9999 mem: location 1032 is 3
9999 mem: clearing text:address:array:character
9999 mem: location 1030 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 3 -> 2
9999 mem: storing 0 in location 1030
9999 mem: clearing pattern:character
9999 mem: storing 0 in location 1031
9999 mem: clearing len:number
9999 mem: storing 0 in location 1033
9999 mem: clearing eof?:boolean
9999 mem: storing 0 in location 1034
9999 mem: clearing curr:character
9999 mem: storing 0 in location 1035
9999 mem: clearing found?:boolean
9999 mem: storing 0 in location 1036
9999 mem: automatically abandoning 1027
9999 abandon: updating refcounts inside 1027: (array number)
9999 abandon: saving 1027 in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9999 mem: storing 3 in location 1025
 104 run: {dest: ("address" "array" "character")} <- copy-range {s: ("address" "array" "character")}, {start: "number"}, {end: "number"}
9999 mem: location 1015 is 1007
9999 mem: location 1024 is 2
9999 mem: location 1025 is 3
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
9999 mem: new alloc from free list: 1041
 105 run: {buf: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1044 is 0
9999 mem: incrementing refcount of 1007: 2 -> 3
9999 mem: storing 1007 in location 1044
 105 run: {start: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1045
 105 run: {end: "number"} <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1046
 105 run: {len: "number"} <- length {buf: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1044 is 1007
9999 mem: skipping refcount at 1007
9999 mem: storing 3 in location 1047
 105 run: {end: "number"} <- min {len: "number"}, {end: "number"}
9999 mem: location 1047 is 3
9999 mem: location 1046 is 3
9999 mem: storing 3 in location 1046
 105 run: {len: "number"} <- subtract {end: "number"}, {start: "number"}
9999 mem: location 1046 is 3
9999 mem: location 1045 is 2
9999 mem: storing 1 in location 1047
 105 run: {result: ("address" "array" "character")} <- new {character: "type"}, {len: "number"}
9999 mem: location 1047 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1056
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
9999 mem: storing 0 in location 1058
9999 mem: storing 1 in location 1057
9999 mem: location 1048 is 0
9999 mem: incrementing refcount of 1056: 0 -> 1
9999 mem: storing 1056 in location 1048
 105 run: {src-idx: "number"} <- copy {start: "number"}
9999 mem: location 1045 is 2
9999 mem: storing 2 in location 1049
 105 run: {dest-idx: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1050
 105 run: {done?: "boolean"} <- greater-or-equal {src-idx: "number"}, {end: "number"}
9999 mem: location 1049 is 2
9999 mem: location 1046 is 3
9999 mem: storing 0 in location 1051
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1051 is 0
9998 run: jump-if fell through
 105 run: {src: "character"} <- index {buf: ("address" "array" "character"), "lookup": ()}, {src-idx: "number"}
9999 mem: location 1044 is 1007
9999 mem: skipping refcount at 1007
9998 run: base address is 1008
9999 mem: location 1049 is 2
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 98
9999 mem: storing 98 in location 1052
 105 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {dest-idx: "number"}, {src: "character"}
9999 mem: location 1048 is 1056
9999 mem: skipping refcount at 1056
9999 mem: location 1050 is 0
9998 run: address to copy to is 1058
9999 mem: location 1052 is 98
9999 mem: storing 98 in location 1058
 105 run: {src-idx: "number"} <- add {src-idx: "number"}, {1: "literal"}
9999 mem: location 1049 is 2
9999 mem: storing 3 in location 1049
 105 run: {dest-idx: "number"} <- add {dest-idx: "number"}, {1: "literal"}
9999 mem: location 1050 is 0
9999 mem: storing 1 in location 1050
 105 run: jump {: "offset"}
9998 run: jumping to instruction 11
 105 run: {done?: "boolean"} <- greater-or-equal {src-idx: "number"}, {end: "number"}
9999 mem: location 1049 is 3
9999 mem: location 1046 is 3
9999 mem: storing 1 in location 1051
 105 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1051 is 1
9998 run: jumping to instruction 18
 105 run: reply {result: ("address" "array" "character")}
9999 mem: location 1048 is 1056
9999 mem: clearing buf:address:array:character
9999 mem: location 1044 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 3 -> 2
9999 mem: storing 0 in location 1044
9999 mem: clearing start:number
9999 mem: storing 0 in location 1045
9999 mem: clearing end:number
9999 mem: storing 0 in location 1046
9999 mem: clearing len:number
9999 mem: storing 0 in location 1047
9999 mem: clearing end:number
9999 mem: storing 0 in location 1046
9999 mem: clearing len
9999 mem: storing 0 in location 1047
9999 mem: clearing src-idx:number
9999 mem: storing 0 in location 1049
9999 mem: clearing dest-idx:number
9999 mem: storing 0 in location 1050
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1051
9999 mem: clearing src:character
9999 mem: storing 0 in location 1052
9999 mem: clearing src-idx
9999 mem: storing 0 in location 1049
9999 mem: clearing dest-idx
9999 mem: storing 0 in location 1050
9999 mem: automatically abandoning 1041
9999 abandon: updating refcounts inside 1041: (array number)
9999 abandon: saving 1041 in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1056
9999 mem: storing 1056 in location 1026
 104 run: {result: ("address" "array" "address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "address" "array" "character"), "lookup": ()}, {curr-result: "number"}, {dest: ("address" "array" "character")}
9999 mem: location 1019 is 1037
9999 mem: skipping refcount at 1037
9999 mem: location 1023 is 1
9998 run: address to copy to is 1040
9999 mem: location 1026 is 1056
9999 mem: location 1040 is 0
9999 mem: incrementing refcount of 1056: 1 -> 2
9999 mem: storing 1056 in location 1040
 104 run: {start: "number"} <- add {end: "number"}, {1: "literal"}
9999 mem: location 1025 is 3
9999 mem: storing 4 in location 1024
 104 run: {curr-result: "number"} <- add {curr-result: "number"}, {1: "literal"}
9999 mem: location 1023 is 1
9999 mem: storing 2 in location 1023
 104 run: jump {: "offset"}
9998 run: jumping to instruction 24
 104 run: {done?: "boolean"} <- greater-or-equal {start: "number"}, {len: "number"}
9999 mem: location 1024 is 4
9999 mem: location 1017 is 3
9999 mem: storing 1 in location 1022
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1022 is 1
9998 run: jumping to instruction 32
 104 run: reply {result: ("address" "array" "address" "array" "character")}
9999 mem: location 1019 is 1037
9999 mem: clearing s:address:array:character
9999 mem: location 1015 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 2 -> 1
9999 mem: storing 0 in location 1015
9999 mem: clearing delim:character
9999 mem: storing 0 in location 1016
9999 mem: clearing len:number
9999 mem: storing 0 in location 1017
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 1018
9999 mem: clearing count:number
9999 mem: storing 0 in location 1020
9999 mem: clearing idx:number
9999 mem: storing 0 in location 1021
9999 mem: clearing idx
9999 mem: storing 0 in location 1021
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1022
9999 mem: clearing idx
9999 mem: storing 0 in location 1021
9999 mem: clearing count
9999 mem: storing 0 in location 1020
9999 mem: clearing curr-result:number
9999 mem: storing 0 in location 1023
9999 mem: clearing start:number
9999 mem: storing 0 in location 1024
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1022
9999 mem: clearing end:number
9999 mem: storing 0 in location 1025
9999 mem: clearing dest:address:array:character
9999 mem: location 1026 is 1056
9999 mem: skipping refcount at 1056
9999 mem: decrementing refcount of 1056: 2 -> 1
9999 mem: storing 0 in location 1026
9999 mem: clearing start
9999 mem: storing 0 in location 1024
9999 mem: clearing curr-result
9999 mem: storing 0 in location 1023
9999 mem: automatically abandoning 1012
9999 abandon: updating refcounts inside 1012: (array number)
9999 abandon: saving 1012 in free-list of size 15
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1037
9999 mem: storing 1037 in location 1004
 103 run: {10: "number", "raw": ()} <- length {y: ("address" "array" "address" "array" "character"), "lookup": ()}
9999 mem: location 1004 is 1037
9999 mem: skipping refcount at 1037
9999 mem: storing 2 in location 10
 103 run: {a: ("address" "array" "character")} <- index {y: ("address" "array" "address" "array" "character"), "lookup": ()}, {0: "literal"}
9999 mem: location 1004 is 1037
9999 mem: skipping refcount at 1037
9998 run: base address is 1038
9998 run: address to copy is 1039
9998 run: its type is address
9999 mem: location 1039 is 1053
9999 mem: location 1005 is 0
9999 mem: incrementing refcount of 1053: 2 -> 3
9999 mem: storing 1053 in location 1005
 103 run: {b: ("address" "array" "character")} <- index {y: ("address" "array" "address" "array" "character"), "lookup": ()}, {1: "literal"}
9999 mem: location 1004 is 1037
9999 mem: skipping refcount at 1037
9998 run: base address is 1038
9998 run: address to copy is 1040
9998 run: its type is address
9999 mem: location 1040 is 1056
9999 mem: location 1006 is 0
9999 mem: incrementing refcount of 1056: 1 -> 2
9999 mem: storing 1056 in location 1006
 103 run: {20: ("array" "character"), "raw": ()} <- copy {a: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1005 is 1053
9999 mem: skipping refcount at 1053
9999 mem: location 1054 is 1
9999 mem: location 1055 is 97
9999 mem: storing 1 in location 20
9999 mem: storing 97 in location 21
 103 run: {30: ("array" "character"), "raw": ()} <- copy {b: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1006 is 1056
9999 mem: skipping refcount at 1056
9999 mem: location 1057 is 1
9999 mem: location 1058 is 98
9999 mem: storing 1 in location 30
9999 mem: storing 98 in location 31
 103 run: reply 
9999 mem: clearing x:address:array:character
9999 mem: location 1003 is 1007
9999 mem: skipping refcount at 1007
9999 mem: decrementing refcount of 1007: 1 -> 0
9999 mem: automatically abandoning 1007
9999 abandon: updating refcounts inside 1007: (array character)
9999 abandon: saving 1007 in free-list of size 5
9999 mem: storing 0 in location 1003
9999 mem: clearing y:address:array:address:array:character
9999 mem: location 1004 is 1037
9999 mem: skipping refcount at 1037
9999 mem: decrementing refcount of 1037: 1 -> 0
9999 mem: automatically abandoning 1037
9999 abandon: updating refcounts inside 1037: (array address array character)
9999 mem: location 1039 is 1053
9999 mem: skipping refcount at 1053
9999 mem: decrementing refcount of 1053: 3 -> 2
9999 mem: location 1040 is 1056
9999 mem: skipping refcount at 1056
9999 mem: decrementing refcount of 1056: 2 -> 1
9999 abandon: saving 1037 in free-list of size 4
9999 mem: storing 0 in location 1004
9999 mem: clearing a:address:array:character
9999 mem: location 1005 is 1053
9999 mem: skipping refcount at 1053
9999 mem: decrementing refcount of 1053: 2 -> 1
9999 mem: storing 0 in location 1005
9999 mem: clearing b:address:array:character
9999 mem: location 1006 is 1056
9999 mem: skipping refcount at 1056
9999 mem: decrementing refcount of 1056: 1 -> 0
9999 mem: automatically abandoning 1056
9999 abandon: updating refcounts inside 1056: (array character)
9999 abandon: saving 1056 in free-list of size 3
9999 mem: storing 0 in location 1006
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 7
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    10 <- 2  # length of result\n    20:array:character <- [a]\n    30:array:character <- [b]\n  ": "literal-string"}
9999 run: checking location 10
9999 run: checking string length at 20
9999 run: checking location 21
9999 run: checking string length at 30
9999 run: checking location 31
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
