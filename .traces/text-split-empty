9991 parse: --- defining scenario_text-split-empty
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:array:character <- new []\n    y:address:array:address:array:character <- split x, 47/slash\n    1:number/raw <- length *y\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    local-scope\n    x:address:array:character <- new []\n    y:address:array:address:array:character <- split x, 47/slash\n    1:number/raw <- length *y\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 0  # empty result\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    1 <- 0  # empty result\n  ": "literal-string"}
9999 parse: recipe scenario_text-split-empty has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_text-split-empty
9991 transform: --- rewrite 'stash' instructions in recipe scenario_text-split-empty
9991 transform: --- deduce types for recipe scenario_text-split-empty
9993 transform: run {"\n    local-scope\n    x:address:array:character <- new []\n    y:address:array:address:array:character <- split x, 47/slash\n    1:number/raw <- length *y\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    1 <- 0  # empty result\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-split-empty
9991 transform: --- deduce types for recipe scenario_text-split-empty
9991 transform: --- check for invalid types in recipe scenario_text-split-empty
9991 transform: --- collect surrounding spaces for recipe scenario_text-split-empty
9991 transform: --- transform names for recipe scenario_text-split-empty
9991 transform: --- resolve ambiguous calls for recipe scenario_text-split-empty
9992 transform: --- compute address offsets for scenario_text-split-empty
9993 transform: - compute address offsets for run {"\n    local-scope\n    x:address:array:character <- new []\n    y:address:array:address:array:character <- split x, 47/slash\n    1:number/raw <- length *y\n  ": "literal-string"}
9993 transform: - compute address offsets for memory-should-contain {"\n    1 <- 0  # empty result\n  ": "literal-string"}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe scenario_text-split-empty
9991 transform: --- transform braces for recipe scenario_text-split-empty
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe scenario_text-split-empty
9991 transform: --- perform checks for recipe scenario_text-split-empty
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-split-empty
9991 transform: --- type-check calls inside recipe scenario_text-split-empty
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-split-empty
9991 transform: --- check types of reply instructions in recipe scenario_text-split-empty
9991 transform: --- type-check merge instructions in recipe scenario_text-split-empty
9991 transform: --- checking reply instructions against header for scenario_text-split-empty
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-split-empty
 102 run: run {"\n    local-scope\n    x:address:array:character <- new []\n    y:address:array:address:array:character <- split x, 47/slash\n    1:number/raw <- length *y\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"": "literal-string"}
9993 parse:   product: {x: ("address" "array" "character")}
9992 load: after rewriting: {x: ("address" "array" "character")} <- new {"": "literal-string"}
9993 parse: instruction: split
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {x: ()}
9993 parse:   ingredient: {47: "literal", "slash": ()}
9993 parse:   product: {y: ("address" "array" "address" "array" "character")}
9992 load: after rewriting: {y: ("address" "array" "address" "array" "character")} <- split {x: ()}, {47: "literal", "slash": ()}
9993 parse: instruction: length
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {y: (), "lookup": ()}
9993 parse:   product: {1: "number", "raw": ()}
9992 load: after rewriting: {1: "number", "raw": ()} <- length {y: (), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: x <= ("address" "array" "character")
9992 transform: y => ("address" "array" "address" "array" "character")
9992 transform: y <= ("address" "array" "address" "array" "character")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {x: ("address" "array" "character")} <- new {"": "literal-string"}
9993 transform: {y: ("address" "array" "address" "array" "character")} <- split {x: ("address" "array" "character")}, {47: "literal", "slash": ()}
9993 transform: {1: "number", "raw": ()} <- length {y: ("address" "array" "address" "array" "character"), "lookup": ()}
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => ("address" "array" "location")
9992 transform: x => ("address" "array" "character")
9992 transform: y => ("address" "array" "address" "array" "character")
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {y: ("address" "array" "address" "array" "character")} <- split {x: ()}, {47: "literal", "slash": ()}
9992 transform: checking variant (strict) 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant 0: recipe split {s: ("address" "array" "character")} {delim: "character"} -> {result: ("address" "array" "address" "array" "character")}
9992 transform: instruction {1: "number", "raw": ()} <- length {y: (), "lookup": ()}
9992 transform: checking variant (strict) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literal-zero-against-address) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: checking variant (strict except literal-against-boolean) 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe length_2 {l: ("address" "list" "_elem")} -> {result: "number"}
9993 transform: strict match failed: ingredient 0
9992 transform: --- compute address offsets for run_1001
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {x: ("address" "array" "character")} <- new {"": "literal-string"}
9993 transform: - compute address offsets for {y: ("address" "array" "address" "array" "character")} <- split {x: ("address" "array" "character")}, {47: "literal", "slash": ()}
9993 transform: - compute address offsets for {1: "number", "raw": ()} <- length {y: ("address" "array" "address" "array" "character"), "lookup": ()}
9993 transform: - compute address offsets for reply 
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: split ...
9992 transform: length ...
9992 transform:  ...
9991 transform: --- check mutability of ingredients in recipe run_1001
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 0 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
9999 mem: storing 3 in location 1001
 103 run: {x: ("address" "array" "character")} <- new {"": "literal-string"}
9999 mem: new string alloc: 1005
9999 mem: location 1003 is 0
9999 mem: incrementing refcount of 1005: 0 -> 1
9999 mem: storing 1005 in location 1003
 103 run: {y: ("address" "array" "address" "array" "character")} <- split {x: ("address" "array" "character")}, {47: "literal", "slash": ()}
9999 mem: location 1003 is 1005
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 13
9999 mem: allocating size 15
9999 mem: new alloc: 1007
9999 mem: storing 0 in location 1007
9999 mem: storing 0 in location 1008
9999 mem: storing 0 in location 1009
9999 mem: storing 0 in location 1010
9999 mem: storing 0 in location 1011
9999 mem: storing 0 in location 1012
9999 mem: storing 0 in location 1013
9999 mem: storing 0 in location 1014
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
9999 mem: storing 0 in location 1017
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 13 in location 1008
 104 run: {s: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: location 1010 is 0
9999 mem: incrementing refcount of 1005: 1 -> 2
9999 mem: storing 1005 in location 1010
 104 run: {delim: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1011
 104 run: {len: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1010 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 0 in location 1012
 104 run: {empty?: "boolean"} <- equal {len: "number"}, {0: "literal"}
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1013
 104 run: jump-unless {empty?: "boolean"}, {: "offset"}
9999 mem: location 1013 is 1
9998 run: jump-unless fell through
 104 run: {result: ("address" "array" "address" "array" "character")} <- new {(address array character): "type"}, {0: "literal"}
9999 mem: array size is 0
9999 mem: allocating size 2
9999 mem: new alloc: 1022
9999 mem: storing 0 in location 1022
9999 mem: storing 0 in location 1023
9999 mem: storing 0 in location 1023
9999 mem: location 1014 is 0
9999 mem: incrementing refcount of 1022: 0 -> 1
9999 mem: storing 1022 in location 1014
 104 run: return {result: ("address" "array" "address" "array" "character")}
9999 mem: location 1014 is 1022
9999 mem: clearing s:address:array:character
9999 mem: location 1010 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 2 -> 1
9999 mem: storing 0 in location 1010
9999 mem: clearing delim:character
9999 mem: storing 0 in location 1011
9999 mem: clearing len:number
9999 mem: storing 0 in location 1012
9999 mem: clearing empty?:boolean
9999 mem: storing 0 in location 1013
9999 mem: clearing count:number
9999 mem: storing 0 in location 1015
9999 mem: clearing idx:number
9999 mem: storing 0 in location 1016
9999 mem: clearing idx
9999 mem: storing 0 in location 1016
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1017
9999 mem: clearing idx
9999 mem: storing 0 in location 1016
9999 mem: clearing count
9999 mem: storing 0 in location 1015
9999 mem: clearing curr-result:number
9999 mem: storing 0 in location 1018
9999 mem: clearing start:number
9999 mem: storing 0 in location 1019
9999 mem: clearing done?:boolean
9999 mem: storing 0 in location 1017
9999 mem: clearing end:number
9999 mem: storing 0 in location 1020
9999 mem: clearing dest:address:array:character
9999 mem: location 1021 is 0
9999 mem: copying address to itself; refcount unchanged
9999 mem: storing 0 in location 1021
9999 mem: clearing start
9999 mem: storing 0 in location 1019
9999 mem: clearing curr-result
9999 mem: storing 0 in location 1018
9999 mem: automatically abandoning 1007
9999 abandon: updating refcounts inside 1007: (array number)
9999 abandon: saving 1007 in free-list of size 15
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1004
 103 run: {1: "number", "raw": ()} <- length {y: ("address" "array" "address" "array" "character"), "lookup": ()}
9999 mem: location 1004 is 1022
9999 mem: skipping refcount at 1022
9999 mem: storing 0 in location 1
 103 run: reply 
9999 mem: clearing x:address:array:character
9999 mem: location 1003 is 1005
9999 mem: skipping refcount at 1005
9999 mem: decrementing refcount of 1005: 1 -> 0
9999 mem: automatically abandoning 1005
9999 abandon: updating refcounts inside 1005: (array character)
9999 abandon: saving 1005 in free-list of size 2
9999 mem: storing 0 in location 1003
9999 mem: clearing y:address:array:address:array:character
9999 mem: location 1004 is 1022
9999 mem: skipping refcount at 1022
9999 mem: decrementing refcount of 1022: 1 -> 0
9999 mem: automatically abandoning 1022
9999 abandon: updating refcounts inside 1022: (array address array character)
9999 abandon: saving 1022 in free-list of size 2
9999 mem: storing 0 in location 1004
9999 mem: automatically abandoning 1000
9999 abandon: updating refcounts inside 1000: (array number)
9999 abandon: saving 1000 in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    1 <- 0  # empty result\n  ": "literal-string"}
9999 run: checking location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
