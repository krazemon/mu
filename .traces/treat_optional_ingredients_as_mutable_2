9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {point: "type"}
9993 parse:   product: {p: ("address" "point")}
9992 load: after rewriting: {p: ("address" "point")} <- new {point: "type"}
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {p: ()}
9992 load: after rewriting: foo {p: ()}
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:point
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {p: ()}
9992 load: after rewriting: bar {p: ()}
9999 parse: recipe foo has a header
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: next-ingredient
9993 parse:   number of ingredients: 0
9993 parse:   product: {p: ("address" "point")}
9992 load: after rewriting: {p: ("address" "point")} <- next-ingredient 
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe main
9991 transform: --- rewrite literal strings in recipe foo
9991 transform: --- rewrite literal strings in recipe bar
9991 transform: --- rewrite 'stash' instructions in recipe main
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "point")
9992 transform: p <= ("address" "point")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {p: ("address" "point")} <- new {point: "type"}
9993 transform: foo {p: ("address" "point")}
9991 transform: --- rewrite 'stash' instructions in recipe foo
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "point")
9992 transform: p <= ("address" "point")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {p: ("address" "point")} <- next-ingredient-without-typechecking 
9993 transform: bar {p: ("address" "point")}
9991 transform: --- rewrite 'stash' instructions in recipe bar
9991 transform: --- deduce types for recipe bar
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "point")
9993 transform: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: {p: ("address" "point")} <- next-ingredient 
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "point")
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "point")
9991 transform: --- deduce types for recipe bar
9992 transform: default-space => ("address" "array" "location")
9992 transform: p => ("address" "point")
9991 transform: --- check for invalid types in recipe main
9991 transform: --- check for invalid types in recipe foo
9991 transform: --- check for invalid types in recipe bar
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- collect surrounding spaces for recipe bar
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9991 transform: --- transform names for recipe bar
9993 name: assign p 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo {p: ()}
9992 transform: checking variant (strict) 0: recipe foo {p: ("address" "point")}
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- resolve ambiguous calls for recipe bar
9992 transform: --- compute address offsets for main
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {p: ("address" "point")} <- new {point: "type"}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for foo {p: ("address" "point")}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for foo
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {p: ("address" "point")} <- next-ingredient-without-typechecking 
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for bar {p: ("address" "point")}
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9993 transform: - compute address offsets for reply 
9992 transform: --- compute address offsets for bar
9993 transform: - compute address offsets for {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9993 transform: - compute address offsets for {p: ("address" "point")} <- next-ingredient 
9994 transform: compute address offsets for container point
9993 transform: checking container point, element 0
9993 transform: checking container point, element 1
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- compute instruction operations for recipe bar
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: bar ...
9992 transform:  ...
9991 transform: --- transform braces for recipe bar
9992 transform: local-scope ...
9992 transform: next-ingredient ...
9991 transform: --- check mutability of ingredients in recipe main
9991 transform: --- check mutability of ingredients in recipe foo
   0 error: foo: can't check mutability of ingredients in bar because it uses 'next-ingredient' directly, rather than a recipe header.

   0 error: foo: cannot modify p in instruction 'bar p' because it's an ingredient of recipe foo but not also a product

9991 transform: --- check mutability of ingredients in recipe bar
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- perform checks for recipe bar
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check 'call' instructions inside recipe bar
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- type-check calls inside recipe bar
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "point" is 2
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe bar
9992 new: size of "location" is 1
9991 transform: --- check types of reply instructions in recipe main
9991 transform: --- check types of reply instructions in recipe foo
9991 transform: --- check types of reply instructions in recipe bar
9991 transform: --- type-check merge instructions in recipe main
9991 transform: --- type-check merge instructions in recipe foo
9991 transform: --- type-check merge instructions in recipe bar
9991 transform: --- checking reply instructions against header for main
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
