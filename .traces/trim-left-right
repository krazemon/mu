9991 parse: --- defining scenario_trim-left-right
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character <- new [  abc   ]\n    2:address:array:character <- trim 1:address:array:character\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run {"\n    1:address:array:character <- new [  abc   ]\n    2:address:array:character <- trim 1:address:array:character\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3:array:character <- [abc]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain {"\n    3:array:character <- [abc]\n  ": "literal-string"}
9999 parse: recipe scenario_trim-left-right has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe scenario_trim-left-right
9991 transform: --- rewrite 'stash' instructions in recipe scenario_trim-left-right
9991 transform: --- deduce types for recipe scenario_trim-left-right
9993 transform: run {"\n    1:address:array:character <- new [  abc   ]\n    2:address:array:character <- trim 1:address:array:character\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9993 transform: memory-should-contain {"\n    3:array:character <- [abc]\n  ": "literal-string"}
9991 transform: --- fill in reply ingredients from header for recipe scenario_trim-left-right
9991 transform: --- deduce types for recipe scenario_trim-left-right
9991 transform: --- check for invalid types in recipe scenario_trim-left-right
9991 transform: --- collect surrounding spaces for recipe scenario_trim-left-right
9991 transform: --- transform names for recipe scenario_trim-left-right
9991 transform: --- resolve ambiguous calls for recipe scenario_trim-left-right
9991 transform: --- compute instruction operations for recipe scenario_trim-left-right
9991 transform: --- transform braces for recipe scenario_trim-left-right
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_trim-left-right
9991 transform: --- type-check 'call' instructions inside recipe scenario_trim-left-right
9991 transform: --- type-check calls inside recipe scenario_trim-left-right
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_trim-left-right
9991 transform: --- check types of reply instructions in recipe scenario_trim-left-right
9991 transform: --- type-check merge instructions in recipe scenario_trim-left-right
9991 transform: --- checking reply instructions against header for scenario_trim-left-right
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_trim-left-right
 102 run: run {"\n    1:address:array:character <- new [  abc   ]\n    2:address:array:character <- trim 1:address:array:character\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"  abc   ": "literal-string"}
9993 parse:   product: {1: ("address" "array" "character")}
9992 load: after rewriting: {1: ("address" "array" "character")} <- new {"  abc   ": "literal-string"}
9993 parse: instruction: trim
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {1: ("address" "array" "character")}
9993 parse:   product: {2: ("address" "array" "character")}
9992 load: after rewriting: {2: ("address" "array" "character")} <- trim {1: ("address" "array" "character")}
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {2: ("address" "array" "character"), "lookup": ()}
9993 parse:   product: {3: ("array" "character")}
9992 load: after rewriting: {3: ("array" "character")} <- copy {2: ("address" "array" "character"), "lookup": ()}
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- rewrite literal strings in recipe run_1001
9991 transform: --- rewrite 'stash' instructions in recipe run_1001
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- check for invalid types in recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction {2: ("address" "array" "character")} <- trim {1: ("address" "array" "character")}
9992 transform: checking variant (strict) 0: recipe trim {s: ("address" "array" "character")} -> {result: ("address" "array" "character")}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: trim ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- check types of reply instructions in recipe run_1001
9991 transform: --- type-check merge instructions in recipe run_1001
9991 transform: --- checking reply instructions against header for run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: {1: ("address" "array" "character")} <- new {"  abc   ": "literal-string"}
9999 mem: new string alloc: 1000
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 103 run: {2: ("address" "array" "character")} <- trim {1: ("address" "array" "character")}
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 15
9999 mem: allocating size 17
9999 mem: new alloc: 1010
9999 mem: storing 15 in location 1011
 104 run: {s: ("address" "array" "character")} <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1013
9999 mem: incrementing refcount of 1000: 1 -> 2
 104 run: {len: "number"} <- length {s: ("address" "array" "character"), "lookup": ()}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 8 in location 1014
 104 run: {start: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1015
 104 run: {at-end?: "boolean"} <- greater-or-equal {start: "number"}, {len: "number"}
9999 mem: location 1015 is 0
9999 mem: location 1014 is 8
9999 mem: storing 0 in location 1016
 104 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1016 is 0
9998 run: jumping to instruction 10
 104 run: {curr: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {start: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1015 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 32
9999 mem: storing 32 in location 1018
 104 run: {whitespace?: "boolean"} <- space? {curr: "character"}
9999 mem: location 1018 is 32
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1027
9999 mem: storing 3 in location 1028
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1030
 105 run: {result: "boolean"} <- equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1030 is 32
9999 mem: storing 1 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 1
9998 run: jump-unless fell through
 105 run: reply {result: "boolean"}
9999 mem: location 1031 is 1
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1019
 104 run: jump-unless {whitespace?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 1
9998 run: jump-unless fell through
 104 run: {start: "number"} <- add {start: "number"}, {1: "literal"}
9999 mem: location 1015 is 0
9999 mem: storing 1 in location 1015
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {at-end?: "boolean"} <- greater-or-equal {start: "number"}, {len: "number"}
9999 mem: location 1015 is 1
9999 mem: location 1014 is 8
9999 mem: storing 0 in location 1016
 104 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1016 is 0
9998 run: jumping to instruction 10
 104 run: {curr: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {start: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1015 is 1
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 32
9999 mem: storing 32 in location 1018
 104 run: {whitespace?: "boolean"} <- space? {curr: "character"}
9999 mem: location 1018 is 32
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1027
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1030
 105 run: {result: "boolean"} <- equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1030 is 32
9999 mem: storing 1 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 1
9998 run: jump-unless fell through
 105 run: reply {result: "boolean"}
9999 mem: location 1031 is 1
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1019
 104 run: jump-unless {whitespace?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 1
9998 run: jump-unless fell through
 104 run: {start: "number"} <- add {start: "number"}, {1: "literal"}
9999 mem: location 1015 is 1
9999 mem: storing 2 in location 1015
 104 run: jump {: "offset"}
9998 run: jumping to instruction 5
 104 run: {at-end?: "boolean"} <- greater-or-equal {start: "number"}, {len: "number"}
9999 mem: location 1015 is 2
9999 mem: location 1014 is 8
9999 mem: storing 0 in location 1016
 104 run: jump-unless {at-end?: "boolean"}, {: "offset"}
9999 mem: location 1016 is 0
9998 run: jumping to instruction 10
 104 run: {curr: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {start: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1015 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 97
9999 mem: storing 97 in location 1018
 104 run: {whitespace?: "boolean"} <- space? {curr: "character"}
9999 mem: location 1018 is 97
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1027
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1030
 105 run: {result: "boolean"} <- equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 6
 105 run: {result: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 11
 105 run: {result: "boolean"} <- equal {c: "character"}, {9: "literal", "tab": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 16
 105 run: {result: "boolean"} <- equal {c: "character"}, {13: "literal", "carriage-return": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 21
 105 run: {result: "boolean"} <- equal {c: "character"}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 26
 105 run: {result: "boolean"} <- equal {c: "character"}, {12: "literal", "ctrl-l": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 31
 105 run: {result: "boolean"} <- equal {c: "character"}, {133: "literal", "ctrl-0085": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 36
 105 run: {result: "boolean"} <- equal {c: "character"}, {160: "literal", "no-break-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 41
 105 run: {result: "boolean"} <- equal {c: "character"}, {5760: "literal", "ogham-space-mark": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 46
 105 run: {result: "boolean"} <- equal {c: "character"}, {8192: "literal", "en-quad": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 51
 105 run: {result: "boolean"} <- equal {c: "character"}, {8193: "literal", "em-quad": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 56
 105 run: {result: "boolean"} <- equal {c: "character"}, {8194: "literal", "en-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 61
 105 run: {result: "boolean"} <- equal {c: "character"}, {8195: "literal", "em-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 66
 105 run: {result: "boolean"} <- equal {c: "character"}, {8196: "literal", "three-per-em-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 71
 105 run: {result: "boolean"} <- equal {c: "character"}, {8197: "literal", "four-per-em-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 76
 105 run: {result: "boolean"} <- equal {c: "character"}, {8198: "literal", "six-per-em-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 81
 105 run: {result: "boolean"} <- equal {c: "character"}, {8199: "literal", "figure-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 86
 105 run: {result: "boolean"} <- equal {c: "character"}, {8200: "literal", "punctuation-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 91
 105 run: {result: "boolean"} <- equal {c: "character"}, {8201: "literal", "thin-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 96
 105 run: {result: "boolean"} <- equal {c: "character"}, {8202: "literal", "hair-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 101
 105 run: {result: "boolean"} <- equal {c: "character"}, {8206: "literal", "left-to-right": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 106
 105 run: {result: "boolean"} <- equal {c: "character"}, {8207: "literal", "right-to-left": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 111
 105 run: {result: "boolean"} <- equal {c: "character"}, {8232: "literal", "line-separator": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 116
 105 run: {result: "boolean"} <- equal {c: "character"}, {8233: "literal", "paragraph-separator": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 121
 105 run: {result: "boolean"} <- equal {c: "character"}, {8239: "literal", "narrow-no-break-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 126
 105 run: {result: "boolean"} <- equal {c: "character"}, {8287: "literal", "medium-mathematical-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 131
 105 run: {result: "boolean"} <- equal {c: "character"}, {12288: "literal", "ideographic-space": ()}
9999 mem: location 1030 is 97
9999 mem: storing 0 in location 1031
 105 run: reply {result: "boolean"}
9999 mem: location 1031 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1019
 104 run: jump-unless {whitespace?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 0
9998 run: jumping to instruction 16
 104 run: {end: "number"} <- subtract {len: "number"}, {1: "literal"}
9999 mem: location 1014 is 8
9999 mem: storing 7 in location 1020
 104 run: {not-at-start?: "boolean"} <- greater-than {end: "number"}, {start: "number"}
9999 mem: location 1020 is 7
9999 mem: location 1015 is 2
9999 mem: storing 1 in location 1021
 104 run: assert {not-at-start?: "boolean"}, {"end ran up against start": "literal-string"}
9999 mem: location 1021 is 1
 104 run: {curr: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {end: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1020 is 7
9998 run: address to copy is 1009
9998 run: its type is character
9999 mem: location 1009 is 32
9999 mem: storing 32 in location 1018
 104 run: {whitespace?: "boolean"} <- space? {curr: "character"}
9999 mem: location 1018 is 32
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1027
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1030
 105 run: {result: "boolean"} <- equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1030 is 32
9999 mem: storing 1 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 1
9998 run: jump-unless fell through
 105 run: reply {result: "boolean"}
9999 mem: location 1031 is 1
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1019
 104 run: jump-unless {whitespace?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 1
9998 run: jump-unless fell through
 104 run: {end: "number"} <- subtract {end: "number"}, {1: "literal"}
9999 mem: location 1020 is 7
9999 mem: storing 6 in location 1020
 104 run: jump {: "offset"}
9998 run: jumping to instruction 19
 104 run: {not-at-start?: "boolean"} <- greater-than {end: "number"}, {start: "number"}
9999 mem: location 1020 is 6
9999 mem: location 1015 is 2
9999 mem: storing 1 in location 1021
 104 run: assert {not-at-start?: "boolean"}, {"end ran up against start": "literal-string"}
9999 mem: location 1021 is 1
 104 run: {curr: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {end: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1020 is 6
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 32
9999 mem: storing 32 in location 1018
 104 run: {whitespace?: "boolean"} <- space? {curr: "character"}
9999 mem: location 1018 is 32
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1027
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1030
 105 run: {result: "boolean"} <- equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1030 is 32
9999 mem: storing 1 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 1
9998 run: jump-unless fell through
 105 run: reply {result: "boolean"}
9999 mem: location 1031 is 1
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1019
 104 run: jump-unless {whitespace?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 1
9998 run: jump-unless fell through
 104 run: {end: "number"} <- subtract {end: "number"}, {1: "literal"}
9999 mem: location 1020 is 6
9999 mem: storing 5 in location 1020
 104 run: jump {: "offset"}
9998 run: jumping to instruction 19
 104 run: {not-at-start?: "boolean"} <- greater-than {end: "number"}, {start: "number"}
9999 mem: location 1020 is 5
9999 mem: location 1015 is 2
9999 mem: storing 1 in location 1021
 104 run: assert {not-at-start?: "boolean"}, {"end ran up against start": "literal-string"}
9999 mem: location 1021 is 1
 104 run: {curr: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {end: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1020 is 5
9998 run: address to copy is 1007
9998 run: its type is character
9999 mem: location 1007 is 32
9999 mem: storing 32 in location 1018
 104 run: {whitespace?: "boolean"} <- space? {curr: "character"}
9999 mem: location 1018 is 32
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1027
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1030
 105 run: {result: "boolean"} <- equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1030 is 32
9999 mem: storing 1 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 1
9998 run: jump-unless fell through
 105 run: reply {result: "boolean"}
9999 mem: location 1031 is 1
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1019
 104 run: jump-unless {whitespace?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 1
9998 run: jump-unless fell through
 104 run: {end: "number"} <- subtract {end: "number"}, {1: "literal"}
9999 mem: location 1020 is 5
9999 mem: storing 4 in location 1020
 104 run: jump {: "offset"}
9998 run: jumping to instruction 19
 104 run: {not-at-start?: "boolean"} <- greater-than {end: "number"}, {start: "number"}
9999 mem: location 1020 is 4
9999 mem: location 1015 is 2
9999 mem: storing 1 in location 1021
 104 run: assert {not-at-start?: "boolean"}, {"end ran up against start": "literal-string"}
9999 mem: location 1021 is 1
 104 run: {curr: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {end: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1020 is 4
9998 run: address to copy is 1006
9998 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1018
 104 run: {whitespace?: "boolean"} <- space? {curr: "character"}
9999 mem: location 1018 is 99
9999 trace: incrementing callstack depth to 4
 105 run: {default-space: ("address" "array" "location")} <- new {location: "type"}, {number-of-locals: "literal"}
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1027
 105 run: {c: "character"} <- next-ingredient-without-typechecking 
9999 mem: storing 99 in location 1030
 105 run: {result: "boolean"} <- equal {c: "character"}, {32: "literal", "space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 6
 105 run: {result: "boolean"} <- equal {c: "character"}, {10: "literal", "newline": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 11
 105 run: {result: "boolean"} <- equal {c: "character"}, {9: "literal", "tab": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 16
 105 run: {result: "boolean"} <- equal {c: "character"}, {13: "literal", "carriage-return": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 21
 105 run: {result: "boolean"} <- equal {c: "character"}, {11: "literal", "ctrl-k": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 26
 105 run: {result: "boolean"} <- equal {c: "character"}, {12: "literal", "ctrl-l": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 31
 105 run: {result: "boolean"} <- equal {c: "character"}, {133: "literal", "ctrl-0085": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 36
 105 run: {result: "boolean"} <- equal {c: "character"}, {160: "literal", "no-break-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 41
 105 run: {result: "boolean"} <- equal {c: "character"}, {5760: "literal", "ogham-space-mark": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 46
 105 run: {result: "boolean"} <- equal {c: "character"}, {8192: "literal", "en-quad": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 51
 105 run: {result: "boolean"} <- equal {c: "character"}, {8193: "literal", "em-quad": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 56
 105 run: {result: "boolean"} <- equal {c: "character"}, {8194: "literal", "en-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 61
 105 run: {result: "boolean"} <- equal {c: "character"}, {8195: "literal", "em-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 66
 105 run: {result: "boolean"} <- equal {c: "character"}, {8196: "literal", "three-per-em-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 71
 105 run: {result: "boolean"} <- equal {c: "character"}, {8197: "literal", "four-per-em-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 76
 105 run: {result: "boolean"} <- equal {c: "character"}, {8198: "literal", "six-per-em-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 81
 105 run: {result: "boolean"} <- equal {c: "character"}, {8199: "literal", "figure-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 86
 105 run: {result: "boolean"} <- equal {c: "character"}, {8200: "literal", "punctuation-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 91
 105 run: {result: "boolean"} <- equal {c: "character"}, {8201: "literal", "thin-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 96
 105 run: {result: "boolean"} <- equal {c: "character"}, {8202: "literal", "hair-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 101
 105 run: {result: "boolean"} <- equal {c: "character"}, {8206: "literal", "left-to-right": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 106
 105 run: {result: "boolean"} <- equal {c: "character"}, {8207: "literal", "right-to-left": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 111
 105 run: {result: "boolean"} <- equal {c: "character"}, {8232: "literal", "line-separator": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 116
 105 run: {result: "boolean"} <- equal {c: "character"}, {8233: "literal", "paragraph-separator": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 121
 105 run: {result: "boolean"} <- equal {c: "character"}, {8239: "literal", "narrow-no-break-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 126
 105 run: {result: "boolean"} <- equal {c: "character"}, {8287: "literal", "medium-mathematical-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: jump-unless {result: "boolean"}, {: "offset"}
9999 mem: location 1031 is 0
9998 run: jumping to instruction 131
 105 run: {result: "boolean"} <- equal {c: "character"}, {12288: "literal", "ideographic-space": ()}
9999 mem: location 1030 is 99
9999 mem: storing 0 in location 1031
 105 run: reply {result: "boolean"}
9999 mem: location 1031 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1019
 104 run: jump-unless {whitespace?: "boolean"}, {: "offset"}
9999 mem: location 1019 is 0
9998 run: jumping to instruction 26
 104 run: {new-len: "number"} <- subtract {end: "number"}, {start: "number"}, {-1: "literal"}
9999 mem: location 1020 is 4
9999 mem: location 1015 is 2
9999 mem: storing 3 in location 1022
 104 run: {result: ("address" "array" "character")} <- new {character: "type"}, {new-len: "number"}
9999 mem: location 1022 is 3
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
9999 mem: new alloc from free list: 1027
9999 mem: storing 1027 in location 1017
9999 mem: incrementing refcount of 1027: 0 -> 1
 104 run: {i: "number"} <- copy {start: "number"}
9999 mem: location 1015 is 2
9999 mem: storing 2 in location 1023
 104 run: {j: "number"} <- copy {0: "literal"}
9999 mem: storing 0 in location 1024
 104 run: {done?: "boolean"} <- greater-than {i: "number"}, {end: "number"}
9999 mem: location 1023 is 2
9999 mem: location 1020 is 4
9999 mem: storing 0 in location 1025
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1025 is 0
9998 run: jump-if fell through
 104 run: {src: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1023 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 97
9999 mem: storing 97 in location 1026
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {j: "number"}, {src: "character"}
9999 mem: location 1017 is 1027
9999 mem: skipping refcount at 1027
9999 mem: location 1024 is 0
9998 run: address to copy to is 1029
9999 mem: location 1026 is 97
9999 mem: storing 97 in location 1029
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1023 is 2
9999 mem: storing 3 in location 1023
 104 run: {j: "number"} <- add {j: "number"}, {1: "literal"}
9999 mem: location 1024 is 0
9999 mem: storing 1 in location 1024
 104 run: jump {: "offset"}
9998 run: jumping to instruction 32
 104 run: {done?: "boolean"} <- greater-than {i: "number"}, {end: "number"}
9999 mem: location 1023 is 3
9999 mem: location 1020 is 4
9999 mem: storing 0 in location 1025
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1025 is 0
9998 run: jump-if fell through
 104 run: {src: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1023 is 3
9998 run: address to copy is 1005
9998 run: its type is character
9999 mem: location 1005 is 98
9999 mem: storing 98 in location 1026
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {j: "number"}, {src: "character"}
9999 mem: location 1017 is 1027
9999 mem: skipping refcount at 1027
9999 mem: location 1024 is 1
9998 run: address to copy to is 1030
9999 mem: location 1026 is 98
9999 mem: storing 98 in location 1030
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1023 is 3
9999 mem: storing 4 in location 1023
 104 run: {j: "number"} <- add {j: "number"}, {1: "literal"}
9999 mem: location 1024 is 1
9999 mem: storing 2 in location 1024
 104 run: jump {: "offset"}
9998 run: jumping to instruction 32
 104 run: {done?: "boolean"} <- greater-than {i: "number"}, {end: "number"}
9999 mem: location 1023 is 4
9999 mem: location 1020 is 4
9999 mem: storing 0 in location 1025
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1025 is 0
9998 run: jump-if fell through
 104 run: {src: "character"} <- index {s: ("address" "array" "character"), "lookup": ()}, {i: "number"}
9999 mem: location 1013 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1023 is 4
9998 run: address to copy is 1006
9998 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1026
 104 run: {result: ("address" "array" "character"), "lookup": ()} <- put-index {result: ("address" "array" "character"), "lookup": ()}, {j: "number"}, {src: "character"}
9999 mem: location 1017 is 1027
9999 mem: skipping refcount at 1027
9999 mem: location 1024 is 2
9998 run: address to copy to is 1031
9999 mem: location 1026 is 99
9999 mem: storing 99 in location 1031
 104 run: {i: "number"} <- add {i: "number"}, {1: "literal"}
9999 mem: location 1023 is 4
9999 mem: storing 5 in location 1023
 104 run: {j: "number"} <- add {j: "number"}, {1: "literal"}
9999 mem: location 1024 is 2
9999 mem: storing 3 in location 1024
 104 run: jump {: "offset"}
9998 run: jumping to instruction 32
 104 run: {done?: "boolean"} <- greater-than {i: "number"}, {end: "number"}
9999 mem: location 1023 is 5
9999 mem: location 1020 is 4
9999 mem: storing 1 in location 1025
 104 run: jump-if {done?: "boolean"}, {: "offset"}
9999 mem: location 1025 is 1
9998 run: jumping to instruction 39
 104 run: reply {result: ("address" "array" "character")}
9999 mem: location 1017 is 1027
9999 abandon: saving in free-list of size 17
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1027
9999 mem: storing 1027 in location 2
9999 mem: incrementing refcount of 1027: 1 -> 2
 103 run: {3: ("array" "character")} <- copy {2: ("address" "array" "character"), "lookup": ()}
9999 mem: location 2 is 1027
9999 mem: skipping refcount at 1027
9999 mem: location 1028 is 3
9999 mem: location 1029 is 97
9999 mem: location 1030 is 98
9999 mem: location 1031 is 99
9999 mem: storing 3 in location 3
9999 mem: storing 97 in location 4
9999 mem: storing 98 in location 5
9999 mem: storing 99 in location 6
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain {"\n    3:array:character <- [abc]\n  ": "literal-string"}
9999 run: checking string length at 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
